class Account(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='account_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Account Name')
    type = models.CharField(max_length=40, verbose_name='Account Type', choices=[('School', 'School'), ('Foundation', 'Foundation'), ('Government', 'Government'), ('Business', 'Business'), ('Nonprofit', 'Nonprofit')], blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='account_parent_set', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, verbose_name='Billing State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, verbose_name='Shipping State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Account Phone', blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    description = models.TextField(verbose_name='Account Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='account_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_company_id = models.CharField(max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_hours = models.ForeignKey('BusinessHours', models.DO_NOTHING, db_column='Business_Hours__c', custom=True, blank=True, null=True)
    npe01_one2_one_contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='npe01__One2OneContact__c', custom=True, related_name='account_npe01one2onecontact_set', blank=True, null=True) 
    npe01_systemis_individual = models.BooleanField(db_column='npe01__SYSTEMIsIndividual__c', custom=True, verbose_name='_SYSTEM: IsIndividual', default=models.DEFAULTED_ON_CREATE, help_text='Indicates whether or not this Account is special for Contacts (Household, One-to-One, Individual) vs a normal Account.') 
    npe01_system_account_type = models.CharField(db_column='npe01__SYSTEM_AccountType__c', custom=True, max_length=100, verbose_name='_SYSTEM: AccountType', help_text='Indicates which Account Model this account is for: Household Account, One-to-One, or Individual (bucket).', blank=True, null=True) 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', help_text='Average won Opportunity amount related to this Account.  Updated automatically.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', help_text='The sum of won Opportunity amounts in the Best Gift Year for this Account.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', help_text='The year in which the largest total amount of won Opportunities related to this Account occurred.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', help_text='The earliest won Opportunity (by Close Date) with amount greater than zero related to this Account.', blank=True, null=True) 
    npo02_formal_greeting = models.TextField(db_column='npo02__Formal_Greeting__c', custom=True, verbose_name='Formal Greeting', help_text='For Household Accounts, uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_household_phone = models.CharField(db_column='npo02__HouseholdPhone__c', custom=True, max_length=40, verbose_name='Household Phone', blank=True, null=True) 
    npo02_informal_greeting = models.TextField(db_column='npo02__Informal_Greeting__c', custom=True, verbose_name='Informal Greeting', help_text='For Household Accounts, uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', help_text='The largest amount of a won Opportunity related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', help_text='The most recent Close Date of a won Opportunity related to this Account with amount greater than zero.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', help_text='The amount of the most recent (by Close Date) won Membership Opportunity (by Record Type) for this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', help_text='The most recent Close Date of a won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', help_text='Membership level from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account."', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', help_text='Membership "origin" (new, renew...) from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', help_text='The amount of the most recent won Opportunity (by Close Date) with amount greater than zero related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', help_text='Membership end date from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', help_text='Membership start date from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', help_text='The total number of won Opportunities  related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', help_text='The total number of won Membership Opportunities (Record Type) related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', help_text='The total amount of won Opportunities related to this Account, closed within the year or fiscal year preceding last year (see Household Settings).', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', help_text='The total amount of won Opportunities related to this Account, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', help_text='The total amount of won Opportunities related to this Account, closed in the current year or fiscal year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', help_text='The total amount of won Opportunities related to this Account, closed in the current year or fiscal year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed within the year or fiscal year preceding last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', help_text='The total amount of won Opportunities related to this Account, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed in the previous year or fiscal year (see Household Settings).', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed in the current year or fiscal year (see Household Settings).', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_system_custom_naming = models.CharField(db_column='npo02__SYSTEM_CUSTOM_NAMING__c', custom=True, max_length=4099, verbose_name='_SYSTEM: CUSTOM NAMING', help_text='For Household Accounts, specifies which name related fields should not be automatically populated by the Householding code.', choices=[('Name', 'Name'), ('Formal_Greeting__c', 'Formal_Greeting__c'), ('Informal_Greeting__c', 'Informal_Greeting__c')], blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', help_text='The smallest non-zero amount of a won Opportunity related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', help_text='The total amount of won Membership Opportunities (Record Type) related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', help_text='The sum of amounts of all won Opportunities related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, blank=True, null=True) 
    npsp_funding_focus = models.CharField(db_column='npsp__Funding_Focus__c', custom=True, max_length=4099, verbose_name='Funding Focus', help_text='The general program area(s) that this organization funds.', choices=[('Animal Welfare', 'Animal Welfare'), ('Arts and Culture', 'Arts and Culture'), ('Capacity Building', 'Capacity Building'), ('Education', 'Education'), ('Environmental', 'Environmental'), ('Health Services', 'Health Services'), ('Human Services', 'Human Services')], blank=True, null=True) 
    npsp_grantmaker = models.BooleanField(db_column='npsp__Grantmaker__c', custom=True, verbose_name='Grantmaker', default=models.DEFAULTED_ON_CREATE, help_text='Indicates that this organization is a grant making organization. Can apply to foundations, government agencies, corporations, etc.') 
    npsp_matching_gift_administrator_name = models.CharField(db_column='npsp__Matching_Gift_Administrator_Name__c', custom=True, max_length=255, verbose_name='Matching Gift Administrator Name', help_text="The name of the company's matching gift administrator.", blank=True, null=True) 
    npsp_matching_gift_amount_max = models.DecimalField(db_column='npsp__Matching_Gift_Amount_Max__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Amount Max', help_text='The maximum amount the company will match on any single gift.', blank=True, null=True) 
    npsp_matching_gift_amount_min = models.DecimalField(db_column='npsp__Matching_Gift_Amount_Min__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Amount Min', help_text='The smallest gift the company will match.', blank=True, null=True) 
    npsp_matching_gift_annual_employee_max = models.DecimalField(db_column='npsp__Matching_Gift_Annual_Employee_Max__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Annual Employee Max', help_text='The maximum amount the company will match each year for an employee.', blank=True, null=True) 
    npsp_matching_gift_comments = models.TextField(db_column='npsp__Matching_Gift_Comments__c', custom=True, verbose_name='Matching Gift Comments', help_text="Additional notes about the company's matching gift program.", blank=True, null=True) 
    npsp_matching_gift_company = models.BooleanField(db_column='npsp__Matching_Gift_Company__c', custom=True, verbose_name='Matching Gift Company', default=models.DEFAULTED_ON_CREATE, help_text='Is this a company that offers matching gifts?') 
    npsp_matching_gift_email = models.EmailField(db_column='npsp__Matching_Gift_Email__c', custom=True, verbose_name='Matching Gift Email', help_text="Email of the company's matching gift administrator.", blank=True, null=True) 
    npsp_matching_gift_info_updated = models.DateField(db_column='npsp__Matching_Gift_Info_Updated__c', custom=True, verbose_name='Matching Gift Info Updated', help_text='The date when the matching gift information was last updated.', blank=True, null=True) 
    npsp_matching_gift_percent = models.DecimalField(db_column='npsp__Matching_Gift_Percent__c', custom=True, max_digits=5, decimal_places=2, verbose_name='Matching Gift Percent', help_text='The portion of a gift the company will match.', blank=True, null=True) 
    npsp_matching_gift_phone = models.CharField(db_column='npsp__Matching_Gift_Phone__c', custom=True, max_length=40, verbose_name='Matching Gift Phone', help_text='Phone for the matching gift administration office.', blank=True, null=True) 
    npsp_matching_gift_request_deadline = models.CharField(db_column='npsp__Matching_Gift_Request_Deadline__c', custom=True, max_length=255, verbose_name='Matching Gift Request Deadline', help_text='Any restrictions on how old gifts can be to be eligible for matching.', blank=True, null=True) 
    npsp_membership_span = models.DecimalField(db_column='npsp__Membership_Span__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Membership Span', sf_read_only=models.READ_ONLY, help_text='Formula: The number of years for which this Household has had a Member.', blank=True, null=True) 
    npsp_membership_status = models.CharField(db_column='npsp__Membership_Status__c', custom=True, max_length=1300, verbose_name='Membership Status', sf_read_only=models.READ_ONLY, help_text='Formula: Current, expired, or grace period.  Default grace period set in Household Settings.', blank=True, null=True) 
    npsp_number_of_household_members = models.DecimalField(db_column='npsp__Number_of_Household_Members__c', custom=True, max_digits=10, decimal_places=0, verbose_name='Number of Household Members', help_text='for Household Accounts, the number of Contacts in the Household.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'