Tylers-MacBook-Pro:~ tyleriams$ python3 manage.py inspectdb --database=salesforce
/Library/Frameworks/Python.framework/Versions/3.7/Resources/Python.app/Contents/MacOS/Python: can't open file 'manage.py': [Errno 2] No such file or directory
Tylers-MacBook-Pro:~ tyleriams$ cd MB_Portal/
Tylers-MacBook-Pro:MB_Portal tyleriams$ cd MB_Portal/
-bash: cd: MB_Portal/: No such file or directory
Tylers-MacBook-Pro:MB_Portal tyleriams$ python3 manage.py inspectdb --database=salesforce
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from salesforce import models


class AcceptedEventRelation(models.Model):
    relation = models.ForeignKey('Calendar', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey('Account', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='acceptedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='acceptedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AcceptedEventRelation'
        verbose_name = 'Accepted Event Relation'
        verbose_name_plural = 'Accepted Event Relations'
        # keyPrefix = 'None'



class Account(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='account_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Account Name')
    type = models.CharField(max_length=40, verbose_name='Account Type', choices=[('School', 'School'), ('Foundation', 'Foundation'), ('Government', 'Government'), ('Business', 'Business'), ('Nonprofit', 'Nonprofit')], blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='account_parent_set', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, verbose_name='Billing State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, verbose_name='Shipping State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Account Phone', blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    description = models.TextField(verbose_name='Account Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='account_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='account_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_company_id = models.CharField(max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_hours = models.ForeignKey('BusinessHours', models.DO_NOTHING, db_column='Business_Hours__c', custom=True, blank=True, null=True)
    npe01_one2_one_contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='npe01__One2OneContact__c', custom=True, related_name='account_npe01one2onecontact_set', blank=True, null=True) 
    npe01_systemis_individual = models.BooleanField(db_column='npe01__SYSTEMIsIndividual__c', custom=True, verbose_name='_SYSTEM: IsIndividual', default=models.DEFAULTED_ON_CREATE, help_text='Indicates whether or not this Account is special for Contacts (Household, One-to-One, Individual) vs a normal Account.') 
    npe01_system_account_type = models.CharField(db_column='npe01__SYSTEM_AccountType__c', custom=True, max_length=100, verbose_name='_SYSTEM: AccountType', help_text='Indicates which Account Model this account is for: Household Account, One-to-One, or Individual (bucket).', blank=True, null=True) 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', help_text='Average won Opportunity amount related to this Account.  Updated automatically.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', help_text='The sum of won Opportunity amounts in the Best Gift Year for this Account.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', help_text='The year in which the largest total amount of won Opportunities related to this Account occurred.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', help_text='The earliest won Opportunity (by Close Date) with amount greater than zero related to this Account.', blank=True, null=True) 
    npo02_formal_greeting = models.TextField(db_column='npo02__Formal_Greeting__c', custom=True, verbose_name='Formal Greeting', help_text='For Household Accounts, uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_household_phone = models.CharField(db_column='npo02__HouseholdPhone__c', custom=True, max_length=40, verbose_name='Household Phone', blank=True, null=True) 
    npo02_informal_greeting = models.TextField(db_column='npo02__Informal_Greeting__c', custom=True, verbose_name='Informal Greeting', help_text='For Household Accounts, uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', help_text='The largest amount of a won Opportunity related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', help_text='The most recent Close Date of a won Opportunity related to this Account with amount greater than zero.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', help_text='The amount of the most recent (by Close Date) won Membership Opportunity (by Record Type) for this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', help_text='The most recent Close Date of a won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', help_text='Membership level from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account."', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', help_text='Membership "origin" (new, renew...) from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', help_text='The amount of the most recent won Opportunity (by Close Date) with amount greater than zero related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', help_text='Membership end date from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', help_text='Membership start date from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', help_text='The total number of won Opportunities  related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', help_text='The total number of won Membership Opportunities (Record Type) related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', help_text='The total amount of won Opportunities related to this Account, closed within the year or fiscal year preceding last year (see Household Settings).', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', help_text='The total amount of won Opportunities related to this Account, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', help_text='The total amount of won Opportunities related to this Account, closed in the current year or fiscal year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', help_text='The total amount of won Opportunities related to this Account, closed in the current year or fiscal year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed within the year or fiscal year preceding last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', help_text='The total amount of won Opportunities related to this Account, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed in the previous year or fiscal year (see Household Settings).', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed in the current year or fiscal year (see Household Settings).', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_system_custom_naming = models.CharField(db_column='npo02__SYSTEM_CUSTOM_NAMING__c', custom=True, max_length=4099, verbose_name='_SYSTEM: CUSTOM NAMING', help_text='For Household Accounts, specifies which name related fields should not be automatically populated by the Householding code.', choices=[('Name', 'Name'), ('Formal_Greeting__c', 'Formal_Greeting__c'), ('Informal_Greeting__c', 'Informal_Greeting__c')], blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', help_text='The smallest non-zero amount of a won Opportunity related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', help_text='The total amount of won Membership Opportunities (Record Type) related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', help_text='The sum of amounts of all won Opportunities related to this Account.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, blank=True, null=True) 
    npsp_funding_focus = models.CharField(db_column='npsp__Funding_Focus__c', custom=True, max_length=4099, verbose_name='Funding Focus', help_text='The general program area(s) that this organization funds.', choices=[('Animal Welfare', 'Animal Welfare'), ('Arts and Culture', 'Arts and Culture'), ('Capacity Building', 'Capacity Building'), ('Education', 'Education'), ('Environmental', 'Environmental'), ('Health Services', 'Health Services'), ('Human Services', 'Human Services')], blank=True, null=True) 
    npsp_grantmaker = models.BooleanField(db_column='npsp__Grantmaker__c', custom=True, verbose_name='Grantmaker', default=models.DEFAULTED_ON_CREATE, help_text='Indicates that this organization is a grant making organization. Can apply to foundations, government agencies, corporations, etc.') 
    npsp_matching_gift_administrator_name = models.CharField(db_column='npsp__Matching_Gift_Administrator_Name__c', custom=True, max_length=255, verbose_name='Matching Gift Administrator Name', help_text="The name of the company's matching gift administrator.", blank=True, null=True) 
    npsp_matching_gift_amount_max = models.DecimalField(db_column='npsp__Matching_Gift_Amount_Max__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Amount Max', help_text='The maximum amount the company will match on any single gift.', blank=True, null=True) 
    npsp_matching_gift_amount_min = models.DecimalField(db_column='npsp__Matching_Gift_Amount_Min__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Amount Min', help_text='The smallest gift the company will match.', blank=True, null=True) 
    npsp_matching_gift_annual_employee_max = models.DecimalField(db_column='npsp__Matching_Gift_Annual_Employee_Max__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Annual Employee Max', help_text='The maximum amount the company will match each year for an employee.', blank=True, null=True) 
    npsp_matching_gift_comments = models.TextField(db_column='npsp__Matching_Gift_Comments__c', custom=True, verbose_name='Matching Gift Comments', help_text="Additional notes about the company's matching gift program.", blank=True, null=True) 
    npsp_matching_gift_company = models.BooleanField(db_column='npsp__Matching_Gift_Company__c', custom=True, verbose_name='Matching Gift Company', default=models.DEFAULTED_ON_CREATE, help_text='Is this a company that offers matching gifts?') 
    npsp_matching_gift_email = models.EmailField(db_column='npsp__Matching_Gift_Email__c', custom=True, verbose_name='Matching Gift Email', help_text="Email of the company's matching gift administrator.", blank=True, null=True) 
    npsp_matching_gift_info_updated = models.DateField(db_column='npsp__Matching_Gift_Info_Updated__c', custom=True, verbose_name='Matching Gift Info Updated', help_text='The date when the matching gift information was last updated.', blank=True, null=True) 
    npsp_matching_gift_percent = models.DecimalField(db_column='npsp__Matching_Gift_Percent__c', custom=True, max_digits=5, decimal_places=2, verbose_name='Matching Gift Percent', help_text='The portion of a gift the company will match.', blank=True, null=True) 
    npsp_matching_gift_phone = models.CharField(db_column='npsp__Matching_Gift_Phone__c', custom=True, max_length=40, verbose_name='Matching Gift Phone', help_text='Phone for the matching gift administration office.', blank=True, null=True) 
    npsp_matching_gift_request_deadline = models.CharField(db_column='npsp__Matching_Gift_Request_Deadline__c', custom=True, max_length=255, verbose_name='Matching Gift Request Deadline', help_text='Any restrictions on how old gifts can be to be eligible for matching.', blank=True, null=True) 
    npsp_membership_span = models.DecimalField(db_column='npsp__Membership_Span__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Membership Span', sf_read_only=models.READ_ONLY, help_text='Formula: The number of years for which this Household has had a Member.', blank=True, null=True) 
    npsp_membership_status = models.CharField(db_column='npsp__Membership_Status__c', custom=True, max_length=1300, verbose_name='Membership Status', sf_read_only=models.READ_ONLY, help_text='Formula: Current, expired, or grace period.  Default grace period set in Household Settings.', blank=True, null=True) 
    npsp_number_of_household_members = models.DecimalField(db_column='npsp__Number_of_Household_Members__c', custom=True, max_digits=10, decimal_places=0, verbose_name='Number of Household Members', help_text='for Household Accounts, the number of Contacts in the Household.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'



class AccountChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=255, verbose_name='Account Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    salutation = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Account Type', sf_read_only=models.READ_ONLY, choices=[('School', 'School'), ('Foundation', 'Foundation'), ('Government', 'Government'), ('Business', 'Business'), ('Nonprofit', 'Nonprofit')], blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, verbose_name='Billing State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, verbose_name='Shipping State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Account Phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    website = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    industry = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Account Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='accountchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_company_id = models.CharField(max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    business_hours = models.ForeignKey('BusinessHours', models.DO_NOTHING, db_column='Business_Hours__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_one2_one_contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='npe01__One2OneContact__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_systemis_individual = models.BooleanField(db_column='npe01__SYSTEMIsIndividual__c', custom=True, verbose_name='_SYSTEM: IsIndividual', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates whether or not this Account is special for Contacts (Household, One-to-One, Individual) vs a normal Account.') 
    npe01_system_account_type = models.CharField(db_column='npe01__SYSTEM_AccountType__c', custom=True, max_length=100, verbose_name='_SYSTEM: AccountType', sf_read_only=models.READ_ONLY, help_text='Indicates which Account Model this account is for: Household Account, One-to-One, or Individual (bucket).', blank=True, null=True) 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', sf_read_only=models.READ_ONLY, help_text='Average won Opportunity amount related to this Account.  Updated automatically.', blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', sf_read_only=models.READ_ONLY, help_text='The sum of won Opportunity amounts in the Best Gift Year for this Account.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', sf_read_only=models.READ_ONLY, help_text='The year in which the largest total amount of won Opportunities related to this Account occurred.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', sf_read_only=models.READ_ONLY, help_text='The earliest won Opportunity (by Close Date) with amount greater than zero related to this Account.', blank=True, null=True) 
    npo02_formal_greeting = models.TextField(db_column='npo02__Formal_Greeting__c', custom=True, verbose_name='Formal Greeting', sf_read_only=models.READ_ONLY, help_text='For Household Accounts, uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_household_phone = models.CharField(db_column='npo02__HouseholdPhone__c', custom=True, max_length=40, verbose_name='Household Phone', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npo02_informal_greeting = models.TextField(db_column='npo02__Informal_Greeting__c', custom=True, verbose_name='Informal Greeting', sf_read_only=models.READ_ONLY, help_text='For Household Accounts, uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', sf_read_only=models.READ_ONLY, help_text='The largest amount of a won Opportunity related to this Account.', blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', sf_read_only=models.READ_ONLY, help_text='The most recent Close Date of a won Opportunity related to this Account with amount greater than zero.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', sf_read_only=models.READ_ONLY, help_text='The amount of the most recent (by Close Date) won Membership Opportunity (by Record Type) for this Account.', blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', sf_read_only=models.READ_ONLY, help_text='The most recent Close Date of a won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', sf_read_only=models.READ_ONLY, help_text='Membership level from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account."', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', sf_read_only=models.READ_ONLY, help_text='Membership "origin" (new, renew...) from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', sf_read_only=models.READ_ONLY, help_text='The amount of the most recent won Opportunity (by Close Date) with amount greater than zero related to this Account.', blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', sf_read_only=models.READ_ONLY, help_text='Membership end date from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', sf_read_only=models.READ_ONLY, help_text='Membership start date from most recent (by Close Date) won Membership Opportunity (by Record Type) related to this Account.', blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities  related to this Account.', blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', sf_read_only=models.READ_ONLY, help_text='The total number of won Membership Opportunities (Record Type) related to this Account.', blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Account, closed within the year or fiscal year preceding last year (see Household Settings).', blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Account, closed in the last number of days defined in Household Settings.', blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Account, closed in the current year or fiscal year.', blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Account, closed in the current year or fiscal year.', blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed within the year or fiscal year preceding last year.', blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Account, closed in the last number of days defined in Household Settings.', blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed in the previous year or fiscal year (see Household Settings).', blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Account, closed in the current year or fiscal year (see Household Settings).', blank=True, null=True) 
    npo02_system_custom_naming = models.CharField(db_column='npo02__SYSTEM_CUSTOM_NAMING__c', custom=True, max_length=4099, verbose_name='_SYSTEM: CUSTOM NAMING', sf_read_only=models.READ_ONLY, help_text='For Household Accounts, specifies which name related fields should not be automatically populated by the Householding code.', choices=[('Name', 'Name'), ('Formal_Greeting__c', 'Formal_Greeting__c'), ('Informal_Greeting__c', 'Informal_Greeting__c')], blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', sf_read_only=models.READ_ONLY, help_text='The smallest non-zero amount of a won Opportunity related to this Account.', blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', sf_read_only=models.READ_ONLY, help_text='The total amount of won Membership Opportunities (Record Type) related to this Account.', blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', sf_read_only=models.READ_ONLY, help_text='The sum of amounts of all won Opportunities related to this Account.', blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_funding_focus = models.CharField(db_column='npsp__Funding_Focus__c', custom=True, max_length=4099, verbose_name='Funding Focus', sf_read_only=models.READ_ONLY, help_text='The general program area(s) that this organization funds.', choices=[('Animal Welfare', 'Animal Welfare'), ('Arts and Culture', 'Arts and Culture'), ('Capacity Building', 'Capacity Building'), ('Education', 'Education'), ('Environmental', 'Environmental'), ('Health Services', 'Health Services'), ('Human Services', 'Human Services')], blank=True, null=True) 
    npsp_grantmaker = models.BooleanField(db_column='npsp__Grantmaker__c', custom=True, verbose_name='Grantmaker', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates that this organization is a grant making organization. Can apply to foundations, government agencies, corporations, etc.') 
    npsp_matching_gift_administrator_name = models.CharField(db_column='npsp__Matching_Gift_Administrator_Name__c', custom=True, max_length=255, verbose_name='Matching Gift Administrator Name', sf_read_only=models.READ_ONLY, help_text="The name of the company's matching gift administrator.", blank=True, null=True) 
    npsp_matching_gift_amount_max = models.DecimalField(db_column='npsp__Matching_Gift_Amount_Max__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Amount Max', sf_read_only=models.READ_ONLY, help_text='The maximum amount the company will match on any single gift.', blank=True, null=True) 
    npsp_matching_gift_amount_min = models.DecimalField(db_column='npsp__Matching_Gift_Amount_Min__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Amount Min', sf_read_only=models.READ_ONLY, help_text='The smallest gift the company will match.', blank=True, null=True) 
    npsp_matching_gift_annual_employee_max = models.DecimalField(db_column='npsp__Matching_Gift_Annual_Employee_Max__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Matching Gift Annual Employee Max', sf_read_only=models.READ_ONLY, help_text='The maximum amount the company will match each year for an employee.', blank=True, null=True) 
    npsp_matching_gift_comments = models.TextField(db_column='npsp__Matching_Gift_Comments__c', custom=True, verbose_name='Matching Gift Comments', sf_read_only=models.READ_ONLY, help_text="Additional notes about the company's matching gift program.", blank=True, null=True) 
    npsp_matching_gift_company = models.BooleanField(db_column='npsp__Matching_Gift_Company__c', custom=True, verbose_name='Matching Gift Company', sf_read_only=models.READ_ONLY, default=False, help_text='Is this a company that offers matching gifts?') 
    npsp_matching_gift_email = models.EmailField(db_column='npsp__Matching_Gift_Email__c', custom=True, verbose_name='Matching Gift Email', sf_read_only=models.READ_ONLY, help_text="Email of the company's matching gift administrator.", blank=True, null=True) 
    npsp_matching_gift_info_updated = models.DateField(db_column='npsp__Matching_Gift_Info_Updated__c', custom=True, verbose_name='Matching Gift Info Updated', sf_read_only=models.READ_ONLY, help_text='The date when the matching gift information was last updated.', blank=True, null=True) 
    npsp_matching_gift_percent = models.DecimalField(db_column='npsp__Matching_Gift_Percent__c', custom=True, max_digits=5, decimal_places=2, verbose_name='Matching Gift Percent', sf_read_only=models.READ_ONLY, help_text='The portion of a gift the company will match.', blank=True, null=True) 
    npsp_matching_gift_phone = models.CharField(db_column='npsp__Matching_Gift_Phone__c', custom=True, max_length=40, verbose_name='Matching Gift Phone', sf_read_only=models.READ_ONLY, help_text='Phone for the matching gift administration office.', blank=True, null=True) 
    npsp_matching_gift_request_deadline = models.CharField(db_column='npsp__Matching_Gift_Request_Deadline__c', custom=True, max_length=255, verbose_name='Matching Gift Request Deadline', sf_read_only=models.READ_ONLY, help_text='Any restrictions on how old gifts can be to be eligible for matching.', blank=True, null=True) 
    npsp_membership_span = models.DecimalField(db_column='npsp__Membership_Span__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Membership Span', sf_read_only=models.READ_ONLY, help_text='Formula: The number of years for which this Household has had a Member.', blank=True, null=True) 
    npsp_membership_status = models.CharField(db_column='npsp__Membership_Status__c', custom=True, max_length=3900, verbose_name='Membership Status', sf_read_only=models.READ_ONLY, help_text='Formula: Current, expired, or grace period.  Default grace period set in Household Settings.', blank=True, null=True) 
    npsp_number_of_household_members = models.DecimalField(db_column='npsp__Number_of_Household_Members__c', custom=True, max_digits=10, decimal_places=0, verbose_name='Number of Household Members', sf_read_only=models.READ_ONLY, help_text='for Household Accounts, the number of Contacts in the Household.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'AccountChangeEvent'
        verbose_name = 'Account Change Event'
        verbose_name_plural = 'Account Change Event'
        # keyPrefix = 'None'



class AccountContactRole(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'AccountContactRole'
        verbose_name = 'Account Contact Role'
        verbose_name_plural = 'Account Contact Roles'
        # keyPrefix = '02Z'



class AccountContactRoleChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrolechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountcontactrolechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AccountContactRoleChangeEvent'
        verbose_name = 'Account Contact Role Change Event'
        verbose_name_plural = 'Account Contact Role Change Event'
        # keyPrefix = 'None'



class AccountFeed(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountFeed'
        verbose_name = 'Account Feed'
        verbose_name_plural = 'Account Feed'
        # keyPrefix = 'None'



class AccountHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npe01__SYSTEM_AccountType__c', '_SYSTEM: AccountType'), ('npo02__SYSTEM_CUSTOM_NAMING__c', '_SYSTEM: CUSTOM NAMING'), ('npe01__SYSTEMIsIndividual__c', '_SYSTEM: IsIndividual'), ('accountMerged', 'Account Merged'), ('Name', 'Account Name'), ('TextName', 'Account Name'), ('AccountNumber', 'Account Number'), ('Owner', 'Account Owner'), ('RecordType', 'Account Record Type'), ('Site', 'Account Site'), ('AccountSource', 'Account Source'), ('AnnualRevenue', 'Annual Revenue'), ('npo02__AverageAmount__c', 'Average Gift'), ('npsp__Batch__c', 'Batch'), ('npo02__Best_Gift_Year__c', 'Best Gift Year'), ('npo02__Best_Gift_Year_Total__c', 'Best Gift Year Total'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingCountryCode', 'Billing Country Code'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStateCode', 'Billing State/Province Code'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('Business_Hours__c', 'Business Hours'), ('created', 'Created.'), ('accountCreatedFromLead', 'Created by lead convert'), ('Jigsaw', 'Data.com Key'), ('Description', 'Description'), ('NumberOfEmployees', 'Employees'), ('Fax', 'Fax'), ('feedEvent', 'Feed event'), ('npo02__FirstCloseDate__c', 'First Gift Date'), ('npo02__Formal_Greeting__c', 'Formal Greeting'), ('npsp__Funding_Focus__c', 'Funding Focus'), ('npsp__Grantmaker__c', 'Grantmaker'), ('npo02__HouseholdPhone__c', 'Household Phone'), ('individualMerged', 'Individual Merged'), ('Industry', 'Industry'), ('npo02__Informal_Greeting__c', 'Informal Greeting'), ('npo02__LargestAmount__c', 'Largest Gift'), ('npo02__LastOppAmount__c', 'Last Gift Amount'), ('npo02__LastCloseDate__c', 'Last Gift Date'), ('npo02__LastMembershipAmount__c', 'Last Membership Amount'), ('npo02__LastMembershipDate__c', 'Last Membership Date'), ('npo02__LastMembershipLevel__c', 'Last Membership Level'), ('npo02__LastMembershipOrigin__c', 'Last Membership Origin'), ('accountUpdatedByLead', 'Lead converted to Account'), ('personAccountUpdatedByLead', 'Lead converted to Person Account'), ('npsp__Matching_Gift_Administrator_Name__c', 'Matching Gift Administrator Name'), ('npsp__Matching_Gift_Amount_Max__c', 'Matching Gift Amount Max'), ('npsp__Matching_Gift_Amount_Min__c', 'Matching Gift Amount Min'), ('npsp__Matching_Gift_Annual_Employee_Max__c', 'Matching Gift Annual Employee Max'), ('npsp__Matching_Gift_Comments__c', 'Matching Gift Comments'), ('npsp__Matching_Gift_Company__c', 'Matching Gift Company'), ('npsp__Matching_Gift_Email__c', 'Matching Gift Email'), ('npsp__Matching_Gift_Info_Updated__c', 'Matching Gift Info Updated'), ('npsp__Matching_Gift_Percent__c', 'Matching Gift Percent'), ('npsp__Matching_Gift_Phone__c', 'Matching Gift Phone'), ('npsp__Matching_Gift_Request_Deadline__c', 'Matching Gift Request Deadline'), ('npo02__MembershipEndDate__c', 'Membership End Date'), ('npo02__MembershipJoinDate__c', 'Membership Join Date'), ('npo02__OppsClosedLastNDays__c', 'Number of Gifts Last N Days'), ('npo02__OppsClosedLastYear__c', 'Number of Gifts Last Year'), ('npo02__OppsClosedThisYear__c', 'Number of Gifts This Year'), ('npo02__OppsClosed2YearsAgo__c', 'Number of Gifts Two Years Ago'), ('npsp__Number_of_Household_Members__c', 'Number of Household Members'), ('npo02__NumberOfMembershipOpps__c', 'Number of Memberships'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Ownership', 'Ownership'), ('Parent', 'Parent Account'), ('Phone', 'Phone'), ('npe01__One2OneContact__c', 'Primary Contact'), ('Rating', 'Rating'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingCountryCode', 'Shipping Country Code'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStateCode', 'Shipping State/Province Code'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('Sic', 'SIC Code'), ('SicDesc', 'SIC Description'), ('npo02__SmallestAmount__c', 'Smallest Gift'), ('TickerSymbol', 'Ticker Symbol'), ('npo02__TotalOppAmount__c', 'Total Gifts'), ('npo02__OppAmountLastNDays__c', 'Total Gifts Last N Days'), ('npo02__OppAmountLastYear__c', 'Total Gifts Last Year'), ('npo02__OppAmountThisYear__c', 'Total Gifts This Year'), ('npo02__OppAmount2YearsAgo__c', 'Total Gifts Two Years Ago'), ('npo02__TotalMembershipOppAmount__c', 'Total Membership Amount'), ('npo02__NumberOfClosedOpps__c', 'Total Number of Gifts'), ('Type', 'Type'), ('Website', 'Website')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountHistory'
        verbose_name = 'Account History'
        verbose_name_plural = 'Account History'
        # keyPrefix = 'None'



class AccountPartner(models.Model):
    account_from = models.ForeignKey(Account, models.DO_NOTHING, related_name='accountpartner_accountfrom_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, related_name='accountpartner_accountto_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountpartner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='accountpartner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AccountPartner'
        verbose_name = 'Account Partner'
        verbose_name_plural = 'Account Partner'
        # keyPrefix = '00I'



class AccountShare(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    account_access_level = models.CharField(max_length=40, verbose_name='Account Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], default=models.DEFAULTED_ON_CREATE)
    opportunity_access_level = models.CharField(max_length=40, verbose_name='Opportunity Access', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], default=models.DEFAULTED_ON_CREATE)
    case_access_level = models.CharField(max_length=40, verbose_name='Case Access', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], default=models.DEFAULTED_ON_CREATE)
    contact_access_level = models.CharField(max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AccountShare'
        verbose_name = 'Account Share'
        verbose_name_plural = 'Account Share'
        # keyPrefix = '00r'



class ActionLinkGroupTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80)
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Name')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinkgrouptemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinkgrouptemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    executions_allowed = models.CharField(max_length=255, choices=[('Once', 'Once'), ('OncePerUser', 'Once per User'), ('Unlimited', 'Unlimited')])
    hours_until_expiration = models.IntegerField(verbose_name='Hours until Expiration', blank=True, null=True)
    category = models.CharField(max_length=255, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')])
    is_published = models.BooleanField(verbose_name='Published', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkGroupTemplate'
        verbose_name = 'Action Link Group Template'
        verbose_name_plural = 'Action Link Group Templates'
        # keyPrefix = '07g'



class ActionLinkTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinktemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='actionlinktemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    action_link_group_template = models.ForeignKey(ActionLinkGroupTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    label_key = models.CharField(max_length=128)
    method = models.CharField(max_length=255, verbose_name='HTTP Method', choices=[('HttpDelete', 'DELETE'), ('HttpHead', 'HEAD'), ('HttpGet', 'GET'), ('HttpPatch', 'PATCH'), ('HttpPost', 'POST'), ('HttpPut', 'PUT')])
    link_type = models.CharField(max_length=255, verbose_name='Action Type', choices=[('API', 'API'), ('APIAsync', 'API Async'), ('Download', 'Download'), ('UI', 'UI')])
    position = models.IntegerField()
    is_confirmation_required = models.BooleanField(verbose_name='Confirmation Required', default=models.DEFAULTED_ON_CREATE)
    is_group_default = models.BooleanField(verbose_name='Default Link in Group', default=models.DEFAULTED_ON_CREATE)
    user_visibility = models.CharField(max_length=255, choices=[('Creator', 'Only creator can see'), ('Everyone', 'Everyone can see'), ('EveryoneButCreator', 'Everyone but creator can see'), ('Manager', "Only creator's manager can see"), ('CustomUser', 'Only custom user can see'), ('CustomExcludedUser', 'Everyone but custom user can see')])
    user_alias = models.CharField(max_length=128, verbose_name='Custom User Alias', blank=True, null=True)
    label = models.CharField(max_length=255, blank=True, null=True)
    action_url = models.TextField(verbose_name='Action URL')
    request_body = models.TextField(verbose_name='HTTP Request Body', blank=True, null=True)
    headers = models.TextField(verbose_name='HTTP Headers', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ActionLinkTemplate'
        verbose_name = 'Action Link Template'
        verbose_name_plural = 'Action Link Templates'
        # keyPrefix = '07l'



class ActivityHistory(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='activityhistory_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey('Contact', models.DO_NOTHING, related_name='activityhistory_who_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='activityhistory_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Enrollment__c, ContactRequest, Contract, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, npe03__Recurring_Donation__c, npo02__Household__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c] Master Detail Relationship *
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('Calendar', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, User]
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Text', None), ('Text', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='activityhistory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_who = models.ForeignKey('Contact', models.DO_NOTHING, related_name='activityhistory_primarywho_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    primary_account = models.ForeignKey(Account, models.DO_NOTHING, related_name='activityhistory_primaryaccount_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey('EmailMessage', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Task__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_engagement_plan = models.ForeignKey('NpspEngagementPlan', models.DO_NOTHING, db_column='npsp__Engagement_Plan__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'ActivityHistory'
        verbose_name = 'Activity History'
        verbose_name_plural = 'Activity History'
        # keyPrefix = 'None'



class AdditionalNumber(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    call_center = models.ForeignKey('CallCenter', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=80)
    description = models.CharField(max_length=255, blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='additionalnumber_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='additionalnumber_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AdditionalNumber'
        verbose_name = 'Additional Directory Number'
        verbose_name_plural = 'Additional Directory Numbers'
        # keyPrefix = '04m'



class AggregateResult(models.Model):
    class Meta(models.Model.Meta):
        db_table = 'AggregateResult'
        verbose_name = 'Aggregate Result'
        verbose_name_plural = 'Aggregate Result'
        # keyPrefix = 'None'



class Announcement(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='announcement_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='announcement_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    feed_item = models.ForeignKey('FeedItem', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, unique=True)  # Master Detail Relationship *
    expiration_date = models.DateTimeField()
    send_emails = models.BooleanField(verbose_name='Send Emails on Announcement', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(verbose_name='Is Announcement Archived', sf_read_only=models.NOT_CREATEABLE, default=False)
    parent = models.ForeignKey('CollaborationGroup', models.DO_NOTHING, related_name='announcement_parent_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Announcement'
        verbose_name = 'Announcement'
        verbose_name_plural = 'Announcements'
        # keyPrefix = '0Bt'



class ApexClass(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    status = models.CharField(max_length=40, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    is_valid = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    body_crc = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Body CRC', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    length_without_comments = models.IntegerField(verbose_name='Size Without Comments')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexclass_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexclass_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexClass'
        verbose_name = 'Apex Class'
        verbose_name_plural = 'Apex Classes'
        # keyPrefix = '01p'



class ApexComponent(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    description = models.TextField(blank=True, null=True)
    controller_type = models.CharField(max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(max_length=255, blank=True, null=True)
    markup = models.TextField()
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexcomponent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexcomponent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexComponent'
        verbose_name = 'Visualforce Component'
        verbose_name_plural = 'Visualforce Components'
        # keyPrefix = '099'



class ApexEmailNotification(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='apexemailnotification_user_set', unique=True, blank=True, null=True)  # Master Detail Relationship *
    email = models.CharField(unique=True, max_length=255, verbose_name='email', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexEmailNotification'
        verbose_name = 'Apex Email Notification'
        verbose_name_plural = 'Apex Email Notifications'
        # keyPrefix = '06j'



class ApexLog(models.Model):
    log_user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    log_length = models.IntegerField(verbose_name='Log Size (bytes)', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Date', sf_read_only=models.READ_ONLY)
    request = models.CharField(max_length=16, verbose_name='Request Type', sf_read_only=models.READ_ONLY)
    operation = models.CharField(max_length=128, sf_read_only=models.READ_ONLY)
    application = models.CharField(max_length=64, sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    duration_milliseconds = models.IntegerField(verbose_name='Duration (ms)', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    start_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    location = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Monitoring', None), ('Profiling', None), ('SystemLog', None), ('Preserved', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexLog'
        verbose_name = 'Apex Debug Log'
        verbose_name_plural = 'Apex Debug Log'
        # keyPrefix = '07L'



class ApexPage(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    description = models.TextField(blank=True, null=True)
    controller_type = models.CharField(max_length=40, choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controller_key = models.CharField(max_length=255, blank=True, null=True)
    is_available_in_touch = models.BooleanField(verbose_name='Available for Lightning Experience, Lightning Communities, and the mobile app', default=models.DEFAULTED_ON_CREATE)
    is_confirmation_token_required = models.BooleanField(verbose_name='Require CSRF protection on GET requests', default=models.DEFAULTED_ON_CREATE)
    markup = models.TextField()
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexpage_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apexpage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexPage'
        verbose_name = 'Visualforce Page'
        verbose_name_plural = 'Visualforce Pages'
        # keyPrefix = '066'



class ApexPageInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    apex_page_id = models.CharField(max_length=18, verbose_name='Apex Page ID', sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    name_space_prefix = models.CharField(max_length=512, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_available_in_touch = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    master_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_show_header = models.CharField(max_length=80, verbose_name='Show Header', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexPageInfo'
        verbose_name = 'Apex Page Info'
        verbose_name_plural = 'Apex Pages Info'
        # keyPrefix = '4ve'



class ApexTestQueueItem(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    status = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    extended_status = models.CharField(max_length=1000, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    test_run_result = models.ForeignKey('ApexTestRunResult', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    should_skip_code_coverage = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestQueueItem'
        verbose_name = 'Apex Test Queue Item'
        verbose_name_plural = 'Apex Test Queue Items'
        # keyPrefix = '709'



class ApexTestResult(models.Model):
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    test_timestamp = models.DateTimeField(verbose_name='Time Started')
    outcome = models.CharField(max_length=40, verbose_name='Pass/Fail', choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('CompileFail', 'CompileFail'), ('Skip', 'Skip')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING)
    method_name = models.CharField(max_length=255, blank=True, null=True)
    message = models.CharField(max_length=4000, verbose_name='Error Message', blank=True, null=True)
    stack_trace = models.CharField(max_length=4000, blank=True, null=True)
    async_apex_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, blank=True, null=True)
    queue_item = models.ForeignKey(ApexTestQueueItem, models.DO_NOTHING, blank=True, null=True)
    apex_log = models.ForeignKey(ApexLog, models.DO_NOTHING, blank=True, null=True)
    apex_test_run_result = models.ForeignKey('ApexTestRunResult', models.DO_NOTHING, blank=True, null=True)
    run_time = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestResult'
        verbose_name = 'Apex Test Result'
        verbose_name_plural = 'Apex Test Results'
        # keyPrefix = '07M'



class ApexTestResultLimits(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestresultlimits_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestresultlimits_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_test_result = models.ForeignKey(ApexTestResult, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, unique=True)  # Master Detail Relationship *
    soql = models.IntegerField(verbose_name='Total number of SOQL queries issued')
    query_rows = models.IntegerField(verbose_name='Total number of records retrieved by SOQL queries')
    sosl = models.IntegerField(verbose_name='Total number of SOSL queries issued')
    dml = models.IntegerField(verbose_name='Total number of DML statements issued')
    dml_rows = models.IntegerField(verbose_name='Total number of records processed as a result of DML statements')
    cpu = models.IntegerField(verbose_name='Maximum CPU time on the Salesforce servers')
    callouts = models.IntegerField(verbose_name='Total number of callouts')
    email = models.IntegerField(verbose_name='Total number of sendEmail methods allowed')
    async_calls = models.IntegerField(verbose_name='Total number of async calls')
    mobile_push = models.IntegerField(verbose_name='Maximum number of push notification method calls allowed per Apex transaction')
    limit_context = models.CharField(max_length=255, verbose_name='LimitContext', blank=True, null=True)
    limit_exceptions = models.CharField(max_length=255, verbose_name='LimitExceptions', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestResultLimits'
        verbose_name = 'Apex Test Result Limit'
        verbose_name_plural = 'Apex Test Result Limit'
        # keyPrefix = '05n'



class ApexTestRunResult(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    async_apex_job = models.ForeignKey('AsyncApexJob', models.DO_NOTHING, unique=True, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestrunresult_user_set', blank=True, null=True)
    job_name = models.CharField(max_length=255, verbose_name='Name of the job', blank=True, null=True)
    is_all_tests = models.BooleanField(verbose_name='allTests', default=models.DEFAULTED_ON_CREATE)
    source = models.CharField(max_length=255, verbose_name='Client that kicked off the test run', blank=True, null=True)
    start_time = models.DateTimeField(verbose_name='Start time of the test run')
    end_time = models.DateTimeField(verbose_name='End time of the test run', blank=True, null=True)
    test_time = models.IntegerField(verbose_name='Time(ms) actually spent running tests', blank=True, null=True)
    status = models.CharField(max_length=255, verbose_name='Status of the test run', choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    classes_enqueued = models.IntegerField(verbose_name='Number of classes enqueued in this test run')
    classes_completed = models.IntegerField(verbose_name='Number of classes completed in this test run', blank=True, null=True)
    methods_enqueued = models.IntegerField(verbose_name='Number of methods enqueued in this test run', blank=True, null=True)
    methods_completed = models.IntegerField(verbose_name='Number of methods completed in this test run', blank=True, null=True)
    methods_failed = models.IntegerField(verbose_name='Number of methods failed in this test run', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestRunResult'
        verbose_name = 'Apex Test Run Result'
        verbose_name_plural = 'Apex Test Run Result'
        # keyPrefix = '05m'



class ApexTestSuite(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestsuite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextestsuite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    test_suite_name = models.CharField(unique=True, max_length=255)
    class Meta(models.Model.Meta):
        db_table = 'ApexTestSuite'
        verbose_name = 'Apex Test Suite'
        verbose_name_plural = 'Apex Test Suites'
        # keyPrefix = '05F'



class ApexTrigger(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('AccountChangeEvent', None), ('AccountContactRoleChangeEvent', None), ('ActivityEngagementRollup', None), ('AppAnalyticsQueryRequest', None), ('Asset', None), ('AssetChangeEvent', None), ('AssetRelationship', None), ('AssetTokenEvent', None), ('AssistantRecommendation', None), ('AsyncOperationEvent', None), ('AsyncOperationStatus', None), ('Attachment', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('BatchApexErrorEvent', None), ('Campaign', None), ('CampaignChangeEvent', None), ('CampaignMember', None), ('CampaignMemberChangeEvent', None), ('CampaignMemberStatusChangeEvent', None), ('Case', None), ('CaseChangeEvent', None), ('CaseComment', None), ('ChatterActivity', None), ('ChatterMessage', None), ('Class_Attendance__ChangeEvent', None), ('Class_Enrollment__ChangeEvent', None), ('Class_Meeting__ChangeEvent', None), ('Class_Offering__ChangeEvent', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupRecord', None), ('Contact', None), ('ContactChangeEvent', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContentDistribution', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentDocumentListViewMapping', None), ('ContentExternalStorage', None), ('ContentVersion', None), ('Contract', None), ('ContractChangeEvent', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('dlrs__LookupChild__ChangeEvent', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__ChangeEvent', None), ('dlrs__LookupParent__ChangeEvent', None), ('dlrs__LookupRollupCalculateJob__ChangeEvent', None), ('dlrs__LookupRollupSummary__ChangeEvent', None), ('dlrs__LookupRollupSummaryLog__ChangeEvent', None), ('dlrs__LookupRollupSummaryScheduleItems__ChangeEvent', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EaasEvent', None), ('EmailMessage', None), ('EngagementEvent', None), ('EngagementHistoryRollup', None), ('Equipment__ChangeEvent', None), ('Equipment_Assignment__ChangeEvent', None), ('Event', None), ('EventChangeEvent', None), ('EventRelationChangeEvent', None), ('FeedComment', None), ('FeedItem', None), ('FlowExecutionEvent', None), ('HammerResultStatus', None), ('Image', None), ('Incident__ChangeEvent', None), ('Individual', None), ('Lead', None), ('LeadChangeEvent', None), ('ListEmailChangeEvent', None), ('ListEmailSentResult', None), ('LogoutEventStream', None), ('Macro', None), ('ManagedContentSpaceMember', None), ('Note', None), ('npe01__OppPayment__ChangeEvent', None), ('npe03__Recurring_Donation__ChangeEvent', None), ('npe4__Relationship__ChangeEvent', None), ('npe4__Relationship_Error__ChangeEvent', None), ('npe5__Affiliation__ChangeEvent', None), ('npo02__Household__ChangeEvent', None), ('npsp__Account_Soft_Credit__ChangeEvent', None), ('npsp__Address__ChangeEvent', None), ('npsp__Allocation__ChangeEvent', None), ('npsp__Batch__ChangeEvent', None), ('npsp__DataImport__ChangeEvent', None), ('npsp__DataImportBatch__ChangeEvent', None), ('npsp__Engagement_Plan__ChangeEvent', None), ('npsp__Engagement_Plan_Task__ChangeEvent', None), ('npsp__Engagement_Plan_Template__ChangeEvent', None), ('npsp__Error__ChangeEvent', None), ('npsp__Fund__ChangeEvent', None), ('npsp__General_Accounting_Unit__ChangeEvent', None), ('npsp__Grant_Deadline__ChangeEvent', None), ('npsp__Level__ChangeEvent', None), ('npsp__Partial_Soft_Credit__ChangeEvent', None), ('npsp__Schedulable__ChangeEvent', None), ('npsp__Trigger_Handler__ChangeEvent', None), ('Opportunity', None), ('OpportunityChangeEvent', None), ('OpportunityContactRoleChangeEvent', None), ('OpportunityLineItem', None), ('Order', None), ('OrderChangeEvent', None), ('OrderItem', None), ('OrderItemChangeEvent', None), ('OrgDeleteRequest', None), ('OrgLifecycleNotification', None), ('Partner', None), ('PersonalizationResource', None), ('PlatformStatusAlertEvent', None), ('Pricebook2', None), ('Product2', None), ('Product2ChangeEvent', None), ('PromptAction', None), ('QuickText', None), ('Quote', None), ('QuoteChangeEvent', None), ('QuoteLineItem', None), ('QuoteLineItemChangeEvent', None), ('Recommendation', None), ('RecommendationReaction', None), ('RecordAction', None), ('RecordOrigin', None), ('RequestsForAccessSIQ', None), ('SiqUserBlacklist', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamActivityAccess', None), ('StreamingChannel', None), ('Survey__ChangeEvent', None), ('Task', None), ('TaskChangeEvent', None), ('TaskRelationChangeEvent', None), ('Topic', None), ('TopicAssignment', None), ('User', None), ('UserChangeEvent', None), ('UserNavItem', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)], blank=True, null=True)
    usage_before_insert = models.BooleanField(verbose_name='BeforeInsert')
    usage_after_insert = models.BooleanField(verbose_name='AfterInsert')
    usage_before_update = models.BooleanField(verbose_name='BeforeUpdate')
    usage_after_update = models.BooleanField(verbose_name='AfterUpdate')
    usage_before_delete = models.BooleanField(verbose_name='BeforeDelete')
    usage_after_delete = models.BooleanField(verbose_name='AfterDelete')
    usage_is_bulk = models.BooleanField(verbose_name='IsBulk')
    usage_after_undelete = models.BooleanField(verbose_name='AfterUndelete')
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    status = models.CharField(max_length=40, choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    is_valid = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    body_crc = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Body CRC', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    length_without_comments = models.IntegerField(verbose_name='Size Without Comments')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextrigger_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='apextrigger_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ApexTrigger'
        verbose_name = 'Apex Trigger'
        verbose_name_plural = 'Apex Triggers'
        # keyPrefix = '01q'



class AppAnalyticsQueryRequest(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appanalyticsqueryrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appanalyticsqueryrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('CustomObjectUsageSummary', 'Custom Object Usage Summary'), ('CustomObjectUsageLog', 'Custom Object Usage Log')])
    start_time = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE)
    end_time = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    request_state = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='New', choices=[('New', 'New'), ('Pending', 'Pending'), ('Complete', 'Complete'), ('Expired', 'Expired'), ('Failed', 'Failed'), ('NoData', 'No Data')], blank=True, null=True)
    download_url = models.TextField(verbose_name='Download URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    download_expiration_time = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_message = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    package_ids = models.CharField(max_length=255, verbose_name='Package IDs', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    organization_ids = models.CharField(max_length=255, verbose_name='Organization IDs', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AppAnalyticsQueryRequest'
        verbose_name = 'App Analytics Query Request'
        verbose_name_plural = 'App Analytics Query Requests'
        # keyPrefix = '0XI'



class AppDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    logo_url = models.URLField(verbose_name='Logo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    ui_type = models.CharField(max_length=255, verbose_name='UI Type', sf_read_only=models.READ_ONLY, choices=[('Aloha', None), ('Lightning', None)], blank=True, null=True)
    nav_type = models.CharField(max_length=255, verbose_name='Navigation Type', sf_read_only=models.READ_ONLY, choices=[('Standard', None), ('Console', None)], blank=True, null=True)
    utility_bar = models.CharField(max_length=80, verbose_name='Utility Bar Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    header_color = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_override_org_theme = models.BooleanField(verbose_name='Is Org Theme Overridden', sf_read_only=models.READ_ONLY, default=False)
    is_small_form_factor_supported = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_medium_form_factor_supported = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_large_form_factor_supported = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_nav_personalization_disabled = models.BooleanField(verbose_name='Is Navigation Menu Personalization Disabled', sf_read_only=models.READ_ONLY, default=False)
    is_nav_auto_temp_tabs_disabled = models.BooleanField(verbose_name='Is Navigation Menu Automatically Create Temporary Tabs Disabled', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AppDefinition'
        verbose_name = 'App Definition'
        verbose_name_plural = 'App Definitions'
        # keyPrefix = '06m'



class AppMenuItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appmenuitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='appmenuitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    logo_url = models.URLField(verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_using_admin_authorization = models.BooleanField(verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    mobile_platform = models.CharField(max_length=255, verbose_name='Mobile device OS platform', sf_read_only=models.READ_ONLY, choices=[('ios', 'iOS'), ('android', 'Android')], blank=True, null=True)
    mobile_min_os_ver = models.CharField(max_length=255, verbose_name='Minimum required mobile device OS version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_device_type = models.CharField(max_length=255, verbose_name='Type of mobile device', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_registered_device_only = models.BooleanField(verbose_name='App requires a registered mobile device', sf_read_only=models.READ_ONLY, default=False)
    mobile_app_ver = models.CharField(max_length=255, verbose_name='Version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_date = models.DateTimeField(verbose_name='Date the mobile app was most recently installed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_installed_version = models.CharField(max_length=255, verbose_name='Most recently installed version of the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_binary_id = models.CharField(max_length=255, verbose_name='ID for the related mobile app binary', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_app_install_url = models.URLField(verbose_name='URL to install the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_enabled = models.BooleanField(verbose_name='Is this a canvas-enabled application', sf_read_only=models.READ_ONLY, default=False)
    canvas_reference_id = models.CharField(max_length=18, verbose_name='The identifier used to render the canvas application.', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_url = models.URLField(verbose_name='The canvas url for the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_access_method = models.CharField(max_length=255, verbose_name='The configured access method for the canvas application', sf_read_only=models.READ_ONLY, default='Post', choices=[('Get', 'OAuth Webflow (GET)'), ('Post', 'Signed Request (POST)')], blank=True, null=True)
    canvas_selected_locations = models.CharField(max_length=255, verbose_name='The selected/supported locations of the canvas application', sf_read_only=models.READ_ONLY, blank=True, null=True)
    canvas_options = models.CharField(max_length=255, verbose_name='The options to hide publisher header or publisher share button', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    application_id = models.CharField(max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    user_sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    is_accessible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AppMenuItem'
        verbose_name = 'AppMenuItem'
        verbose_name_plural = 'AppMenuItems'
        # keyPrefix = '0DS'



class AppTabMember(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_definition_id = models.CharField(max_length=512, verbose_name='App Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tab_definition_id = models.CharField(max_length=512, verbose_name='Tab Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    workspace_driver_field = models.CharField(max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AppTabMember'
        verbose_name = 'App Tab Member'
        verbose_name_plural = 'App Tab Members'
        # keyPrefix = '06o'



class Approval(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Contract', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='approval_owner_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='approval_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='approval_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])
    request_comment = models.CharField(max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    approve_comment = models.CharField(max_length=4000, verbose_name='Approve/Reject Comment', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Approval'
        verbose_name = 'Approval'
        verbose_name_plural = 'Approval'
        # keyPrefix = '806'



class Asset(models.Model):
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    parent = models.ForeignKey('self', models.DO_NOTHING, related_name='asset_parent_set', blank=True, null=True)
    root_asset = models.ForeignKey('self', models.DO_NOTHING, related_name='asset_rootasset_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, blank=True, null=True)
    is_competitor_product = models.BooleanField(verbose_name='Competitor Asset', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='asset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Asset Name')
    serial_number = models.CharField(max_length=80, blank=True, null=True)
    install_date = models.DateField(blank=True, null=True)
    purchase_date = models.DateField(blank=True, null=True)
    usage_end_date = models.DateField(blank=True, null=True)
    status = models.CharField(max_length=40, choices=[('Purchased', 'Purchased'), ('Shipped', 'Shipped'), ('Installed', 'Installed'), ('Registered', 'Registered'), ('Obsolete', 'Obsolete')], blank=True, null=True)
    price = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    stock_keeping_unit = models.CharField(max_length=180, verbose_name='Product SKU', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Asset'
        verbose_name = 'Asset'
        verbose_name_plural = 'Assets'
        # keyPrefix = '02i'



class AssetChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    contact = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Asset, models.DO_NOTHING, related_name='assetchangeevent_parent_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    root_asset = models.ForeignKey(Asset, models.DO_NOTHING, related_name='assetchangeevent_rootasset_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_competitor_product = models.BooleanField(verbose_name='Competitor Asset', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Asset Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    serial_number = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    install_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    purchase_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    usage_end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Purchased', 'Purchased'), ('Shipped', 'Shipped'), ('Installed', 'Installed'), ('Registered', 'Registered'), ('Obsolete', 'Obsolete')], blank=True, null=True)
    price = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetChangeEvent'
        verbose_name = 'Asset Change Event'
        verbose_name_plural = 'Asset Change Event'
        # keyPrefix = 'None'



class AssetFeed(models.Model):
    parent = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetFeed'
        verbose_name = 'Asset Feed'
        verbose_name_plural = 'Asset Feed'
        # keyPrefix = 'None'



class AssetHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account'), ('AssetLevel', 'Asset Level'), ('Name', 'Asset Name'), ('AssetProvidedBy', 'Asset Provided By'), ('AssetServicedBy', 'Asset Serviced By'), ('IsCompetitorProduct', 'Competitor Asset'), ('Contact', 'Contact'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('InstallDate', 'Install Date'), ('IsInternal', 'Internal Asset'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Asset'), ('Price', 'Price'), ('Product2', 'Product'), ('PurchaseDate', 'Purchase Date'), ('Quantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RootAsset', 'Root Asset'), ('SerialNumber', 'Serial Number'), ('Status', 'Status'), ('UsageEndDate', 'Usage End Date')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetHistory'
        verbose_name = 'Asset History'
        verbose_name_plural = 'Asset History'
        # keyPrefix = 'None'



class AssetRelationship(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset_relationship_number = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetrelationship_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetrelationship_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    asset = models.ForeignKey(Asset, models.DO_NOTHING, related_name='assetrelationship_asset_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    related_asset = models.ForeignKey(Asset, models.DO_NOTHING, related_name='assetrelationship_relatedasset_set')
    from_date = models.DateTimeField(blank=True, null=True)
    to_date = models.DateTimeField(blank=True, null=True)
    relationship_type = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Replacement', 'Replacement'), ('Upgrade', 'Upgrade'), ('Crossgrade', 'Crossgrade')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetRelationship'
        verbose_name = 'Asset Relationship'
        verbose_name_plural = 'Asset Relationships'
        # keyPrefix = '1AR'



class AssetRelationshipFeed(models.Model):
    parent = models.ForeignKey(AssetRelationship, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetrelationshipfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assetrelationshipfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetRelationshipFeed'
        verbose_name = 'Asset Relationship Feed'
        verbose_name_plural = 'Asset Relationship Feed'
        # keyPrefix = 'None'



class AssetRelationshipHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    asset_relationship = models.ForeignKey(AssetRelationship, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Asset', 'Asset'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('FromDate', 'From Date'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('RelatedAsset', 'Related Asset'), ('RelationshipType', 'Relationship Type'), ('ToDate', 'To Date')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AssetRelationshipHistory'
        verbose_name = 'Asset Relationship History'
        verbose_name_plural = 'Asset Relationship History'
        # keyPrefix = 'None'



class AssignmentRule(models.Model):
    name = models.CharField(max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='SObject Type', sf_read_only=models.READ_ONLY, choices=[('Case', None), ('Lead', None)], blank=True, null=True)
    active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assignmentrule_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='assignmentrule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'AssignmentRule'
        verbose_name = 'Assignment Rule'
        verbose_name_plural = 'Assignment Rules'
        # keyPrefix = '01Q'



class AsyncApexJob(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    job_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Future', 'Future'), ('SharingRecalculation', 'Sharing Recalculation'), ('ScheduledApex', 'Scheduled Apex'), ('BatchApex', 'Batch Apex'), ('BatchApexWorker', 'Batch Apex Worker'), ('TestRequest', 'Test Request'), ('TestWorker', 'Test Worker'), ('ApexToken', 'Apex Token'), ('Queueable', 'Queueable')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    job_items_processed = models.IntegerField(verbose_name='Batches Processed', sf_read_only=models.READ_ONLY)
    total_job_items = models.IntegerField(verbose_name='Total Batches', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_errors = models.IntegerField(verbose_name='Failures', sf_read_only=models.READ_ONLY, blank=True, null=True)
    completed_date = models.DateTimeField(verbose_name='Completion Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    method_name = models.CharField(max_length=255, verbose_name='Apex Method', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extended_status = models.CharField(max_length=255, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_job = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_processed = models.CharField(max_length=15, verbose_name='Last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_processed_offset = models.IntegerField(verbose_name='Offset of last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AsyncApexJob'
        verbose_name = 'Apex Job'
        verbose_name_plural = 'Apex Jobs'
        # keyPrefix = '707'



class AttachedContentDocument(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, ListEmail, Opportunity, Order, OrderItem, Organization, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AttachedContentDocument'
        verbose_name = 'Attached Content Document'
        verbose_name_plural = 'Attached Content Documents'
        # keyPrefix = 'None'



class AttachedContentNote(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, ListEmail, Opportunity, Order, OrderItem, Organization, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentnote_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachedcontentnote_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    text_preview = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AttachedContentNote'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = 'None'



class Attachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, Contract, EmailMessage, EmailTemplate, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, Opportunity, Order, Product2, Quote, SocialPost, Solution, Survey__c, Task, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__OppPayment__c, npe03__Recurring_Donation__c, npe4__Relationship_Error__c, npe4__Relationship__c, npe5__Affiliation__c, npo02__Household__c, npsp__Account_Soft_Credit__c, npsp__Address__c, npsp__Allocation__c, npsp__Batch__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Level__c, npsp__Partial_Soft_Credit__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    name = models.CharField(max_length=255, verbose_name='File Name')
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    content_type = models.CharField(max_length=120, blank=True, null=True)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField()
    owner = models.ForeignKey('Calendar', models.DO_NOTHING)  # Reference to tables [Calendar, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='attachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Attachment'
        verbose_name = 'Attachment'
        verbose_name_plural = 'Attachments'
        # keyPrefix = '00P'



class AuraDefinition(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    aura_definition_bundle = models.ForeignKey('AuraDefinitionBundle', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    def_type = models.CharField(max_length=255, verbose_name='Definition Type', choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15'), ('MODULE', '16')])
    format = models.CharField(max_length=255, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField()
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinition'
        verbose_name = 'Lightning Component Definition'
        verbose_name_plural = 'Lightning Component Definitions'
        # keyPrefix = '0Ad'



class AuraDefinitionBundle(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinitionbundle_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='auradefinitionbundle_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1)
    description = models.TextField()
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundle'
        verbose_name = 'Aura Component Bundle'
        verbose_name_plural = 'Aura Component Bundles'
        # keyPrefix = '0Ab'



class AuraDefinitionBundleInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_id = models.CharField(max_length=18, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionBundleInfo'
        verbose_name = 'AuraDefinitionBundle Info'
        verbose_name_plural = 'AuraDefinitionBundle Infos'
        # keyPrefix = '0ab'



class AuraDefinitionInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_bundle_info_id = models.CharField(max_length=100, verbose_name='Lightning Definition Bundle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    aura_definition_id = models.CharField(max_length=18, verbose_name='Lightning Definition ID', sf_read_only=models.READ_ONLY)
    def_type = models.CharField(max_length=255, verbose_name='Definition Type', sf_read_only=models.READ_ONLY, choices=[('APPLICATION', '0'), ('CONTROLLER', '1'), ('COMPONENT', '2'), ('EVENT', '3'), ('HELPER', '4'), ('INTERFACE', '5'), ('RENDERER', '7'), ('STYLE', '8'), ('PROVIDER', '9'), ('MODEL', '10'), ('TESTSUITE', '11'), ('DOCUMENTATION', '12'), ('TOKENS', '13'), ('DESIGN', '14'), ('SVG', '15'), ('MODULE', '16')])
    format = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('XML', 'XML'), ('JS', 'JS'), ('CSS', 'CSS'), ('TEMPLATE_CSS', 'TEMPLATE_CSS'), ('SVG', 'SVG')])
    source = models.TextField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Bundle Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuraDefinitionInfo'
        verbose_name = 'AuraDefinition Info'
        verbose_name_plural = 'AuraDefinition Infos'
        # keyPrefix = '0ad'



class AuthConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    url = models.CharField(unique=True, max_length=240, verbose_name='URL', sf_read_only=models.READ_ONLY)
    auth_options_username_password = models.BooleanField(verbose_name='UsernamePassword', sf_read_only=models.READ_ONLY)
    auth_options_saml = models.BooleanField(verbose_name='Saml', sf_read_only=models.READ_ONLY)
    auth_options_auth_provider = models.BooleanField(verbose_name='AuthProvider', sf_read_only=models.READ_ONLY)
    auth_options_certificate = models.BooleanField(verbose_name='Certificate', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=255, verbose_name='Authentication Configuration Type', sf_read_only=models.READ_ONLY, choices=[('Org', 'Org'), ('Community', 'Community'), ('Site', 'Site'), ('Portal', 'Portal')])
    class Meta(models.Model.Meta):
        db_table = 'AuthConfig'
        verbose_name = 'Authentication Configuration'
        verbose_name_plural = 'Authentication Configurations'
        # keyPrefix = '07T'



class AuthConfigProviders(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfigproviders_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='authconfigproviders_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    auth_config = models.ForeignKey(AuthConfig, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    auth_provider = models.ForeignKey('AuthProvider', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AuthProvider, SamlSsoConfig] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'AuthConfigProviders'
        verbose_name = 'Authentication Configuration Auth. Provider'
        verbose_name_plural = 'Authentication Configuration Auth. Providers'
        # keyPrefix = '07U'



class AuthProvider(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    provider_type = models.CharField(max_length=40, choices=[('Facebook', 'Facebook'), ('Janrain', 'Janrain'), ('Salesforce', 'Salesforce'), ('OpenIdConnect', 'Open ID Connect'), ('MicrosoftACS', 'Microsoft Access Control Service'), ('LinkedIn', 'LinkedIn'), ('Twitter', 'Twitter'), ('Google', 'Google'), ('GitHub', 'GitHub'), ('Custom', 'Custom')])
    friendly_name = models.CharField(max_length=32, verbose_name='Name')
    developer_name = models.CharField(max_length=32, verbose_name='URL Suffix')
    registration_handler = models.ForeignKey(ApexClass, models.DO_NOTHING, related_name='authprovider_registrationhandler_set', blank=True, null=True)
    execution_user = models.ForeignKey('User', models.DO_NOTHING, blank=True, null=True)
    consumer_key = models.CharField(max_length=256, blank=True, null=True)
    consumer_secret = models.CharField(max_length=100, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    error_url = models.CharField(max_length=500, verbose_name='Custom Error URL', blank=True, null=True)
    authorize_url = models.URLField(verbose_name='Authorize Endpoint URL', blank=True, null=True)
    token_url = models.URLField(verbose_name='Token Endpoint URL', blank=True, null=True)
    user_info_url = models.URLField(verbose_name='User Info Endpoint URL', blank=True, null=True)
    default_scopes = models.CharField(max_length=256, blank=True, null=True)
    id_token_issuer = models.CharField(max_length=1024, verbose_name='Token Issuer', blank=True, null=True)
    options_send_access_token_in_header = models.BooleanField(verbose_name='Send access token in header')
    options_send_client_credentials_in_header = models.BooleanField(verbose_name='Send client credentials in header')
    options_include_org_id_in_id = models.BooleanField(verbose_name="Include identity organization's organization ID for third-party account linkage")
    icon_url = models.URLField(verbose_name='Icon URL', blank=True, null=True)
    logout_url = models.URLField(verbose_name='Custom Logout URL', blank=True, null=True)
    plugin = models.ForeignKey(ApexClass, models.DO_NOTHING, related_name='authprovider_plugin_set', blank=True, null=True)
    custom_metadata_type_record = models.CharField(max_length=15, blank=True, null=True)
    sso_kickoff_url = models.URLField(verbose_name='Single Sign-On Initialization URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_kickoff_url = models.URLField(verbose_name='Existing User Linking URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    oauth_kickoff_url = models.URLField(verbose_name='OAuth-Only Initialization URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'AuthProvider'
        verbose_name = 'Auth. Provider'
        verbose_name_plural = 'Auth. Providers'
        # keyPrefix = '0SO'



class AuthSession(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Updated', sf_read_only=models.READ_ONLY)
    num_seconds_valid = models.IntegerField(verbose_name='Valid For', sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')])
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_type = models.CharField(max_length=40, verbose_name='Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    session_security_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('LOW', None), ('STANDARD', None), ('HIGH_ASSURANCE', None)], blank=True, null=True)
    logout_url = models.CharField(max_length=1500, verbose_name='Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_history = models.ForeignKey('LoginHistory', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_geo = models.ForeignKey('LoginGeo', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_current = models.BooleanField(verbose_name='Current Session', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'AuthSession'
        verbose_name = 'Auth Session'
        verbose_name_plural = 'Auth Sessions'
        # keyPrefix = '0Ak'



class BackgroundOperation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Background Operation Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='backgroundoperation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='backgroundoperation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    submitted_at = models.DateTimeField(verbose_name='Submitted', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', None), ('Scheduled', None), ('Canceled', None), ('Merged', None), ('Waiting', None), ('Running', None), ('Error', None), ('Complete', None)], blank=True, null=True)
    execution_group = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_group = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sequence_number = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_leader = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    started_at = models.DateTimeField(verbose_name='Started', sf_read_only=models.READ_ONLY, blank=True, null=True)
    finished_at = models.DateTimeField(verbose_name='Finished', sf_read_only=models.READ_ONLY, blank=True, null=True)
    worker_uri = models.CharField(max_length=255, verbose_name='Worker URI', sf_read_only=models.READ_ONLY, blank=True, null=True)
    timeout = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    expires_at = models.DateTimeField(verbose_name='ExpiresAt', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_followers = models.IntegerField(verbose_name='NumFollowers', sf_read_only=models.READ_ONLY, blank=True, null=True)
    process_after = models.DateTimeField(verbose_name='ProcessAfter', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_key = models.CharField(max_length=255, verbose_name='ParentKey', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_limit = models.IntegerField(verbose_name='RetryLimit', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_count = models.IntegerField(verbose_name='RetryCount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    retry_backoff = models.IntegerField(verbose_name='RetryBackoff', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BackgroundOperation'
        verbose_name = 'Background Operation'
        verbose_name_plural = 'Background Operations'
        # keyPrefix = '08P'



class BrandTemplate(models.Model):
    name = models.CharField(max_length=255, verbose_name='Brand Template Name')
    developer_name = models.CharField(max_length=80, verbose_name='Letterhead Unique Name', default=models.DEFAULTED_ON_CREATE)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    description = models.CharField(max_length=1000, blank=True, null=True)
    value = models.TextField()
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BrandTemplate'
        verbose_name = 'Letterhead'
        verbose_name_plural = 'Letterheads'
        # keyPrefix = '016'



class BrandingSet(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Set Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandingset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandingset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BrandingSet'
        verbose_name = 'Branding Set'
        verbose_name_plural = 'Branding Sets'
        # keyPrefix = '0Lw'



class BrandingSetProperty(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandingsetproperty_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='brandingsetproperty_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    branding_set = models.ForeignKey(BrandingSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    property_name = models.CharField(max_length=255, verbose_name='Branding Set Property Name')
    property_value = models.TextField(verbose_name='Branding Set Property Value', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BrandingSetProperty'
        verbose_name = 'Branding Set Property'
        verbose_name_plural = 'Branding Set Properties'
        # keyPrefix = '0Ly'



class BusinessHours(models.Model):
    name = models.CharField(max_length=80, verbose_name='Business Hours Name')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    is_default = models.BooleanField(verbose_name='Default Business Hours', default=models.DEFAULTED_ON_CREATE)
    sunday_start_time = models.TimeField(verbose_name='Sunday Start', blank=True, null=True)
    sunday_end_time = models.TimeField(verbose_name='Sunday End', blank=True, null=True)
    monday_start_time = models.TimeField(verbose_name='Monday Start', blank=True, null=True)
    monday_end_time = models.TimeField(verbose_name='Monday End', blank=True, null=True)
    tuesday_start_time = models.TimeField(verbose_name='Tuesday Start', blank=True, null=True)
    tuesday_end_time = models.TimeField(verbose_name='Tuesday End', blank=True, null=True)
    wednesday_start_time = models.TimeField(verbose_name='Wednesday Start', blank=True, null=True)
    wednesday_end_time = models.TimeField(verbose_name='Wednesday End', blank=True, null=True)
    thursday_start_time = models.TimeField(verbose_name='Thursday Start', blank=True, null=True)
    thursday_end_time = models.TimeField(verbose_name='Thursday End', blank=True, null=True)
    friday_start_time = models.TimeField(verbose_name='Friday Start', blank=True, null=True)
    friday_end_time = models.TimeField(verbose_name='Friday End', blank=True, null=True)
    saturday_start_time = models.TimeField(verbose_name='Saturday Start', blank=True, null=True)
    saturday_end_time = models.TimeField(verbose_name='Saturday End', blank=True, null=True)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businesshours_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businesshours_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'BusinessHours'
        verbose_name = 'Business Hours'
        verbose_name_plural = 'Business Hours'
        # keyPrefix = '01m'



class BusinessProcess(models.Model):
    name = models.CharField(max_length=80)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Entity Enumeration Or ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Case', None), ('Lead', None), ('Opportunity', None), ('Solution', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businessprocess_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='businessprocess_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'BusinessProcess'
        verbose_name = 'Business Process'
        verbose_name_plural = 'Business Process'
        # keyPrefix = '019'



class Calendar(models.Model):
    name = models.CharField(max_length=80, verbose_name='Calendar Name', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='calendar_user_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Calendar Type', sf_read_only=models.READ_ONLY, choices=[('User', 'User Calendar'), ('Public', 'Public Calendar'), ('Resource', 'Resource Calendar'), ('Holiday', 'Holiday Calendar')])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='calendar_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='calendar_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Calendar'
        verbose_name = 'Calendar'
        verbose_name_plural = 'Calendars'
        # keyPrefix = '023'



class CallCenter(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    internal_name = models.CharField(max_length=240, sf_read_only=models.NOT_UPDATEABLE)
    version = models.DecimalField(max_digits=18, decimal_places=3, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    adapter_url = models.CharField(max_length=2000, verbose_name='CTI Adapter URL', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    custom_settings = models.CharField(max_length=3000, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='callcenter_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='callcenter_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CallCenter'
        verbose_name = 'Call Center'
        verbose_name_plural = 'Call Centers'
        # keyPrefix = '04v'



class Campaign(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Event', choices=[('Event', 'Event'), ('Fundraising', 'Fundraising'), ('Conference', 'Conference'), ('Content / White Paper', 'Content / White Paper'), ('Email', 'Email'), ('PR', 'PR'), ('Partners', 'Partners'), ('Referral Program', 'Referral Program'), ('Signup / Trial', 'Signup / Trial'), ('Social Media - Organic', 'Social Media - Organic'), ('Social Media - Paid', 'Social Media - Paid'), ('Webinar', 'Webinar'), ('Other', 'Other')], blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, related_name='campaign_recordtype_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Planned', choices=[('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Aborted', 'Aborted'), ('Planned', 'Planned')], blank=True, null=True)
    start_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Expected Revenue in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    budgeted_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Budgeted Cost in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    actual_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Actual Cost in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_response = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Expected Response (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_sent = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Num Sent in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_leads = models.IntegerField(verbose_name='Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_converted_leads = models.IntegerField(verbose_name='Converted Leads in Campaign', sf_read_only=models.READ_ONLY)
    number_of_contacts = models.IntegerField(verbose_name='Contacts in Campaign', sf_read_only=models.READ_ONLY)
    number_of_responses = models.IntegerField(verbose_name='Responses in Campaign', sf_read_only=models.READ_ONLY)
    number_of_opportunities = models.IntegerField(verbose_name='Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    number_of_won_opportunities = models.IntegerField(verbose_name='Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_all_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    amount_won_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Won Opportunities in Campaign', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_owner_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaign_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign_member_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, related_name='campaign_campaignmemberrecordtype_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Campaign'
        verbose_name = 'Campaign'
        verbose_name_plural = 'Campaigns'
        # keyPrefix = '701'



class CampaignChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Event', choices=[('Event', 'Event'), ('Fundraising', 'Fundraising'), ('Conference', 'Conference'), ('Content / White Paper', 'Content / White Paper'), ('Email', 'Email'), ('PR', 'PR'), ('Partners', 'Partners'), ('Referral Program', 'Referral Program'), ('Signup / Trial', 'Signup / Trial'), ('Social Media - Organic', 'Social Media - Organic'), ('Social Media - Paid', 'Social Media - Paid'), ('Webinar', 'Webinar'), ('Other', 'Other')], blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, related_name='campaignchangeevent_recordtype_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Planned', choices=[('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Aborted', 'Aborted'), ('Planned', 'Planned')], blank=True, null=True)
    start_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Expected Revenue in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    budgeted_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Budgeted Cost in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    actual_cost = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Actual Cost in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_response = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Expected Response (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_sent = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Num Sent in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_leads = models.IntegerField(verbose_name='Leads in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_converted_leads = models.IntegerField(verbose_name='Converted Leads in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_contacts = models.IntegerField(verbose_name='Contacts in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_responses = models.IntegerField(verbose_name='Responses in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_opportunities = models.IntegerField(verbose_name='Opportunities in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number_of_won_opportunities = models.IntegerField(verbose_name='Won Opportunities in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_all_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Opportunities in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_won_opportunities = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Value Won Opportunities in Campaign', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign_member_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, related_name='campaignchangeevent_campaignmemberrecordtype_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignChangeEvent'
        verbose_name = 'Campaign Change Event'
        verbose_name_plural = 'Campaign Change Event'
        # keyPrefix = 'None'



class CampaignFeed(models.Model):
    parent = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignFeed'
        verbose_name = 'Campaign Feed'
        verbose_name_plural = 'Campaign Feed'
        # keyPrefix = 'None'



class CampaignHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('ActualCost', 'Actual Cost in Campaign'), ('BudgetedCost', 'Budgeted Cost in Campaign'), ('CampaignMemberRecordType', 'Campaign Member Type'), ('Name', 'Campaign Name'), ('Owner', 'Campaign Owner'), ('RecordType', 'Campaign Record Type'), ('created', 'Created.'), ('Description', 'Description'), ('EndDate', 'End Date'), ('ExpectedResponse', 'Expected Response (%)'), ('ExpectedRevenue', 'Expected Revenue in Campaign'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('NumberSent', 'Num Sent in Campaign'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent Campaign'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('StartDate', 'Start Date'), ('Status', 'Status'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CampaignHistory'
        verbose_name = 'Campaign Field History'
        verbose_name_plural = 'Campaign Field History'
        # keyPrefix = 'None'



class CampaignMember(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    lead = models.ForeignKey('Lead', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING, related_name='campaignmember_contact_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    status = models.CharField(max_length=40, choices=[('Attended', 'Attended'), ('Invited', 'Invited'), ('No Show', 'No Show'), ('Registered', 'Registered'), ('Responded', 'Responded'), ('Sent', 'Sent')], blank=True, null=True)
    has_responded = models.BooleanField(verbose_name='Responded', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    first_responded_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    salutation = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Mobile', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    do_not_call = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_email = models.BooleanField(verbose_name='Email Opt Out', sf_read_only=models.READ_ONLY, default=False)
    has_opted_out_of_fax = models.BooleanField(verbose_name='Fax Opt Out', sf_read_only=models.READ_ONLY, default=False)
    lead_source = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertisement', 'Advertisement'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Internal'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Trade Show'), ('Web', 'Web'), ('Word of mouth', 'Word of mouth'), ('Other', 'Other')], blank=True, null=True)
    company_or_account = models.CharField(max_length=255, verbose_name='Company (Account)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_or_contact = models.ForeignKey('Contact', models.DO_NOTHING, related_name='campaignmember_leadorcontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    lead_or_contact_owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    class Meta(models.Model.Meta):
        db_table = 'CampaignMember'
        verbose_name = 'Campaign Member'
        verbose_name_plural = 'Campaign Members'
        # keyPrefix = '00v'



class CampaignMemberStatus(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    label = models.CharField(max_length=765, verbose_name='Member Status', sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_responded = models.BooleanField(verbose_name='Responded', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmemberstatus_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='campaignmemberstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CampaignMemberStatus'
        verbose_name = 'Campaign Member Status'
        verbose_name_plural = 'Campaign Member Statuses'
        # keyPrefix = '01Y'



class CampaignShare(models.Model):
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    campaign_access_level = models.CharField(max_length=40, verbose_name='Campaign Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CampaignShare'
        verbose_name = 'Campaign Share'
        verbose_name_plural = 'Campaign Share'
        # keyPrefix = '08s'



class Case(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)
    source = models.ForeignKey('EmailMessage', models.DO_NOTHING, blank=True, null=True)  # Reference to tables [EmailMessage, SocialPost]
    supplied_name = models.CharField(max_length=80, verbose_name='Name', blank=True, null=True)
    supplied_email = models.EmailField(verbose_name='Email Address', blank=True, null=True)
    supplied_phone = models.CharField(max_length=40, verbose_name='Phone', blank=True, null=True)
    supplied_company = models.CharField(max_length=80, verbose_name='Company', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Case Type', choices=[('Problem', 'Problem'), ('Feature Request', 'Feature Request'), ('Question', 'Question')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('On Hold', 'On Hold'), ('Escalated', 'Escalated'), ('Closed', 'Closed'), ('New', 'New')], blank=True, null=True)
    reason = models.CharField(max_length=40, verbose_name='Case Reason', choices=[("User didn't attend training", "User didn't attend training"), ('Complex functionality', 'Complex functionality'), ('Existing problem', 'Existing problem'), ('Instructions not clear', 'Instructions not clear'), ('New problem', 'New problem')], blank=True, null=True)
    origin = models.CharField(max_length=40, verbose_name='Case Origin', choices=[('Email', 'Email'), ('Phone', 'Phone'), ('Web', 'Web')], blank=True, null=True)
    subject = models.CharField(max_length=255, blank=True, null=True)
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    closed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='case_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='case_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    contact_phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_mobile = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    comments = models.TextField(verbose_name='Internal Comments', blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Case'
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'
        # keyPrefix = '500'



class CaseChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    case_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    source = models.ForeignKey('EmailMessage', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [EmailMessage, SocialPost]
    supplied_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    supplied_email = models.EmailField(verbose_name='Email Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    supplied_phone = models.CharField(max_length=40, verbose_name='Phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    supplied_company = models.CharField(max_length=80, verbose_name='Company', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Case Type', sf_read_only=models.READ_ONLY, choices=[('Problem', 'Problem'), ('Feature Request', 'Feature Request'), ('Question', 'Question')], blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='New', choices=[('On Hold', 'On Hold'), ('Escalated', 'Escalated'), ('Closed', 'Closed'), ('New', 'New')], blank=True, null=True)
    reason = models.CharField(max_length=40, verbose_name='Case Reason', sf_read_only=models.READ_ONLY, choices=[("User didn't attend training", "User didn't attend training"), ('Complex functionality', 'Complex functionality'), ('Existing problem', 'Existing problem'), ('Instructions not clear', 'Instructions not clear'), ('New problem', 'New problem')], blank=True, null=True)
    origin = models.CharField(max_length=40, verbose_name='Case Origin', sf_read_only=models.READ_ONLY, choices=[('Email', 'Email'), ('Phone', 'Phone'), ('Web', 'Web')], blank=True, null=True)
    subject = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Medium', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    closed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='casechangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseChangeEvent'
        verbose_name = 'Case Change Event'
        verbose_name_plural = 'Case Change Event'
        # keyPrefix = 'None'



class CaseComment(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_published = models.BooleanField(verbose_name='Published', default=models.DEFAULTED_ON_CREATE)
    comment_body = models.TextField(verbose_name='Body', blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecomment_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecomment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseComment'
        verbose_name = 'Case Comment'
        verbose_name_plural = 'Case Comments'
        # keyPrefix = '00a'



class CaseContactRole(models.Model):
    cases = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey('Contact', models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Technical Contact', 'Technical Contact'), ('Business Contact', 'Business Contact'), ('Decision Maker', 'Decision Maker'), ('Other', 'Other')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casecontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseContactRole'
        verbose_name = 'Case Contact Role'
        verbose_name_plural = 'Case Contact Role'
        # keyPrefix = '03j'



class CaseFeed(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casefeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casefeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseFeed'
        verbose_name = 'Case Feed'
        verbose_name_plural = 'Case Feed'
        # keyPrefix = 'None'



class CaseHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('Asset', 'Asset'), ('BusinessHours', 'Business Hours'), ('caseMerged', 'Case Merged'), ('Origin', 'Case Origin'), ('Owner', 'Case Owner'), ('Reason', 'Case Reason'), ('Source', 'Case Source'), ('closed', 'Closed.'), ('IsClosedOnCreate', 'Closed When Created'), ('Contact', 'Contact Name'), ('created', 'Created.'), ('Description', 'Description'), ('IsEscalated', 'Escalated'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ownerEscalated', 'Owner (Escalation)'), ('Parent', 'Parent Case'), ('Priority', 'Priority'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Status', 'Status'), ('Subject', 'Subject'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseHistory'
        verbose_name = 'Case History'
        verbose_name_plural = 'Case History'
        # keyPrefix = 'None'



class CaseShare(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    case_access_level = models.CharField(max_length=40, verbose_name='Case Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseShare'
        verbose_name = 'Case Share'
        verbose_name_plural = 'Case Share'
        # keyPrefix = '01n'



class CaseSolution(models.Model):
    case = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    solution = models.ForeignKey('Solution', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'CaseSolution'
        verbose_name = 'Case Solution'
        verbose_name_plural = 'Case Solution'
        # keyPrefix = '010'



class CaseStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casestatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casestatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseStatus'
        verbose_name = 'Case Status Value'
        verbose_name_plural = 'Case Status Value'
        # keyPrefix = 'None'



class CaseSubjectParticle(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casesubjectparticle_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='casesubjectparticle_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    index = models.IntegerField(unique=True)
    type = models.CharField(max_length=255, choices=[('ProvidedString', 'ProvidedString'), ('Source', 'Source'), ('MessageType', 'MessageType'), ('SocialHandle', 'SocialHandle'), ('SocialNetwork', 'SocialNetwork'), ('Sentiment', 'Sentiment'), ('RealName', 'RealName'), ('Content', 'Message'), ('PipeSeparator', 'PipeSeparator'), ('ColonSeparator', 'ColonSeparator'), ('HyphenSeparator', 'HyphenSeparator')])
    text_field = models.CharField(max_length=255, verbose_name='Freeform Text Field', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CaseSubjectParticle'
        verbose_name = 'Case Subject Particle'
        verbose_name_plural = 'Case Subject Particles'
        # keyPrefix = '0Oi'



class CaseTeamMember(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    member = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, User] Master Detail Relationship *
    team_template_member = models.ForeignKey('CaseTeamTemplateMember', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    team_role = models.ForeignKey('CaseTeamRole', models.DO_NOTHING)
    team_template = models.ForeignKey('CaseTeamTemplate', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteammember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteammember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamMember'
        verbose_name = 'Case Team Member'
        verbose_name_plural = 'Case Team Member'
        # keyPrefix = 'None'



class CaseTeamRole(models.Model):
    name = models.CharField(max_length=80)
    access_level = models.CharField(max_length=40, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    preferences_visible_in_csp = models.BooleanField(db_column='PreferencesVisibleInCSP', verbose_name='Visible in Customer Portal')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamRole'
        verbose_name = 'Case Team Member Role'
        verbose_name_plural = 'Case Team Member Role'
        # keyPrefix = 'None'



class CaseTeamTemplate(models.Model):
    name = models.CharField(max_length=80)
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplate'
        verbose_name = 'Predefined Case Team'
        verbose_name_plural = 'Predefined Case Team'
        # keyPrefix = 'None'



class CaseTeamTemplateMember(models.Model):
    team_template = models.ForeignKey(CaseTeamTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    member = models.ForeignKey('Contact', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Contact, User] Master Detail Relationship *
    team_role = models.ForeignKey(CaseTeamRole, models.DO_NOTHING, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplatemember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='caseteamtemplatemember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateMember'
        verbose_name = 'Predefined Case Team Member'
        verbose_name_plural = 'Predefined Case Team Member'
        # keyPrefix = 'None'



class CaseTeamTemplateRecord(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    team_template = models.ForeignKey(CaseTeamTemplate, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CaseTeamTemplateRecord'
        verbose_name = 'Predefined Case Team Record'
        verbose_name_plural = 'Predefined Case Team Record'
        # keyPrefix = 'None'



class CategoryData(models.Model):
    category_node = models.ForeignKey('CategoryNode', models.DO_NOTHING)  # Master Detail Relationship *
    related_sobject = models.ForeignKey('Solution', models.DO_NOTHING)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorydata_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorydata_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryData'
        verbose_name = 'Category Data'
        verbose_name_plural = 'Category Data'
        # keyPrefix = '02o'



class CategoryNode(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    master_label = models.CharField(max_length=40, verbose_name='Name')
    sort_order = models.IntegerField(blank=True, null=True)
    sort_style = models.CharField(max_length=40, verbose_name='Subcategory Sort Style', choices=[('custom', 'Custom Order'), ('alphabetical', 'Alphabetical Order')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynode_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='categorynode_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CategoryNode'
        verbose_name = 'Category Node'
        verbose_name_plural = 'Category Nodes'
        # keyPrefix = '02n'



class ChatterActivity(models.Model):
    parent = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    post_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    comment_received_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_received_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    influence_raw_rank = models.IntegerField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ChatterActivity'
        verbose_name = 'Chatter Activity'
        verbose_name_plural = 'Chatter Activity'
        # keyPrefix = '0ca'



class ChatterExtension(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_protected = models.BooleanField(verbose_name='Protected Component', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='chatterextension_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='chatterextension_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    extension_name = models.CharField(max_length=32, verbose_name='Name')
    type = models.CharField(max_length=255, choices=[('Lightning', None)])
    icon = models.ForeignKey('ContentAsset', models.DO_NOTHING, blank=True, null=True)
    description = models.CharField(max_length=255)
    composition_component_enum_or_id = models.CharField(max_length=255, verbose_name='Lightning Definition Bundle ID', choices=[('adminui:adminTemplate', None), ('aloha_sales_forecasting:forecasting3OrgSettings', None), ('aloha_sales_forecasting:forecasting3TypeSettings', None), ('aloha_sales_forecasting:forecasting3settings', None), ('aloha_sales_opptysplit:multiLineEdit', None), ('aloha_sales_opptysplit:multiLineEditColumn', None), ('aloha_sales_opptysplit:multiLineEditExample', None), ('aloha_sales_opptysplit:multiLineEditItem', None), ('aloha_sales_opptysplit:multiLineEditRecordHeader', None), ('aloha_sales_opptysplit:multiLineEditSection', None), ('aloha_sales_opptysplit:multiLineEditSectionFooter', None), ('aloha_sales_opptysplit:multiLineEditWrapper', None), ('aloha_sales_opptysplit:opportunitySplitTabBody', None), ('aloha_sales_opptysplit:opportunitySplitTabHeader', None), ('aloha_sales_opptysplit:opportunitySplitTabSet', None), ('aloha_sales_opptysplit:opportunitySplitTypeMultiEditSection', None), ('aloha_sales_opptysplit:opportunitySplitsTypeSectionFooter', None), ('aloha_sales_tm2:territory2AsyncHelper', None), ('aloha_sales_tm2:territory2DialogAlert', None), ('aloha_sales_tm2:territory2ModelHeader', None), ('aloha_sales_tm2:territory2Settings', None), ('aloha_sales_tm2:territoryManagement2Enable', None), ('analytics:chart', None), ('analytics:componentError', None), ('analytics:cordaChart', None), ('analytics:csrPopChart', None), ('analytics:embeddedChart', None), ('analytics:embeddedReportChart', None), ('analytics:metric', None), ('analytics:pluginChart', None), ('analytics:reportChart', None), ('analytics:reportMetadata', None), ('analytics:scheduleSelectorBase', None), ('analytics:subscribeDialog', None), ('analytics:subscribeDialogFooter', None), ('analytics:table', None), ('analytics:urogFilterableList', None), ('analyticsHome:analyticsDataProvider', None), ('analyticsHome:analyticsListView', None), ('analyticsHome:analyticsVirtualAction', None), ('analyticsHome:analyticsWritableFolderProvider', None), ('analyticsHome:createNewDashboard', None), ('analyticsHome:createNewReport', None), ('analyticsHome:dashboardListViewColumns', None), ('analyticsHome:deleteFolderErrorDialog', None), ('analyticsHome:deleteFolderErrorDialogFooter', None), ('analyticsHome:deleteShareConfirmationDialog', None), ('analyticsHome:deleteShareConfirmationDialogFooter', None), ('analyticsHome:folderListViewColumns', None), ('analyticsHome:folderNameDialog', None), ('analyticsHome:folderNameDialogFooter', None), ('analyticsHome:folderOutput', None), ('analyticsHome:folderShare', None), ('analyticsHome:folderShareEntityDataProvider', None), ('analyticsHome:folderShareGrid', None), ('analyticsHome:folderShareGridDataProvider', None), ('analyticsHome:folderShareGridEditAccessColumn', None), ('analyticsHome:folderShareGridEntityColumn', None), ('analyticsHome:folderShareGridRemoveShareColumn', None), ('analyticsHome:folderSharePanel', None), ('analyticsHome:folderSharePanelFooter', None), ('analyticsHome:folderShareWhoCanAccess', None), ('analyticsHome:formattedOutputDateTime', None), ('analyticsHome:leftNav', None), ('analyticsHome:leftNavItem', None), ('analyticsHome:mixedEntityListViewColumns', None), ('analyticsHome:mixedEntityName', None), ('analyticsHome:mixedEntitySubscription', None), ('analyticsHome:reportListViewColumns', None), ('analyticsHome:subscribeCondition', None), ('analyticsHome:subscribeConditionSection', None), ('analyticsHome:subscribeConditionsList', None), ('analyticsHome:subscribeEmailOptionsSection', None), ('analyticsHome:subscriptionEditRecipientsDialog', None), ('analyticsHome:subscriptionRecipientsFilterableList', None), ('analyticsHome:subscriptionRecipientsFilterableListDataSource', None), ('analyticsHome:subscriptionRecipientsLookup', None), ('analyticsHome:subscriptionRecipientsLookupDataProvider', None), ('analyticsHome:titleBreadCrumb', None), ('appexUi:appExchangeSetupOverlayOpener', None), ('appexUi:appexchangeOverlay', None), ('appexUi:appexchangeOverlayTest', None), ('appexUi:appexchangeOverlayWrapper', None), ('appexUi:appxBase', None), ('appexUi:bannersSide', None), ('appexUi:base', None), ('appexUi:breadcrumb', None), ('appexUi:carItem', None), ('appexUi:carousel', None), ('appexUi:category', None), ('appexUi:confirmInstallationDetails', None), ('appexUi:contentWrapper', None), ('appexUi:deleteReviewModal', None), ('appexUi:dropdownFilter', None), ('appexUi:editUserProfile', None), ('appexUi:error', None), ('appexUi:filter', None), ('appexUi:filterActionButtons', None), ('appexUi:filterBox', None), ('appexUi:filterTooltip', None), ('appexUi:filterTrigger', None), ('appexUi:footer', None), ('appexUi:footerListingDetail', None), ('appexUi:genericExtraModal', None), ('appexUi:header', None), ('appexUi:history', None), ('appexUi:homeMenu', None), ('appexUi:landingPageTable', None), ('appexUi:landingPageTableSection', None), ('appexUi:landingPageTableSectionTitle', None), ('appexUi:linksList', None), ('appexUi:listingDetail', None), ('appexUi:listingDetailContent', None), ('appexUi:listingDetailContentTest', None), ('appexUi:listingDetailHeader', None), ('appexUi:listingDetailLeftSidePanel', None), ('appexUi:listingDetailLeftSidePanelTest', None), ('appexUi:listingDetailMenu', None), ('appexUi:listingDetailTest', None), ('appexUi:listingDetails', None), ('appexUi:listingDetailsTest', None), ('appexUi:listingInstallContent', None), ('appexUi:listingProvider', None), ('appexUi:listingReviews', None), ('appexUi:listingReviewsContent', None), ('appexUi:logInActions', None), ('appexUi:loginActionsModalHandler', None), ('appexUi:loginActionsModalHandlerTest', None), ('appexUi:loginActionsTest', None), ('appexUi:modalHandler', None), ('appexUi:modalHandlerTest', None), ('appexUi:mostHelpfulReviews', None), ('appexUi:navMenu', None), ('appexUi:pageBodyWrapper', None), ('appexUi:pageBodyWrapperTest', None), ('appexUi:pageHeaderWrapper', None), ('appexUi:popupMessage', None), ('appexUi:rating', None), ('appexUi:reportAbuseModal', None), ('appexUi:restAPI', None), ('appexUi:resultsMeta', None), ('appexUi:review', None), ('appexUi:reviewRating', None), ('appexUi:reviewsList', None), ('appexUi:reviewsModal', None), ('appexUi:richText', None), ('appexUi:searchInput', None), ('appexUi:searchResultText', None), ('appexUi:searchResults', None), ('appexUi:setupTile', None), ('appexUi:sort', None), ('appexUi:storeFilters', None), ('appexUi:storeFiltersTooltip', None), ('appexUi:svg', None), ('appexUi:tabsSearch', None), ('appexUi:template', None), ('appexUi:textAreaWithCounter', None), ('appexUi:tile', None), ('appexUi:tilesList', None), ('appexUi:userInfoReadOnly', None), ('appexUi:userInfoWriteProfile', None), ('assistantFramework:assistantBlock', None), ('assistantFramework:assistantBlockCompressed', None), ('assistantFramework:assistantPage', None), ('assistantFramework:header', None), ('assistantFramework:learningPathCustomStep', None), ('assistantFramework:learningPathList', None), ('assistantFramework:learningPathStepCompressedTemplate', None), ('assistantFramework:learningPathStepTemplate', None), ('assistantFramework:linkWithTooltip', None), ('assistantFramework:navigationComponent', None), ('assistantFramework:pathCompleteBlock', None), ('assistantFramework:pathSummaryBlock', None), ('assistantFramework:relatedContent', None), ('assistantFramework:setupAssistantProgress', None), ('assistantFramework:summaryBlock', None), ('assistantFramework:wizard', None), ('assistantFramework:wizardHeader', None), ('assistantFramework:wizardNavigator', None), ('assistantFramework:wizardStep', None), ('assistantFrameworkModules:addUsersInput', None), ('assistantFrameworkModules:addUsersInputStep', None), ('assistantFrameworkModules:addUsersList', None), ('assistantFrameworkModules:addUsersSuccess', None), ('assistantFrameworkModules:addUsersSuccessStep', None), ('assistantFrameworkModules:addUsersWizard', None), ('assistantFrameworkModules:dataImportContainer', None), ('assistantFrameworkModules:dragDropList', None), ('assistantFrameworkModules:eacConnectStep', None), ('assistantFrameworkModules:eacContactAdmin', None), ('assistantFrameworkModules:eacEnableStep', None), ('assistantFrameworkModules:eacLandingStep', None), ('assistantFrameworkModules:eacReviewTermsStep', None), ('assistantFrameworkModules:eacWizard', None), ('assistantFrameworkModules:inviteUsersInput', None), ('assistantFrameworkModules:inviteUsersInputStep', None), ('assistantFrameworkModules:inviteUsersWizard', None), ('assistantFrameworkModules:listItemMover', None), ('assistantFrameworkModules:opportunityStageAddTemplate', None), ('assistantFrameworkModules:opportunityStageConfigureTemplate', None), ('assistantFrameworkModules:opportunityStagesAdd', None), ('assistantFrameworkModules:opportunityStagesAddStep', None), ('assistantFrameworkModules:opportunityStagesConfigure', None), ('assistantFrameworkModules:opportunityStagesConfigureStep', None), ('assistantFrameworkModules:opportunityStagesReview', None), ('assistantFrameworkModules:opportunityStagesReviewStep', None), ('assistantFrameworkModules:opportunityStagesWizard', None), ('assistantFrameworkModules:resourceDownloadStep', None), ('assistantFrameworkModules:resourceDownloadWizard', None), ('assistantFrameworkModules:videoStep', None), ('assistantFrameworkModules:vidyardVideoWizard', None), ('aura:component', None), ('aura:debug', None), ('aura:embeddedTemplate', None), ('aura:expression', None), ('aura:html', None), ('aura:if', None), ('aura:include', None), ('aura:integrationServiceTemplate', None), ('aura:iteration', None), ('aura:label', None), ('aura:placeholder', None), ('aura:renderIf', None), ('aura:template', None), ('aura:text', None), ('aura:unescapedHtml', None), ('auraStorage:crypto', None), ('auraStorage:fuelGauge', None), ('auraStorage:init', None), ('auradev:blankTemplate', None), ('auradev:testDataProvider', None), ('auradev:testDataProvider2', None), ('auradocs:about', None), ('auradocs:api', None), ('auradocs:apiParam', None), ('auradocs:apiParams', None), ('auradocs:apiSymbol', None), ('auradocs:apiSymbols', None), ('auradocs:apiTopic', None), ('auradocs:codeblock', None), ('auradocs:def', None), ('auradocs:defDependencies', None), ('auradocs:defDescription', None), ('auradocs:defLayout', None), ('auradocs:defLink', None), ('auradocs:defMemberList', None), ('auradocs:defOverview', None), ('auradocs:demoAutocomplete', None), ('auradocs:demoAutocompleteProvider', None), ('auradocs:demoCarousel', None), ('auradocs:demoCss', None), ('auradocs:demoDataProvider', None), ('auradocs:demoDialog', None), ('auradocs:demoEvents', None), ('auradocs:demoForm', None), ('auradocs:demoFriendlyError', None), ('auradocs:demoLabel', None), ('auradocs:demoLabelDyn', None), ('auradocs:demoLangLocale', None), ('auradocs:demoList', None), ('auradocs:demoListTemplate', None), ('auradocs:demoLocale', None), ('auradocs:demoMenu', None), ('auradocs:demoMenuMeta', None), ('auradocs:demoMessage', None), ('auradocs:demoModal', None), ('auradocs:demoPanel', None), ('auradocs:demoScroller', None), ('auradocs:demoSelect', None), ('auradocs:demoSpinner', None), ('auradocs:demoStamp', None), ('auradocs:demoSubmitForm', None), ('auradocs:demoTab', None), ('auradocs:demoTable', None), ('auradocs:demoTodo', None), ('auradocs:demoToolbar', None), ('auradocs:demoTooltip', None), ('auradocs:demoVbox', None), ('auradocs:demoVdatagrid', None), ('auradocs:demos', None), ('auradocs:descriptorLink', None), ('auradocs:docTestRef', None), ('auradocs:doctabs', None), ('auradocs:download', None), ('auradocs:editorPanel', None), ('auradocs:empty', None), ('auradocs:error', None), ('auradocs:helloAttributes', None), ('auradocs:helpPanel', None), ('auradocs:home', None), ('auradocs:htmlTags', None), ('auradocs:htmlTagsTopic', None), ('auradocs:info', None), ('auradocs:nav', None), ('auradocs:navLink', None), ('auradocs:openTopicTree', None), ('auradocs:prefixerTopic', None), ('auradocs:referenceTabTopic', None), ('auradocs:referenceTopicLink', None), ('auradocs:referenceTree', None), ('auradocs:referenceTreeSection', None), ('auradocs:sampleUnescape', None), ('auradocs:searchFilterTree', None), ('auradocs:sidebar', None), ('auradocs:simpledragdrop', None), ('auradocs:spinnerTopic', None), ('auradocs:stretchEditorPanel', None), ('auradocs:stretchTab', None), ('auradocs:tableDemo', None), ('auradocs:template', None), ('auradocs:topic', None), ('auradocs:topicExample', None), ('auradocs:topicLink', None), ('auradocs:topicList', None), ('auradocs:topicPanel', None), ('auradocs:topics', None), ('auradocs:warning', None), ('auradocs:welcomeTopic', None), ('aurajstest:jstestCase', None), ('auraplat:defSource', None), ('auraplat:lockerServiceSetup', None), ('b2b_buyer_builder:cartContents', None), ('b2b_buyer_builder:cartSummary', None), ('b2b_buyer_builder:cartSummaryDesignInfo', None), ('b2b_buyer_builder:cartThemeHeaderButtonIcon', None), ('b2b_buyer_builder:categoryBreadcrumbs', None), ('b2b_buyer_builder:categoryBreadcrumbsDesignInfo', None), ('b2b_buyer_builder:checkoutButtonWrapper', None), ('b2b_buyer_builder:productDescription', None), ('b2b_buyer_builder:productDescriptionDesignInfo', None), ('b2b_buyer_builder:productDetailsSummary', None), ('b2b_buyer_builder:productDetailsSummaryDesignInfo', None), ('b2b_buyer_builder:quickOrderPage', None), ('b2b_buyer_data:cartService', None), ('b2b_buyer_data:productCategoryService', None), ('b2b_buyer_data:productDetailsService', None), ('b2b_buyer_data:productSearchService', None), ('b2b_search_builder:resultsDisplay', None), ('b2b_search_builder:searchInput', None), ('builder_communities_nba:editorPanelProxy', None), ('builder_communities_nba:nbaWidgetDesignInfo', None), ('builder_communities_nba:runPanel', None), ('builder_communities_nba:serverDataLibInit', None), ('builder_communities_nba:strategyBuilderBody', None), ('builder_communities_nba:strategyBuilderTemplate', None), ('builder_industries_healthcare:careDeterminants', None), ('builder_industries_healthcare:careProgramsCommunity', None), ('builder_industries_insurance:fscMultiTbl', None), ('builder_industries_insurance:fscSinglTbl', None), ('builder_industries_insurance:keyHomeMetrices', None), ('builder_industries_insurance:lifeEvents', None), ('builder_industries_insurance:outlookperformance', None), ('builder_industries_insurance:policy360', None), ('builder_industries_survey:deleteSurvey', None), ('builder_industries_survey:surveySetup', None), ('builder_industries_utilizationmanagement:careRequestDetails', None), ('builder_industries_utilizationmanagement:createCareRequest', None), ('builder_industries_utilizationmanagement:createCareRequestCommunity', None), ('builder_platform_blockchain:blockchainManager', None), ('builder_platform_blockchain:serverLibWrapper', None), ('builder_platform_interaction:container', None), ('builder_platform_interaction:flowBuilderTemplate', None), ('builder_platform_interaction:panelManagerWrapper', None), ('builder_platform_interaction:propertyEditor', None), ('builder_platform_interaction:propertyEditorFooter', None), ('builder_platform_interaction:propertyEditorHeader', None), ('builder_platform_interaction:serverDataLibInit', None), ('builder_platform_process:test', None), ('builder_service_chatbots:analyticsState', None), ('builder_service_chatbots:appHeader', None), ('builder_service_chatbots:appNavigation', None), ('builder_service_chatbots:avatarMessage', None), ('builder_service_chatbots:baseTemplate', None), ('builder_service_chatbots:botDomainsListCard', None), ('builder_service_chatbots:botGlobalSettings', None), ('builder_service_chatbots:botList', None), ('builder_service_chatbots:botListItem', None), ('builder_service_chatbots:botLogFilter', None), ('builder_service_chatbots:botLogList', None), ('builder_service_chatbots:botLogPanel', None), ('builder_service_chatbots:botOptionsMenuModal', None), ('builder_service_chatbots:botOverview', None), ('builder_service_chatbots:botPerformance', None), ('builder_service_chatbots:botReviewTerms', None), ('builder_service_chatbots:botReviewTermsFlow', None), ('builder_service_chatbots:botSessionFilter', None), ('builder_service_chatbots:botSessionList', None), ('builder_service_chatbots:botSetup', None), ('builder_service_chatbots:botSetupWizard', None), ('builder_service_chatbots:botSetupWizardAstro', None), ('builder_service_chatbots:botSetupWizardComplete', None), ('builder_service_chatbots:botSetupWizardDetails', None), ('builder_service_chatbots:botSetupWizardGreeting', None), ('builder_service_chatbots:botSetupWizardMainMenu', None), ('builder_service_chatbots:botSetupWizardWelcome', None), ('builder_service_chatbots:botState', None), ('builder_service_chatbots:botVersionListItem', None), ('builder_service_chatbots:botVersionSettings', None), ('builder_service_chatbots:builderCanvas', None), ('builder_service_chatbots:builderHeader', None), ('builder_service_chatbots:builderNav', None), ('builder_service_chatbots:builderPage', None), ('builder_service_chatbots:buttonSpin', None), ('builder_service_chatbots:channelProviders', None), ('builder_service_chatbots:combobox', None), ('builder_service_chatbots:confirmModal', None), ('builder_service_chatbots:createChannelProviderModal', None), ('builder_service_chatbots:createDialogGroupModal', None), ('builder_service_chatbots:createDialogModal', None), ('builder_service_chatbots:createSlotClassModal', None), ('builder_service_chatbots:createVariableModal', None), ('builder_service_chatbots:dialogBuilder', None), ('builder_service_chatbots:dialogCanvas', None), ('builder_service_chatbots:dialogDetail', None), ('builder_service_chatbots:dialogElement', None), ('builder_service_chatbots:dialogIntent', None), ('builder_service_chatbots:dialogMap', None), ('builder_service_chatbots:dialogMapConnector', None), ('builder_service_chatbots:dialogMapNode', None), ('builder_service_chatbots:dialogMapNodePopover', None), ('builder_service_chatbots:dialogMapZoomPanel', None), ('builder_service_chatbots:dialogState', None), ('builder_service_chatbots:domainState', None), ('builder_service_chatbots:editDialogGroupModal', None), ('builder_service_chatbots:editDialogModal', None), ('builder_service_chatbots:element', None), ('builder_service_chatbots:elementCollectInfoQuickReply', None), ('builder_service_chatbots:elementCollectVariableInfo', None), ('builder_service_chatbots:elementMenu', None), ('builder_service_chatbots:elementMenuItem', None), ('builder_service_chatbots:elementMessage', None), ('builder_service_chatbots:elementRoute', None), ('builder_service_chatbots:elementRules', None), ('builder_service_chatbots:elementScript', None), ('builder_service_chatbots:errorModal', None), ('builder_service_chatbots:errorPopover', None), ('builder_service_chatbots:filter', None), ('builder_service_chatbots:intentCanvas', None), ('builder_service_chatbots:intentConflicts', None), ('builder_service_chatbots:intentExtensionList', None), ('builder_service_chatbots:intentExtensionListItem', None), ('builder_service_chatbots:intentExtensionsCard', None), ('builder_service_chatbots:intentState', None), ('builder_service_chatbots:intentStateIcon', None), ('builder_service_chatbots:intentTraining', None), ('builder_service_chatbots:intentTrainingGame', None), ('builder_service_chatbots:intentTrainingList', None), ('builder_service_chatbots:intentTrainingReassignModal', None), ('builder_service_chatbots:intentTrainingSetCompleteModal', None), ('builder_service_chatbots:iteration', None), ('builder_service_chatbots:logCustomerDataEditModal', None), ('builder_service_chatbots:metrics', None), ('builder_service_chatbots:modal', None), ('builder_service_chatbots:modelState', None), ('builder_service_chatbots:nluDashboard', None), ('builder_service_chatbots:nluDashboardDataManager', None), ('builder_service_chatbots:nluDashboardIntentDetails', None), ('builder_service_chatbots:nluDashboardIntentDetailsAccuracy', None), ('builder_service_chatbots:nluDashboardIntentDetailsTopConflicts', None), ('builder_service_chatbots:nluDashboardIntentSummary', None), ('builder_service_chatbots:nluDashboardListView', None), ('builder_service_chatbots:nluDashboardSummary', None), ('builder_service_chatbots:nluDashboardTile', None), ('builder_service_chatbots:nluDashboardTilesView', None), ('builder_service_chatbots:nluIntentExtensions', None), ('builder_service_chatbots:nluIntentUtterances', None), ('builder_service_chatbots:nluModelManagement', None), ('builder_service_chatbots:nluTestInput', None), ('builder_service_chatbots:nluWarningsPopover', None), ('builder_service_chatbots:previewPanel', None), ('builder_service_chatbots:progressBar', None), ('builder_service_chatbots:router', None), ('builder_service_chatbots:routerState', None), ('builder_service_chatbots:routerUrlManager', None), ('builder_service_chatbots:scoreDial', None), ('builder_service_chatbots:selectChannelDeployment', None), ('builder_service_chatbots:selectDialog', None), ('builder_service_chatbots:selectIntent', None), ('builder_service_chatbots:selectInvocableAction', None), ('builder_service_chatbots:selectOrgUser', None), ('builder_service_chatbots:selectRecord', None), ('builder_service_chatbots:selectSlotClass', None), ('builder_service_chatbots:selectVariable', None), ('builder_service_chatbots:setupState', None), ('builder_service_chatbots:slotClassCanvas', None), ('builder_service_chatbots:slotClassList', None), ('builder_service_chatbots:slotClassRecord', None), ('builder_service_chatbots:slotClassRecords', None), ('builder_service_chatbots:slotClassRecordsHeader', None), ('builder_service_chatbots:slotClassValueList', None), ('builder_service_chatbots:stateManager', None), ('builder_service_chatbots:store', None), ('builder_service_chatbots:template', None), ('builder_service_chatbots:tooltip', None), ('builder_service_chatbots:updateBotModal', None), ('builder_service_chatbots:utterancesCard', None), ('builder_service_chatbots:variableRecords', None), ('calendar:attendee', None), ('calendar:attendeeComposer', None), ('calendar:attendeeComposerWrapper', None), ('calendar:attendees', None), ('calendar:calendarColorMenuItem', None), ('calendar:calendarShareConfirmationModalBody', None), ('calendar:calendarShareDataProvider', None), ('calendar:calendarShareGrid', None), ('calendar:calendarShareGridAccessLevelColumn', None), ('calendar:calendarShareGridRemoveColumn', None), ('calendar:calendarShareGridTitleColumn', None), ('calendar:calendarTextureBox', None), ('calendar:createCalendarModal', None), ('calendar:createCalendarModalHeader', None), ('calendar:createCalendarWizardStep1', None), ('calendar:createCalendarWizardStep2', None), ('calendar:customColor', None), ('calendar:deleteEventSeriesModal', None), ('calendar:deleteModal', None), ('calendar:discoveryModal', None), ('calendar:home', None), ('calendar:listItem', None), ('calendar:listPanel', None), ('calendar:pillContainer', None), ('calendar:resourceAttendeeDataProvider', None), ('calendar:sfdcCalendarDataProvider', None), ('calendar:shareModal', None), ('calendar:sharedEventDetailPage', None), ('calendar:sharedEventDetailStencil', None), ('calendar:sidebar', None), ('calendar:updateCalendarModal', None), ('chatbots:movable', None), ('chatbots:movableContainer', None), ('chatbots:treeGrid', None), ('chatbots:treeGridColumn', None), ('chatbots:treeGridRow', None), ('clients:accountInsightsContainer', None), ('clients:actionContainer', None), ('clients:activateMailAppPage', None), ('clients:activitySyncEngine', None), ('clients:activitySyncEngineSelectUsers', None), ('clients:activitySyncEngineSetupRow', None), ('clients:associationContext', None), ('clients:associationSelectionManager', None), ('clients:attachment', None), ('clients:attachmentsCard', None), ('clients:attachmentsDataProvider', None), ('clients:attachmentsDataProviderComposeMode', None), ('clients:attachmentsManager', None), ('clients:authEpt', None), ('clients:autoFocusForceSearchInputDesktop', None), ('clients:bustOutButton', None), ('clients:cardMetrics', None), ('clients:clientServices', None), ('clients:defaultMailAppTemplate', None), ('clients:detailedErrorModal', None), ('clients:duplicatePersonCardStencil', None), ('clients:einsteinInline', None), ('clients:einsteinInsightsButton', None), ('clients:emailContextComponentDecorator', None), ('clients:emailTemplateHover', None), ('clients:emailTemplateList', None), ('clients:emailTemplateRow', None), ('clients:emailTemplatesActionContainerFlex', None), ('clients:emailTemplatesContainer', None), ('clients:emailTemplatesDataManager', None), ('clients:emailTemplatesDesignInfo', None), ('clients:emailToSalesforceSettings', None), ('clients:exchangeUserMappingList', None), ('clients:exchangeUserMappingListDataProvider', None), ('clients:exchangeUserMappingSettings', None), ('clients:header', None), ('clients:hidingListRecordItem', None), ('clients:highlightsStencil', None), ('clients:homeCard', None), ('clients:hvsManager', None), ('clients:insightAggregator', None), ('clients:inviteeAddRowStencil', None), ('clients:inviteeListRowStencil', None), ('clients:labelWithLink', None), ('clients:leadScoreInline', None), ('clients:mailAppAndS2XPreferenceToggle', None), ('clients:mailAppCommonSettings', None), ('clients:mailAppFlexiPageList', None), ('clients:mailAppFlexiPageListDataProvider', None), ('clients:mailAppFlexiPageSettings', None), ('clients:mailAppGmailAndS2XGoogleSettings', None), ('clients:mailAppGmailSettings', None), ('clients:mailAppLightningPageDataProvider', None), ('clients:mailAppOutlookAndS2XExchangeSettings', None), ('clients:mailAppOutlookSettings', None), ('clients:mailAppSettingsSection', None), ('clients:mailAppSettingsSubsection', None), ('clients:matchingManager', None), ('clients:msMailContainerFlex', None), ('clients:msMailFooter', None), ('clients:opportunityInsightsContainer', None), ('clients:opportunityScoreInline', None), ('clients:opportunityTopInsightInline', None), ('clients:outlookDiagnosticTool', None), ('clients:outlookPublisherLayoutTable', None), ('clients:outlookPublisherLayoutTableDataProvider', None), ('clients:outputEmail', None), ('clients:owaWhitelistDataProvider', None), ('clients:owaWhitelistDisplay', None), ('clients:owaWhitelistEditor', None), ('clients:owaWhitelistSettings', None), ('clients:pageActionMenu', None), ('clients:pageAssignmentByProfileReviewStep', None), ('clients:pageAssignmentDefaultAssignmentReviewStep', None), ('clients:pageAssignmentPickerStep', None), ('clients:pageAssignmentProfilePickerStep', None), ('clients:pageAssignmentReviewStepDataProvider', None), ('clients:pageAssignmentSetDefaultOrAssignStep', None), ('clients:pardotEngageContainer', None), ('clients:pardotEngagePersonSelector', None), ('clients:pardotEngageToggle', None), ('clients:peopleCardContainerFlex', None), ('clients:peopleCardContainerFlexDesignInfo', None), ('clients:peopleCardDesignSubstitute', None), ('clients:peopleDupeRadio', None), ('clients:peopleDuplicateButton', None), ('clients:peopleDuplicateList', None), ('clients:peopleListCard', None), ('clients:peopleListDataManager', None), ('clients:peopleListDesignDataManager', None), ('clients:peopleListing', None), ('clients:permanentlyDismissableDialog', None), ('clients:pre', None), ('clients:profilePageAssignment', None), ('clients:profilePageAssignmentDataProvider', None), ('clients:progressBar', None), ('clients:publisherLayoutSettings', None), ('clients:quickActionHeader', None), ('clients:quickActionLayout', None), ('clients:quickActionsLoader', None), ('clients:quickCreateButton', None), ('clients:quickCreateMenuItem', None), ('clients:recipientList', None), ('clients:recordDetail', None), ('clients:recordLayoutLoader', None), ('clients:recordList', None), ('clients:recordListing', None), ('clients:relatedCustomEntity', None), ('clients:relatedCustomEntityDesignInfo', None), ('clients:relatedCustomEntitySubstitute', None), ('clients:relatedRecordCollectionDataManager', None), ('clients:relatedRecordCollectionDesignDataManager', None), ('clients:relatedRecordEntityDesignInfo', None), ('clients:relatedRecordListCard', None), ('clients:relatedRecordListCardStencil', None), ('clients:relatedRecordStencilBase', None), ('clients:relatedRecordsPageDesignSubstitute', None), ('clients:relatedRecordsPageFlex', None), ('clients:relatedToLabelManager', None), ('clients:s2xCredentialFlowStepContainer', None), ('clients:s2xCredentialFlowStepIcon', None), ('clients:s2xCredentialsFlow', None), ('clients:s2xCredentialsTestUser', None), ('clients:s2xExchangeOAuthCredentials', None), ('clients:s2xExchangeServiceAccountCredentials', None), ('clients:s2xExchangeSettings', None), ('clients:s2xGoogleOAuthCredentials', None), ('clients:s2xGoogleSettings', None), ('clients:s2xServerTypeChangeModal', None), ('clients:s2xStatusSettings', None), ('clients:saveEmailTemplateContainer', None), ('clients:searchButton', None), ('clients:searchStencil', None), ('clients:selectiveAttachments', None), ('clients:sfoEndOfSale', None), ('clients:sidepanelAppDependenciesTemplate', None), ('clients:speedtest', None), ('clients:styledOutAppContainer', None), ('clients:styledOutAppTemplate', None), ('clients:tab', None), ('clients:tabset', None), ('clients:tabsetDesignInfo', None), ('clients:tasksActionContainerFlex', None), ('clients:tasksCardContainerFlex', None), ('clients:tasksContainerFlexDesignInfo', None), ('clients:tasksListFilter', None), ('clients:tasksListViewAll', None), ('clients:template', None), ('clients:unactionableRelatedRecordStencil', None), ('clients:userFeedbackManager', None), ('clients:userProfileCard', None), ('clients:virtualAction', None), ('clients:workQueueWidget', None), ('clients:workQueueWidgetDesignInfo', None), ('cmsAuthor:addPublishTargets', None), ('cmsAuthor:cmsAuthorApp', None), ('cmsAuthor:cmsAuthorHome', None), ('cmsAuthor:cmsAuthorSpace', None), ('cmsAuthor:cmsRichEditorCreateLinkPanel', None), ('cmsAuthor:cmsRichEditorCreateVideoPanel', None), ('cmsAuthor:cmsRichEditorHeaderSelect', None), ('cmsAuthor:cmsRichEditorLinkButton', None), ('cmsAuthor:cmsRichEditorVideoButton', None), ('cmsAuthor:collaborators', None), ('cmsAuthor:content', None), ('cmsAuthor:contentSpaceCreateForm', None), ('cmsAuthor:contentSpaceCreateWizard', None), ('cmsAuthor:contentSpaceForm', None), ('cmsAuthor:contentSpaceSummary', None), ('cmsAuthor:imageUploadWithPreview', None), ('cmsAuthor:managePublishTargets', None), ('cmsAuthor:managePublishTargetsDataProvider', None), ('cmsAuthor:managedContentEmptyState', None), ('cmsAuthor:managedContentForm', None), ('cmsAuthor:managedContentItemHeader', None), ('cmsAuthor:managedContentList', None), ('cmsAuthor:managedContentPage', None), ('cmsAuthor:managedContentVersionList', None), ('cmsAuthor:mcontentNavigationCMC', None), ('cmsAuthor:mcontentNavigationLEX', None), ('cmsAuthor:mcontentPermissionsProvider', None), ('cmsAuthor:publishingTargets', None), ('cmsAuthor:tabItem', None), ('commerce:orderItemDataProvider', None), ('commerce:orderItemMultiLineEdit', None), ('commerce:orderItemMultiLineEditWrapper', None), ('commerce_catalog:enrichmentFileInfo', None), ('commerce_catalog:enrichmentFileMetadataWrapper', None), ('commerce_catalog:enrichmentFileOrder', None), ('commerce_catalog:enrichmentFilePicker', None), ('commerce_catalog:enrichmentFilePreview', None), ('commerce_catalog:enrichmentFileProperties', None), ('commerce_catalog:enrichmentGallery', None), ('commerce_catalog:massAddProductsToCategory', None), ('commerce_catalog:productEnrichment', None), ('commerce_console:outputBooleanBadge', None), ('commerce_console:webStoreTileNavigation', None), ('communitySetup:actionMenuCMSConnection', None), ('communitySetup:addArticlesDialog', None), ('communitySetup:appLauncherManager', None), ('communitySetup:arsrSetupPage', None), ('communitySetup:arsrSetupPageLightning', None), ('communitySetup:articleCategoryFilterMenu', None), ('communitySetup:articleGroupFilterMenu', None), ('communitySetup:articleManagement', None), ('communitySetup:articleManagementRow', None), ('communitySetup:assistantCustomStep', None), ('communitySetup:assistantHelpAndTrailhead', None), ('communitySetup:assistantPage', None), ('communitySetup:assistantSubStepLink', None), ('communitySetup:audienceCriteriaAutoComplete', None), ('communitySetup:audienceCriteriaDataProvider', None), ('communitySetup:audienceCriteriaExpressionRow', None), ('communitySetup:audienceCriteriaFieldTraversal', None), ('communitySetup:audienceCriteriaGeoLocation', None), ('communitySetup:audienceCriteriaSection', None), ('communitySetup:audienceCustomEditor', None), ('communitySetup:audienceDeleteAction', None), ('communitySetup:audienceEditor', None), ('communitySetup:audienceSelector', None), ('communitySetup:audienceSummary', None), ('communitySetup:authorDetailCard', None), ('communitySetup:authorFeedInfo', None), ('communitySetup:authorList', None), ('communitySetup:authorModerationInfoIcon', None), ('communitySetup:badgeAccessListEditor', None), ('communitySetup:badgeAccessListItem', None), ('communitySetup:badgeAccessListItemContainer', None), ('communitySetup:badgeImageUpload', None), ('communitySetup:badgeTypeCheckBox', None), ('communitySetup:badgeUserRelatedListRecord', None), ('communitySetup:badgesList', None), ('communitySetup:baseCMCComponent', None), ('communitySetup:baseRecommendationRow', None), ('communitySetup:baseRecommendationRowEditMode', None), ('communitySetup:baseRecommendationRowViewMode', None), ('communitySetup:baseRecommendationSetup', None), ('communitySetup:baseTopicRow', None), ('communitySetup:baseTopics', None), ('communitySetup:cbBackgroundImageEditor', None), ('communitySetup:cbBackgroundImagePositionDataProvider', None), ('communitySetup:cbBackgroundImageSizeOrRepeatDataProvider', None), ('communitySetup:cbColorEditor', None), ('communitySetup:cbCreateRecordEditor', None), ('communitySetup:cbHtmlContentEditor', None), ('communitySetup:cbIntegerSlider', None), ('communitySetup:cbOmniboxTypeaheadEditor', None), ('communitySetup:cbRichTextEditor', None), ('communitySetup:cbRichTextPicker', None), ('communitySetup:cbSearchResultsEditor', None), ('communitySetup:cbSelectComponentEditor', None), ('communitySetup:cbTabsetEditor', None), ('communitySetup:cbTabsetEditorItemEditor', None), ('communitySetup:cbTopArticleListEditor', None), ('communitySetup:cbUserProfileBannerEditor', None), ('communitySetup:cmcAppLayoutContainer', None), ('communitySetup:cmcButton', None), ('communitySetup:cmcErrorPage', None), ('communitySetup:cmcHeader', None), ('communitySetup:cmcHelpCenterUpgrade', None), ('communitySetup:cmcHelpLinkSection', None), ('communitySetup:cmcHelpLinks', None), ('communitySetup:cmcHelpMenu', None), ('communitySetup:cmcHome', None), ('communitySetup:cmcHomeHeader', None), ('communitySetup:cmcHubMenu', None), ('communitySetup:cmcHubMenuItem', None), ('communitySetup:cmcListButton', None), ('communitySetup:cmcNodeItem', None), ('communitySetup:cmcPageLayout', None), ('communitySetup:cmcProfileMenu', None), ('communitySetup:cmcQuickLinks', None), ('communitySetup:cmcReleaseNotes', None), ('communitySetup:cmcStyledList', None), ('communitySetup:cmcTemplate', None), ('communitySetup:cmcTrailhead', None), ('communitySetup:cmcWelcomePanel', None), ('communitySetup:cmcWelcomePanelWrapper', None), ('communitySetup:cmcWhatsNew', None), ('communitySetup:cmcWorkspaceChangeHandler', None), ('communitySetup:cmcWorkspaceLauncher', None), ('communitySetup:cmcWorkspaceTabs', None), ('communitySetup:cmcWorkspaceTile', None), ('communitySetup:cmsConnectEditor', None), ('communitySetup:cmsConnectScriptRow', None), ('communitySetup:cmsContentEditor', None), ('communitySetup:cmsContentEditorSection', None), ('communitySetup:cmsContentLayoutDesignAttribute', None), ('communitySetup:cmsContentLinkEditor', None), ('communitySetup:cmsContentParamRow', None), ('communitySetup:cmsJSONResourceDefintion', None), ('communitySetup:cmsJSONResourceTypes', None), ('communitySetup:cmsJSONSection', None), ('communitySetup:collaboratorsChangeRoleModal', None), ('communitySetup:collaboratorsListView', None), ('communitySetup:collaboratorsManager', None), ('communitySetup:collaboratorsSetupAddMembers', None), ('communitySetup:collaboratorsSetupDataProvider', None), ('communitySetup:collaboratorsSetupMultiSelectTable', None), ('communitySetup:collaboratorsSetupSelectRoles', None), ('communitySetup:collaboratorsSetupWizard', None), ('communitySetup:collapsibleSection', None), ('communitySetup:colorPicker', None), ('communitySetup:communityWorkspaceBanner', None), ('communitySetup:communityWorkspaceCollaboratorsManager', None), ('communitySetup:compoundFieldBadgeGivenBy', None), ('communitySetup:compoundFieldBadgeImageUrl', None), ('communitySetup:compoundFieldBadgeMessage', None), ('communitySetup:compoundFieldBadgeName', None), ('communitySetup:compoundFieldTimeAgo', None), ('communitySetup:compoundFieldsBadgeLastModifiedBy', None), ('communitySetup:compoundFieldsBadgeName', None), ('communitySetup:createCustomBadge', None), ('communitySetup:createMission', None), ('communitySetup:createRecordEditorItem', None), ('communitySetup:createRecordEditorItemEditor', None), ('communitySetup:crmContentHome', None), ('communitySetup:customBadgeAction', None), ('communitySetup:customMissionAction', None), ('communitySetup:customRecommendationDataProvider', None), ('communitySetup:customRecommendationRow', None), ('communitySetup:customRecommendationRowEditMode', None), ('communitySetup:customRecommendationRowViewMode', None), ('communitySetup:customRecommendationSetup', None), ('communitySetup:customRecommendationUploadFileButton', None), ('communitySetup:customTopicAction', None), ('communitySetup:cwBulkApprove', None), ('communitySetup:cwBulkDelete', None), ('communitySetup:cwBulkFlag', None), ('communitySetup:cwBulkFreezeUnfreeze', None), ('communitySetup:cwBulkPost', None), ('communitySetup:cwBulkUnflag', None), ('communitySetup:cwFlaggers', None), ('communitySetup:cwInsightActionsContainer', None), ('communitySetup:cwInsightQActionsManager', None), ('communitySetup:cwInsightQGrid', None), ('communitySetup:cwInsightQHeader', None), ('communitySetup:cwInsightQueue', None), ('communitySetup:cwModerationHomeMetrics', None), ('communitySetup:cwQContainer', None), ('communitySetup:cwReportDataProvider', None), ('communitySetup:cwSpinner', None), ('communitySetup:cwVFAction', None), ('communitySetup:cwVirtualActionColumn', None), ('communitySetup:cwVirtualColumn', None), ('communitySetup:cwVirtualSelectionColumn', None), ('communitySetup:dataCategoriesListDataProvider', None), ('communitySetup:dataCategoryListRow', None), ('communitySetup:deleteCommunityBadge', None), ('communitySetup:deleteMission', None), ('communitySetup:dynamicCollectionEditor', None), ('communitySetup:enableTopicsForContent', None), ('communitySetup:engagementHomeSettings', None), ('communitySetup:errorMessage', None), ('communitySetup:extensionOverview', None), ('communitySetup:extensionTile', None), ('communitySetup:extensionsHome', None), ('communitySetup:extensionsHomeFeatureTiles', None), ('communitySetup:featureCMCPopover', None), ('communitySetup:featuredTopicRow', None), ('communitySetup:featuredTopics', None), ('communitySetup:filterMenu', None), ('communitySetup:flagQueue', None), ('communitySetup:flagReasonHolder', None), ('communitySetup:inputRadioGroup', None), ('communitySetup:inputSelectWrapper', None), ('communitySetup:installConfirmation', None), ('communitySetup:installPackage', None), ('communitySetup:installSetupPackage', None), ('communitySetup:listCMSConnection', None), ('communitySetup:localeMappingEditor', None), ('communitySetup:locationPicker', None), ('communitySetup:locationPill', None), ('communitySetup:lsfMilestoneSelectContentSource', None), ('communitySetup:manageCMSConnection', None), ('communitySetup:managedContentBindingEditor', None), ('communitySetup:managedContentBlockPropertyEditor', None), ('communitySetup:managedContentCollectionDataProviderEditor', None), ('communitySetup:managedContentCollectionDetail', None), ('communitySetup:managedContentCollectionItemLayoutPropertyEditor', None), ('communitySetup:managedContentCollectionLayoutPropertyEditor', None), ('communitySetup:managedContentCollectionPicker', None), ('communitySetup:managedContentCollectionsCMSEditModal', None), ('communitySetup:managedContentCollectionsDeleteDialog', None), ('communitySetup:managedContentCollectionsHome', None), ('communitySetup:managedContentCollectionsList', None), ('communitySetup:managedContentDetailPropertyEditor', None), ('communitySetup:managedContentHome', None), ('communitySetup:managedContentItemCreatePage', None), ('communitySetup:managedContentItemVersionPage', None), ('communitySetup:managedContentItemsPicker', None), ('communitySetup:managedContentItemsPropertiesEditor', None), ('communitySetup:managedContentLayoutPropertyEditor', None), ('communitySetup:managedContentLayoutVisualPicker', None), ('communitySetup:managedContentMultiSelectTable', None), ('communitySetup:managedContentPicker', None), ('communitySetup:managedContentPropertiesPanelSection', None), ('communitySetup:managedContentQueryCriteria', None), ('communitySetup:managedContentQueryCriteriaList', None), ('communitySetup:managedContentQueryCriteriaListRow', None), ('communitySetup:managedContentQueryCriteriaWrapper', None), ('communitySetup:managedContentTopics', None), ('communitySetup:managedContentTypeList', None), ('communitySetup:managedContentTypeListDataProvider', None), ('communitySetup:managedContentTypeWhitelist', None), ('communitySetup:managedTopicsDataProvider', None), ('communitySetup:mcfManualCollectionDataProvider', None), ('communitySetup:mcfSetupCreateContentCollection', None), ('communitySetup:mcfSetupCreateManualCollection', None), ('communitySetup:mcfSetupEditCRMListView', None), ('communitySetup:mcfSetupEditManualCollection', None), ('communitySetup:mcfSetupSelectCRMListView', None), ('communitySetup:mcfSetupSelectCollectionType', None), ('communitySetup:mcfSetupSelectContentSource', None), ('communitySetup:mcfSetupVisualPicker', None), ('communitySetup:mcfSetupWizard', None), ('communitySetup:mergeTopicDialog', None), ('communitySetup:missionsList', None), ('communitySetup:moderationAppReportMetrics', None), ('communitySetup:moderationFeedItemDetail', None), ('communitySetup:moderationQueueFeedComment', None), ('communitySetup:moderationQueueFeedItem', None), ('communitySetup:moderationQueueFeedItemFooter', None), ('communitySetup:moderationQueueFeedItemHeader', None), ('communitySetup:moderationQueueFeedIterationElement', None), ('communitySetup:navigationBarCustomEditor', None), ('communitySetup:navigationBarEditorItem', None), ('communitySetup:navigationBarEditorItemPlaceholder', None), ('communitySetup:navigationBarEditorPropertiesPanel', None), ('communitySetup:navigationBarEditorPropertiesPanelV2', None), ('communitySetup:navigationMenuEditor', None), ('communitySetup:navigationMenuEditorDataProvider', None), ('communitySetup:navigationalTopicRow', None), ('communitySetup:navigationalTopics', None), ('communitySetup:navigationalTopicsPickList', None), ('communitySetup:nestedComponentPropertyPanel', None), ('communitySetup:networkDashboardWrapper', None), ('communitySetup:networkWorkspaceMetricDefaultPage', None), ('communitySetup:networkWorkspaceMetricEditorItem', None), ('communitySetup:networkWorkspaceMetricPropertiesPanel', None), ('communitySetup:networkWorkspaceMetricSetupEditor', None), ('communitySetup:networksWorkspaceErrorInfo', None), ('communitySetup:networksWorkspaceMetricsHolder', None), ('communitySetup:networksWorkspaceMetricsInstallPackage', None), ('communitySetup:networksWorkspaceMetricsTile', None), ('communitySetup:newTopicDialog', None), ('communitySetup:pageAssignmentAudienceSummary', None), ('communitySetup:pencilButton', None), ('communitySetup:pillContainerAutoComplete', None), ('communitySetup:placeholderForTable', None), ('communitySetup:quillButtonWithPanel', None), ('communitySetup:quillPanel', None), ('communitySetup:recommendationAudienceDataProvider', None), ('communitySetup:recommendationAudienceRow', None), ('communitySetup:recommendationAudienceRowEditMode', None), ('communitySetup:recommendationAudienceRowViewMode', None), ('communitySetup:recommendationAudienceSetup', None), ('communitySetup:recommendationPreview', None), ('communitySetup:reorderArrows', None), ('communitySetup:resourceDefinitionEditor', None), ('communitySetup:searchResultsEditorItemEditor', None), ('communitySetup:secondaryNav', None), ('communitySetup:sectionHeaderCMSConnection', None), ('communitySetup:sentiments', None), ('communitySetup:setupFeedback', None), ('communitySetup:summaryBlock', None), ('communitySetup:taskSummaryErrorHandler', None), ('communitySetup:taskSummaryHolder', None), ('communitySetup:thanksButton', None), ('communitySetup:topicAssignmentRules', None), ('communitySetup:topicImageUpload', None), ('communitySetup:topicListView', None), ('communitySetup:topicRow', None), ('communitySetup:topics', None), ('communitySetup:topicsDataProvider', None), ('communitySetup:unearnedBadgeListRecord', None), ('communitySetup:userRecognitionBadgeItem', None), ('communitySetup:userRecognitionList', None), ('communitySetup:vFActionComponent', None), ('communitySetup:viewReportWrapper', None), ('componentReference:baseLayoutContainer', None), ('componentReference:bundle', None), ('componentReference:dataProvider', None), ('componentReference:defTypesByName', None), ('componentReference:dscFooter', None), ('componentReference:dscHeader', None), ('componentReference:examples', None), ('componentReference:highlightComponent', None), ('componentReference:iconGenerator', None), ('componentReference:iconItem', None), ('componentReference:iconLibrary', None), ('componentReference:iconList', None), ('componentReference:offCoreTemplate', None), ('componentReference:quickFindFilter', None), ('componentReference:sidebar', None), ('componentReference:summaryDetail', None), ('componentReference:template', None), ('componentReference:tree', None), ('componentReference:treeBranch', None), ('componentReference:treeItem', None), ('console:bookmarkEntry', None), ('console:community360FilterMenu', None), ('console:componentManager', None), ('console:embeddedReportChart', None), ('console:history', None), ('console:lastViewedInCommunity', None), ('console:lastViewedInCommunityDataProvider', None), ('console:lastViewedInCommunityItem', None), ('console:lastViewedInCommunityWrapper', None), ('console:mruEntry', None), ('console:mruEntryMenuTrigger', None), ('console:mruSubEntry', None), ('console:mruWidget', None), ('console:relatedRecord', None), ('console:relatedRecordCompact', None), ('console:relatedRecordDescriptionDesignInfo', None), ('console:relatedRecordDesignInfo', None), ('console:tabIcon', None), ('cooper:companyInsight', None), ('cooper:companyInsightCompetitors', None), ('cooper:companyInsightContacts', None), ('cooper:companyInsightFinancialDetails', None), ('cooper:companyInsightFullAddress', None), ('cooper:companyInsightHighlight', None), ('cooper:companyInsightIndustries', None), ('cooper:companyInsightRevenue', None), ('cooper:companyInsightSubcomponent', None), ('cooper:companyInsightSummary', None), ('cooper:companyInsightSummaryText', None), ('cooper:companyInsightTeaser', None), ('cooper:companyInsightTeaserCard', None), ('cooper:companyInsightTeaserDesignInfo', None), ('cooper:companyInsightText', None), ('cooper:insightCard', None), ('cooper:newsApp', None), ('cooper:tempDepend', None), ('cordaDashboards:component', None), ('cordaDashboards:dashboardComponent', None), ('cordaDashboards:dashboardSingleComponentView', None), ('cordaDashboards:feedAux', None), ('cordaDashboards:filterSlidePanel', None), ('cordaDashboards:primer', None), ('cordaDashboards:primerActionConnector', None), ('cordaDashboards:primerConfigConnector', None), ('cordaDashboards:primerTabConnector', None), ('cordaDashboards:slide', None), ('cordaDashboards:snapshot', None), ('cordaDashboards:snapshotPost', None), ('cordaDashboards:tempDepend', None), ('cordaDashboards:visualForcePageComponent', None), ('dashboards:actionBar', None), ('dashboards:actionProxy', None), ('dashboards:componentFiltersView', None), ('dashboards:dashboardLoader', None), ('dashboards:eclairChartTypeOption', None), ('dashboards:eclairChartTypeSwitcher', None), ('dashboards:eclairComponent', None), ('dashboards:eclairSingleComponentView', None), ('dashboards:eclairSlide', None), ('dashboards:eclairSnapshotPost', None), ('dashboards:filterPanel', None), ('dashboards:filterPanelRow', None), ('dashboards:highlightsStencilExtension', None), ('dashboards:linkCard', None), ('dashboards:pagedReportDetail', None), ('dashboards:refresher', None), ('dashboards:reportDetailContainer', None), ('dashboards:reportEntityLink', None), ('dashboards:runAsUserPanel', None), ('dashboards:slidingPanel', None), ('dashboards:tableChart', None), ('dashboards:tmpDepends', None), ('dataImporter:diActivityHeader', None), ('dataImporter:diAdvancedAccountContactOptions', None), ('dataImporter:diAdvancedCampaignMemberUpdateOptions', None), ('dataImporter:diAdvancedCustomOptions', None), ('dataImporter:diAdvancedGenericOptions', None), ('dataImporter:diAdvancedLeadOptions', None), ('dataImporter:diAdvancedLookupFieldOptions', None), ('dataImporter:diAdvancedOpportunityOptions', None), ('dataImporter:diAdvancedPersonAccountOptions', None), ('dataImporter:diAdvancedSolutionOptions', None), ('dataImporter:diButtonBar', None), ('dataImporter:diCsvFileDropzone', None), ('dataImporter:diCsvFileSelector', None), ('dataImporter:diCsvSelectionActivity', None), ('dataImporter:diErrorBlock', None), ('dataImporter:diErrorMessage', None), ('dataImporter:diFileSelectionBase', None), ('dataImporter:diFileUploadButton', None), ('dataImporter:diFutureActivity', None), ('dataImporter:diInitialStep', None), ('dataImporter:diInputFile', None), ('dataImporter:diInputFileDropzone', None), ('dataImporter:diInvisibleFileUploader', None), ('dataImporter:diLanding', None), ('dataImporter:diLegacy', None), ('dataImporter:diMappingFieldDataProvider', None), ('dataImporter:diMappingStep', None), ('dataImporter:diMappingStepSampleRow', None), ('dataImporter:diMatchingChoiceActivity', None), ('dataImporter:diOverlay', None), ('dataImporter:diProgressBar', None), ('dataImporter:diProgressMarker', None), ('dataImporter:diReviewStep', None), ('dataImporter:diSfdcObjectSelectionActivity', None), ('dataImporter:diSingleMapping', None), ('dataImporter:diSingleMappingEditor', None), ('dataImporter:diStep', None), ('dataImporter:diStepHeader', None), ('dataImporter:diTemplate', None), ('ddcProspector:accountPreview', None), ('ddcProspector:companyHierarchy', None), ('ddcProspector:companyHierarchyPreview', None), ('ddcProspector:companyHierarchyPreviewDesignInfo', None), ('ddcProspector:getAccountsMultiAddButton', None), ('ddcProspector:getAccountsMultiAddHeader', None), ('ddcProspector:getContactsMultiAddButton', None), ('ddcProspector:getContactsMultiAddHeader', None), ('ddcProspector:isInCrmIcon', None), ('ddcProspector:isOwnedIcon', None), ('ddcProspector:messageBlock', None), ('ddcProspector:tree', None), ('ddcProspector:treeNode', None), ('ddcProspector:treeNodeContent', None), ('ddcProspector:updatedDate', None), ('desktopDashboards:componentShareModalFooter', None), ('desktopDashboards:dashboard', None), ('desktopDashboards:embeddedDashboard', None), ('desktopDashboards:embeddedDashboardDataSourceInfo', None), ('desktopDashboards:embeddedDashboardDesignSubstitute', None), ('desktopDashboards:feedPanel', None), ('desktopDashboards:tempDepend', None), ('desktopDashboards:webtemplate', None), ('einsteinbuilder:assessor', None), ('einsteinbuilder:autocomplete', None), ('einsteinbuilder:conditionLogicTypes', None), ('einsteinbuilder:detailsSummaryCount', None), ('einsteinbuilder:dialogHeader', None), ('einsteinbuilder:einsteinBuilderHeader', None), ('einsteinbuilder:einsteinBuilderPredictions', None), ('einsteinbuilder:emptyState', None), ('einsteinbuilder:eplite', None), ('einsteinbuilder:exclusionFields', None), ('einsteinbuilder:fieldSearchAndTrainingFilterSelection', None), ('einsteinbuilder:fieldSearchAutocomplete', None), ('einsteinbuilder:fieldSearchAutocompleteOption', None), ('einsteinbuilder:fieldSearchDataProvider', None), ('einsteinbuilder:fieldSelect', None), ('einsteinbuilder:globalFilterList', None), ('einsteinbuilder:globalFilterRowCondition', None), ('einsteinbuilder:guidePanel', None), ('einsteinbuilder:input', None), ('einsteinbuilder:inputBoolean', None), ('einsteinbuilder:inputCurrency', None), ('einsteinbuilder:inputDate', None), ('einsteinbuilder:inputDateTime', None), ('einsteinbuilder:inputError', None), ('einsteinbuilder:inputNumber', None), ('einsteinbuilder:inputPicklist', None), ('einsteinbuilder:inputSelect', None), ('einsteinbuilder:inputString', None), ('einsteinbuilder:inputText', None), ('einsteinbuilder:inputValueText', None), ('einsteinbuilder:logicTypesRadioButtons', None), ('einsteinbuilder:objectSearchAndGlobalFilterSelection', None), ('einsteinbuilder:objectSearchAutocomplete', None), ('einsteinbuilder:objectSearchAutocompleteOption', None), ('einsteinbuilder:objectSearchDataProvider', None), ('einsteinbuilder:operatorSelect', None), ('einsteinbuilder:popover', None), ('einsteinbuilder:predictionBuilderConfirmation', None), ('einsteinbuilder:predictionConfirmSettings', None), ('einsteinbuilder:predictionCsvDownload', None), ('einsteinbuilder:predictionQualityCard', None), ('einsteinbuilder:predictionSettings', None), ('einsteinbuilder:pushbackCustomField', None), ('einsteinbuilder:pushbackFieldSelection', None), ('einsteinbuilder:reviewTerms', None), ('einsteinbuilder:reviewTermsFlow', None), ('einsteinbuilder:scorecard', None), ('einsteinbuilder:scorecardDetails', None), ('einsteinbuilder:scorecardOverview', None), ('einsteinbuilder:scorecardPredictorsOverview', None), ('einsteinbuilder:setupPredictionFlow', None), ('einsteinbuilder:setupTile', None), ('einsteinbuilder:splashScreen', None), ('einsteinbuilder:startScreen', None), ('einsteinbuilder:statusCount', None), ('einsteinbuilder:stepLayout', None), ('einsteinbuilder:stepLayoutFinish', None), ('einsteinbuilder:stepLayoutSplit', None), ('einsteinbuilder:tile', None), ('einsteinbuilder:topPredictorsCard', None), ('einsteinbuilder:welcomeModal', None), ('einsteinconduit:commanderApi', None), ('einsteinconduit:commanderUi', None), ('emailStream:activityStorage', None), ('emailStream:activityStoragePage', None), ('emailStream:activitySyncEngineSetupMain', None), ('emailStream:activitySyncEngineSetupSplashScreen', None), ('emailStream:activitySyncEngineTabbed', None), ('emailStream:aseAdvancedSettingsTab', None), ('emailStream:aseEditConfiguration', None), ('emailStream:aseFilterRow', None), ('emailStream:aseSetupAssignUsers', None), ('emailStream:aseSetupConfigurations', None), ('emailStream:aseSetupExcludeAddresses', None), ('emailStream:aseSetupModalFinalize', None), ('emailStream:aseSetupModalFlowContainer', None), ('emailStream:aseSetupModalProgressIndicator', None), ('emailStream:aseSetupModalReviewTerms', None), ('emailStream:aseSetupModalStart', None), ('emailStream:aseSetupModalStep', None), ('emailStream:aseSetupSyncSettings', None), ('emailStream:aseTabHome', None), ('emailStream:aseTabSyncConfigurations', None), ('emailStream:automaticActivityCaptureSetup', None), ('emailStream:automaticActivityCaptureSetupAssistant', None), ('emailStream:automaticActivityCaptureSetupAssistantPage', None), ('emailStream:automaticActivityCaptureSetupPage', None), ('emailStream:automaticActivityCaptureSetupSplashScreen', None), ('emailStream:baseSetup', None), ('emailStream:chooseDataSourceType', None), ('emailStream:connectEmail', None), ('emailStream:connectEmailAgreement', None), ('emailStream:connectEmailWrapper', None), ('emailStream:customInsightCreate', None), ('emailStream:customInsightList', None), ('emailStream:customInsightSetupPage', None), ('emailStream:dataSourceStatus', None), ('emailStream:dataSourceStatusRow', None), ('emailStream:defaultOrgSharingSettingsPanel', None), ('emailStream:defaultOrgSharingSettingsPanelFooter', None), ('emailStream:defaultSharingSettings', None), ('emailStream:defaultSharingSettingsPanel', None), ('emailStream:defaultSharingSettingsPanelFooter', None), ('emailStream:emailIqSetup', None), ('emailStream:emailIqSetupPage', None), ('emailStream:emailIqSetupRow', None), ('emailStream:emailStreamSettings', None), ('emailStream:enabledEntities', None), ('emailStream:entitySelector', None), ('emailStream:iconLabel', None), ('emailStream:insightsEmailAgreement', None), ('emailStream:insightsOrgSettingSetupStep', None), ('emailStream:insightsPermissionSetSetupStep', None), ('emailStream:insightsSetupAssistant', None), ('emailStream:insightsSetupAssistantStep', None), ('emailStream:insightsSetupCheckmark', None), ('emailStream:launchpad', None), ('emailStream:launchpadMat', None), ('emailStream:oauthFlowContainer', None), ('emailStream:orgBlacklistModalFlowContainer', None), ('emailStream:orgBlacklistModalToConfirmInput', None), ('emailStream:orgBlacklistModalToEnterDetails', None), ('emailStream:orgBlacklistModalToSelectType', None), ('emailStream:reviewTerms', None), ('emailStream:reviewTermsFlow', None), ('emailStream:salesforceInboxDeleteEmailsAndEvents', None), ('emailStream:salesforceInboxDeleteEmailsAndEventsEmailTab', None), ('emailStream:salesforceInboxDeleteEmailsAndEventsUserTab', None), ('emailStream:salesforceInboxExchangeSetting', None), ('emailStream:salesforceInboxExchangeSettingDetails', None), ('emailStream:salesforceInboxExchangeSettingPage', None), ('emailStream:salesforceInboxExchangeSettingRowAction', None), ('emailStream:salesforceInboxExcludeFromML', None), ('emailStream:salesforceInboxOrgBlacklist', None), ('emailStream:salesforceInboxOrgBlacklistPage', None), ('emailStream:salesforceInboxOrgBlacklistRowAction', None), ('emailStream:salesforceInboxUserBlacklist', None), ('emailStream:salesforceInboxUserBlacklistPage', None), ('emailStream:salesforceInboxUserBlacklistRowAction', None), ('emailStream:sharingControl', None), ('emailStream:sharingPreview', None), ('emailStream:tempDepend', None), ('emailStream:updateSharing', None), ('emailStream:updateSharingBody', None), ('emailStream:userBlacklistModalToConfirmInput', None), ('emailStream:usersAndLicenses', None), ('emailStream:usersAndLicensesPage', None), ('emailStream:waveJobList', None), ('emailStream:welcomeMat', None), ('emailStream:whatIsIq', None), ('emailui:activityTimeline2EmailMessageAddressListOverride', None), ('emailui:activityTimeline2EmailMessageBccAddressFieldOverride', None), ('emailui:activityTimeline2EmailMessageCcAddressFieldOverride', None), ('emailui:activityTimeline2EmailMessageFromAddressFieldOverride', None), ('emailui:activityTimeline2EmailMessageToAddressFieldOverride', None), ('emailui:activityTimelineFixedLayoutEmailMessageStencil', None), ('emailui:addressContainer', None), ('emailui:addressListOutput', None), ('emailui:baseAddressContainer', None), ('emailui:baseEmailHighlightsStencil', None), ('emailui:consentManager', None), ('emailui:consentWarningModal', None), ('emailui:consentWarningModalFooter', None), ('emailui:emailAttachment', None), ('emailui:emailBaseReplyActions', None), ('emailui:emailMessage', None), ('emailui:emailMessageDetailDropdown', None), ('emailui:emailMessageEngagementSummary', None), ('emailui:emailMessageEngagementTab', None), ('emailui:emailMessageFromProfilePhoto', None), ('emailui:emailMessageHighlightsActionsContainer', None), ('emailui:emailMessageHighlightsStencil', None), ('emailui:emailMessageRecordHome', None), ('emailui:emailMessageReplyActions', None), ('emailui:emailRelatedToContainer', None), ('emailui:emailTemplateDataGrid', None), ('emailui:emailToolbarContainer', None), ('emailui:emailToolbarRelatedTo', None), ('emailui:enhancedEmailSetup', None), ('emailui:enhancedEmailSetupPage', None), ('emailui:externalEmailAuthenticator', None), ('emailui:formattedEmail', None), ('emailui:illustrationInlineText', None), ('emailui:integrationOrgSetup', None), ('emailui:listEmailCampaignDropDown', None), ('emailui:listEmailEngagementTab', None), ('emailui:listEmailHighlightsStencil', None), ('emailui:listEmailRecipientSuggestionDataProvider', None), ('emailui:listEmailRecordHome', None), ('emailui:listEmailRelatedListContainer', None), ('emailui:massEmailActionFooter', None), ('emailui:massEmailContentTab', None), ('emailui:massEmailList', None), ('emailui:massEmailReviewTab', None), ('emailui:massEmailTab', None), ('emailui:massEmailTabSet', None), ('emailui:oauthSplash', None), ('emailui:outboxActivity', None), ('emailui:outboxActivityTimeline', None), ('emailui:outputEmail', None), ('emailui:outputEmailPanel', None), ('emailui:outputRichText', None), ('emailui:outputRichTextWithoutIframe', None), ('emailui:pageError', None), ('emailui:pendingEmailActivity', None), ('emailui:pillContainer', None), ('emailui:pillContainerAutoComplete', None), ('emailui:placeholderEmailGenerator', None), ('emailui:placeholderLookup', None), ('emailui:previewModal', None), ('emailui:publisherAttachmentsMenuItem', None), ('emailui:publisherDiscardDraft', None), ('emailui:publisherPreview', None), ('emailui:publisherResetFields', None), ('emailui:publisherSpawnDocker', None), ('emailui:recipientAutocompleteOption', None), ('emailui:recipientListAutocomplete', None), ('emailui:recipientListAutocompleteOption', None), ('emailui:recipientSuggestionDataProvider', None), ('emailui:relatedOtherPeopleContainer', None), ('emailui:relatedPeople', None), ('emailui:relatedRecordContainer', None), ('emailui:resetDraftModal', None), ('emailui:resetDraftModalFooter', None), ('emailui:resetDraftModalHeader', None), ('emailui:salesEngagementRelatedList', None), ('emailui:salesforceFileWarningModal', None), ('emailui:salesforceInboxConnector', None), ('emailui:sendListEmailAction', None), ('emailui:warningModal', None), ('emailui:whatAndWhoOutput', None), ('embeddedService:activateEmbeddedServicePage', None), ('embeddedService:basePanel', None), ('embeddedService:deploymentInputLookup', None), ('embeddedService:deploymentInputLookupResult', None), ('embeddedService:deploymentList', None), ('embeddedService:embeddedServicePageTemplateDefault', None), ('embeddedService:embeddedServiceSetup', None), ('embeddedService:fieldServiceActionBar', None), ('embeddedService:fieldServiceAppointmentCard', None), ('embeddedService:fieldServicePageActivationSetupFlow', None), ('embeddedService:fieldServicePageActivationSetupFlowDeploymentSelection', None), ('embeddedService:fieldServicePageActivationSetupFlowNextSteps', None), ('embeddedService:fieldServicePageActivationSetupFlowStatusSelection', None), ('embeddedService:fieldServicePageActivationSetupFlowUpdateReview', None), ('embeddedService:fieldServiceScheduling', None), ('embeddedService:fieldServiceSelectionTabs', None), ('embeddedService:fieldServiceSidebarFeature', None), ('embeddedService:fieldServiceStateAppointmentDetail', None), ('embeddedService:fieldServiceStateAppointmentHome', None), ('embeddedService:fieldServiceStateAppointmentList', None), ('embeddedService:fieldServiceStateConfirmation', None), ('embeddedService:fieldServiceStateHome', None), ('embeddedService:fieldServiceStateSchedulingApexService', None), ('embeddedService:fieldServiceStateServiceResourceDetail', None), ('embeddedService:flowActionButton', None), ('embeddedService:flowInput', None), ('embeddedService:flowInputBaseCheckbox', None), ('embeddedService:flowInputCheckbox', None), ('embeddedService:flowInputCurrency', None), ('embeddedService:flowInputDate', None), ('embeddedService:flowInputDateTime', None), ('embeddedService:flowInputLongText', None), ('embeddedService:flowInputMultiCheckbox', None), ('embeddedService:flowInputMultiSelect', None), ('embeddedService:flowInputNumber', None), ('embeddedService:flowInputOptions', None), ('embeddedService:flowInputPassword', None), ('embeddedService:flowInputRadio', None), ('embeddedService:flowInputSelect', None), ('embeddedService:flowInputSimple', None), ('embeddedService:flowInputText', None), ('embeddedService:flowOutputDisplayText', None), ('embeddedService:flowSidebarFeature', None), ('embeddedService:flowStateViewer', None), ('embeddedService:icon', None), ('embeddedService:keyValuePairList', None), ('embeddedService:liveAgentQueuePosition', None), ('embeddedService:liveAgentSidebar', None), ('embeddedService:liveAgentSidebarFeature', None), ('embeddedService:liveAgentStateChat', None), ('embeddedService:liveAgentStateChatAction', None), ('embeddedService:liveAgentStateChatAvatar', None), ('embeddedService:liveAgentStateChatBubble', None), ('embeddedService:liveAgentStateChatButtonItem', None), ('embeddedService:liveAgentStateChatButtonMessage', None), ('embeddedService:liveAgentStateChatEventMessage', None), ('embeddedService:liveAgentStateChatFileTransferMessage', None), ('embeddedService:liveAgentStateChatHeader', None), ('embeddedService:liveAgentStateChatHeaderAvatars', None), ('embeddedService:liveAgentStateChatHeaderOption', None), ('embeddedService:liveAgentStateChatInputFooter', None), ('embeddedService:liveAgentStateChatItem', None), ('embeddedService:liveAgentStateChatMenuMessage', None), ('embeddedService:liveAgentStateChatMessage', None), ('embeddedService:liveAgentStateChatPlaintextMessageDefaultUI', None), ('embeddedService:liveAgentStateChatRichItem', None), ('embeddedService:liveAgentStateChatRichMessage', None), ('embeddedService:liveAgentStateChatTypingIndicator', None), ('embeddedService:liveAgentStateChatUnreadMessageBanner', None), ('embeddedService:liveAgentStateOfflineSupport', None), ('embeddedService:liveAgentStateOfflineSupportDefaultUI', None), ('embeddedService:liveAgentStatePostchat', None), ('embeddedService:liveAgentStatePrechat', None), ('embeddedService:liveAgentStatePrechatDefaultUI', None), ('embeddedService:liveAgentStateSelfService', None), ('embeddedService:liveAgentStateSelfServiceArticleList', None), ('embeddedService:liveAgentStateSelfServiceArticleListItem', None), ('embeddedService:liveAgentStateSelfServiceArticleView', None), ('embeddedService:liveAgentStateWaiting', None), ('embeddedService:liveAgentStateWaitingHeader', None), ('embeddedService:loadingBalls', None), ('embeddedService:noAssignedResourceView', None), ('embeddedService:prechatSetupFlow', None), ('embeddedService:prechatSetupFlowCustomizeFields', None), ('embeddedService:prechatSetupFlowDefaultFields', None), ('embeddedService:prechatSetupFlowRecordAssociations', None), ('embeddedService:prechatSetupFlowRecordAssociationsRecordTypePicklist', None), ('embeddedService:serviceAppointmentFullView', None), ('embeddedService:serviceAppointmentRecordCard', None), ('embeddedService:serviceAppointmentReducedView', None), ('embeddedService:serviceResourceFullView', None), ('embeddedService:serviceResourceRecordCard', None), ('embeddedService:serviceResourceReducedView', None), ('embeddedService:setupBaseCard', None), ('embeddedService:setupBrandingStencil', None), ('embeddedService:setupBrandingStencilDialog', None), ('embeddedService:setupBrandingStencilFieldServiceAppointmentDetail', None), ('embeddedService:setupBrandingStencilFieldServiceAppointmentList', None), ('embeddedService:setupBrandingStencilFieldServiceAppointmentListEmpty', None), ('embeddedService:setupBrandingStencilFieldServiceAuthenticationFailure', None), ('embeddedService:setupBrandingStencilFieldServiceBase', None), ('embeddedService:setupBrandingStencilFieldServiceConfirmation', None), ('embeddedService:setupBrandingStencilFieldServiceDialog', None), ('embeddedService:setupBrandingStencilFieldServiceDialogWithFooter', None), ('embeddedService:setupBrandingStencilFieldServiceHome', None), ('embeddedService:setupBrandingStencilFieldServiceResourceDetail', None), ('embeddedService:setupBrandingStencilFieldServiceScheduling', None), ('embeddedService:setupBrandingStencilFieldServiceSchedulingWithError', None), ('embeddedService:setupBrandingStencilLiveAgentBase', None), ('embeddedService:setupBrandingStencilLiveAgentChat', None), ('embeddedService:setupBrandingStencilLiveAgentChatBotActions', None), ('embeddedService:setupBrandingStencilLiveAgentChatEnded', None), ('embeddedService:setupBrandingStencilLiveAgentChatExtendedHeader', None), ('embeddedService:setupBrandingStencilLiveAgentChatFileUpload', None), ('embeddedService:setupBrandingStencilLiveAgentChatMinimized', None), ('embeddedService:setupBrandingStencilLiveAgentChatReconnecting', None), ('embeddedService:setupBrandingStencilLiveAgentChatTimeout', None), ('embeddedService:setupBrandingStencilLiveAgentChatTransfer', None), ('embeddedService:setupBrandingStencilLiveAgentChatTransferQueuePosition', None), ('embeddedService:setupBrandingStencilLiveAgentChatUnseenMessages', None), ('embeddedService:setupBrandingStencilLiveAgentChatWithAttachment', None), ('embeddedService:setupBrandingStencilLiveAgentOfflineSupportMinimized', None), ('embeddedService:setupBrandingStencilLiveAgentPostchat', None), ('embeddedService:setupBrandingStencilLiveAgentPrechat', None), ('embeddedService:setupBrandingStencilLiveAgentWaiting', None), ('embeddedService:setupBrandingStencilLiveAgentWaitingMinimized', None), ('embeddedService:setupBrandingStencilLiveAgentWaitingQueuePosition', None), ('embeddedService:setupBrandingStencilMinimized', None), ('embeddedService:setupBrandingStencilMinimizedStack', None), ('embeddedService:setupBrandingStencilRegion', None), ('embeddedService:setupBrandingStencilViewer', None), ('embeddedService:setupCard', None), ('embeddedService:setupCardActionButton', None), ('embeddedService:setupCardActionButtonToggle', None), ('embeddedService:setupCardBranding', None), ('embeddedService:setupCardCodeSnippet', None), ('embeddedService:setupCardFieldServiceAppointmentHome', None), ('embeddedService:setupCardLiveAgentCustomization', None), ('embeddedService:setupCardLiveAgentOfflineCases', None), ('embeddedService:setupCardPrechat', None), ('embeddedService:setupCardWarning', None), ('embeddedService:setupCustomizationPicklist', None), ('embeddedService:setupFlexipageList', None), ('embeddedService:setupFlowBranding', None), ('embeddedService:setupFlowCard', None), ('embeddedService:setupFlowCustomizeFieldsTable', None), ('embeddedService:setupFlowCustomizeFieldsTableAddFieldPopover', None), ('embeddedService:setupFlowCustomizeFieldsTableRow', None), ('embeddedService:setupFlowCustomizeFieldsTableRowIconButton', None), ('embeddedService:setupFlowCustomizeFieldsTableTooltip', None), ('embeddedService:setupFlowLiveAgentOfflineCases', None), ('embeddedService:setupFlowLiveAgentOfflineCasesConfiguration', None), ('embeddedService:setupFlowRecordTypePicklist', None), ('embeddedService:setupFlowTooltip', None), ('embeddedService:setupHeaderCard', None), ('embeddedService:setupHeaderCardSnapins', None), ('embeddedService:setupPage', None), ('embeddedService:setupPageCard', None), ('embeddedService:setupPageFieldService', None), ('embeddedService:setupPageFlows', None), ('embeddedService:setupPageLiveAgent', None), ('embeddedService:setupPageSnapins', None), ('embeddedService:setupPageViewer', None), ('embeddedService:setupPanel', None), ('embeddedService:setupPanelBranding', None), ('embeddedService:setupPanelBrandingColorPicker', None), ('embeddedService:setupPanelCard', None), ('embeddedService:setupPanelCodeSnippet', None), ('embeddedService:setupPanelFieldService', None), ('embeddedService:setupPanelFieldServiceAuthentication', None), ('embeddedService:setupPanelFieldServiceBranding', None), ('embeddedService:setupPanelFieldServiceFlows', None), ('embeddedService:setupPanelFlows', None), ('embeddedService:setupPanelFlowsBranding', None), ('embeddedService:setupPanelInput', None), ('embeddedService:setupPanelInputCheckbox', None), ('embeddedService:setupPanelInputJunctionRecordPicklist', None), ('embeddedService:setupPanelInputNumber', None), ('embeddedService:setupPanelInputPicklist', None), ('embeddedService:setupPanelInputText', None), ('embeddedService:setupPanelLiveAgent', None), ('embeddedService:setupPanelLiveAgentBranding', None), ('embeddedService:setupPanelSnapins', None), ('embeddedService:setupPanelTab', None), ('embeddedService:setupTab', None), ('embeddedService:setupTabCustomLabels', None), ('embeddedService:setupTabCustomLabelsHeader', None), ('embeddedService:setupTabCustomLabelsTableRow', None), ('embeddedService:setupTabCustomizeLabelsTable', None), ('embeddedService:setupTabFlow', None), ('embeddedService:setupTabFlowCard', None), ('embeddedService:setupTabFlowContents', None), ('embeddedService:sidebar', None), ('embeddedService:sidebarBaseFeature', None), ('embeddedService:sidebarButton', None), ('embeddedService:sidebarDialogState', None), ('embeddedService:sidebarExtendedHeader', None), ('embeddedService:sidebarFeature', None), ('embeddedService:sidebarForm', None), ('embeddedService:sidebarFormField', None), ('embeddedService:sidebarHeader', None), ('embeddedService:sidebarMinimizedContainer', None), ('embeddedService:sidebarMinimizedDefaultUI', None), ('embeddedService:sidebarScriptLoader', None), ('embeddedService:sidebarState', None), ('embeddedService:verticalTab', None), ('embeddedService:verticalTabsEditor', None), ('embeddedService:verticalTabset', None), ('environmenthub:connectOrganization', None), ('environmenthub:createOrganization', None), ('environmenthub:displayNameRenderer', None), ('environmenthub:errorHandlingDisplay', None), ('environmenthub:generateModal', None), ('environmenthub:isFedIdSsoMatchAllowedEditRenderer', None), ('environmenthub:isFedIdSsoMatchAllowedRenderer', None), ('environmenthub:logIntoOrganization', None), ('environmenthub:modalButtons', None), ('environmenthub:serviceProviderRenderer', None), ('environmenthub:ssoMappedUsersRenderer', None), ('environmenthub:ssoStatusFilter', None), ('environmenthub:ssoStatusFilterEdit', None), ('environmenthub:ssoUserMapping', None), ('environmenthub:ssoUsernameFormulaEditRenderer', None), ('environmenthub:ssoUsernameFormulaRenderer', None), ('environmenthub:toggleSso', None), ('environmenthub:validatingInput', None), ('environmenthub:validatingMyDomainInput', None), ('environmenthub:validatingTemplateIdInput', None), ('environmenthub:validatingUserNameInput', None), ('externalServicesSetup:actionExplorer', None), ('externalServicesSetup:actionLink', None), ('externalServicesSetup:actionMenuItem', None), ('externalServicesSetup:createLsf', None), ('externalServicesSetup:detailPage', None), ('externalServicesSetup:externalServicesV2Toggle', None), ('externalServicesSetup:listPage', None), ('externalServicesSetup:milestoneRegistration', None), ('externalServicesSetup:milestoneSplashPage', None), ('externalServicesSetup:milestoneSyncActions', None), ('externalServicesSetup:setupComponent', None), ('flexipage:accordion', None), ('flexipage:accordionDesignInfo', None), ('flexipage:accordionDesignSubstitute', None), ('flexipage:accordionSection', None), ('flexipage:actionBar', None), ('flexipage:activeChild', None), ('flexipage:appHomeTemplateHeaderThreeColumns', None), ('flexipage:appHomeTemplateHeaderTwoColumns', None), ('flexipage:appHomeTemplateHeaderTwoColumnsEqualWidth', None), ('flexipage:appHomeTemplateHeaderTwoColumnsLeftSidebar', None), ('flexipage:appHomeTemplateThreeColumns', None), ('flexipage:appHomeTemplateTwoColumns', None), ('flexipage:appHomeTemplateTwoColumnsStacked', None), ('flexipage:backgroundComponentsWrapper', None), ('flexipage:baseFlexipageWithGlobalPublisherContext', None), ('flexipage:baseRecordHomeTemplateDesktop', None), ('flexipage:card', None), ('flexipage:clientError', None), ('flexipage:component', None), ('flexipage:component3', None), ('flexipage:componentDecorator', None), ('flexipage:defaultAppHomeTemplate', None), ('flexipage:defaultObjectHomeTemplate', None), ('flexipage:filterListCard', None), ('flexipage:filterListCardDesignInfo', None), ('flexipage:filterListCardDesignSubstitute', None), ('flexipage:inlineExpandableContainer', None), ('flexipage:listRecord', None), ('flexipage:objectHomeTemplateThreeColumns', None), ('flexipage:objectHomeTemplateTwoColumns', None), ('flexipage:objectHomeTemplateTwoColumnsStacked', None), ('flexipage:page', None), ('flexipage:pageDeprecated', None), ('flexipage:recentItemStencil', None), ('flexipage:recentItemTemplate', None), ('flexipage:recentItems', None), ('flexipage:recentItemsDesignSubstitute', None), ('flexipage:recordHomeLeftSidebarTemplateDesktop', None), ('flexipage:recordHomePinnedHeaderLeftSidebarTemplateDesktop', None), ('flexipage:recordHomePinnedHeaderLeftSidebarTwoColTemplateDesktop', None), ('flexipage:recordHomePinnedHeaderTemplateDesktop', None), ('flexipage:recordHomePinnedLeftRightSidebarsTemplateDesktop', None), ('flexipage:recordHomePinnedLeftSidebarTemplateDesktop', None), ('flexipage:recordHomePinnedLeftSidebarTwoColTemplateDesktop', None), ('flexipage:recordHomeSimpleViewTemplate', None), ('flexipage:recordHomeSingleColNoHeaderTemplateDesktop', None), ('flexipage:recordHomeSingleColTemplateDesktop', None), ('flexipage:recordHomeTemplateDesktop', None), ('flexipage:recordHomeThreeColHeaderTemplateDesktop', None), ('flexipage:recordHomeThreeColTemplateDesktop', None), ('flexipage:recordHomeTwoColEqualHeaderTemplateDesktop', None), ('flexipage:recordHomeWithSubheaderLeftSidebarTemplateDesktop', None), ('flexipage:recordHomeWithSubheaderTemplateDesktop', None), ('flexipage:reportChart', None), ('flexipage:richText', None), ('flexipage:tab', None), ('flexipage:tabset', None), ('flexipage:tempDepend', None), ('flexipage:visualforcePage', None), ('flexipageEditor:activateActionOverrideAppAssignmentDataProvider', None), ('flexipageEditor:activateActionOverrideAppAssignmentStep', None), ('flexipageEditor:activateActionOverrideAppFormFactorSelectionStep', None), ('flexipageEditor:activateActionOverrideAppFormFactorSelectionStepDataProvider', None), ('flexipageEditor:activateActionOverrideFormFactorSelectionStep', None), ('flexipageEditor:activateActionOverrideModeSelectionStep', None), ('flexipageEditor:activateActionOverrideRemoveAppAssignmentWithFormFactorsStep', None), ('flexipageEditor:activateActionOverrideReviewAssignmentDataProvider', None), ('flexipageEditor:activateActionOverrideReviewAssignmentStep', None), ('flexipageEditor:activateActionOverrideReviewAssignmentStepWithFormFactor', None), ('flexipageEditor:activateActionOverrideReviewDefaultAssignmentStep', None), ('flexipageEditor:activateActionOverrideReviewDefaultWithFormFactorAssignmentStep', None), ('flexipageEditor:activateActionOverrideSelectedAppList', None), ('flexipageEditor:activateActionOverrideSelectedAppListWithFormFactor', None), ('flexipageEditor:activateAppPage', None), ('flexipageEditor:activateAppPageMenu', None), ('flexipageEditor:activateAppPageMultipleTabs', None), ('flexipageEditor:activateAppPageSettings', None), ('flexipageEditor:activateAppRecordTypeProfileFormFactorReviewStep', None), ('flexipageEditor:activateAppRecordTypeProfileReviewStep', None), ('flexipageEditor:activateAppRecordTypeProfileReviewStepDataProvider', None), ('flexipageEditor:activateAssignmentListHeaderActions', None), ('flexipageEditor:activateContainer', None), ('flexipageEditor:activateContent', None), ('flexipageEditor:activateOnFirstSaveDialog', None), ('flexipageEditor:activateProfileOverrideProfileStep', None), ('flexipageEditor:activateProfileOverrideProfileStepDataProvider', None), ('flexipageEditor:activateProfileOverrideRecordTypeStep', None), ('flexipageEditor:activateProfileOverrideRecordTypeStepDataProvider', None), ('flexipageEditor:activateRecordHomeHierarchy', None), ('flexipageEditor:activateRecordPage', None), ('flexipageEditor:activateSelectedAppRecordTypeProfileFormFactorList', None), ('flexipageEditor:activateSelectedAppRecordTypeProfileList', None), ('flexipageEditor:activateSelectedAppRecordTypeProfileListDataProvider', None), ('flexipageEditor:activateTabMenuIcon', None), ('flexipageEditor:activateTabMenus', None), ('flexipageEditor:appBuilderExperience', None), ('flexipageEditor:appExchangeModal', None), ('flexipageEditor:appPageCanvasConfig', None), ('flexipageEditor:appSettings', None), ('flexipageEditor:appSettingsAppNavigation', None), ('flexipageEditor:appSettingsAppNavigationContainer', None), ('flexipageEditor:appSettingsDetails', None), ('flexipageEditor:appSettingsDetailsContainer', None), ('flexipageEditor:appSettingsEditor', None), ('flexipageEditor:appSettingsHeader', None), ('flexipageEditor:appSettingsItem', None), ('flexipageEditor:appSettingsNavigationItems', None), ('flexipageEditor:appSettingsNavigationItemsContainer', None), ('flexipageEditor:appSettingsNavigationRules', None), ('flexipageEditor:appSettingsNavigationRulesContainer', None), ('flexipageEditor:appSettingsOptimizer', None), ('flexipageEditor:appSettingsUserProfiles', None), ('flexipageEditor:appSettingsUserProfilesContainer', None), ('flexipageEditor:appSettingsUtilityBarContainer', None), ('flexipageEditor:assignmentLookup', None), ('flexipageEditor:assignmentVisibilityBanner', None), ('flexipageEditor:availableNavItemsDataProvider', None), ('flexipageEditor:baseBuilder', None), ('flexipageEditor:baseFlexipageEditorCanvasConfig', None), ('flexipageEditor:baseFormInfo', None), ('flexipageEditor:baseInvalidComponent', None), ('flexipageEditor:breadcrumb', None), ('flexipageEditor:canvas', None), ('flexipageEditor:component', None), ('flexipageEditor:componentPlaceholder', None), ('flexipageEditor:confirm', None), ('flexipageEditor:consoleTabset', None), ('flexipageEditor:container', None), ('flexipageEditor:customMessagePlaceholder', None), ('flexipageEditor:debugDialog', None), ('flexipageEditor:designLayout', None), ('flexipageEditor:editor', None), ('flexipageEditor:element', None), ('flexipageEditor:errorComponent', None), ('flexipageEditor:errorListFlyout', None), ('flexipageEditor:errorListFlyoutBody', None), ('flexipageEditor:expressionsContextDataProvider', None), ('flexipageEditor:flexipageList', None), ('flexipageEditor:flexipageListDataProvider', None), ('flexipageEditor:formDetailEditor', None), ('flexipageEditor:formDetailPanelSectionEditInfo', None), ('flexipageEditor:formDetailPanelSectionMessageInfo', None), ('flexipageEditor:formEditBaseModal', None), ('flexipageEditor:formFactorSelectionActionCell', None), ('flexipageEditor:formItem', None), ('flexipageEditor:formNameEditor', None), ('flexipageEditor:formNewSectionModal', None), ('flexipageEditor:formOrderEditor', None), ('flexipageEditor:formPaletteItemsProvider', None), ('flexipageEditor:formPaletteSectionItemRow', None), ('flexipageEditor:formSection', None), ('flexipageEditor:formSectionColumn', None), ('flexipageEditor:formSectionView', None), ('flexipageEditor:formSectionsEditor', None), ('flexipageEditor:formsPalette', None), ('flexipageEditor:header', None), ('flexipageEditor:helpDropdown', None), ('flexipageEditor:homePageCanvasConfig', None), ('flexipageEditor:keyboardHelpDialog', None), ('flexipageEditor:lastModifiedByOn', None), ('flexipageEditor:leftPanel', None), ('flexipageEditor:mailAppCanvasConfig', None), ('flexipageEditor:menu', None), ('flexipageEditor:menuItem', None), ('flexipageEditor:menuTrigger', None), ('flexipageEditor:message', None), ('flexipageEditor:middlePanel', None), ('flexipageEditor:migrationWizard', None), ('flexipageEditor:migrationWizardDescription', None), ('flexipageEditor:migrationWizardDifferences', None), ('flexipageEditor:migrationWizardExplanation', None), ('flexipageEditor:migrationWizardFormInfo', None), ('flexipageEditor:migrationWizardLayoutProvider', None), ('flexipageEditor:migrationWizardLayoutSource', None), ('flexipageEditor:multiselectEditorModal', None), ('flexipageEditor:newPageDialog', None), ('flexipageEditor:newPageWizardPageTypeStep', None), ('flexipageEditor:newPageWizardPropertiesStep', None), ('flexipageEditor:newPageWizardTemplateStep', None), ('flexipageEditor:noDataPlaceholder', None), ('flexipageEditor:noRecordAccessPlaceholder', None), ('flexipageEditor:noUserAccessPlaceholder', None), ('flexipageEditor:node', None), ('flexipageEditor:objectManagerAppDefaultList', None), ('flexipageEditor:objectManagerAppDefaultListDataProvider', None), ('flexipageEditor:objectManagerAppDefaultListWithoutFormFactor', None), ('flexipageEditor:objectManagerAppRecTypeProfileAssignmentList', None), ('flexipageEditor:objectManagerAppRecTypeProfileAssignmentListDataProvider', None), ('flexipageEditor:objectManagerAppRecTypeProfileAssignmentListWithoutFormFactor', None), ('flexipageEditor:objectManagerRecordPageAssignmentList', None), ('flexipageEditor:openPageModal', None), ('flexipageEditor:openPageModalFooter', None), ('flexipageEditor:orgDefaultPageAssignment', None), ('flexipageEditor:page', None), ('flexipageEditor:pageBuilder', None), ('flexipageEditor:pageListing', None), ('flexipageEditor:pageSwitcherMenu', None), ('flexipageEditor:paletteMyDomainMessage', None), ('flexipageEditor:picker', None), ('flexipageEditor:pickerItem', None), ('flexipageEditor:pickerSection', None), ('flexipageEditor:readOnlyBanner', None), ('flexipageEditor:recordHomeCanvasConfig', None), ('flexipageEditor:recordPageAssignments', None), ('flexipageEditor:region', None), ('flexipageEditor:removeSelectedAppRecordTypeProfileFormFactorStep', None), ('flexipageEditor:removeSelectedAppRecordTypeProfileStep', None), ('flexipageEditor:resolvedPageInfo', None), ('flexipageEditor:rightPanel', None), ('flexipageEditor:routeCalculator', None), ('flexipageEditor:routeCalculatorDataProvider', None), ('flexipageEditor:routeCalculatorPickList', None), ('flexipageEditor:routeCalculatorTester', None), ('flexipageEditor:ruleDynamicTypeEditor', None), ('flexipageEditor:ruleLHSRecordFieldDataProvider', None), ('flexipageEditor:ruleLHSRelatedFieldDataProvider', None), ('flexipageEditor:rulePropertyEditorProvider', None), ('flexipageEditor:setupDetailPageLink', None), ('flexipageEditor:surfaceTemplate', None), ('flexipageEditor:templateEditor', None), ('flexipageEditor:templateMyDomainMessage', None), ('flexipageEditor:templateSwitchingRegionMappingRow', None), ('flexipageEditor:templateSwitchingWizard', None), ('flexipageEditor:templateSwitchingWizardRegionMapping', None), ('flexipageEditor:templateSwitchingWizardSelectTemplate', None), ('flexipageEditor:topToolbar', None), ('flexipageEditor:unsupportedFormFactorComponent', None), ('flexipageEditor:warningComponent', None), ('flexipageEditor:workspace', None), ('flowruntime:actionBar', None), ('flowruntime:actionBase', None), ('flowruntime:actionButton', None), ('flowruntime:address', None), ('flowruntime:body', None), ('flowruntime:cancelButton', None), ('flowruntime:checkboxInput', None), ('flowruntime:choiceUserInput', None), ('flowruntime:currencyInput', None), ('flowruntime:dateInput', None), ('flowruntime:dateTimeInput', None), ('flowruntime:debug', None), ('flowruntime:debugInput', None), ('flowruntime:debugOutput', None), ('flowruntime:dependentPicklists', None), ('flowruntime:displayText', None), ('flowruntime:dropDownInput', None), ('flowruntime:email', None), ('flowruntime:errorText', None), ('flowruntime:flowRuntime', None), ('flowruntime:flowRuntimeForFlexiPage', None), ('flowruntime:flowRuntimeForQuickAction', None), ('flowruntime:flowRuntimeForS1', None), ('flowruntime:flowRuntimeForS1Header', None), ('flowruntime:flowRuntimeHeaderForModal', None), ('flowruntime:flowruntimeForModal', None), ('flowruntime:header', None), ('flowruntime:helpIcon', None), ('flowruntime:helpText', None), ('flowruntime:image', None), ('flowruntime:inputWrapper', None), ('flowruntime:interview', None), ('flowruntime:interviewDesignInfo', None), ('flowruntime:interviewDesignSubstitute', None), ('flowruntime:longTextInput', None), ('flowruntime:modalManager', None), ('flowruntime:multiCheckbox', None), ('flowruntime:name', None), ('flowruntime:numberInput', None), ('flowruntime:oneColumn', None), ('flowruntime:passwordInput', None), ('flowruntime:pauseFinalizedMessage', None), ('flowruntime:pauseScreen', None), ('flowruntime:pausedInterviewCard', None), ('flowruntime:pausedInterviewCardRow', None), ('flowruntime:phone', None), ('flowruntime:picklistInput', None), ('flowruntime:radioButtonInput', None), ('flowruntime:richTextWrapper', None), ('flowruntime:runtime', None), ('flowruntime:slider', None), ('flowruntime:spinner', None), ('flowruntime:tempDepend', None), ('flowruntime:textInput', None), ('flowruntime:toggle', None), ('flowruntime:twoColumn', None), ('flowruntime:url', None), ('flowruntime:visibilityWrapper', None), ('folder:actionBar', None), ('folder:analyticsIntegration', None), ('folder:baseIntegration', None), ('folder:breadcrumb', None), ('folder:breadcrumbItem', None), ('folder:configRetriever', None), ('folder:folderActionProcessor', None), ('folder:forceActionProxy', None), ('folder:listView', None), ('folder:listViewDataProvider', None), ('folder:navigator', None), ('folder:pickerDialog', None), ('folder:pickerDialogFooter', None), ('folder:pickerDialogPanel', None), ('folder:searchResult', None), ('folder:selectColumnPanelFooter', None), ('folder:sidebar', None), ('folder:sidebarItem', None), ('force:abstractBorderLayout', None), ('force:abstractBorderLayoutDataProvider', None), ('force:abstractComponent', None), ('force:access', None), ('force:action', None), ('force:actionAPILoader', None), ('force:actionButton', None), ('force:actionEventLink', None), ('force:actionIconMenuItem', None), ('force:actionLink', None), ('force:actionMenuItem', None), ('force:actionOverrideCallback', None), ('force:actionRow', None), ('force:actionsContainer', None), ('force:actionsDropDownMenuList', None), ('force:actionsText', None), ('force:addressAutocomplete', None), ('force:addressAutocompleteOption', None), ('force:addressCompletionDataProvider', None), ('force:alohaPageTemplate', None), ('force:alternateIdProvider', None), ('force:apiBridgeLoader', None), ('force:apiVersion', None), ('force:appMessageManager', None), ('force:asyncCarousel', None), ('force:asyncCarouselIndicator', None), ('force:asyncCarouselPage', None), ('force:badgeButton', None), ('force:baseCard', None), ('force:baseHome', None), ('force:baseListView', None), ('force:baseLookupCardTemplate', None), ('force:borderLayoutPageHost', None), ('force:brandBand', None), ('force:brandBandPageContainer', None), ('force:breadCrumbItem', None), ('force:breadCrumbs', None), ('force:buttonBarDeprecated', None), ('force:buyerAccountDetailPanelWrapper', None), ('force:calendar', None), ('force:calendarButtonIconRefresh', None), ('force:calendarDay', None), ('force:calendarDayHeader', None), ('force:calendarEvent', None), ('force:calendarEventAllDay', None), ('force:calendarEventIcons', None), ('force:calendarEventPopup', None), ('force:calendarEventTimed', None), ('force:calendarExternalEventPopup', None), ('force:calendarExternalEventPreview', None), ('force:calendarHeader', None), ('force:calendarItemForPopup', None), ('force:calendarItemListPopup', None), ('force:calendarMonthView', None), ('force:calendarMonthWeek', None), ('force:calendarSidebar', None), ('force:calendarTrough', None), ('force:callHandler', None), ('force:canvasApp', None), ('force:canvasAppCard', None), ('force:canvasAppTemplate', None), ('force:card', None), ('force:changeOwnerContent', None), ('force:changeRecordType', None), ('force:changeRecordTypeFooter', None), ('force:chartDataProvider', None), ('force:colorPicker', None), ('force:colorPickerTrigger', None), ('force:componentDeveloper', None), ('force:componentDeveloperInstance', None), ('force:componentDeveloperManager', None), ('force:componentSpinner', None), ('force:componentsText', None), ('force:confirmDialog', None), ('force:confirmationWindow', None), ('force:consoleActionOverrideCallback', None), ('force:containerMediator', None), ('force:copyToClipboardButton', None), ('force:createAnchorPanel', None), ('force:createLinkAdvancedPanel', None), ('force:createLinkPanel', None), ('force:createMediaEmbedPanel', None), ('force:createRecordTypeChecker', None), ('force:createSmartLinkPanel', None), ('force:createTablePanel', None), ('force:dashboardHome', None), ('force:dataManager', None), ('force:dataProviderLoadErrorMessage', None), ('force:dedupeManager', None), ('force:defenseHook', None), ('force:deferredDropDownAction', None), ('force:densityDiscoveryDockedContent', None), ('force:dependencyManagerAPI', None), ('force:dependentFieldContainer', None), ('force:detailPanel', None), ('force:detailPanelDesktop', None), ('force:detailPanelDesktop2', None), ('force:detailPanelEventBroker', None), ('force:detailPanelMobile', None), ('force:detailViewPanelDesignInfo', None), ('force:detailViewPanelDesignInfoDialogContent', None), ('force:dirtyStateManager', None), ('force:dockableActionRunnable', None), ('force:dockingPanel', None), ('force:dockingPanelOverflow', None), ('force:dockingPanelOverflowItem', None), ('force:dotsSpinner', None), ('force:downloadHandler', None), ('force:duelingLists', None), ('force:duplicateList', None), ('force:duplicateListDataManager', None), ('force:duplicateListStencil', None), ('force:duplicateTabs', None), ('force:dynamicLabel', None), ('force:dynamicLabelProvider', None), ('force:eclairChart', None), ('force:eclairChartListView', None), ('force:emailHandler', None), ('force:emailTemplateInfo', None), ('force:embeddedTemplate', None), ('force:empApi', None), ('force:empty', None), ('force:entityBannerPhotoDetail', None), ('force:entityIcon', None), ('force:entityShare', None), ('force:eventLink', None), ('force:featureDiscoveryDocked', None), ('force:featureDiscoveryDockedContent', None), ('force:fieldDependencyManager', None), ('force:fieldMapping', None), ('force:fieldMappingTabs', None), ('force:fileUpload', None), ('force:filterCriteria', None), ('force:filterCriteriaBlockSectionRow', None), ('force:filterCriteriaDataProvider', None), ('force:filterCriteriaInputField', None), ('force:filterCriteriaMenuItem', None), ('force:filterDataProvider', None), ('force:filterInfiniteScrollDataProvider', None), ('force:filterList', None), ('force:filterListDeprecated', None), ('force:filterMenu', None), ('force:filterMenuItem', None), ('force:filterPanel', None), ('force:filterPanelBooleanCriterionEditor', None), ('force:filterPanelCallout', None), ('force:filterPanelDateCriterionEditor', None), ('force:filterPanelFieldSelector', None), ('force:filterPanelFilterCriterion', None), ('force:filterPanelFilterEditor', None), ('force:filterPanelMultiPicklistCriterionEditor', None), ('force:filterPanelScope', None), ('force:filterPanelScopeEditor', None), ('force:filterPanelTextFieldEditor', None), ('force:fingerprint', None), ('force:fireEventAfterLogging', None), ('force:formDetailPanelSection', None), ('force:formDetailPanelSectionDesignSubstitute', None), ('force:headerButton', None), ('force:headerButtonDeprecated', None), ('force:headerLayout', None), ('force:headerMenuTrigger', None), ('force:heightMemoizer', None), ('force:highlightText', None), ('force:highlights', None), ('force:highlightsActionWrapper', None), ('force:highlightsAttributeContainer', None), ('force:highlightsDesktopListRecordItem', None), ('force:highlightsPanel', None), ('force:highlightsPlaceholder', None), ('force:highlightsPreviewStencil', None), ('force:highlightsStencil', None), ('force:highlightsStencilDesktop', None), ('force:highlightsStencilDesktopVertical', None), ('force:hostConfig', None), ('force:hoverPanel', None), ('force:hoverPrototype', None), ('force:hoverPrototypeManager', None), ('force:icon', None), ('force:iconDeprecated', None), ('force:iconTriggerLink', None), ('force:imageRelatedListStencil', None), ('force:infiniteDuelingList', None), ('force:infiniteDuelingListAvailableItems', None), ('force:infiniteDuelingListSelectableItems', None), ('force:infiniteDuelingListSelectedItems', None), ('force:inlineEdit', None), ('force:inlineEditCell', None), ('force:inlineEditComponent', None), ('force:inlineEditGrid', None), ('force:inlineEditGridStencil', None), ('force:inlineEditKeyNavCell', None), ('force:inlineEditPanelBody', None), ('force:inlineEditPanelFooter', None), ('force:inlinePulsingSpinner', None), ('force:inlineRotatingSpinner', None), ('force:inlineSpinner', None), ('force:inputAddress', None), ('force:inputCompoundField', None), ('force:inputField', None), ('force:inputFieldInternal', None), ('force:inputLocation', None), ('force:inputLookup', None), ('force:inputLookupManager', None), ('force:inputLookupPanel', None), ('force:inputLookupPanelItem', None), ('force:inputLookupPanelSelector', None), ('force:inputLookupTrigger', None), ('force:inputMultiPicklist', None), ('force:inputName', None), ('force:inputPicklist', None), ('force:inputRadio', None), ('force:inputRichText', None), ('force:inputTextarea', None), ('force:inputTime', None), ('force:inputURL', None), ('force:ldsPushInvalidationManager', None), ('force:linkCard', None), ('force:linkTemplate', None), ('force:list', None), ('force:listLoadingTemplate', None), ('force:listRecord', None), ('force:listRecordItem', None), ('force:listSorterDataProvider', None), ('force:listTemplate', None), ('force:listView', None), ('force:listViewDataManager', None), ('force:listViewDataManagerAdapter', None), ('force:listViewEntityShareDataProvider', None), ('force:listViewManager', None), ('force:listViewManagerDisplayActionConfiguration', None), ('force:listViewManagerDisplayDataConfiguration', None), ('force:listViewManagerDisplayDependencyConfiguration', None), ('force:listViewManagerDisplayDependencyItem', None), ('force:listViewManagerDisplayInlineEditConfiguration', None), ('force:listViewManagerDisplaySwitcher', None), ('force:listViewManagerDisplayViewConfiguration', None), ('force:listViewManagerDisplaysConfiguration', None), ('force:listViewManagerGrid', None), ('force:listViewManagerGridColumnHeaderConfiguration', None), ('force:listViewManagerGridColumnHeaderMenu', None), ('force:listViewManagerGridFooter', None), ('force:listViewManagerGridWrapText', None), ('force:listViewManagerHeader', None), ('force:listViewManagerLayoutHandlingConfiguration', None), ('force:listViewManagerNavigateToObjectHome', None), ('force:listViewManagerPinnedListConfiguration', None), ('force:listViewManagerPrimaryDisplayManager', None), ('force:listViewManagerSecondaryDisplayManager', None), ('force:listViewManagerSettingsMenuConfiguration', None), ('force:listViewManagerSettingsMenuOptionConfiguration', None), ('force:listViewManagerSplitViewList', None), ('force:listViewManagerStateManager', None), ('force:listViewPicker', None), ('force:listViewPickerAutocomplete', None), ('force:listViewPickerAutocompleteList', None), ('force:listViewPickerAutocompleteOption', None), ('force:listViewPickerDataProvider', None), ('force:listViewPlaceholder', None), ('force:listViewSettingsDetail', None), ('force:listViewSettingsMenu', None), ('force:listViewStatusInfo', None), ('force:listViewStencil', None), ('force:listviewChartsSetupPage', None), ('force:loaderBar', None), ('force:loading', None), ('force:loadingLaser', None), ('force:localRecordChangeObserver', None), ('force:logoutHandler', None), ('force:lookupCard', None), ('force:lookupCardTemplate', None), ('force:lookupCreateActionManager', None), ('force:managePortalUserPermSets', None), ('force:mask', None), ('force:maskOutputText', None), ('force:massChangeOwner', None), ('force:massChangeStatus', None), ('force:massErrorsManager', None), ('force:massErrorsPanel', None), ('force:massQuickActionRunnable', None), ('force:menuTriggerIcon', None), ('force:message', None), ('force:mobileActionModal', None), ('force:mobileOverlay', None), ('force:modal', None), ('force:modalActionContainer', None), ('force:modalListViewFooterAdapter', None), ('force:modalSpinner', None), ('force:mruDataProvider', None), ('force:multiAdd', None), ('force:multiAddDataManagerSwitcher', None), ('force:multiAddDefaultNextAction', None), ('force:multiAddMultiEditBackAction', None), ('force:multiAddMultiEditHeader', None), ('force:multiAddMultiEditNextAction', None), ('force:multiAddSearch', None), ('force:multiAddUsingLVM', None), ('force:multiEdit', None), ('force:multiEditDataManager', None), ('force:multiEditDataManagerConverter', None), ('force:multiEditDefaultNextAction', None), ('force:multiTemplateVirtualList', None), ('force:navigateConfirmation', None), ('force:noRowActions', None), ('force:notesBaseListViewNonGrid', None), ('force:notesObjectHomeListViewNonGrid', None), ('force:objectHome', None), ('force:objectHomeChart', None), ('force:objectHomeDataProvider', None), ('force:objectHomeDesktop', None), ('force:objectHomePipelineView', None), ('force:outputAddress', None), ('force:outputAddressText', None), ('force:outputAnimatedNumber', None), ('force:outputAnytype', None), ('force:outputCurrency', None), ('force:outputCustomLinkUrl', None), ('force:outputEventDateTime', None), ('force:outputField', None), ('force:outputFieldInternal', None), ('force:outputFile', None), ('force:outputFormulaHtml', None), ('force:outputImage', None), ('force:outputLocation', None), ('force:outputLookup', None), ('force:outputLookupText', None), ('force:outputLookupWithPreview', None), ('force:outputModStamp', None), ('force:outputModStampWithPreview', None), ('force:outputName', None), ('force:outputNameForUser', None), ('force:outputNoteorAttachment', None), ('force:outputOwnerIdLookupWithChangeLink', None), ('force:outputOwnerLookup', None), ('force:outputPhone', None), ('force:outputPicklist', None), ('force:outputPlainText', None), ('force:outputRecordType', None), ('force:outputRecordTypeWithoutChangeLink', None), ('force:outputRichText', None), ('force:outputScheduleDateField', None), ('force:outputTime', None), ('force:outputURL', None), ('force:pageBlock', None), ('force:pageBlockItem', None), ('force:pageBlockItemEdit', None), ('force:pageBlockItemView', None), ('force:pageBlockSection', None), ('force:pageBlockSectionEdit', None), ('force:pageBlockSectionRow', None), ('force:pageBlockSectionView', None), ('force:pageError', None), ('force:pageInfo', None), ('force:panelCallbackAction', None), ('force:panelOverlay', None), ('force:panelSlider', None), ('force:personalSettingsPageRouter', None), ('force:photoCrop', None), ('force:photoCropDraggable', None), ('force:placeholder', None), ('force:pluginButton', None), ('force:pluginForm', None), ('force:pluginFormItem', None), ('force:pluginFormItemList', None), ('force:pluginItem', None), ('force:pluginItemList', None), ('force:pluginListDataProvider', None), ('force:popOutManagerAura', None), ('force:popover', None), ('force:previewPanel', None), ('force:publisherQuickActionCollapser', None), ('force:quickActionHandler', None), ('force:quickActionLayout', None), ('force:quickActionManager', None), ('force:quickActionRecord', None), ('force:quickActionRecordCollection', None), ('force:quickActionRunnable', None), ('force:quickActionWrapper', None), ('force:quickEdit', None), ('force:quickEditField', None), ('force:quill', None), ('force:quillButtonLink', None), ('force:quillInsertImageButton', None), ('force:readOnlyRelatedListStencil', None), ('force:record', None), ('force:recordCollection', None), ('force:recordContentPlugin', None), ('force:recordData', None), ('force:recordEdit', None), ('force:recordEditActions', None), ('force:recordGlobalValueProvider', None), ('force:recordHome', None), ('force:recordHomeInContext', None), ('force:recordLandingPage', None), ('force:recordLayout', None), ('force:recordLayoutBroker', None), ('force:recordLayoutList', None), ('force:recordLayoutRaptorContainerTest', None), ('force:recordLayoutTemplate', None), ('force:recordList', None), ('force:recordListDummyDataProvider', None), ('force:recordMergeLibraryTester', None), ('force:recordPageUserSettings', None), ('force:recordPageUserSettingsPage', None), ('force:recordPreviewItem', None), ('force:recordPreviewTemplateDesktop', None), ('force:recordRunnable', None), ('force:recordView', None), ('force:recordsComparison', None), ('force:recordsComparisonTemplate', None), ('force:regionHidden', None), ('force:relatedCardContainer', None), ('force:relatedContentContainer', None), ('force:relatedList', None), ('force:relatedListAdvancedGridInfo', None), ('force:relatedListAdvancedGridPrompt', None), ('force:relatedListCard', None), ('force:relatedListCardDesktop', None), ('force:relatedListContainer', None), ('force:relatedListContainerDataProvider', None), ('force:relatedListContainerDesignInfo', None), ('force:relatedListContainerDesignInfoDialogContent', None), ('force:relatedListContainerMetadataProvider', None), ('force:relatedListDataProvider', None), ('force:relatedListDesktop', None), ('force:relatedListHeader', None), ('force:relatedListHover', None), ('force:relatedListPreview', None), ('force:relatedListPreviewAdvancedGrid', None), ('force:relatedListPreviewDataProvider', None), ('force:relatedListPreviewGrid', None), ('force:relatedListPreviewRecordLayoutList', None), ('force:relatedListPreviewTransitionList', None), ('force:relatedListQuickLinksContainer', None), ('force:relatedListQuickLinksContainerDataProvider', None), ('force:relatedListQuickLinksContainerDesignInfo', None), ('force:relatedListRowsToDisplayEditor', None), ('force:relatedListShowActionBarEditor', None), ('force:relatedListSingleContainer', None), ('force:relatedListSingleContainerDesignInfo', None), ('force:relatedListSingleContainerDesignSubstitute', None), ('force:relatedListView', None), ('force:relatedListViewDataManager', None), ('force:relatedListViewManager', None), ('force:relatedListVisibilityEditor', None), ('force:relatedListsDataCollection', None), ('force:requires', None), ('force:retryButton', None), ('force:retryPanel', None), ('force:routingRetryPanel', None), ('force:rrhVersionIndicator', None), ('force:saveOption', None), ('force:scopedSldsTemplate', None), ('force:scrollableContext', None), ('force:scrollablePanel', None), ('force:searchFilterHeader', None), ('force:selectableListDataProvider', None), ('force:selectableListDataProviderSwitcher', None), ('force:selectableListView', None), ('force:selectableListViewHeader', None), ('force:selectableListViewSelectionColumn', None), ('force:selectableTargetAdapter', None), ('force:setupRouter', None), ('force:showSelectedListDataProvider', None), ('force:simpleRecordHomeActivitiesToggle', None), ('force:simpleRecordHomePageAssignments', None), ('force:simpleRecordHomePrompt', None), ('force:simpleRecordHomeSetupPage', None), ('force:simpleRecordHomeToggle', None), ('force:singularPluralMany', None), ('force:skipLink', None), ('force:sldsTemplate', None), ('force:socialAction', None), ('force:socialImage', None), ('force:socialPhoto', None), ('force:socialPhotoActionDialog', None), ('force:socialPhotoController', None), ('force:socialPhotoWrapper', None), ('force:socialPhoto_v2', None), ('force:sortFilterMenuItem', None), ('force:splitViewListRecord', None), ('force:splitViewListRecordItem', None), ('force:stackedTab', None), ('force:stackedTabContent', None), ('force:stackedTabset', None), ('force:stackedTabsetContainer', None), ('force:staticGoogleMap', None), ('force:statusIcon', None), ('force:statusIconSummary', None), ('force:storageIsolationKey', None), ('force:streamingConfiguration', None), ('force:style', None), ('force:switchToNetworkHandler', None), ('force:tabBar', None), ('force:tabBarItem', None), ('force:targetInteractionHandler', None), ('force:tempDepend', None), ('force:templateWorkspace', None), ('force:templateWorkspaceWrapper', None), ('force:textEnumLookup', None), ('force:themeCssVarLoader', None), ('force:themedTemplate', None), ('force:toast', None), ('force:toastManager', None), ('force:toastMessage', None), ('force:treeGridTriggerCell', None), ('force:userAssistanceDocPreview', None), ('force:userAssistanceLightbox', None), ('force:userAssistanceMenu', None), ('force:userAssistanceMenuItem', None), ('force:userAssistanceMenuItemNew', None), ('force:userAssistanceMenuNew', None), ('force:userAssistancePlatform', None), ('force:userAssistancePopovers', None), ('force:userAssistancePopoversManager', None), ('force:video', None), ('force:videoPreview', None), ('force:virtualAction', None), ('force:virtualAutocompleteMenu', None), ('force:virtualAutocompleteMenuDataProviderAdaptor', None), ('force:virtualAutocompleteMenuList', None), ('force:virtualAutocompleteMenuOption', None), ('force:virtualCheckbox', None), ('force:virtualGrid', None), ('force:virtualRecordList', None), ('force:virtualRecordsComparison', None), ('force:virtualRowAction', None), ('force:virtualRowActionColumn', None), ('force:virtualRowNumberCell', None), ('force:virtualSelectionColumn', None), ('force:virtualTreeGrid', None), ('force:visualMessageQueue', None), ('force:walkthrough', None), ('force:walkthroughApps', None), ('forceChatter:abstractFeedItem', None), ('forceChatter:actionChatterContainer', None), ('forceChatter:actionLink', None), ('forceChatter:actionLinkButton', None), ('forceChatter:actionLinkGroup', None), ('forceChatter:actionLinkGroupStatus', None), ('forceChatter:addMemberCard', None), ('forceChatter:addMembers', None), ('forceChatter:addMembersTemplate', None), ('forceChatter:addParticipantDialog', None), ('forceChatter:addSkillToProfileAction', None), ('forceChatter:addToStreamAction', None), ('forceChatter:addToStreamPanel', None), ('forceChatter:addToStreamPopover', None), ('forceChatter:addToStreamPopoverFollowButton', None), ('forceChatter:alohaPagePost', None), ('forceChatter:anchor', None), ('forceChatter:announcementPost', None), ('forceChatter:askToJoinGroupAction', None), ('forceChatter:attachFileActionButton', None), ('forceChatter:attachFileButton', None), ('forceChatter:autocomplete', None), ('forceChatter:badgeFilterMenu', None), ('forceChatter:bannerPhotoCrop', None), ('forceChatter:basePublisher', None), ('forceChatter:bookmarkAction', None), ('forceChatter:canvasPost', None), ('forceChatter:changeFeedStatusAction', None), ('forceChatter:changeGroupType', None), ('forceChatter:chatterDisabledMessage', None), ('forceChatter:chatterExtensionButton', None), ('forceChatter:chatterExtensionsSetup', None), ('forceChatter:chatterFollow', None), ('forceChatter:chatterGenericRelatedListRecord', None), ('forceChatter:chatterGroupAnalytics', None), ('forceChatter:chatterGroupAnalyticsCountCard', None), ('forceChatter:chatterGroupAnalyticsFeedHistory', None), ('forceChatter:chatterGroupAnalyticsInAloha', None), ('forceChatter:chatterGroupAnalyticsNewMembers', None), ('forceChatter:chatterGroupAnalyticsTotals', None), ('forceChatter:chatterGroupCompactStencil', None), ('forceChatter:chatterGroupCompactStencilDesktop', None), ('forceChatter:chatterGroupMemberRequestRelatedListRecord', None), ('forceChatter:chatterGroupMemberRequestRelatedListRecordDesktop', None), ('forceChatter:chatterGroupMemberRequestRelatedListRecordMobile', None), ('forceChatter:chatterNotification', None), ('forceChatter:chatterUserRelatedListRecord', None), ('forceChatter:chatterUserRelatedListRecordDrillIn', None), ('forceChatter:closeAction', None), ('forceChatter:clumpHeader', None), ('forceChatter:clumpItem', None), ('forceChatter:clumpItemFullView', None), ('forceChatter:codeSnippetButton', None), ('forceChatter:codeSnippetModal', None), ('forceChatter:collatedUserPhotos', None), ('forceChatter:comment', None), ('forceChatter:commentRetrievalService', None), ('forceChatter:compactFeed', None), ('forceChatter:compactFeedDesignInfo', None), ('forceChatter:compactFeedItem', None), ('forceChatter:compactFeedItemBody', None), ('forceChatter:compactFeedMetric', None), ('forceChatter:compositeRecsDataProvider', None), ('forceChatter:compositionComponentContainer', None), ('forceChatter:compositionComponentContainerFooter', None), ('forceChatter:compoundFieldUserNameRenderer', None), ('forceChatter:compoundFieldsGroupName', None), ('forceChatter:compoundNameWithOutOfOffice', None), ('forceChatter:conditionalRichTextInputButton', None), ('forceChatter:contentFileSize', None), ('forceChatter:contentFolderItemTileTemplate', None), ('forceChatter:contentPost', None), ('forceChatter:contentVisibilityMonitor', None), ('forceChatter:crudStream', None), ('forceChatter:deleteBannerPhoto', None), ('forceChatter:deleteCommentAction', None), ('forceChatter:deleteFeedItemAction', None), ('forceChatter:deletePhoto', None), ('forceChatter:desktopChatter', None), ('forceChatter:desktopChatterContainer', None), ('forceChatter:desktopChatterFeedPanel', None), ('forceChatter:downVoteAction', None), ('forceChatter:editCommentAction', None), ('forceChatter:editGroupMembership', None), ('forceChatter:editGroupMembershipRequest', None), ('forceChatter:editGroupNotification', None), ('forceChatter:editGroupNotificationSettings', None), ('forceChatter:editManager', None), ('forceChatter:editPostAction', None), ('forceChatter:editTopicsAction', None), ('forceChatter:emailConfirmation', None), ('forceChatter:emojiButton', None), ('forceChatter:emojiPicker', None), ('forceChatter:endorseProfileSkillUserAction', None), ('forceChatter:enterGroupDetails', None), ('forceChatter:entityCard', None), ('forceChatter:entityLink', None), ('forceChatter:entityPhoto', None), ('forceChatter:entityPhotoDetail', None), ('forceChatter:exposedFeed', None), ('forceChatter:exposedFeedDesignInfo', None), ('forceChatter:exposedFeedDesktop', None), ('forceChatter:exposedFeedMobile', None), ('forceChatter:extensionInstanceRenderWrapper', None), ('forceChatter:facepilePreviewItem', None), ('forceChatter:feed', None), ('forceChatter:feedAnchor', None), ('forceChatter:feedAnchorSubMenu', None), ('forceChatter:feedAuxBody', None), ('forceChatter:feedAuxBodyCanvasPost', None), ('forceChatter:feedAuxBodyCaseComment', None), ('forceChatter:feedAuxBodyChatterExtensionInstance', None), ('forceChatter:feedAuxBodyChatterExtensionInstancesContainer', None), ('forceChatter:feedAuxBodyContentPost', None), ('forceChatter:feedAuxBodyEmailMessage', None), ('forceChatter:feedAuxBodyEmpty', None), ('forceChatter:feedAuxBodyEnhancedLink', None), ('forceChatter:feedAuxBodyLinkPost', None), ('forceChatter:feedAuxBodyMediaReferences', None), ('forceChatter:feedAuxBodyPollPost', None), ('forceChatter:feedAuxBodyPollPostResults', None), ('forceChatter:feedAuxBodyPollPostVote', None), ('forceChatter:feedAuxBodyQuestionPost', None), ('forceChatter:feedAuxBodyQuestionPostInner', None), ('forceChatter:feedAuxBodyRecordSummary', None), ('forceChatter:feedAuxBodySharedPost', None), ('forceChatter:feedAuxBodySharedRecord', None), ('forceChatter:feedAuxBodySocialPost', None), ('forceChatter:feedAuxBodyText', None), ('forceChatter:feedAuxBodyTrackedChange', None), ('forceChatter:feedBody', None), ('forceChatter:feedBodyBanner', None), ('forceChatter:feedBodyQuestionWithBestAnswer', None), ('forceChatter:feedBodyQuestionWithoutAnswer', None), ('forceChatter:feedBodySimple', None), ('forceChatter:feedBodyText', None), ('forceChatter:feedCommentInput', None), ('forceChatter:feedCommentInputDesktop', None), ('forceChatter:feedCommentInputMobile', None), ('forceChatter:feedContentAttachment', None), ('forceChatter:feedContentAttachmentPreview', None), ('forceChatter:feedContentFilePreview', None), ('forceChatter:feedElement', None), ('forceChatter:feedElementFullView', None), ('forceChatter:feedElementFullViewDefault', None), ('forceChatter:feedElementIteration', None), ('forceChatter:feedEventsProcessor', None), ('forceChatter:feedInner', None), ('forceChatter:feedItem', None), ('forceChatter:feedItemActionLinks', None), ('forceChatter:feedItemFullView', None), ('forceChatter:feedItemHeader', None), ('forceChatter:feedItemInteractions', None), ('forceChatter:feedPill', None), ('forceChatter:feedQbProxy', None), ('forceChatter:feedSorter', None), ('forceChatter:feedSwitcher', None), ('forceChatter:feedback', None), ('forceChatter:feeditemAttachments', None), ('forceChatter:fileIcon', None), ('forceChatter:fileSize', None), ('forceChatter:fileThumbnail', None), ('forceChatter:fileUploader', None), ('forceChatter:flagAction', None), ('forceChatter:flags', None), ('forceChatter:followAction', None), ('forceChatter:followInStreamAction', None), ('forceChatter:ftcList', None), ('forceChatter:ftcPreamble', None), ('forceChatter:fullFeed', None), ('forceChatter:genericFeedElement', None), ('forceChatter:groupAnnouncement', None), ('forceChatter:groupArchiveBanner', None), ('forceChatter:groupCreationWizard', None), ('forceChatter:groupDetailCard', None), ('forceChatter:groupMemberRoleSwitch', None), ('forceChatter:groupMembershipRequestButton', None), ('forceChatter:groupPreviewStencil', None), ('forceChatter:groupSearchDataProvider', None), ('forceChatter:groupTileMembershipButton', None), ('forceChatter:groupTileTemplate', None), ('forceChatter:headerPhotoCallout', None), ('forceChatter:highlightingScriptWrapper', None), ('forceChatter:inlineImageFileAction', None), ('forceChatter:inputInformationBody', None), ('forceChatter:invitePeople', None), ('forceChatter:joinGroupAction', None), ('forceChatter:knowledgeArticleHighlightsPreviewStencil', None), ('forceChatter:lazyFeedAuxBody', None), ('forceChatter:leaveGroupAction', None), ('forceChatter:lightningComponent', None), ('forceChatter:lightningFeedBodyText', None), ('forceChatter:likersCard', None), ('forceChatter:linkPost', None), ('forceChatter:mediaReferenceFullview', None), ('forceChatter:mediaReferencePreview', None), ('forceChatter:mediaReferences', None), ('forceChatter:mediaReferencesViewer', None), ('forceChatter:mentionAutocomplete', None), ('forceChatter:menuTriggerLinkWithTooltip', None), ('forceChatter:messageActivity', None), ('forceChatter:messageBodyInput', None), ('forceChatter:messageBodyInputPlainTextArea', None), ('forceChatter:messageBodyInputRichTextArea', None), ('forceChatter:messageBodyInputRichTextEditor', None), ('forceChatter:messageDetailView', None), ('forceChatter:messageDetailViewHeader', None), ('forceChatter:messageItem', None), ('forceChatter:messageListViewDataProvider', None), ('forceChatter:messagePublisher', None), ('forceChatter:messagePublisherDesktop', None), ('forceChatter:messageSegmentWrapper', None), ('forceChatter:messageSegments', None), ('forceChatter:messageSummary', None), ('forceChatter:messages', None), ('forceChatter:messagesListView', None), ('forceChatter:messagesListViewHeader', None), ('forceChatter:messagesManager', None), ('forceChatter:mobileChatter', None), ('forceChatter:moderationDialog', None), ('forceChatter:moveAction', None), ('forceChatter:moveExecution', None), ('forceChatter:muteAction', None), ('forceChatter:navigationalTopicDropdown', None), ('forceChatter:newContent', None), ('forceChatter:newContentButton', None), ('forceChatter:newMessageButton', None), ('forceChatter:newMessageNotification', None), ('forceChatter:notes', None), ('forceChatter:objectHomeTileView', None), ('forceChatter:outOfOfficeSettings', None), ('forceChatter:outputDescription', None), ('forceChatter:outputGroupCombinedType', None), ('forceChatter:outputGroupIsActivityGroup', None), ('forceChatter:outputGroupIsArchived', None), ('forceChatter:outputGroupIsBroadcast', None), ('forceChatter:outputGroupMemberCount', None), ('forceChatter:outputGroupMemberRole', None), ('forceChatter:outputInformationBody', None), ('forceChatter:outputRewardFundValue', None), ('forceChatter:outputShareType', None), ('forceChatter:outputSkillEndorsementCount', None), ('forceChatter:outputSkillUserCount', None), ('forceChatter:outputSkillUserName', None), ('forceChatter:outputUserAboutMe', None), ('forceChatter:outputUserCompanyName', None), ('forceChatter:outputUserIsActive', None), ('forceChatter:outputVersionNumber', None), ('forceChatter:overflowActionMenu', None), ('forceChatter:panelLauncherBadgeSelect', None), ('forceChatter:participantsInput', None), ('forceChatter:pill', None), ('forceChatter:pillBox', None), ('forceChatter:pillContainer', None), ('forceChatter:pillItem', None), ('forceChatter:pinAction', None), ('forceChatter:pinnedItemManager', None), ('forceChatter:pollPost', None), ('forceChatter:pollPostChoice', None), ('forceChatter:pollPostDesktop', None), ('forceChatter:pollPostMobile', None), ('forceChatter:postLinkSharing', None), ('forceChatter:preamble', None), ('forceChatter:progressBar', None), ('forceChatter:publishDraftPostAction', None), ('forceChatter:publisher', None), ('forceChatter:publisherAttachmentActionEmptyContainer', None), ('forceChatter:publisherAttachmentButton', None), ('forceChatter:publisherAttachmentFileUploadButton', None), ('forceChatter:publisherAttachmentItem', None), ('forceChatter:publisherAttachmentPreview', None), ('forceChatter:publisherAttachments', None), ('forceChatter:publisherAttachmentsGroup', None), ('forceChatter:publisherAttachmentsMenu', None), ('forceChatter:publisherContentAttachmentsPreviewContainer', None), ('forceChatter:publisherDesignInfo', None), ('forceChatter:publisherDesignSubstitute', None), ('forceChatter:publisherInput', None), ('forceChatter:publisherPresentation', None), ('forceChatter:publisherPresentationDesktop', None), ('forceChatter:publisherPresentationMobile', None), ('forceChatter:publisherPresentationPanel', None), ('forceChatter:publisherQuickAction', None), ('forceChatter:publisherQuickCreate', None), ('forceChatter:publisherSalesforceFileAction', None), ('forceChatter:publisherUploadFileAction', None), ('forceChatter:publisherVisibility', None), ('forceChatter:publisherVisibilityWrapper', None), ('forceChatter:questionPost', None), ('forceChatter:questionPostDesktop', None), ('forceChatter:questionPostMobile', None), ('forceChatter:quickActionLoader', None), ('forceChatter:recommendationAcceptButton', None), ('forceChatter:recommendationBase', None), ('forceChatter:recommendationBaseWidget', None), ('forceChatter:recommendationBig', None), ('forceChatter:recommendationCarousel', None), ('forceChatter:recommendationCarouselPage', None), ('forceChatter:recommendationCarouselWidget', None), ('forceChatter:recommendationFollowButton', None), ('forceChatter:recommendationInFeed', None), ('forceChatter:recommendationJoinButton', None), ('forceChatter:recommendationListCard', None), ('forceChatter:recommendationListWidget', None), ('forceChatter:recommendationSingleCard', None), ('forceChatter:recommendationSmall', None), ('forceChatter:recommendationTile', None), ('forceChatter:recommendationUiButton', None), ('forceChatter:recommendations', None), ('forceChatter:recommendationsBig', None), ('forceChatter:recommendationsBigDesignInfo', None), ('forceChatter:recommendationsDesignSubstitute', None), ('forceChatter:recordFeedActions', None), ('forceChatter:recordFeedContainer', None), ('forceChatter:recordFeedContainerDesignInfo', None), ('forceChatter:recordFeedContainerDesktop', None), ('forceChatter:recordFeedContainerDesktopWrapper', None), ('forceChatter:recordFeedContainerMobile', None), ('forceChatter:relatedCardContainer', None), ('forceChatter:relatedTopics', None), ('forceChatter:relatedTopicsDataProvider', None), ('forceChatter:removeParticipantDialog', None), ('forceChatter:richLinkPreviewMetadata', None), ('forceChatter:router', None), ('forceChatter:s1FeedsProxy', None), ('forceChatter:scroller', None), ('forceChatter:searchInFeed', None), ('forceChatter:seenByCard', None), ('forceChatter:selectBadge', None), ('forceChatter:selectBadgeDesktop', None), ('forceChatter:selectBadgeMobile', None), ('forceChatter:selectFileFromListViewPanel', None), ('forceChatter:selectGroupType', None), ('forceChatter:selectMention', None), ('forceChatter:selectMentionCachedDataProvider', None), ('forceChatter:selectMentionDataProvider', None), ('forceChatter:selectMentionOption', None), ('forceChatter:selectTopicSuggestion', None), ('forceChatter:selectTopicSuggestionDataProvider', None), ('forceChatter:selectTopicSuggestionOption', None), ('forceChatter:selectUserDataProvider', None), ('forceChatter:selectUserOption', None), ('forceChatter:selectedFileBadge', None), ('forceChatter:selectedThanksBadge', None), ('forceChatter:sfxAnnouncementPost', None), ('forceChatter:sfxEditGroupNotificationSettings', None), ('forceChatter:sfxFollowAction', None), ('forceChatter:sfxJoinGroupAction', None), ('forceChatter:sfxLeaveGroupAction', None), ('forceChatter:shareButton', None), ('forceChatter:sharePostMenu', None), ('forceChatter:simpleFeedItemTopics', None), ('forceChatter:slashAutocomplete', None), ('forceChatter:sortMenu', None), ('forceChatter:streamDeleteModalBody', None), ('forceChatter:streamEditDeleteAction', None), ('forceChatter:streamHeader', None), ('forceChatter:streamNotifications', None), ('forceChatter:streamsListing', None), ('forceChatter:streamsListingHeader', None), ('forceChatter:streamsListingMobile', None), ('forceChatter:streamsListingNavigation', None), ('forceChatter:streamsListingProvider', None), ('forceChatter:streamsListingRecordCell', None), ('forceChatter:streamsListingRowActionMenu', None), ('forceChatter:style', None), ('forceChatter:stypiEditor', None), ('forceChatter:tempDepend', None), ('forceChatter:textPost', None), ('forceChatter:textPostDesktop', None), ('forceChatter:textPostDesktopConditionalPanelActions', None), ('forceChatter:textPostMobile', None), ('forceChatter:thanksBadge', None), ('forceChatter:thanksBadgeSelected', None), ('forceChatter:thanksPost', None), ('forceChatter:thanksPostDesktop', None), ('forceChatter:thanksPostMobile', None), ('forceChatter:thanksPostUserSelect', None), ('forceChatter:thanksPostUserSelectDesktop', None), ('forceChatter:thanksPostUserSelectMobile', None), ('forceChatter:threadedComment', None), ('forceChatter:todayToMeFeed', None), ('forceChatter:toggleLike', None), ('forceChatter:topicAutocompleteInput', None), ('forceChatter:topicDescription', None), ('forceChatter:topicList', None), ('forceChatter:topicMetrics', None), ('forceChatter:topicMetricsItem', None), ('forceChatter:topicSuggestionAutoComplete', None), ('forceChatter:topicSuggestionPillBox', None), ('forceChatter:topicsOnRecordWrapper', None), ('forceChatter:topicsOnRecordWrapperDesignSubstitute', None), ('forceChatter:trailHeadCard', None), ('forceChatter:trailheadBadge', None), ('forceChatter:translationLanguageSelectionAction', None), ('forceChatter:trendingTopics', None), ('forceChatter:trendingTopicsDataProvider', None), ('forceChatter:trendingTopicsDesignSubstitute', None), ('forceChatter:truncatedOutputText', None), ('forceChatter:typingIndicator', None), ('forceChatter:unansweredQuestions', None), ('forceChatter:unansweredQuestionsDataProvider', None), ('forceChatter:upVote', None), ('forceChatter:updateBannerPhoto', None), ('forceChatter:updatePhoto', None), ('forceChatter:userPhoto', None), ('forceChatter:userPreviewStencil', None), ('forceChatter:userProfileAboutMeEdit', None), ('forceChatter:userProfileHighlightsStencil', None), ('forceChatter:userProfileHighlightsStencilDesktop', None), ('forceChatter:usersLookupDataProvider', None), ('forceChatter:verifyUnverifyAction', None), ('forceChatter:viewPhoto', None), ('forceChatter:votersCard', None), ('forceChatter:workspaceTileTemplate', None), ('forceCommunity:accountBrandImage', None), ('forceCommunity:accountBrandImageEdit', None), ('forceCommunity:accountBrandImageView', None), ('forceCommunity:accountBrandRecord', None), ('forceCommunity:accountBrandRecordDesignSubstitute', None), ('forceCommunity:actionButtonMobile', None), ('forceCommunity:actionsContainerMobile', None), ('forceCommunity:activateDeactivatePortalUser', None), ('forceCommunity:activityPanel', None), ('forceCommunity:addMember', None), ('forceCommunity:allResults', None), ('forceCommunity:analyticsListener', None), ('forceCommunity:analyticsObjectHome', None), ('forceCommunity:appLauncher', None), ('forceCommunity:appLauncherTester', None), ('forceCommunity:articleThumbVote', None), ('forceCommunity:askCommunity', None), ('forceCommunity:askCommunityDesignInfo', None), ('forceCommunity:askCommunitySuggestionDesignInfo', None), ('forceCommunity:bannerImageLayout', None), ('forceCommunity:baseRecordValidationComponent', None), ('forceCommunity:baseSearch', None), ('forceCommunity:breadcrumbs', None), ('forceCommunity:breadcrumbsDesignInfo', None), ('forceCommunity:buyerAccountDetail', None), ('forceCommunity:calendar', None), ('forceCommunity:campaignImage', None), ('forceCommunity:campaignImageEdit', None), ('forceCommunity:campaignImageView', None), ('forceCommunity:campaignSignup', None), ('forceCommunity:campaignTileList', None), ('forceCommunity:campaignTileListDataFieldsEditor', None), ('forceCommunity:campaignTileListDataFieldsItemEditor', None), ('forceCommunity:campaignTileListDataManager', None), ('forceCommunity:campaignTileTemplate', None), ('forceCommunity:cardLayoutWithImage', None), ('forceCommunity:cardLayoutWithTitleAndText', None), ('forceCommunity:carousel', None), ('forceCommunity:caseDeflection', None), ('forceCommunity:caseDeflectionDesignInfo', None), ('forceCommunity:caseDeflectionMetricsDesignInfo', None), ('forceCommunity:caseDeflectionZeroStateDesignInfo', None), ('forceCommunity:caseFeed', None), ('forceCommunity:changePassword', None), ('forceCommunity:chatterGroupAnalytics', None), ('forceCommunity:chatterGroupAnalyticsFeedHistory', None), ('forceCommunity:chatterGroupAnalyticsNewMembers', None), ('forceCommunity:chatterGroupAnalyticsTotals', None), ('forceCommunity:cmsConnect', None), ('forceCommunity:cmsConnectBindingProvider', None), ('forceCommunity:cmsConnectJSONCollectionDataBindingProvider', None), ('forceCommunity:cmsConnectJSONDataProvider', None), ('forceCommunity:cmsConnectJSONItemDataBindingProvider', None), ('forceCommunity:cmsContent', None), ('forceCommunity:cmsContentCardLayout', None), ('forceCommunity:cmsContentCollectionLayoutManager', None), ('forceCommunity:cmsContentGridLayout', None), ('forceCommunity:cmsContentItemDetailLayout', None), ('forceCommunity:cmsContentItemDetailManager', None), ('forceCommunity:cmsContentItemRenderer', None), ('forceCommunity:cmsContentLink', None), ('forceCommunity:commerceBilling', None), ('forceCommunity:commerceDelivery', None), ('forceCommunity:commerceNextButton', None), ('forceCommunity:commerceOrderConfirmation', None), ('forceCommunity:commerceOrderSummary', None), ('forceCommunity:commerceOrdersList', None), ('forceCommunity:commercePayment', None), ('forceCommunity:commerceReorder', None), ('forceCommunity:communitySelectBadge', None), ('forceCommunity:communitySelectBadgeDesktop', None), ('forceCommunity:communitySelectBadgeMobile', None), ('forceCommunity:communityThanksBadge', None), ('forceCommunity:communityThanksBadgeWrapper', None), ('forceCommunity:confirmMessageBody', None), ('forceCommunity:connectedSources', None), ('forceCommunity:contactSupportButton', None), ('forceCommunity:contactSupportButtonDesignInfo', None), ('forceCommunity:contactSupportConfirmation', None), ('forceCommunity:contactSupportFileInput', None), ('forceCommunity:contactSupportForm', None), ('forceCommunity:contactSupportFormDesignInfo', None), ('forceCommunity:contactSupportFormDesignSetupLink', None), ('forceCommunity:contactSupportFormDesignSupportSetupLink', None), ('forceCommunity:contactSupportSetupError', None), ('forceCommunity:createRecordButton', None), ('forceCommunity:createRecordForm', None), ('forceCommunity:dashboard', None), ('forceCommunity:dashboardDesignInfo', None), ('forceCommunity:dashboardList', None), ('forceCommunity:defaultCommAppPageTemplate', None), ('forceCommunity:deflection', None), ('forceCommunity:deflectionDataProvider', None), ('forceCommunity:deflectionOption', None), ('forceCommunity:deflectionSignalActions', None), ('forceCommunity:deflectionTracking', None), ('forceCommunity:deleteBadgeAssignment', None), ('forceCommunity:detailImageFirstLayout', None), ('forceCommunity:disablePortalUser', None), ('forceCommunity:dynamicCollection', None), ('forceCommunity:dynamicCollectionBaseDataProvider', None), ('forceCommunity:dynamicCollectionCarousel', None), ('forceCommunity:dynamicCollectionCarouselMultiSlide', None), ('forceCommunity:dynamicCollectionCarouselSlideshow', None), ('forceCommunity:dynamicCollectionEditorDesignInfo', None), ('forceCommunity:dynamicCollectionGrid', None), ('forceCommunity:dynamicCollectionListviewDataProvider', None), ('forceCommunity:embeddedQuipComponent', None), ('forceCommunity:embeddedService', None), ('forceCommunity:embeddedServiceDesignInfo', None), ('forceCommunity:embeddedServiceFeature', None), ('forceCommunity:embeddedServiceFieldService', None), ('forceCommunity:embeddedServiceFieldServiceDesignInfo', None), ('forceCommunity:embeddedServiceHelpButton', None), ('forceCommunity:embeddedServiceSidebar', None), ('forceCommunity:emptyComponentPlaceholder', None), ('forceCommunity:enablePortalUser', None), ('forceCommunity:expiringContent', None), ('forceCommunity:expiringContentBase', None), ('forceCommunity:expiringContentDesignInfo', None), ('forceCommunity:expiringContentDesignSubstitute', None), ('forceCommunity:feedCommentInput', None), ('forceCommunity:feedItemDetail', None), ('forceCommunity:feedPublisher', None), ('forceCommunity:feedPublisherDesignInfo', None), ('forceCommunity:feedResults', None), ('forceCommunity:fileDetailPage', None), ('forceCommunity:fileEngagement', None), ('forceCommunity:filesList', None), ('forceCommunity:flexTileLayoutWithImage', None), ('forceCommunity:flowCommunity', None), ('forceCommunity:flowCommunityDesignSubstitute', None), ('forceCommunity:follow', None), ('forceCommunity:followDesignInfo', None), ('forceCommunity:forceCommunityFeed', None), ('forceCommunity:forceCommunityFeedDesignInfo', None), ('forceCommunity:freeze', None), ('forceCommunity:freezeUserAction', None), ('forceCommunity:giveBadgeAction', None), ('forceCommunity:globalNavigation', None), ('forceCommunity:globalSearchInput', None), ('forceCommunity:groupAnnouncement', None), ('forceCommunity:groupContainer', None), ('forceCommunity:groupDetail', None), ('forceCommunity:groupHeadline', None), ('forceCommunity:groupHighlightStencilNapili', None), ('forceCommunity:groupObjectHome', None), ('forceCommunity:groupRecordHomeTabs', None), ('forceCommunity:groupRecordHomeTabsDesignInfo', None), ('forceCommunity:groupRelatedList', None), ('forceCommunity:headerCheckout', None), ('forceCommunity:headline', None), ('forceCommunity:headlineDesignInfo', None), ('forceCommunity:homeTabs', None), ('forceCommunity:homeTabsDesignInfo', None), ('forceCommunity:htmlBlock', None), ('forceCommunity:htmlBlockDesignInfo', None), ('forceCommunity:interactive', None), ('forceCommunity:iotEmbedded', None), ('forceCommunity:knowledgeablePeople', None), ('forceCommunity:languageMenuItem', None), ('forceCommunity:languagePicker', None), ('forceCommunity:languagePickerDesignInfo', None), ('forceCommunity:languagePickerTrigger', None), ('forceCommunity:languageSelector43', None), ('forceCommunity:languageSelectorDesignInfo', None), ('forceCommunity:leadInbox', None), ('forceCommunity:leadInboxStencil', None), ('forceCommunity:linkMenuItem', None), ('forceCommunity:listView', None), ('forceCommunity:loginAsPortalUser', None), ('forceCommunity:manageBuyerAccount', None), ('forceCommunity:managePartnerSuperUser', None), ('forceCommunity:managePortalAccount', None), ('forceCommunity:managedContent', None), ('forceCommunity:managedContentCollectionDataProvider', None), ('forceCommunity:managedContentDesignInfo', None), ('forceCommunity:managedContentDetail', None), ('forceCommunity:multiLevelNavigation', None), ('forceCommunity:navBar', None), ('forceCommunity:navigationMenu', None), ('forceCommunity:navigationMenuBase', None), ('forceCommunity:navigationMenuBaseInternal', None), ('forceCommunity:navigationMenuItem', None), ('forceCommunity:navigationMenuItemTriggerLink', None), ('forceCommunity:nbaWidget', None), ('forceCommunity:notifications', None), ('forceCommunity:objectHome', None), ('forceCommunity:objectHomeDesignInfo', None), ('forceCommunity:objectHomeEmptyDesignSubstitute', None), ('forceCommunity:omniBox', None), ('forceCommunity:omniBoxContactSupportActionMenuItem', None), ('forceCommunity:omniBoxSwitcher', None), ('forceCommunity:omniBoxTopicTriggerLink', None), ('forceCommunity:ordersMobileHome', None), ('forceCommunity:outputRichText', None), ('forceCommunity:pathAssistant', None), ('forceCommunity:pathAssistantDesignInfo', None), ('forceCommunity:pausedInterviewCard', None), ('forceCommunity:pausedInterviewCardDesignSubstitute', None), ('forceCommunity:pausedInterviewCardRow', None), ('forceCommunity:placeholder', None), ('forceCommunity:productDetail', None), ('forceCommunity:profileRenderer', None), ('forceCommunity:psscFeedsProxy', None), ('forceCommunity:psscPublisherSalesforceFileAction', None), ('forceCommunity:psscPublisherUploadFileAction', None), ('forceCommunity:psscSelectFileFromListViewPanel', None), ('forceCommunity:questionPostCommunities', None), ('forceCommunity:quillInsertAssetImageButton', None), ('forceCommunity:quipCard', None), ('forceCommunity:reCaptcha', None), ('forceCommunity:recommendations', None), ('forceCommunity:recommendationsDesignInfo', None), ('forceCommunity:recordDetail', None), ('forceCommunity:recordDetailDesignInfo', None), ('forceCommunity:recordHeadline', None), ('forceCommunity:recordHomeTabs', None), ('forceCommunity:recordListCompact', None), ('forceCommunity:recordListCompactCard', None), ('forceCommunity:recordListDesktop', None), ('forceCommunity:recordListMobile', None), ('forceCommunity:recordListStandard', None), ('forceCommunity:relatedList', None), ('forceCommunity:relatedListDesignSubstitute', None), ('forceCommunity:relatedListSingle', None), ('forceCommunity:relatedQuipItemsView', None), ('forceCommunity:relatedRecords', None), ('forceCommunity:relatedRecordsDesignInfo', None), ('forceCommunity:relatedTopics', None), ('forceCommunity:reportBuilder', None), ('forceCommunity:reportChart', None), ('forceCommunity:reportChartDesignInfo', None), ('forceCommunity:reportList', None), ('forceCommunity:reportPage', None), ('forceCommunity:reportPageDesignInfo', None), ('forceCommunity:reputationLeaderboard', None), ('forceCommunity:reputationLeaderboard42', None), ('forceCommunity:reputationLeaderboardDataProvider', None), ('forceCommunity:reputationLeaderboardDesignInfo', None), ('forceCommunity:reputationLeaderboardRow', None), ('forceCommunity:reputationWidget', None), ('forceCommunity:resetPasswordPortalUser', None), ('forceCommunity:resultsList', None), ('forceCommunity:retrieveCommunityRoute', None), ('forceCommunity:richText', None), ('forceCommunity:richTextDesignInfo', None), ('forceCommunity:richTextInline', None), ('forceCommunity:richTextInlineDesignInfo', None), ('forceCommunity:routeLink', None), ('forceCommunity:scorecard', None), ('forceCommunity:scorecardMetric', None), ('forceCommunity:search', None), ('forceCommunity:searchBox', None), ('forceCommunity:selectGroupType', None), ('forceCommunity:seoAssistant', None), ('forceCommunity:showPortalUserMemberList', None), ('forceCommunity:showUserNetworkMemberList', None), ('forceCommunity:signalCollector', None), ('forceCommunity:stamp', None), ('forceCommunity:standardListViewGrid', None), ('forceCommunity:streamDetail', None), ('forceCommunity:streamDetailDesktop', None), ('forceCommunity:streamDetailMobile', None), ('forceCommunity:streamList', None), ('forceCommunity:suggestedFilesCard', None), ('forceCommunity:surveyCommunity', None), ('forceCommunity:surveyCommunityDesignSubstitute', None), ('forceCommunity:tabset', None), ('forceCommunity:taskList', None), ('forceCommunity:taskListCompact', None), ('forceCommunity:tempDepend', None), ('forceCommunity:themeHeaderB2B', None), ('forceCommunity:themeHeaderBase', None), ('forceCommunity:themeHeaderCompact', None), ('forceCommunity:themeHeaderCompactMenuStylesDesignInfo', None), ('forceCommunity:themeHeaderHelpCenter', None), ('forceCommunity:themeHeaderStacked', None), ('forceCommunity:themeHeaderStackedMenuStylesDesignInfo', None), ('forceCommunity:themeHeroBase', None), ('forceCommunity:themeHeroStarter', None), ('forceCommunity:themeLogo', None), ('forceCommunity:themeLogoSalesforce', None), ('forceCommunity:themeNav', None), ('forceCommunity:themeNavSubMenu', None), ('forceCommunity:themeNavTrigger', None), ('forceCommunity:themeProfileMenu', None), ('forceCommunity:themeProfileMenuLoginButtonDesignInfo', None), ('forceCommunity:themeSearch', None), ('forceCommunity:themeSearchHero', None), ('forceCommunity:themeSearchSection', None), ('forceCommunity:tileLayoutWithImage', None), ('forceCommunity:tileMenu', None), ('forceCommunity:tileMenuItem', None), ('forceCommunity:topArticleItem', None), ('forceCommunity:topArticleList', None), ('forceCommunity:topArticleListDataProvider', None), ('forceCommunity:topArticleListDesignInfo', None), ('forceCommunity:topArticleListForTopic', None), ('forceCommunity:topicCatalog', None), ('forceCommunity:topicCatalogDesignInfo', None), ('forceCommunity:topicDescription', None), ('forceCommunity:topicMerticsDesignInfo', None), ('forceCommunity:topicMetrics', None), ('forceCommunity:topicsOnRecordDesignSubstitute', None), ('forceCommunity:topicsOnRecordWrapper', None), ('forceCommunity:trendingTopics', None), ('forceCommunity:trendingTopicsDesignInfo', None), ('forceCommunity:trendingTopicsDesignSubstitute', None), ('forceCommunity:updatePhotoSitecomWrapper', None), ('forceCommunity:userPreviewStencilNapili', None), ('forceCommunity:userProfileAndSettings', None), ('forceCommunity:userProfileBase', None), ('forceCommunity:userProfileBody', None), ('forceCommunity:userProfileDetail', None), ('forceCommunity:userProfileEdit', None), ('forceCommunity:userProfileHeader', None), ('forceCommunity:userProfileHeaderDetail', None), ('forceCommunity:userProfileKnowledgeableAbout', None), ('forceCommunity:userProfileStats', None), ('forceCommunity:userProfileTabs', None), ('forceCommunity:userProfileWithBanner', None), ('forceCommunity:userProfileWithBannerDesignInfo', None), ('forceCommunity:userRecognitionList', None), ('forceCommunity:userRecognitions', None), ('forceCommunity:userRecordHome', None), ('forceCommunity:userRecordHomeDesignInfo', None), ('forceCommunity:userRelatedList', None), ('forceCommunity:userSettings', None), ('forceCommunity:userSettingsCustomizable', None), ('forceCommunity:userSettingsInternal', None), ('forceCommunity:visualforcePage', None), ('forceCommunity:waveDashboard', None), ('forceCommunity:workspacesList', None), ('forceCommunity:workspacesListBetaBadge', None), ('forceContent:actionEventLink', None), ('forceContent:actionNewVersion', None), ('forceContent:assetDetailsPanel', None), ('forceContent:assetPicker', None), ('forceContent:baseFolderAction', None), ('forceContent:basePreview', None), ('forceContent:basePreviewPlayer', None), ('forceContent:basePreviewToolbar', None), ('forceContent:baseQuipSetupAssistantStep', None), ('forceContent:compoundFieldsTitleRenderer', None), ('forceContent:contentDistributionViewer', None), ('forceContent:contentDistributionViewerToolbar', None), ('forceContent:contentDocumentHighlightsStencilDesktop', None), ('forceContent:contentFolderDistributionViewer', None), ('forceContent:contentHubAuthenticationBanner', None), ('forceContent:contentHubError', None), ('forceContent:contentLinkableEntityIcon', None), ('forceContent:contentThumbnail', None), ('forceContent:contentVersionEditorPanel', None), ('forceContent:contentVersionFieldsEditor', None), ('forceContent:contentVersionRelatedListRecord', None), ('forceContent:contentVersionsEditWizard', None), ('forceContent:contentWorkspaceDataProvider', None), ('forceContent:contentWorkspaceImage', None), ('forceContent:contentWorkspaceNameRenderer', None), ('forceContent:createContentDocForContentHubFile', None), ('forceContent:createFolderAction', None), ('forceContent:deleteFolderAction', None), ('forceContent:documentLinkRowStencil', None), ('forceContent:downloadExternalFileAction', None), ('forceContent:editContentWorkspaceImage', None), ('forceContent:editFolderAction', None), ('forceContent:embeddedQuipActionMenu', None), ('forceContent:embeddedQuipActionMenuBase', None), ('forceContent:embeddedQuipComponent', None), ('forceContent:embeddedQuipCreateFieldButton', None), ('forceContent:embeddedQuipDocumentChangePanel', None), ('forceContent:embeddedQuipEditor', None), ('forceContent:embeddedQuipEditorOption', None), ('forceContent:embeddedQuipFieldEditor', None), ('forceContent:embeddedQuipSharingEditor', None), ('forceContent:embeddedQuipUrlEditor', None), ('forceContent:feedActionOpenExternalFile', None), ('forceContent:feedActionsDropDown', None), ('forceContent:feedAttachmentAction', None), ('forceContent:fileBadge', None), ('forceContent:fileCard', None), ('forceContent:fileDataManager', None), ('forceContent:fileDataProvider', None), ('forceContent:fileDroppableZone', None), ('forceContent:fileInfoPopover', None), ('forceContent:fileLinkShare', None), ('forceContent:fileLinkShareAction', None), ('forceContent:fileList', None), ('forceContent:fileListDesktop', None), ('forceContent:fileListSorterDataProvider', None), ('forceContent:fileListViewDataManager', None), ('forceContent:filePicker', None), ('forceContent:filePickerDesktop', None), ('forceContent:filePickerMobile', None), ('forceContent:filePreview', None), ('forceContent:fileSearchPanel', None), ('forceContent:fileShareConfirmationModalBody', None), ('forceContent:fileShareDataProvider', None), ('forceContent:fileShareGrid', None), ('forceContent:fileShareGridRemoveColumn', None), ('forceContent:fileShareGridShareTypeColumn', None), ('forceContent:fileShareGridTitleColumn', None), ('forceContent:fileSharePanel', None), ('forceContent:fileShareRecommendation', None), ('forceContent:fileSourceListItem', None), ('forceContent:fileSourceMenu', None), ('forceContent:fileSourceMenuDesktop', None), ('forceContent:fileSourceMenuItem', None), ('forceContent:fileSourceMenuItemDesktop', None), ('forceContent:fileSourceMenuSeparator', None), ('forceContent:fileTestingUtil', None), ('forceContent:fileTitle', None), ('forceContent:fileUpload', None), ('forceContent:fileUploadAction', None), ('forceContent:fileUploaderPanel', None), ('forceContent:filesHomeBreadcrumbs', None), ('forceContent:filesHomeDesktop', None), ('forceContent:filesHomeDesktopHeader', None), ('forceContent:filesListDesktop', None), ('forceContent:filesListMobile', None), ('forceContent:filesManager', None), ('forceContent:folderCreateAndEditPanel', None), ('forceContent:folderDeletePanel', None), ('forceContent:folderLinkShareAction', None), ('forceContent:folderManager', None), ('forceContent:folderSelectorPanel', None), ('forceContent:folderizeActionPanel', None), ('forceContent:folderizeButton', None), ('forceContent:inlineSpinner', None), ('forceContent:latestVersionDetailPanel', None), ('forceContent:librariesHomeDesktop', None), ('forceContent:librariesHomeMobile', None), ('forceContent:listLoadingTemplate', None), ('forceContent:listRecord', None), ('forceContent:listUploadFileAction', None), ('forceContent:listViewTitleRenderer', None), ('forceContent:manageWorkspaceMembersAction', None), ('forceContent:manageWorkspaceMembersPanel', None), ('forceContent:mobilePreviewPlayer', None), ('forceContent:mobilePreviewPlayerPageToolbar', None), ('forceContent:mobilePreviewPlayerTopToolbar', None), ('forceContent:modalFileUploader', None), ('forceContent:modalPreviewManager', None), ('forceContent:modalPreviewPlayer', None), ('forceContent:moveFilePanel', None), ('forceContent:multiFileUploader', None), ('forceContent:openExternalFileAction', None), ('forceContent:outputEntityName', None), ('forceContent:outputReasonForChange', None), ('forceContent:outputSourceTitle', None), ('forceContent:outputTitle', None), ('forceContent:panelFooter', None), ('forceContent:panelHeader', None), ('forceContent:previewInfoProvider', None), ('forceContent:previewPanel', None), ('forceContent:previewPlayer', None), ('forceContent:previewPlayerPagingToolbar', None), ('forceContent:previewPlayerTopToolbar', None), ('forceContent:previewStatus', None), ('forceContent:previewerAction', None), ('forceContent:previewerActionNewVersion', None), ('forceContent:previewerActionOpenExternalFile', None), ('forceContent:previewerActionsBar', None), ('forceContent:quipActionMenu', None), ('forceContent:quipActionMenuAloha', None), ('forceContent:quipActionMenuBase', None), ('forceContent:quipCard', None), ('forceContent:quipCardAloha', None), ('forceContent:quipCardLightning', None), ('forceContent:quipChooseDocumentPanel', None), ('forceContent:quipContentHubAuthPanel', None), ('forceContent:quipContentHubErrorAloha', None), ('forceContent:quipCreatePanel', None), ('forceContent:quipCreateSiteSetupFlow', None), ('forceContent:quipCreateSiteStartStep', None), ('forceContent:quipExistingSiteSetupFlow', None), ('forceContent:quipExistingSiteSuccessStep', None), ('forceContent:quipExistingSiteUpgradeRequiredStep', None), ('forceContent:quipExistingSiteVerificationStep', None), ('forceContent:quipItem', None), ('forceContent:quipItemDropdown', None), ('forceContent:quipItemDropdownAloha', None), ('forceContent:quipItemsAloha', None), ('forceContent:quipMarketingBlock', None), ('forceContent:quipMassActionCreatePanel', None), ('forceContent:quipPreview', None), ('forceContent:quipSearchAutocompleteOption', None), ('forceContent:quipSearchBox', None), ('forceContent:quipSearchDataProvider', None), ('forceContent:quipSearchPanel', None), ('forceContent:quipSetupAssistant', None), ('forceContent:quipSetupAssistantButton', None), ('forceContent:quipSetupAssistantCustomLinkTemplate', None), ('forceContent:quipSetupAssistantIframe', None), ('forceContent:quipSetupAssistantStep', None), ('forceContent:quipSetupAssistantSubstepButton', None), ('forceContent:quipSheetIframe', None), ('forceContent:quipSheetMassAction', None), ('forceContent:quipSiteFlowButton', None), ('forceContent:quipSiteInput', None), ('forceContent:quipSiteSuccessStep', None), ('forceContent:quipSummaryBlock', None), ('forceContent:quipSupportTextDesignInfo', None), ('forceContent:quipTemplateButton', None), ('forceContent:relatedListPreviewFileList', None), ('forceContent:relatedQuipItemsActionMenu', None), ('forceContent:relatedQuipItemsView', None), ('forceContent:searchCompoundFieldsTitleRenderer', None), ('forceContent:searchStencil', None), ('forceContent:selectFileFromSalesforce', None), ('forceContent:shareExternalFileAction', None), ('forceContent:shareFileAction', None), ('forceContent:singleFileUploader', None), ('forceContent:statsPanel', None), ('forceContent:suggestedFile', None), ('forceContent:suggestedFilesCard', None), ('forceContent:suggestedFilesConfirmationPanel', None), ('forceContent:svgPreview', None), ('forceContent:tempDepend', None), ('forceContent:thumbnailPreview', None), ('forceContent:unshareQuipItemPanel', None), ('forceContent:uploadAssetAction', None), ('forceContent:uploadPanel', None), ('forceContent:uploadPanelFooter', None), ('forceContent:videoPreview', None), ('forceContent:virtualRelatedListStencil', None), ('forceContent:workspaceMemberDeleteColumn', None), ('forceContent:workspaceMembersDataProvider', None), ('forceContent:workspaceMembersGrid', None), ('forceContent:workspaceMembersPermissionColumn', None), ('forceContent:workspaceMembersTitleColumn', None), ('forceDiscovery:knowledgeablePeople', None), ('forceDiscovery:knowledgeablePeopleDataProvider', None), ('forceDiscovery:knowledgeablePeopleRow', None), ('forceDiscovery:userProfileKnowledgeableAbout', None), ('forceDiscovery:userProfileKnowledgeableAboutDataProvider', None), ('forceDiscovery:userProfileKnowledgeableAboutModal', None), ('forceDiscovery:userProfileKnowledgeableAboutTopic', None), ('forceHelp:contentSearch', None), ('forceHelp:contentSearchDataProvider', None), ('forceHelp:helpMenu', None), ('forceKnowledge:KnowledgeArticleVersionArchiveMassAction', None), ('forceKnowledge:KnowledgeArticleVersionAttachArticleAction', None), ('forceKnowledge:KnowledgeArticleVersionInsertContentToEmailAction', None), ('forceKnowledge:KnowledgeArticleVersionInsertUrlToEmailAction', None), ('forceKnowledge:KnowledgeArticleVersionPreviewPanel', None), ('forceKnowledge:articleDataCategoryChooser', None), ('forceKnowledge:articleDataCategoryChooserTester', None), ('forceKnowledge:articleDataCategoryViewer', None), ('forceKnowledge:articleDataCategoryViewerTester', None), ('forceKnowledge:articleInputDesktopDataProvider', None), ('forceKnowledge:articleMasterVersion', None), ('forceKnowledge:articleRedirect', None), ('forceKnowledge:articleSearchDesktop', None), ('forceKnowledge:articleSearchInputDesktop', None), ('forceKnowledge:articleSearchPrefilter', None), ('forceKnowledge:articleSearchResult', None), ('forceKnowledge:articleSearchSortMenu', None), ('forceKnowledge:articleStars', None), ('forceKnowledge:articleThumbVote', None), ('forceKnowledge:articleVersionHistory', None), ('forceKnowledge:articleVersionHistoryDataProvider', None), ('forceKnowledge:articlesObjectHomeTablet', None), ('forceKnowledge:articlesSearch', None), ('forceKnowledge:assignArticle', None), ('forceKnowledge:blockSection', None), ('forceKnowledge:createCodeBlockPanel', None), ('forceKnowledge:highlightedOutputText', None), ('forceKnowledge:inputRichText', None), ('forceKnowledge:kbResultFieldTitle', None), ('forceKnowledge:kbResultStencil', None), ('forceKnowledge:kbResultStencilDesktop', None), ('forceKnowledge:kbResultStencilWithHover', None), ('forceKnowledge:knowledgeArchiveOptionDialog', None), ('forceKnowledge:knowledgeArticleVersionActionsCommon', None), ('forceKnowledge:knowledgeArticleVersionArchiveAction', None), ('forceKnowledge:knowledgeArticleVersionCreateDraftFromOnlineAction', None), ('forceKnowledge:knowledgeArticleVersionDeleteDraftAction', None), ('forceKnowledge:knowledgeArticleVersionDeleteMassAction', None), ('forceKnowledge:knowledgeArticleVersionFollowAction', None), ('forceKnowledge:knowledgeArticleVersionHighlightsPreviewStencil', None), ('forceKnowledge:knowledgeArticleVersionMassAssignAction', None), ('forceKnowledge:knowledgeArticleVersionMassSubmitForTranslationAction', None), ('forceKnowledge:knowledgeArticleVersionPublishAction', None), ('forceKnowledge:knowledgeArticleVersionPublishMassAction', None), ('forceKnowledge:knowledgeArticleVersionRestoreAction', None), ('forceKnowledge:knowledgeArticleVersionRestoreMassAction', None), ('forceKnowledge:knowledgeArticleVersionShareSites', None), ('forceKnowledge:knowledgeArticleVersionTranslationPublishAction', None), ('forceKnowledge:knowledgeDeleteOptionDialog', None), ('forceKnowledge:knowledgeEditCompletedTranslation', None), ('forceKnowledge:knowledgeMassArchiveOptionDialog', None), ('forceKnowledge:knowledgeMassAssignArticle', None), ('forceKnowledge:knowledgeMassDeleteOptionDialog', None), ('forceKnowledge:knowledgeMassPublishOptionDialog', None), ('forceKnowledge:knowledgeMassRestoreOptionDialog', None), ('forceKnowledge:knowledgeMassSubmitForTranslationOptionDialog', None), ('forceKnowledge:knowledgeMigrationFieldsMappingTab', None), ('forceKnowledge:knowledgeMigrationFieldsMappingTabInputSelect', None), ('forceKnowledge:knowledgeMigrationFlow', None), ('forceKnowledge:knowledgeMigrationFlowEndStep', None), ('forceKnowledge:knowledgeMigrationFlowFieldsMappingStep', None), ('forceKnowledge:knowledgeMigrationFlowFilesMigrationStep', None), ('forceKnowledge:knowledgeMigrationFlowStartStep', None), ('forceKnowledge:knowledgeMigrationForSingleArticleTypeFlow', None), ('forceKnowledge:knowledgeMigrationForSingleArticleTypeFlowEndStep', None), ('forceKnowledge:knowledgeMigrationForSingleArticleTypeFlowStartStep', None), ('forceKnowledge:knowledgeMigrationSetup', None), ('forceKnowledge:knowledgeMigrationSetupNonUiAction', None), ('forceKnowledge:knowledgePublishOptionDialog', None), ('forceKnowledge:knowledgeRestoreOptionDialog', None), ('forceKnowledge:multiSelectTable', None), ('forceKnowledge:multiSelectTree', None), ('forceKnowledge:multiSelectTreeNode', None), ('forceKnowledge:optionDialogFooter', None), ('forceKnowledge:outputPublishStatus', None), ('forceKnowledge:outputRichTextForKnowledge', None), ('forceKnowledge:pillListSection', None), ('forceKnowledge:pillListViewer', None), ('forceKnowledge:recordHomeLanguageSwitcher', None), ('forceKnowledge:submitKnowledgeArticleVersionForTranslation', None), ('forceKnowledge:suggestedArticle', None), ('forceKnowledge:tempDepend', None), ('forceKnowledge:titleInput', None), ('forceKnowledge:urlNameInput', None), ('forceSearch:actionDataProvider', None), ('forceSearch:assistant', None), ('forceSearch:assistantDialog', None), ('forceSearch:assistantDialogContainer', None), ('forceSearch:assistantListViewPreview', None), ('forceSearch:assistantRecordPreview', None), ('forceSearch:assistantSecondaryPanel', None), ('forceSearch:assistantSuggestionItem', None), ('forceSearch:assistantSuggestionsDataProvider', None), ('forceSearch:assistantSuggestionsList', None), ('forceSearch:assistantTip', None), ('forceSearch:baseSearch', None), ('forceSearch:baseSearchInput', None), ('forceSearch:baseSearchPage', None), ('forceSearch:bestResult', None), ('forceSearch:bestResultFeedback', None), ('forceSearch:bestResultFooter', None), ('forceSearch:desktopHeader', None), ('forceSearch:desktopHeaderManager', None), ('forceSearch:entityMenuItem', None), ('forceSearch:entitySelectorMenu', None), ('forceSearch:experimentContextInitializer', None), ('forceSearch:feedback', None), ('forceSearch:filterInput', None), ('forceSearch:filterInputPicklist', None), ('forceSearch:filterInputRadio', None), ('forceSearch:filterInputRange', None), ('forceSearch:filterInputText', None), ('forceSearch:filterPanel', None), ('forceSearch:globalSearchLauncher', None), ('forceSearch:groupContainer', None), ('forceSearch:headerSearchInput', None), ('forceSearch:input', None), ('forceSearch:inputDataProvider', None), ('forceSearch:inputDesktop', None), ('forceSearch:inputDesktopDataProvider', None), ('forceSearch:inputDesktopListFooter', None), ('forceSearch:inputDesktopOption', None), ('forceSearch:inputDesktopPillWrapper', None), ('forceSearch:inputEntitySelector', None), ('forceSearch:inputEntitySelectorDataProvider', None), ('forceSearch:inputLookupDesktop', None), ('forceSearch:inputLookupDesktopActionItem', None), ('forceSearch:inputLookupDesktopDataProvider', None), ('forceSearch:inputLookupDesktopOption', None), ('forceSearch:inputMobile', None), ('forceSearch:intentQueryMessage', None), ('forceSearch:lookupAdvanced', None), ('forceSearch:lookupAdvancedFooter', None), ('forceSearch:mouseTrap', None), ('forceSearch:mru', None), ('forceSearch:mruDataProvider', None), ('forceSearch:mruMobile', None), ('forceSearch:mruMobileItem', None), ('forceSearch:multiScopesDataProvider', None), ('forceSearch:noResults', None), ('forceSearch:optionDataProvider', None), ('forceSearch:predictedResults', None), ('forceSearch:predictedResultsAppChart', None), ('forceSearch:predictedResultsDataProvider', None), ('forceSearch:queryExpansionMessage', None), ('forceSearch:queryFeedback', None), ('forceSearch:queryFeedbackMessage', None), ('forceSearch:queryMessage', None), ('forceSearch:queryRecourseMessage', None), ('forceSearch:queryRemediationMessage', None), ('forceSearch:queryRemediationMessagePanel', None), ('forceSearch:recordPicker', None), ('forceSearch:recordPickerOption', None), ('forceSearch:recordPickerOptionCard', None), ('forceSearch:recordPickerOptionInline', None), ('forceSearch:recordPreview', None), ('forceSearch:recordPreviewActions', None), ('forceSearch:recordPreviewBody', None), ('forceSearch:recordPreviewFields', None), ('forceSearch:recordPreviewHeader', None), ('forceSearch:recordPreviewRelatedList', None), ('forceSearch:recordPreviewTitle', None), ('forceSearch:results', None), ('forceSearch:resultsCardView', None), ('forceSearch:resultsCompact', None), ('forceSearch:resultsDataProvider', None), ('forceSearch:resultsFeed', None), ('forceSearch:resultsFeedMouseTrap', None), ('forceSearch:resultsFilters', None), ('forceSearch:resultsGridLVM', None), ('forceSearch:resultsGridLVMDataManager', None), ('forceSearch:resultsGridView', None), ('forceSearch:resultsGridViewMouseTrap', None), ('forceSearch:resultsHeaderFilters', None), ('forceSearch:resultsList', None), ('forceSearch:resultsListDataManager', None), ('forceSearch:resultsListItem', None), ('forceSearch:resultsListMouseTrap', None), ('forceSearch:resultsMultiScope', None), ('forceSearch:resultsMultiScopeCompact', None), ('forceSearch:resultsRegion', None), ('forceSearch:resultsRegionDesktop', None), ('forceSearch:resultsRegionMobile', None), ('forceSearch:resultsTopResults', None), ('forceSearch:resultsTopResultsDataProvider', None), ('forceSearch:scopeItem', None), ('forceSearch:scopeOverflow', None), ('forceSearch:scopeOverflowList', None), ('forceSearch:scopes', None), ('forceSearch:scopesDataProvider', None), ('forceSearch:scopesList', None), ('forceSearch:scopesListDataProvider', None), ('forceSearch:scopesListPlaceholder', None), ('forceSearch:scopesListSection', None), ('forceSearch:scopesRibbon', None), ('forceSearch:scopesRibbonDataProvider', None), ('forceSearch:search', None), ('forceSearch:searchDataProvider', None), ('forceSearch:searchFor', None), ('forceSearch:searchGDP', None), ('forceSearch:searchGDPCache', None), ('forceSearch:searchGDPCacheActivity', None), ('forceSearch:searchGDPCacheMrus', None), ('forceSearch:searchGDPCachePermsAndPrefs', None), ('forceSearch:searchGDPCacheResultsFilters', None), ('forceSearch:searchGDPCacheScopes', None), ('forceSearch:searchInputListHeader', None), ('forceSearch:searchMoreBox', None), ('forceSearch:searchPage', None), ('forceSearch:searchPageAssistant', None), ('forceSearch:searchPageAssistantDesktop', None), ('forceSearch:searchPageAssistantMobile', None), ('forceSearch:searchPageDesktop', None), ('forceSearch:searchResultsGridHeader', None), ('forceSearch:searchResultsSummary', None), ('forceSearch:searchScopeHeader', None), ('forceSearch:test', None), ('forceSearch:testMockDataProvider', None), ('forceSearch:typeAheadDataProvider', None), ('forceTopic:featuredTopicItem', None), ('forceTopic:featuredTopics', None), ('forceTopic:featuredTopicsDataProvider', None), ('forceTopic:featuredTopicsDesignInfo', None), ('forceTopic:navigationTopicsMenu', None), ('forceTopic:placeholder', None), ('forceTopic:publisherTopicsWidget', None), ('forceTopic:simpleTopicAssignmentItem', None), ('forceTopic:simpleTopicAssignments', None), ('forceTopic:subTopicNavigation', None), ('forceTopic:subTopicNavigationDropDown', None), ('forceTopic:topicBreadcrumbs', None), ('forceTopic:topicLink', None), ('forceTopic:topicList', None), ('forceTopic:topicNavigationMenu', None), ('forceTopic:topicNavigationMenuLink', None), ('forceTopic:topicTriggerLink', None), ('frameworkEditor:arrangementEditor', None), ('frameworkEditor:baseEditorCanvasConfig', None), ('frameworkEditor:baseInvalidComponent', None), ('frameworkEditor:canvas', None), ('frameworkEditor:canvasContainer', None), ('frameworkEditor:canvasElement', None), ('frameworkEditor:canvasNode', None), ('frameworkEditor:canvasPanel', None), ('frameworkEditor:componentPlaceholder', None), ('frameworkEditor:errorComponent', None), ('frameworkEditor:modelRemoteData', None), ('frameworkEditor:noUserAccessPlaceholder', None), ('frameworkEditor:palettePanel', None), ('frameworkEditor:propertyPanel', None), ('frameworkEditor:surfaceTemplate', None), ('frameworkEditor:unsupportedFormFactorComponent', None), ('frameworkEditor:warningComponent', None), ('googleConnector:emailTransportServiceSetting', None), ('googleConnector:emailTransportServiceSetupPage', None), ('hammerSetup:hammerResultStatus', None), ('hammerSetup:progressPie', None), ('home:activateActionOverrideAppAssignmentDataProvider', None), ('home:activateActionOverrideAppAssignmentStep', None), ('home:activateActionOverrideModeSelectionStep', None), ('home:activateActionOverrideReviewAssignmentDataProvider', None), ('home:activateActionOverrideReviewAssignmentStep', None), ('home:activateActionOverrideSelectedAppList', None), ('home:activateAppProfileReviewStep', None), ('home:activateAppProfileReviewStepDataProvider', None), ('home:activateHomeHierarchy', None), ('home:activateHomePage', None), ('home:activateProfileOverrideProfileStep', None), ('home:activateProfileOverrideProfileStepDataProvider', None), ('home:activateSelectedAppProfileList', None), ('home:activateSelectedAppProfileListDataProvider', None), ('home:assistant', None), ('home:assistantActionsContainer', None), ('home:assistantCardExpandedPanel', None), ('home:assistantCardList', None), ('home:assistantCardStencil', None), ('home:assistantCollapsedCard', None), ('home:assistantSmallActionButton', None), ('home:baseCollapsedCard', None), ('home:defaultPageAssignment', None), ('home:desktopTemplate', None), ('home:eventCardDataManager', None), ('home:eventCardStencil', None), ('home:eventContainer', None), ('home:goalEditor', None), ('home:goalSetting', None), ('home:heroChart', None), ('home:heroChartHeader', None), ('home:heroChartLegend', None), ('home:heroChartOpptyContainer', None), ('home:heroChartOverlay', None), ('home:heroChartTable', None), ('home:homeCard', None), ('home:landing', None), ('home:myDayHeroChart', None), ('home:newsPanel', None), ('home:outputLookup', None), ('home:outputLookupWithPreviewWithoutProfilePic', None), ('home:pageAssignmentByProfileReviewStep', None), ('home:pageAssignmentDefaultAssignmentReviewStep', None), ('home:pageAssignmentList', None), ('home:pageAssignmentListByApp', None), ('home:pageAssignmentListByAppDataProvider', None), ('home:pageAssignmentListDataProvider', None), ('home:pageAssignmentPagePickerStep', None), ('home:pageAssignmentPagePickerStepDataProvider', None), ('home:pageAssignmentProfilePickerStep', None), ('home:pageAssignmentReviewStepDataProvider', None), ('home:pageAssignmentSetDefaultOrAssignStep', None), ('home:pageAssignmentsSetupPage', None), ('home:productivityMetrics', None), ('home:productivityMetricsCard', None), ('home:productivityMetricsEditor', None), ('home:productivityMetricsEditorRow', None), ('home:productivityMetricsHeader', None), ('home:recentRecordContainer', None), ('home:recentRecordListRow', None), ('home:recentsItemStencil', None), ('home:recentsRecordListView', None), ('home:removeSelectedAppProfileStep', None), ('home:setupActionMenu', None), ('home:tempDepend', None), ('home:topDealsCardDataProvider', None), ('home:topDealsContainer', None), ('home:topDealsListStencil', None), ('home:workQueueSummary', None), ('industries_manufacturing:actualsCalculationModeRenderer', None), ('industries_manufacturing:agreementCancelAction', None), ('industries_manufacturing:agreementSettings', None), ('industries_manufacturing:agreementTerms', None), ('industries_manufacturing:agreementTermsDataGrid', None), ('industries_manufacturing:statusRenderer', None), ('industries_manufacturing:updateContact', None), ('industries_manufacturing:updateContactFooterActions', None), ('instrumentation:accessLocatorEngine', None), ('instrumentation:beacon', None), ('instrumentation:chart', None), ('instrumentation:dockingContent', None), ('instrumentation:dynamicChartWrapper', None), ('instrumentation:lightningUsage', None), ('instrumentation:lightningUsageChatterFeedback', None), ('instrumentation:lightningUsageSetup', None), ('instrumentation:locatorEngine', None), ('instrumentation:locatorViewer', None), ('instrumentation:mainTemplate', None), ('instrumentation:transactionViewer', None), ('instrumentation:transactionsDefault', None), ('instrumentation:transactionsLtnginteraction', None), ('instrumentation:transactionsLtngpageView', None), ('instrumentation:transactionsProvider', None), ('instrumentation:uiManager', None), ('instrumentation:usageAppHeader', None), ('instrumentation:usageBody', None), ('instrumentation:usageChartGroup', None), ('instrumentation:usageNavBar', None), ('instrumentation:usageOptimizer', None), ('instrumentation:usageTab', None), ('instrumentation:viewerDockingPanel', None), ('instrumentation:viewerSeparateWindow', None), ('instrumentation:viewerSharedWindow', None), ('instrumentation:viewerWaterfall', None), ('instrumentation:waterfall', None), ('iot:activityLog', None), ('iot:context', None), ('iot:dataProviderOrchestrationContext', None), ('iot:dataproviderActivityLog', None), ('iot:dataproviderDataset', None), ('iot:dataproviderOrchestration', None), ('iot:dataproviderOrchestrationUsage', None), ('iot:embedded', None), ('iot:enablePanel', None), ('iot:insightsMetricsEditor', None), ('iot:insightsSourcePicklistEditor', None), ('iot:iotBasicSetup', None), ('iot:iotui', None), ('iot:orchestration', None), ('iot:usage', None), ('iot:webtemplate', None), ('knowledgeone:articleActions', None), ('knowledgeone:dialog', None), ('knowledgeone:knowledgeentitydetail', None), ('knowledgeone:message', None), ('laf:appLayoutHost', None), ('laf:baseLayoutContainer', None), ('laf:baseRouter', None), ('laf:directCmpReferenceRouter', None), ('laf:layoutContainer', None), ('laf:mobileWebLayoutContainer', None), ('laf:navEventManager', None), ('laf:navigationServiceAPI', None), ('laf:pageHost', None), ('laf:pageTransactionProcessor', None), ('laf:platformPageResolver', None), ('laf:platformRouter', None), ('laf:sObjectRouter', None), ('laf:singlePaneWindowManager', None), ('laf:standardLayoutContainer', None), ('laf:standardLayoutContentSelector', None), ('laf:windowedLayoutContainer', None), ('lbpm:actionHistoryList', None), ('lbpm:actionHistoryListDataProvider', None), ('lbpm:actionHistoryListItem', None), ('lbpm:actionHistoryTab', None), ('lbpm:actionList', None), ('lbpm:actionListChannelSettingsModal', None), ('lbpm:actionListChannelSettingsTab', None), ('lbpm:actionListChannelsEditor', None), ('lbpm:actionListDefaultFlow', None), ('lbpm:actionListDefaultFlowsSelector', None), ('lbpm:actionListDesignInfo', None), ('lbpm:actionListFlow', None), ('lbpm:actionListFlowStages', None), ('lbpm:actionListModalHeader', None), ('lbpm:actionListTab', None), ('lbpm:actionPicker', None), ('lbpm:actionPickerDataProvider', None), ('lbpm:actionSettings', None), ('lbpm:actionSettingsEditor', None), ('lbpm:actionSettingsModal', None), ('lbpm:availableEntitiesDataProvider', None), ('lbpm:defaultFlowDropZone', None), ('lbpm:flowBody', None), ('lbpm:flowRuntimeForRecordAction', None), ('lbpm:lsfActionSettings', None), ('lbpm:lsfChannelSettings', None), ('lbpm:lsfChannelSettingsStep', None), ('lbpm:lsfChannelSettingsTab', None), ('lbpm:lsfDefaultFlow', None), ('lbpm:lsfDefaultFlowDropZone', None), ('lbpm:lsfDefaultFlowsSelector', None), ('lbpm:lsfEditDeployment', None), ('lbpm:lsfEntitySelectionStep', None), ('lbpm:lsfFilterStep', None), ('lbpm:lsfIntroStep', None), ('lbpm:lsfNameStep', None), ('lbpm:lsfNewDeployment', None), ('lbpm:lsfRecommendationsStep', None), ('lbpm:lsfSaveStep', None), ('lbpm:lsfSuccessStep', None), ('lbpm:nbaPanel', None), ('lbpm:pausedFlowsSection', None), ('lbpm:recordActionDeployment', None), ('lbpm:recordActionDeploymentList', None), ('lbpm:recordActionManager', None), ('lcwizard:dataLoaderSetupPage', None), ('lcwizard:lcGuidedSetupAuthProviderStep', None), ('lcwizard:lcGuidedSetupAuthStep', None), ('lcwizard:lcGuidedSetupDialog', None), ('lcwizard:lcGuidedSetupHome', None), ('lcwizard:lcGuidedSetupNewXdsStep', None), ('lcwizard:lcGuidedSetupObjectRelDialog', None), ('lcwizard:lcGuidedSetupParametersStep', None), ('lcwizard:lcGuidedSetupPrereqStep', None), ('lcwizard:lcGuidedSetupRelChooseObjectStep', None), ('lcwizard:lcGuidedSetupRelFLSStep', None), ('lcwizard:lcGuidedSetupRelFieldDetailStep', None), ('lcwizard:lcGuidedSetupRelPageLayoutStep', None), ('lcwizard:lcGuidedSetupRelRelatedListStep', None), ('lcwizard:lcGuidedSetupSearchLayoutStep', None), ('lcwizard:lcGuidedSetupTabNextStep', None), ('lcwizard:lcGuidedSetupTabStep', None), ('lcwizard:lcGuidedSetupValidateAndSyncStep', None), ('lightning:accordion', None), ('lightning:accordionSection', None), ('lightning:breadcrumbs', None), ('lightning:button', None), ('lightning:buttonGroup', None), ('lightning:buttonIcon', None), ('lightning:buttonMenu', None), ('lightning:buttonStateful', None), ('lightning:card', None), ('lightning:carousel', None), ('lightning:container', None), ('lightning:conversationToolkitAPI', None), ('lightning:deprecatedButtonIcon', None), ('lightning:deprecatedFormattedTime', None), ('lightning:deprecatedIcon', None), ('lightning:deprecatedPrimitiveIcon', None), ('lightning:eventBusAPI', None), ('lightning:fileCard', None), ('lightning:flexipageRegionInfo', None), ('lightning:flow', None), ('lightning:formElement', None), ('lightning:inputRichText', None), ('lightning:inputRichTextButtonBase', None), ('lightning:inputRichTextButtonSimple', None), ('lightning:insertImageButton', None), ('lightning:layout', None), ('lightning:layoutItem', None), ('lightning:listView', None), ('lightning:menuItem', None), ('lightning:navigation', None), ('lightning:navigationItemAPI', None), ('lightning:nextBestActions', None), ('lightning:notificationsLibrary', None), ('lightning:omniToolkitAPI', None), ('lightning:overlayInteropWrapper', None), ('lightning:overlayLibrary', None), ('lightning:path', None), ('lightning:picklistPath', None), ('lightning:pill', None), ('lightning:primitiveFileDroppableZone', None), ('lightning:primitiveIconTest', None), ('lightning:primitiveTextOrComponent', None), ('lightning:progressIndicator', None), ('lightning:quickActionAPI', None), ('lightning:quipCard', None), ('lightning:recordEditForm', None), ('lightning:recordViewForm', None), ('lightning:select', None), ('lightning:tab', None), ('lightning:tabset', None), ('lightning:test', None), ('lightning:tile', None), ('lightning:tooltip', None), ('lightning:unsavedChanges', None), ('lightning:utilityBarAPI', None), ('lightning:verticalNavigation', None), ('lightning:verticalNavigationOverflow', None), ('lightning:verticalNavigationSection', None), ('lightning:workspaceAPI', None), ('lightningInbox:associateButton', None), ('lightningInbox:contextualTrackingContainer', None), ('lightningInbox:contextualTrackingDesignInfo', None), ('lightningInbox:contextualTrackingDesignSubstitute', None), ('lightningInbox:eacWidgetContainer', None), ('lightningInbox:fuelGaugeHeader', None), ('lightningInbox:globalsManager', None), ('lightningInbox:gmailAfterSendManager', None), ('lightningInbox:insertFreeTimeWidgetContainer', None), ('lightningInbox:insertFreeTimeWidgetDesignInfo', None), ('lightningInbox:logItemButtonContainer', None), ('lightningInbox:logItemButtonDesignInfo', None), ('lightningInbox:logItemCardHeader', None), ('lightningInbox:logItemFlowContainer', None), ('lightningInbox:logItemFlowContainerFooter', None), ('lightningInbox:logItemInfoBanner', None), ('lightningInbox:logItemInviteeListRowStencil', None), ('lightningInbox:logItemNoneRow', None), ('lightningInbox:logItemPeopleListCard', None), ('lightningInbox:logItemRelatedRecordListCard', None), ('lightningInbox:logItemRelatedRecordListCardStencil', None), ('lightningInbox:logItemRelatedRecordViewMoreListCardStencil', None), ('lightningInbox:logItemSearchBar', None), ('lightningInbox:manageLinksContainer', None), ('lightningInbox:pinnedComponentToggle', None), ('lightningInbox:placeholder', None), ('lightningInbox:readReceiptListContainer', None), ('lightningInbox:readReceiptListContainerDesignInfo', None), ('lightningInbox:readReceiptListContainerSubstitute', None), ('lightningInbox:readReceiptWidgetDesignInfo', None), ('lightningInbox:readreceiptWidgetContainer', None), ('lightningInbox:recordSelectButton', None), ('lightningInbox:sendLaterListContainer', None), ('lightningInbox:sendLaterListDesignInfo', None), ('lightningInbox:sendLaterListDesignSubstitute', None), ('lightningInbox:sendLaterWidgetContainer', None), ('lightningInbox:sendLaterWidgetDesignInfo', None), ('lightningInbox:snippetsActionContainer', None), ('lightningInbox:snippetsActionContainerDesignSubstitute', None), ('lightningInbox:snippetsDesignInfo', None), ('lightningInbox:welcomeMatContainer', None), ('lightningInbox:whatEntityMatchingManager', None), ('lightningcommunity:backButton', None), ('lightningcomponentdemo:exampleAccordionBasic', None), ('lightningcomponentdemo:exampleAccordionConditional', None), ('lightningcomponentdemo:exampleAccordionMultiple', None), ('lightningcomponentdemo:exampleAccordionSection', None), ('lightningcomponentdemo:exampleAvatarBasic', None), ('lightningcomponentdemo:exampleAvatarIcons', None), ('lightningcomponentdemo:exampleAvatarInitials', None), ('lightningcomponentdemo:exampleAvatarSizes', None), ('lightningcomponentdemo:exampleAvatarVariants', None), ('lightningcomponentdemo:exampleBadge', None), ('lightningcomponentdemo:exampleBaseBreadcrumbs', None), ('lightningcomponentdemo:exampleBreadcrumbsWithIteration', None), ('lightningcomponentdemo:exampleBreadcrumbsWithOnClick', None), ('lightningcomponentdemo:exampleButtonGroup', None), ('lightningcomponentdemo:exampleButtonGroupDisabled', None), ('lightningcomponentdemo:exampleButtonGroupInverse', None), ('lightningcomponentdemo:exampleButtonGroupWithButtonMenu', None), ('lightningcomponentdemo:exampleButtonGroupWithButtonMenuDisabled', None), ('lightningcomponentdemo:exampleButtonIconStateful', None), ('lightningcomponentdemo:exampleButtonIconStatefulBorderFilled', None), ('lightningcomponentdemo:exampleButtonIconStatefulInverse', None), ('lightningcomponentdemo:exampleButtonIconStatefulSelected', None), ('lightningcomponentdemo:exampleButtonMenu', None), ('lightningcomponentdemo:exampleButtonMenuContainerIcon', None), ('lightningcomponentdemo:exampleButtonMenuDifferentIcon', None), ('lightningcomponentdemo:exampleButtonMenuDoubleIcon', None), ('lightningcomponentdemo:exampleButtonMenuSingleIcon', None), ('lightningcomponentdemo:exampleButtonStateful', None), ('lightningcomponentdemo:exampleButtonStatefulBrand', None), ('lightningcomponentdemo:exampleButtonStatefulInverse', None), ('lightningcomponentdemo:exampleButtonStatefulText', None), ('lightningcomponentdemo:exampleButtonsAccessibility', None), ('lightningcomponentdemo:exampleButtonsDisabled', None), ('lightningcomponentdemo:exampleButtonsIcon', None), ('lightningcomponentdemo:exampleButtonsIconInverse', None), ('lightningcomponentdemo:exampleButtonsInverse', None), ('lightningcomponentdemo:exampleCardBase', None), ('lightningcomponentdemo:exampleCardCustom', None), ('lightningcomponentdemo:exampleCardNarrow', None), ('lightningcomponentdemo:exampleCarousel', None), ('lightningcomponentdemo:exampleCarouselAutoScrollOff', None), ('lightningcomponentdemo:exampleCheckboxGroup', None), ('lightningcomponentdemo:exampleCheckboxGroupDisabled', None), ('lightningcomponentdemo:exampleCheckboxGroupRequired', None), ('lightningcomponentdemo:exampleClickToDial', None), ('lightningcomponentdemo:exampleClickToDialPlain', None), ('lightningcomponentdemo:exampleColorPicker', None), ('lightningcomponentdemo:exampleCombobox', None), ('lightningcomponentdemo:exampleComboboxDisabled', None), ('lightningcomponentdemo:exampleComboboxLong', None), ('lightningcomponentdemo:exampleComboboxMultiSelectedOptions', None), ('lightningcomponentdemo:exampleComboboxRequired', None), ('lightningcomponentdemo:exampleCurrencyFormatting', None), ('lightningcomponentdemo:exampleDatatableBase', None), ('lightningcomponentdemo:exampleDatatableDynamicRowActions', None), ('lightningcomponentdemo:exampleDatatableInAction', None), ('lightningcomponentdemo:exampleDatatableInfiniteLoading', None), ('lightningcomponentdemo:exampleDatatableInlineEdit', None), ('lightningcomponentdemo:exampleDatatableMaxRowSelection', None), ('lightningcomponentdemo:exampleDatatableRowSelection', None), ('lightningcomponentdemo:exampleDatatableStaticRowActions', None), ('lightningcomponentdemo:exampleDatatableWithoutCheckboxes', None), ('lightningcomponentdemo:exampleDateFormatting', None), ('lightningcomponentdemo:exampleDateTimeFormatting', None), ('lightningcomponentdemo:exampleDecimalFormatting', None), ('lightningcomponentdemo:exampleDualListbox', None), ('lightningcomponentdemo:exampleDualListboxDefaultValues', None), ('lightningcomponentdemo:exampleDualListboxMinMaxValues', None), ('lightningcomponentdemo:exampleDualListboxRequiredValues', None), ('lightningcomponentdemo:exampleDynamicIconEQ', None), ('lightningcomponentdemo:exampleDynamicIconEllie', None), ('lightningcomponentdemo:exampleDynamicIconScore', None), ('lightningcomponentdemo:exampleDynamicIconStrength', None), ('lightningcomponentdemo:exampleDynamicIconTrend', None), ('lightningcomponentdemo:exampleDynamicIconWaffle', None), ('lightningcomponentdemo:exampleFileSelectorDisabled', None), ('lightningcomponentdemo:exampleFileUpload', None), ('lightningcomponentdemo:exampleFlow', None), ('lightningcomponentdemo:exampleFormattedAddress', None), ('lightningcomponentdemo:exampleFormattedEmail', None), ('lightningcomponentdemo:exampleFormattedLocation', None), ('lightningcomponentdemo:exampleFormattedName', None), ('lightningcomponentdemo:exampleFormattedPhone', None), ('lightningcomponentdemo:exampleFormattedRichText', None), ('lightningcomponentdemo:exampleFormattedText', None), ('lightningcomponentdemo:exampleFormattedUrl', None), ('lightningcomponentdemo:exampleGroupedCombobox', None), ('lightningcomponentdemo:exampleHelptextBasic', None), ('lightningcomponentdemo:exampleHelptextIcon', None), ('lightningcomponentdemo:exampleIcon', None), ('lightningcomponentdemo:exampleIconCustom', None), ('lightningcomponentdemo:exampleIconVariants', None), ('lightningcomponentdemo:exampleInputAddress', None), ('lightningcomponentdemo:exampleInputAddressWithList', None), ('lightningcomponentdemo:exampleInputCheckbox', None), ('lightningcomponentdemo:exampleInputCheckboxButton', None), ('lightningcomponentdemo:exampleInputColor', None), ('lightningcomponentdemo:exampleInputDate', None), ('lightningcomponentdemo:exampleInputDateTime', None), ('lightningcomponentdemo:exampleInputEmail', None), ('lightningcomponentdemo:exampleInputFile', None), ('lightningcomponentdemo:exampleInputLocation', None), ('lightningcomponentdemo:exampleInputMaxlength', None), ('lightningcomponentdemo:exampleInputName', None), ('lightningcomponentdemo:exampleInputNumber', None), ('lightningcomponentdemo:exampleInputPassword', None), ('lightningcomponentdemo:exampleInputRadio', None), ('lightningcomponentdemo:exampleInputRichTextButtonImage', None), ('lightningcomponentdemo:exampleInputRichTextButtonLink', None), ('lightningcomponentdemo:exampleInputSearch', None), ('lightningcomponentdemo:exampleInputSearchHiddenLabel', None), ('lightningcomponentdemo:exampleInputSearchWithSpinner', None), ('lightningcomponentdemo:exampleInputTel', None), ('lightningcomponentdemo:exampleInputText', None), ('lightningcomponentdemo:exampleInputTime', None), ('lightningcomponentdemo:exampleInputToggle', None), ('lightningcomponentdemo:exampleInputUrl', None), ('lightningcomponentdemo:exampleInputValidation', None), ('lightningcomponentdemo:exampleLayoutHorizontalSpace', None), ('lightningcomponentdemo:exampleLayoutHorizontalSpread', None), ('lightningcomponentdemo:exampleLayoutItems', None), ('lightningcomponentdemo:exampleLayoutItemsAlignmentBump', None), ('lightningcomponentdemo:exampleLayoutItemsBase', None), ('lightningcomponentdemo:exampleLayoutItemsDefaultSize', None), ('lightningcomponentdemo:exampleLayoutItemsFlexNoGrow', None), ('lightningcomponentdemo:exampleLayoutItemsFlexible', None), ('lightningcomponentdemo:exampleLayoutItemsMediumSizeOverride', None), ('lightningcomponentdemo:exampleLayoutItemsPadding', None), ('lightningcomponentdemo:exampleLayoutItemsSizeOverrides', None), ('lightningcomponentdemo:exampleLayoutPage', None), ('lightningcomponentdemo:exampleLayoutPullToBoundary', None), ('lightningcomponentdemo:exampleLayoutSimple', None), ('lightningcomponentdemo:exampleLayoutVerticalCenter', None), ('lightningcomponentdemo:exampleLayoutVerticalStretch', None), ('lightningcomponentdemo:exampleMapAttributes', None), ('lightningcomponentdemo:exampleMapMultipleMarkers', None), ('lightningcomponentdemo:exampleMapSingleMarker', None), ('lightningcomponentdemo:exampleMultiPicklist', None), ('lightningcomponentdemo:exampleOpenFiles', None), ('lightningcomponentdemo:exampleOutputField', None), ('lightningcomponentdemo:exampleOutputFieldDisplay', None), ('lightningcomponentdemo:exampleOutputFieldVariants', None), ('lightningcomponentdemo:exampleOutputFieldVariantsDisplay', None), ('lightningcomponentdemo:examplePercentFormatting', None), ('lightningcomponentdemo:examplePicklist', None), ('lightningcomponentdemo:examplePillAvatar', None), ('lightningcomponentdemo:examplePillBase', None), ('lightningcomponentdemo:examplePillContainer', None), ('lightningcomponentdemo:examplePillIcon', None), ('lightningcomponentdemo:examplePillWithError', None), ('lightningcomponentdemo:exampleProgressBar', None), ('lightningcomponentdemo:exampleProgressBarInAction', None), ('lightningcomponentdemo:exampleProgressIndicator', None), ('lightningcomponentdemo:exampleProgressIndicatorPath', None), ('lightningcomponentdemo:exampleProgressIndicatorWithIfCondition', None), ('lightningcomponentdemo:exampleProgressIndicatorWithIteration', None), ('lightningcomponentdemo:exampleRadioButtonGroup', None), ('lightningcomponentdemo:exampleRadioButtonGroupDisabled', None), ('lightningcomponentdemo:exampleRadioButtonGroupRequired', None), ('lightningcomponentdemo:exampleRadioGroup', None), ('lightningcomponentdemo:exampleRadioGroupDisabled', None), ('lightningcomponentdemo:exampleRadioGroupRequired', None), ('lightningcomponentdemo:exampleRecordCreate', None), ('lightningcomponentdemo:exampleRecordEdit', None), ('lightningcomponentdemo:exampleRegularButtons', None), ('lightningcomponentdemo:exampleRegularButtonsIcon', None), ('lightningcomponentdemo:exampleRelativeDateTime', None), ('lightningcomponentdemo:exampleRichTextBottomToolbar', None), ('lightningcomponentdemo:exampleRichTextButton', None), ('lightningcomponentdemo:exampleRichTextEditor', None), ('lightningcomponentdemo:exampleRichTextEditorWithButton', None), ('lightningcomponentdemo:exampleSelect', None), ('lightningcomponentdemo:exampleSelectChange', None), ('lightningcomponentdemo:exampleSelectDynamic', None), ('lightningcomponentdemo:exampleSelectIteration', None), ('lightningcomponentdemo:exampleSlider', None), ('lightningcomponentdemo:exampleSliderBasic', None), ('lightningcomponentdemo:exampleSliderSizes', None), ('lightningcomponentdemo:exampleSliderType', None), ('lightningcomponentdemo:exampleSliderVariant', None), ('lightningcomponentdemo:exampleSpinnerIf', None), ('lightningcomponentdemo:exampleSpinnerInverse', None), ('lightningcomponentdemo:exampleSpinnerSizes', None), ('lightningcomponentdemo:exampleTabsAuraIf', None), ('lightningcomponentdemo:exampleTabsDefault', None), ('lightningcomponentdemo:exampleTabsLazy', None), ('lightningcomponentdemo:exampleTabsScoped', None), ('lightningcomponentdemo:exampleTabsVertical', None), ('lightningcomponentdemo:exampleTabset', None), ('lightningcomponentdemo:exampleTabsetOverflow', None), ('lightningcomponentdemo:exampleTabsetSelect', None), ('lightningcomponentdemo:exampleTextarea', None), ('lightningcomponentdemo:exampleTile', None), ('lightningcomponentdemo:exampleTileBoard', None), ('lightningcomponentdemo:exampleTileWithAvatar', None), ('lightningcomponentdemo:exampleTileWithIcon', None), ('lightningcomponentdemo:exampleTimeFormatting', None), ('lightningcomponentdemo:exampleTooltipAuto', None), ('lightningcomponentdemo:exampleTooltipButton', None), ('lightningcomponentdemo:exampleTooltipSimple', None), ('lightningcomponentdemo:exampleTree', None), ('lightningcomponentdemo:exampleTreeAddition', None), ('lightningcomponentdemo:exampleTreeGridAsyncExpand', None), ('lightningcomponentdemo:exampleTreeGridBase', None), ('lightningcomponentdemo:exampleTreeGridWithExpandedStateQuery', None), ('lightningcomponentdemo:exampleTreeNavigation', None), ('lightningcomponentdemo:exampleTreeNested', None), ('lightningcomponentdemo:exampleTreeSelect', None), ('lightningcomponentdemo:exampleTreeWithMetatext', None), ('lightningcomponentdemo:exampleVerticalNavAdvanced', None), ('lightningcomponentdemo:exampleVerticalNavBadge', None), ('lightningcomponentdemo:exampleVerticalNavBasic', None), ('lightningcomponentdemo:exampleVerticalNavCompact', None), ('lightningcomponentdemo:exampleVerticalNavHref', None), ('lightningcomponentdemo:exampleVerticalNavIcon', None), ('lightningcomponentdemo:exampleVerticalNavIteration', None), ('lightningcomponentdemo:exampleVerticalNavOverflow', None), ('lightningcomponentdemo:exampleVerticalNavSelected', None), ('lightningcomponentdemo:exampleVerticalNavShaded', None), ('lightningcomponentdemo:exampleVerticalNavValidation', None), ('lightningcomponentdemo:fileItem', None), ('lightningcomponentdemo:fileSelector', None), ('lightningcomponentdemo:filesList', None), ('lightningcomponentdemo:iconGenerator', None), ('lightningcomponentdemo:iconItem', None), ('lightningcomponentdemo:iconLibrary', None), ('lightningcomponentdemo:iconList', None), ('lightningcomponentdemo:layoutGenerator', None), ('lightningdocs:avatar', None), ('lightningdocs:badge', None), ('lightningdocs:breadcrumb', None), ('lightningdocs:buttonIconStateful', None), ('lightningdocs:checkboxGroup', None), ('lightningdocs:clickToDial', None), ('lightningdocs:combobox', None), ('lightningdocs:datatable', None), ('lightningdocs:dualListbox', None), ('lightningdocs:dynamicIcon', None), ('lightningdocs:empApi', None), ('lightningdocs:fileUpload', None), ('lightningdocs:formattedAddress', None), ('lightningdocs:formattedDateTime', None), ('lightningdocs:formattedEmail', None), ('lightningdocs:formattedLocation', None), ('lightningdocs:formattedName', None), ('lightningdocs:formattedNumber', None), ('lightningdocs:formattedPhone', None), ('lightningdocs:formattedRichText', None), ('lightningdocs:formattedText', None), ('lightningdocs:formattedTime', None), ('lightningdocs:formattedUrl', None), ('lightningdocs:helptext', None), ('lightningdocs:icon', None), ('lightningdocs:input', None), ('lightningdocs:inputAddress', None), ('lightningdocs:inputField', None), ('lightningdocs:inputLocation', None), ('lightningdocs:inputName', None), ('lightningdocs:map', None), ('lightningdocs:outputField', None), ('lightningdocs:pillContainer', None), ('lightningdocs:progressBar', None), ('lightningdocs:radioGroup', None), ('lightningdocs:recordForm', None), ('lightningdocs:relativeDateTime', None), ('lightningdocs:slider', None), ('lightningdocs:spinner', None), ('lightningdocs:textarea', None), ('lightningdocs:tree', None), ('lightningdocs:treeGrid', None), ('lightningdocs:verticalNavigationItem', None), ('lightningdocs:verticalNavigationItemBadge', None), ('lightningdocs:verticalNavigationItemIcon', None), ('lightningsnapin:minimizedAPI', None), ('lightningsnapin:prechatAPI', None), ('lightningsnapin:settingsAPI', None), ('liveAgent:abstractPushedRequest', None), ('liveAgent:chatWidgetWork', None), ('liveAgent:liveChatButton', None), ('liveAgent:presenceStatus', None), ('liveAgent:presenceStatusMenuLink', None), ('liveAgent:presenceStatusTester', None), ('liveAgent:presenceStatusTesterData', None), ('liveAgent:presenceWidget', None), ('liveAgent:presenceWidgetTester', None), ('liveAgent:presenceWidgetTesterData', None), ('liveAgent:pushedEntityRequest', None), ('liveAgent:pushedEntityRequestTester', None), ('liveAgent:pushedEntityRequestTesterData', None), ('lst:listViewManagerDataTableWrapper', None), ('ltng:developerError', None), ('ltng:outAppTemplate', None), ('ltng:require', None), ('ltngtools:dataProvider', None), ('macros:browser', None), ('macros:browserPanel', None), ('macros:browserPanelEmptyListPreview', None), ('macros:browserPanelList', None), ('macros:browserPanelListDataProvider', None), ('macros:browserPanelListFolderItem', None), ('macros:browserPanelListItem', None), ('macros:browserPanelListRecordItem', None), ('macros:browserPanelNavigationBreadCrumbItem', None), ('macros:browserPanelNavigationBreadCrumbs', None), ('macros:canvas', None), ('macros:dialog', None), ('macros:editor', None), ('macros:emailTemplatePillList', None), ('macros:engine', None), ('macros:executionPanel', None), ('macros:expressionContainer', None), ('macros:expressionGroup', None), ('macros:expressionGroupContainer', None), ('macros:header', None), ('macros:helpDropdown', None), ('macros:instructionsPanel', None), ('macros:keyboardHelpDialog', None), ('macros:lightningAdapter', None), ('macros:lightningMacroSetup', None), ('macros:macroDetail', None), ('macros:macroInstructions', None), ('macros:macroList', None), ('macros:macroListItem', None), ('macros:macroUtilityItem', None), ('macros:openBuilderAction', None), ('macros:outputEntityIcon', None), ('macros:progressDialog', None), ('macros:readOnlyValueDisplay', None), ('macros:relativeDateTime', None), ('macros:rightPanel', None), ('macros:rightPanelInstruction', None), ('macros:rightPanelInstructionList', None), ('macros:rightPanelSubInstruction', None), ('macros:searchInput', None), ('macros:surfaceTemplate', None), ('macros:topToolbar', None), ('macros:widget', None), ('myday:landing', None), ('myday:myDay', None), ('native:layoutContainer', None), ('native:navigateToComponentShim', None), ('native:tempDepend', None), ('native:template', None), ('notes:contentNoteObjectHomeListStencil', None), ('notes:contentNoteRelatedListStencil', None), ('notes:editPanel', None), ('notes:editPanelManager', None), ('notes:editPanelStencil', None), ('notes:noteAutoCompleteOption', None), ('notes:noteDeleteRunnable', None), ('notes:noteEditor', None), ('notes:noteEditorDesktop', None), ('notes:noteEditorDesktopQuill', None), ('notes:noteEditorMobile', None), ('notes:noteEditorMobileQuill', None), ('notes:noteEditorPicker', None), ('notes:noteList', None), ('notes:noteListItem', None), ('notes:notePreviewPanel', None), ('notes:noteRecord', None), ('notes:noteVersionList', None), ('notes:noteVersionListDataProvider', None), ('notes:notesAbstractPanel', None), ('notes:notesDetail', None), ('notes:notesLandingPage', None), ('notes:notesListDesktop', None), ('notes:notesListViewHeader', None), ('notes:notesObjectHome', None), ('notes:notesTaskList', None), ('notes:notesTaskListDataProvider', None), ('notes:notesTaskListPanel', None), ('notes:notesTaskRowStencil', None), ('notes:outputFileType', None), ('notes:placeholder', None), ('notes:publisherCreatePanel', None), ('notes:quillAccessButton', None), ('notes:quillAddTaskButton', None), ('notes:quillInsertImageButton', None), ('notes:relateMruList', None), ('notes:relatePanel', None), ('notes:relateRecordsPanel', None), ('notes:relateSelectionItem', None), ('notes:relatedRecordPill', None), ('notes:relatedRecordsGrid', None), ('notes:relatedRecordsGridRemoveColumn', None), ('notes:relatedRecordsGridTitleColumn', None), ('notes:relatedRecordsList', None), ('notes:relatedRecordsListDesktop', None), ('notes:relatedRecordsListMobile', None), ('notes:sharingPrivacyIconLabel', None), ('notes:title', None), ('notes:utilityBarNoteList', None), ('objectManager:actionsMenu', None), ('objectManager:actionsMenuItem', None), ('objectManager:apexTriggerDetail', None), ('objectManager:apexTriggerDetailList', None), ('objectManager:buttonsLinksActionsDetailList', None), ('objectManager:byOn', None), ('objectManager:cellToDisplayFormFactorDetails', None), ('objectManager:cellToDisplayPageLinkBasedOnFormFactor', None), ('objectManager:clientArrayDataProvider', None), ('objectManager:collapsible', None), ('objectManager:commChannelLayoutDetailList', None), ('objectManager:compactLayoutDetail', None), ('objectManager:compactLayoutDetailList', None), ('objectManager:customFieldDeleteWarning', None), ('objectManager:customObjectDeleteWarning', None), ('objectManager:dataTable', None), ('objectManager:detailCard', None), ('objectManager:detailLink', None), ('objectManager:detailRow', None), ('objectManager:detailRowDualField', None), ('objectManager:detailRowSingleField', None), ('objectManager:detailTable', None), ('objectManager:externalLink', None), ('objectManager:fieldSetDetailList', None), ('objectManager:fieldsAndRelationshipsDetailList', None), ('objectManager:fixableHeader', None), ('objectManager:flexiPagesDetailList', None), ('objectManager:globalSearchBox', None), ('objectManager:hierarchyColumnDetailList', None), ('objectManager:leftNav', None), ('objectManager:limitDetailList', None), ('objectManager:lookupEntityByApiName', None), ('objectManager:lookupLayoutIdByRecordId', None), ('objectManager:lookupRedirect', None), ('objectManager:mySearchLayoutDetailList', None), ('objectManager:objectDataProvider', None), ('objectManager:objectDetail', None), ('objectManager:objectDetailComponent', None), ('objectManager:objectDetailPage', None), ('objectManager:objectEditLink', None), ('objectManager:objectLink', None), ('objectManager:objectList', None), ('objectManager:objectManagerAlohaPage', None), ('objectManager:objectManagerRouter', None), ('objectManager:outputCheckbox', None), ('objectManager:pageAssignment', None), ('objectManager:pageLayoutDetailList', None), ('objectManager:recordTypeDetail', None), ('objectManager:recordTypeDetailList', None), ('objectManager:relatedListCardButton', None), ('objectManager:relatedListCardDataProvider', None), ('objectManager:relatedLookupFilterDetail', None), ('objectManager:relatedLookupFilterDetailList', None), ('objectManager:schemaBuilderLink', None), ('objectManager:searchLayoutDetailList', None), ('objectManager:setupAlohaPage', None), ('objectManager:setupComponent', None), ('objectManager:spannableDataTableColumn', None), ('objectManager:style', None), ('objectManager:validationRuleDetail', None), ('objectManager:validationRuleDetailList', None), ('objectManager:virtualActionMenu', None), ('objectManager:virtualRelatedListCard', None), ('offline:banner', None), ('offline:conflictResolution', None), ('offline:draftRunnable', None), ('offline:offlineDraftActionHelper', None), ('offline:offlineDraftDataProvider', None), ('offline:offlineDraftList', None), ('offline:offlineDraftListItem', None), ('offline:offlineDrafts', None), ('offline:recordGvpTestTemplate', None), ('offline:recordsComparison', None), ('offline:sash', None), ('offline:smartStoreAdapter', None), ('offline:smartStoreAdapterEventListener', None), ('offline:syncManager', None), ('offline:tempDepend', None), ('omni:abstractDataProvider', None), ('omni:agentCurrentWorkDataProvider', None), ('omni:agentCurrentWorkList', None), ('omni:agentCurrentWorkListHeader', None), ('omni:agentCurrentWorkRow', None), ('omni:agentDataProvider', None), ('omni:agentDetailActivity', None), ('omni:agentDetailConfigurations', None), ('omni:agentDetailTabs', None), ('omni:agentDetailTabsTester', None), ('omni:agentDetailTabsTesterData', None), ('omni:agentDetailTimeLine', None), ('omni:agentDetailTimelineTester', None), ('omni:agentList', None), ('omni:agentListHeader', None), ('omni:agentRow', None), ('omni:agentRowTester', None), ('omni:agentTimeLineStatus', None), ('omni:agentTimeLineWork', None), ('omni:agentsByQueueDataProvider', None), ('omni:agentsByQueueList', None), ('omni:agentsByQueueListHeader', None), ('omni:agentsByQueueRow', None), ('omni:agentsTab', None), ('omni:backlogList', None), ('omni:backlogListDataProvider', None), ('omni:backlogListHeader', None), ('omni:backlogListRow', None), ('omni:backlogListTester', None), ('omni:backlogListTesterData', None), ('omni:backlogView', None), ('omni:backlogViewHeader', None), ('omni:chatMonitor', None), ('omni:chatPreview', None), ('omni:chatPreviewTester', None), ('omni:chatPreviewTesterData', None), ('omni:detailView', None), ('omni:loadingDots', None), ('omni:omniIcon', None), ('omni:omniIcons', None), ('omni:pager', None), ('omni:panelManager', None), ('omni:popupAgentRow', None), ('omni:popupChangeQueues', None), ('omni:popupChangeSkills', None), ('omni:popupFooter', None), ('omni:popupHeader', None), ('omni:popupQueueRow', None), ('omni:popupSkillRow', None), ('omni:queueDetails', None), ('omni:queueDetailsTester', None), ('omni:queueDetailsTesterData', None), ('omni:queueItemRow', None), ('omni:queueItemsDataProvider', None), ('omni:queueItemsHeader', None), ('omni:queueItemsList', None), ('omni:queueRow', None), ('omni:queuesDataProvider', None), ('omni:queuesList', None), ('omni:queuesListHeader', None), ('omni:queuesView', None), ('omni:scrtLibTester', None), ('omni:skillDetails', None), ('omni:supervisorComponentsTest', None), ('omni:supervisorComponentsTestTemplate', None), ('omni:supervisorConsole', None), ('omni:supervisorHeaderColumn', None), ('omni:supervisorHeaderFilterMenuList', None), ('omni:supervisorList', None), ('omni:supervisorPanel', None), ('omni:supervisorTabTester', None), ('omni:targetEntityCompactLayoutNoImage', None), ('omni:targetEntityCompactLayoutNoImageTester', None), ('omni:timestamp', None), ('omni:toast', None), ('omni:workAction', None), ('omni:workQueueDetails', None), ('omni:workQueueDetailsTester', None), ('omni:workQueueDetailsTesterData', None), ('omni:workQueueItemRow', None), ('omni:workQueueItemsDataProvider', None), ('omni:workQueueItemsHeader', None), ('omni:workQueueItemsList', None), ('omni:workQueueView', None), ('omni:worksByQueueDataProvider', None), ('omni:worksByQueueList', None), ('omni:worksByQueueListHeader', None), ('omni:worksByQueueRow', None), ('onboarding:analytics', None), ('onboarding:linkLabel', None), ('onboarding:onboardingComponent', None), ('onboarding:questionSet', None), ('onboarding:smartWelcomeMat', None), ('onboarding:template', None), ('onboardingTest:customStep', None), ('onboardingTest:customSummaryBlock', None), ('onboardingTest:opportunityStage', None), ('onboardingTest:pathProgress', None), ('onboardingTest:setupAssistantWelcomeMatContainer', None), ('onboardingTest:template', None), ('onboardingTest:welcomeMatService', None), ('onboardingTest:wizardSample1', None), ('onboardingTest:wizardStepCustomAction', None), ('onboardingTest:wizardStepCustomFinish', None), ('one:actionBar', None), ('one:actionBarPlugin', None), ('one:actionButtonIcon', None), ('one:actionCard', None), ('one:actionCardContent', None), ('one:actionCardPhone', None), ('one:actionOverflow', None), ('one:actionOverflowMenuItem', None), ('one:actionSimpleContainer', None), ('one:actionsComposer', None), ('one:actionsDropDown', None), ('one:actionsManager', None), ('one:actionsRibbon', None), ('one:adoptionComposer', None), ('one:adoptionContent', None), ('one:alohaPage', None), ('one:alohaPageCard', None), ('one:alohaPageDeprecated', None), ('one:anchorHeader', None), ('one:apiHandler', None), ('one:appAnalytics', None), ('one:appDetail', None), ('one:appLauncherItem', None), ('one:appLauncherItemList', None), ('one:appNavAddItemsBaseDataProvider', None), ('one:appNavAddItemsFavoritesDataProvider', None), ('one:appNavAddItemsTabsDataProvider', None), ('one:appNavBackButton', None), ('one:appNavBarItem', None), ('one:appNavBarOverflowMenuItem', None), ('one:appNavButtons', None), ('one:appNavContainer', None), ('one:appNavItems', None), ('one:appNavMenu', None), ('one:appNavMenuPanel', None), ('one:appNavMenuPopupTarget', None), ('one:appNavPromptContent', None), ('one:appNavTabsets', None), ('one:appNavToggle', None), ('one:applicationError', None), ('one:auraContainer', None), ('one:auraCustomerErrorHandler', None), ('one:auraSystemErrorHandler', None), ('one:branding', None), ('one:celebrationManager', None), ('one:centerStage', None), ('one:chatter', None), ('one:closeTabsConfirmationModal', None), ('one:consoleAppCustomizationDefault', None), ('one:consoleAppCustomizationSetup', None), ('one:consoleInlinePanel', None), ('one:consoleLayoutContainer2', None), ('one:consoleLi', None), ('one:consoleNav', None), ('one:consoleObjectHome', None), ('one:consoleOverflowItem', None), ('one:consolePersistenceForceLogoutPlugin', None), ('one:consolePersistenceManager', None), ('one:consoleTab', None), ('one:consoleTabContainer', None), ('one:consoleTabCustomizationPanel', None), ('one:consoleTabItem', None), ('one:consoleTabScrollManager', None), ('one:consoleTabset', None), ('one:consoleToolkitTestUtility', None), ('one:consoleVFOverridesTester', None), ('one:content', None), ('one:contentLoadedPlugin', None), ('one:cryptoLibraryManager', None), ('one:darkModeUserSettings', None), ('one:declarativeDockedContent', None), ('one:declarativePromptSetup', None), ('one:densitySetup', None), ('one:densityUserSettings', None), ('one:densityUserSettingsConfirmationDialog', None), ('one:dialog', None), ('one:dockingPanelManager', None), ('one:dragAndDropEditItem', None), ('one:dragAndDropEditList', None), ('one:editMyNav', None), ('one:editMyNavListHandler', None), ('one:editablePagePlugin', None), ('one:empAPILoader', None), ('one:emptyPerfUtility', None), ('one:ept', None), ('one:establishVFSessionComponent', None), ('one:externalRedirect', None), ('one:favorites', None), ('one:favoritesDragAndDropEditListHandler', None), ('one:favoritesEditPanel', None), ('one:favoritesPicker', None), ('one:favoritesPickerDataProvider', None), ('one:flexipage', None), ('one:floatingPanelPrompt', None), ('one:footer', None), ('one:globalCreate', None), ('one:globalCreateIcon', None), ('one:globalCreateItem', None), ('one:globalNav', None), ('one:header', None), ('one:helpAndTrainingExperience', None), ('one:helpAndTrainingFeedback', None), ('one:helpAndTrainingKeyboardShortcuts', None), ('one:helpMenu', None), ('one:helpMenuDataProvider', None), ('one:helpMenuSectionsContainer', None), ('one:helpMenuSetup', None), ('one:hiddenRegion', None), ('one:homeCardListPhone', None), ('one:homeCardSeparator', None), ('one:iframeComposer', None), ('one:iframeContentPlugin', None), ('one:iframeMessageManager', None), ('one:inAppChat', None), ('one:keyboardShortcutList', None), ('one:keyboardShortcutListFooter', None), ('one:keyboardShortcutListener', None), ('one:ladybugTrigger', None), ('one:leftContentWrapper', None), ('one:lexOnIpadSetup', None), ('one:listRow', None), ('one:liveChat', None), ('one:liveChatPreview', None), ('one:lwcGvpClient', None), ('one:moreCard', None), ('one:multiTabList', None), ('one:multiTabListItem', None), ('one:multiTabListTab', None), ('one:navItemDropdown', None), ('one:navItemDropdownMenuItem', None), ('one:navItemDropdownMenuItemSeparator', None), ('one:navigationItemAPILoader', None), ('one:networkSwitcher', None), ('one:networkSwitcherMenuTrigger', None), ('one:networkSwitcherRadioMenuItem', None), ('one:noNavItems', None), ('one:npsContainer', None), ('one:objectHomeFlexipage', None), ('one:onboardingAssistanceSetup', None), ('one:onboardingManager', None), ('one:onboardingManagerWrapper', None), ('one:panelManager', None), ('one:panelManagerMobile', None), ('one:panelService', None), ('one:persistenceTestComponent', None), ('one:pocketGuide', None), ('one:pocketGuideMenuNew', None), ('one:pocketGuidePrompt', None), ('one:preloadLayout', None), ('one:promptAuthoringContainer', None), ('one:promptAuthoringDialog', None), ('one:promptLsfFlow', None), ('one:promptLsfMilestoneContent', None), ('one:promptLsfMilestoneDetails', None), ('one:promptLsfMilestoneFrequency', None), ('one:promptLsfMilestonePermissions', None), ('one:promptLsfMilestonePosition', None), ('one:promptLsfMilestoneType', None), ('one:publicGroupLookupDataProvider', None), ('one:recordActionWrapper', None), ('one:recordHomeFlexipage', None), ('one:recordHomeFlexipage2Wrapper', None), ('one:recordLoadError', None), ('one:searchContentPlugin', None), ('one:sessionManager', None), ('one:stageLeft', None), ('one:storagePrime', None), ('one:storagePrimeNative', None), ('one:storagePrimePerf', None), ('one:switchIdentityDialog', None), ('one:systemMessage', None), ('one:tempDepend', None), ('one:template', None), ('one:themeImageCrop', None), ('one:themeImageUpload', None), ('one:themeList', None), ('one:themeManager', None), ('one:themeSetup', None), ('one:trialExperience', None), ('one:trialHeader', None), ('one:trialWelcomeMat', None), ('one:twoColumnLayout', None), ('one:uncacheableContentPlugin', None), ('one:unsavedChangesAPILoader', None), ('one:unsupported', None), ('one:unsupportedContainer', None), ('one:unsupportedDetectorIpad', None), ('one:unsupportedDetectorUiWebView', None), ('one:unsupportedHome', None), ('one:unsupportedMessage', None), ('one:userProfileCard', None), ('one:userProfileCardData', None), ('one:userProfileCardTrigger', None), ('one:userSwitcher', None), ('one:userSwitcherIdentity', None), ('one:utilPanelManager', None), ('one:utilityBar', None), ('one:utilityBarAPILoader', None), ('one:utilityBarContainer', None), ('one:utilityBarContent', None), ('one:utilityBarItem', None), ('one:utilityBarPanel', None), ('one:utilityBarPopoutWrapper', None), ('one:utilityBarTemplateDesktop', None), ('one:utilityBarTestComponent', None), ('one:visualforceOverride', None), ('one:webTab', None), ('one:webtemplate', None), ('one:workspace', None), ('one:workspaceAPILoader', None), ('one:workspaceCollection', None), ('one:workspaceTabWrapper', None), ('onesetup:addUserModal', None), ('onesetup:addUsers', None), ('onesetup:allHome', None), ('onesetup:baseHomePage', None), ('onesetup:breadcrumb', None), ('onesetup:breadcrumbs', None), ('onesetup:chatRuleModal', None), ('onesetup:chatRuleModalFooter', None), ('onesetup:createMenu', None), ('onesetup:helpBanner', None), ('onesetup:helpTile', None), ('onesetup:homeCreateMenu', None), ('onesetup:lexEnableUsersStep', None), ('onesetup:lexEnablementFlow', None), ('onesetup:lexMultiAdd', None), ('onesetup:lexMultiAddTable', None), ('onesetup:lexSearchDataProvider', None), ('onesetup:lexSuccessStep', None), ('onesetup:lexUsersDataProvider', None), ('onesetup:liveAgentSettings', None), ('onesetup:liveAgentSettingsBasic', None), ('onesetup:liveAgentSettingsContainer', None), ('onesetup:liveAgentSettingsErrorPage', None), ('onesetup:liveAgentSettingsQueueing', None), ('onesetup:liveAgentSettingsSecurity', None), ('onesetup:liveAgentSettingsTimeouts', None), ('onesetup:module', None), ('onesetup:mruLink', None), ('onesetup:navTree', None), ('onesetup:navTreeFilter', None), ('onesetup:navTreeKeyboardNavigator', None), ('onesetup:navTreeNode', None), ('onesetup:outOfLicensesModal', None), ('onesetup:pageNotFound', None), ('onesetup:progressBar', None), ('onesetup:recentItems', None), ('onesetup:setupAlohaPage', None), ('onesetup:setupAssistantTile', None), ('onesetup:setupCarouselPage', None), ('onesetup:setupComponent', None), ('onesetup:setupFlow', None), ('onesetup:setupFlowAbstractEditableStep', None), ('onesetup:setupFlowAbstractStep', None), ('onesetup:setupFlowConfirmDialog', None), ('onesetup:setupFlowConfirmMessage', None), ('onesetup:setupFlowEditor', None), ('onesetup:setupFlowEditorFooter', None), ('onesetup:setupFlowEndStep', None), ('onesetup:setupFlowFooter', None), ('onesetup:setupFlowIterator', None), ('onesetup:setupFlowProgress', None), ('onesetup:setupFlowTab', None), ('onesetup:setupFlowTabset', None), ('onesetup:setupHeader', None), ('onesetup:setupLink', None), ('onesetup:setupMenuItem', None), ('onesetup:setupNavTree', None), ('onesetup:setupNavTreeAppManager', None), ('onesetup:setupPageLink', None), ('onesetup:setupSearchInputDataProvider', None), ('onesetup:setupSearchInputDesktop', None), ('onesetup:unsupported', None), ('onesetup:usersContainer', None), ('onesetup:usersResources', None), ('onesetup:virtualGridSetupPageLink', None), ('opencti:clickToDialApiHandler', None), ('opencti:openCtiApiHandler', None), ('opencti:outputPhone', None), ('opencti:softPhone', None), ('opencti:testCrossCuttingOutputPhoneOverride', None), ('packagingSetupUI:deleteModeConfirmationDialog', None), ('packagingSetupUI:iframe', None), ('packagingSetupUI:inputCheckbox', None), ('packagingSetupUI:installKeyDialog', None), ('packagingSetupUI:ipErrorCmp', None), ('packagingSetupUI:ipLandingCmp', None), ('packagingSetupUI:ipSuccessCmp', None), ('packagingSetupUI:ipTemplate', None), ('packagingSetupUI:ipTooLongCmp', None), ('packagingSetupUI:profileMapping', None), ('packagingSetupUI:rssDialog', None), ('packagingSetupUI:rssDialogFooter', None), ('packagingSetupUI:subscriberQueryRequests', None), ('packagingSetupUI:template', None), ('platformencryption:advancedsettingsPage', None), ('platformencryption:advancedsettingsPageWrapper', None), ('platformencryption:esfPage', None), ('process_home:processHome', None), ('process_home:processHomeCard', None), ('process_home:processHomeChart', None), ('process_home:processHomeCreateMenu', None), ('processui:header', None), ('processui:layout', None), ('processui:template', None), ('processuiappr:helloWorld', None), ('processuicommon:actionPanel', None), ('processuicommon:actionTypeApex', None), ('processuicommon:actionTypeBase', None), ('processuicommon:actionTypeChatterPost', None), ('processuicommon:actionTypeCustomNotification', None), ('processuicommon:actionTypeEmailAlert', None), ('processuicommon:actionTypeFlow', None), ('processuicommon:actionTypeLiveMessageNotification', None), ('processuicommon:actionTypeQuickAction', None), ('processuicommon:actionTypeQuip', None), ('processuicommon:actionTypeRecordCreate', None), ('processuicommon:actionTypeRecordUpdate', None), ('processuicommon:actionTypeSubmit', None), ('processuicommon:actionTypeThunder', None), ('processuicommon:actionTypes', None), ('processuicommon:advancedSection', None), ('processuicommon:apexFields', None), ('processuicommon:apexFieldsDataProvider', None), ('processuicommon:apexParameterList', None), ('processuicommon:apexParameterListRow', None), ('processuicommon:apexTypes', None), ('processuicommon:apexTypesDataProvider', None), ('processuicommon:arrow', None), ('processuicommon:autocomplete', None), ('processuicommon:baseItemListRow', None), ('processuicommon:canvasAddElement', None), ('processuicommon:canvasEditableElement', None), ('processuicommon:canvasElement', None), ('processuicommon:chatterActionTopics', None), ('processuicommon:chatterInput', None), ('processuicommon:chatterMentionsDataProvider', None), ('processuicommon:chatterTopicsDataProvider', None), ('processuicommon:conditionList', None), ('processuicommon:conditionListRow', None), ('processuicommon:conditionLogicTypes', None), ('processuicommon:confirmationModalBody', None), ('processuicommon:confirmationModalFooter', None), ('processuicommon:createableFieldDataProvider', None), ('processuicommon:createableFields', None), ('processuicommon:createableObjectTypes', None), ('processuicommon:createableObjectTypesDataProvider', None), ('processuicommon:customEventTypes', None), ('processuicommon:customEventTypesDataProvider', None), ('processuicommon:customLabel', None), ('processuicommon:customNotificationTypes', None), ('processuicommon:decisionArrow', None), ('processuicommon:dialog', None), ('processuicommon:duelingList', None), ('processuicommon:duelingListItem', None), ('processuicommon:duelingListS1', None), ('processuicommon:duelingListsS1', None), ('processuicommon:emailAlertObjectTypes', None), ('processuicommon:emailAlertObjectTypesDataProvider', None), ('processuicommon:entityFieldDataProvider', None), ('processuicommon:entityFieldDialog', None), ('processuicommon:entityFieldsByTypeDataProvider', None), ('processuicommon:entityReferenceDialog', None), ('processuicommon:flowFields', None), ('processuicommon:flowFieldsDataProvider', None), ('processuicommon:flowParameterList', None), ('processuicommon:flowParameterListRow', None), ('processuicommon:flowTypes', None), ('processuicommon:flowTypesDataProvider', None), ('processuicommon:formulaBuilder', None), ('processuicommon:formulaFunctionDataProvider', None), ('processuicommon:formulaFunctionDialog', None), ('processuicommon:formulaGlobalVariableDataProvider', None), ('processuicommon:formulaGlobalVariableDialog', None), ('processuicommon:formulaOperator', None), ('processuicommon:help', None), ('processuicommon:helpPanelBody', None), ('processuicommon:inlineFormulaBuilder', None), ('processuicommon:input', None), ('processuicommon:inputBoolean', None), ('processuicommon:inputCheckbox', None), ('processuicommon:inputCurrency', None), ('processuicommon:inputDate', None), ('processuicommon:inputDateTime', None), ('processuicommon:inputError', None), ('processuicommon:inputEventParameter', None), ('processuicommon:inputFormula', None), ('processuicommon:inputGlobalConstant', None), ('processuicommon:inputJson', None), ('processuicommon:inputNumber', None), ('processuicommon:inputNumberHack', None), ('processuicommon:inputProcessValue', None), ('processuicommon:inputSelect', None), ('processuicommon:inputSourceTypes', None), ('processuicommon:inputString', None), ('processuicommon:inputSystemVariable', None), ('processuicommon:inputText', None), ('processuicommon:inputTextArea', None), ('processuicommon:inputTraverser', None), ('processuicommon:instructions', None), ('processuicommon:liveMessageNotificationChannel', None), ('processuicommon:liveMessageNotificationChannelDataProvider', None), ('processuicommon:liveMessageNotificationRecipientFieldsDataProvider', None), ('processuicommon:liveMessageNotificationRecipientReferenceDialog', None), ('processuicommon:liveMessageNotificationTargetTypes', None), ('processuicommon:liveMessageNotificationTemplate', None), ('processuicommon:liveMessageNotificationTemplateDataProvider', None), ('processuicommon:messageModalFooter', None), ('processuicommon:messagingEndUserFieldsDataProvider', None), ('processuicommon:messagingEndUserReferenceDialog', None), ('processuicommon:multiPicklistButton', None), ('processuicommon:multiPicklistModalBody', None), ('processuicommon:multiPicklistModalFooter', None), ('processuicommon:notificationRecipientCategories', None), ('processuicommon:notificationRecipientTypes', None), ('processuicommon:notificationTargetInput', None), ('processuicommon:notificationTextInput', None), ('processuicommon:operatorTypes', None), ('processuicommon:outcomeGoToNext', None), ('processuicommon:outcomeGoToNextOptions', None), ('processuicommon:outcomeGoToNextPanel', None), ('processuicommon:outcomePanel', None), ('processuicommon:outcomeTypes', None), ('processuicommon:outcomeUpdateOnce', None), ('processuicommon:outputText', None), ('processuicommon:panel', None), ('processuicommon:parameterList', None), ('processuicommon:parameterListRow', None), ('processuicommon:phoneFieldsDataProvider', None), ('processuicommon:phoneReferenceDialog', None), ('processuicommon:picklistField', None), ('processuicommon:postTargetTypes', None), ('processuicommon:postTargetUserTypes', None), ('processuicommon:postTargetsPerType', None), ('processuicommon:processPerTriggerObjectType', None), ('processuicommon:queryableFields', None), ('processuicommon:queryableFieldsDataProvider', None), ('processuicommon:queueOrGroupList', None), ('processuicommon:queueOrGroupListDataProvider', None), ('processuicommon:quickActionActionTypes', None), ('processuicommon:quickActionActions', None), ('processuicommon:quickActionActionsDataProvider', None), ('processuicommon:quickActionActionsOption', None), ('processuicommon:quickActionFields', None), ('processuicommon:quickActionFieldsDataProvider', None), ('processuicommon:quickActionFilterTypes', None), ('processuicommon:quickActionObjectTypes', None), ('processuicommon:quickActionObjectTypesDataProvider', None), ('processuicommon:quickActionParameterList', None), ('processuicommon:quickActionParameterListRow', None), ('processuicommon:quipAddDocumentToFolderAction', None), ('processuicommon:quipAddMessageToChatAction', None), ('processuicommon:quipAddMessageToDocumentAction', None), ('processuicommon:quipAddUsersToThreadAction', None), ('processuicommon:quipAttachDocumentToRecordAction', None), ('processuicommon:quipBaseSubActionType', None), ('processuicommon:quipCopyDocumentAction', None), ('processuicommon:quipCreateChatAction', None), ('processuicommon:quipCreateDocumentAction', None), ('processuicommon:quipCreateFolderAction', None), ('processuicommon:quipEditDocumentAction', None), ('processuicommon:quipInputParameter', None), ('processuicommon:quipPicklist', None), ('processuicommon:radioButtons', None), ('processuicommon:recordCreateParameterList', None), ('processuicommon:recordCreateParameterListRow', None), ('processuicommon:recordFilterList', None), ('processuicommon:recordFilterListRow', None), ('processuicommon:recordUpdateEvaluationTypes', None), ('processuicommon:recordUpdateParameterList', None), ('processuicommon:recordUpdateParameterListRow', None), ('processuicommon:relationshipFieldDataProvider', None), ('processuicommon:relationshipFieldDialog', None), ('processuicommon:spinner', None), ('processuicommon:startOrStop', None), ('processuicommon:submitActionApprovals', None), ('processuicommon:submitActionApprovalsDataProvider', None), ('processuicommon:submitActionSelectionTypes', None), ('processuicommon:submitActionSubmitterTypes', None), ('processuicommon:summaryRenderer', None), ('processuicommon:textPostRecipients', None), ('processuicommon:toolbar', None), ('processuicommon:traverser', None), ('processuicommon:traverserModalBody', None), ('processuicommon:traverserModalFooter', None), ('processuicommon:traverserNode', None), ('processuicommon:traverserNodeAutocomplete', None), ('processuicommon:traverserNodeChild', None), ('processuicommon:traverserNodeDataProvider', None), ('processuicommon:triggerEnableRecursion', None), ('processuicommon:triggerObjectDataProvider', None), ('processuicommon:triggerObjectTypes', None), ('processuicommon:triggerPanel', None), ('processuicommon:triggerTypes', None), ('processuicommon:typedEntityFieldDataProvider', None), ('processuicommon:typedEntityFieldDialog', None), ('processuicommon:typedFieldOption', None), ('processuicommon:updateableFields', None), ('processuicommon:updateableFieldsDataProvider', None), ('processuicommon:userAndGroupAutocompleteOption', None), ('processuicommon:userFieldsDataProvider', None), ('processuicommon:userList', None), ('processuicommon:userListDataProvider', None), ('processuicommon:userReferenceDialog', None), ('processuicommon:valueTypes', None), ('processuicommon:waitEventDate', None), ('processuicommon:waitEventDateDataProvider', None), ('processuicommon:waitEventOperatorTypes', None), ('processuicommon:waitEventPanel', None), ('processuicommon:waitEventPanelRadio', None), ('processuicommon:waitEventTimeUnitTypes', None), ('processuimgnt:console', None), ('processuimgnt:consoleListRow', None), ('processuimgnt:consoleToolbar', None), ('processuimgnt:landingPage', None), ('processuimgnt:versionListRow', None), ('processuimgnt:versionTable', None), ('processuirule:actionAddElement', None), ('processuirule:actionContainer', None), ('processuirule:actionContainerGroup', None), ('processuirule:actionElement', None), ('processuirule:canvasToolbar', None), ('processuirule:eventTypeTrigger', None), ('processuirule:invocableSettings', None), ('processuirule:modalManager', None), ('processuirule:outcomeAddElement', None), ('processuirule:outcomeAddGroup', None), ('processuirule:outcomeElement', None), ('processuirule:outcomeGroup', None), ('processuirule:panelManager', None), ('processuirule:processPropertiesModalBody', None), ('processuirule:processPropertiesModalFooter', None), ('processuirule:ruleCanvas', None), ('processuirule:triggerAddElement', None), ('processuirule:triggerElement', None), ('processuirule:triggerSourceTypes', None), ('processuirule:waitEventActionContainer', None), ('processuirule:waitEventAddElement', None), ('processuirule:waitEventElement', None), ('processuirule:workflowTypeTrigger', None), ('processuitest:actionContainer_wrapper', None), ('processuitest:actionPanelApex_wrapper', None), ('processuitest:actionPanelChatterPost_wrapper', None), ('processuitest:actionPanelCustomNotification_wrapper', None), ('processuitest:actionPanelEmail_wrapper', None), ('processuitest:actionPanelFlow_wrapper', None), ('processuitest:actionPanelQuickAction_wrapper', None), ('processuitest:actionPanelRecordCreate_wrapper', None), ('processuitest:actionPanelRecordUpdate_wrapper', None), ('processuitest:actionPanelSubmit_wrapper', None), ('processuitest:actionPanelThunder_wrapper', None), ('processuitest:actionPanel_wrapper', None), ('processuitest:actionTypeApex_wrapper', None), ('processuitest:actionTypeChatterPost_wrapper', None), ('processuitest:actionTypeCustomNotification_wrapper', None), ('processuitest:actionTypeEmailAlert_wrapper', None), ('processuitest:actionTypeFlow_wrapper', None), ('processuitest:actionTypeQuickAction_wrapper', None), ('processuitest:actionTypeRecordCreate_wrapper', None), ('processuitest:actionTypeRecordUpdate_wrapper', None), ('processuitest:actionTypeSubmit_wrapper', None), ('processuitest:autocomplete_wrapper', None), ('processuitest:canvasToolbar_wrapper', None), ('processuitest:conditionListSingleRow_wrapper', None), ('processuitest:conditionList_wrapper', None), ('processuitest:entityFieldDialog_wrapper', None), ('processuitest:eventTypeTrigger_wrapper', None), ('processuitest:flowParameterList_wrapper', None), ('processuitest:help_wrapper', None), ('processuitest:inputSelect_wrapper', None), ('processuitest:input_wrapper', None), ('processuitest:invocableSettings_wrapper', None), ('processuitest:layout_wrapper', None), ('processuitest:outcomePanel_wrapper', None), ('processuitest:panelManager_wrapper', None), ('processuitest:panel_wrapper', None), ('processuitest:processPropertiesModalBody_wrapper', None), ('processuitest:quickActionParameterList_wrapper', None), ('processuitest:recordCreateParameterList_wrapper', None), ('processuitest:recordUpdateParameterListSingleRow_wrapper', None), ('processuitest:recordUpdateParameterList_wrapper', None), ('processuitest:relationshipFieldDialog_wrapper', None), ('processuitest:stubDataProvider', None), ('processuitest:testAutoCompleteOption', None), ('processuitest:toolbar_wrapper', None), ('processuitest:traverserSummaryRenderer_wrapper', None), ('processuitest:workflowTypeTrigger_wrapper', None), ('reports:buttonGroup', None), ('reports:dataGrid', None), ('reports:eclairChart', None), ('reports:eclairConfigurer', None), ('reports:eclairPaletteSelector', None), ('reports:eclairReportChart', None), ('reports:errorPanel', None), ('reports:exportDialog', None), ('reports:exportDialogFooter', None), ('reports:exportVisualPickerOption', None), ('reports:feedPanel', None), ('reports:filterBooleanWidget', None), ('reports:filterCard', None), ('reports:filterCardCommon', None), ('reports:filterCardStandardDate', None), ('reports:filterDateWidget', None), ('reports:filterMultiSelectPicklistWidget', None), ('reports:filterNumberWidget', None), ('reports:filterPanel', None), ('reports:filterPanelFooter', None), ('reports:filterPanelTest', None), ('reports:filterRoleHierarchyCard', None), ('reports:filterRoleHierarchyWidget', None), ('reports:filterSelection', None), ('reports:filterSingleSelectPicklistWidget', None), ('reports:filterStandardDateWidget', None), ('reports:filterStringWidget', None), ('reports:filterWidget', None), ('reports:folderDialog', None), ('reports:folderDialogFooter', None), ('reports:highlight', None), ('reports:instancePoller', None), ('reports:lightningReportsChartingTest', None), ('reports:lockedFilterCard', None), ('reports:metricsHeader', None), ('reports:multiSelectDropDownMenu', None), ('reports:passiveFilterGroup', None), ('reports:reportBase', None), ('reports:reportBaseAura', None), ('reports:reportBuilder', None), ('reports:reportFilterPanel', None), ('reports:reportInstancePage', None), ('reports:reportPage', None), ('reports:reportSidebar', None), ('reports:roleHierarchyTree', None), ('reports:roleHierarchyTreeBaseButton', None), ('reports:roleHierarchyTreeLeaf', None), ('reports:roleHierarchyTreeLoadButton', None), ('reports:roleHierarchyTreeNode', None), ('reports:settingsPanel', None), ('reports:stopTrendingDialogFooter', None), ('reports:subscriptionUserLookupDataProvider', None), ('reports:tempDepend', None), ('reports:trendDialog', None), ('reports:trendDialogFooter', None), ('reports:trendReportDetailsDialog', None), ('reports:trendReportDetailsDialogFooter', None), ('reports:trendScheduleSelector', None), ('reports:warningPanel', None), ('reports:webtemplate', None), ('runtime_all_walkthroughs:orchestrationPlayerPrompt', None), ('runtime_all_walkthroughs:player', None), ('runtime_all_walkthroughs:playerCallout', None), ('runtime_all_walkthroughs:playerDynamic', None), ('runtime_all_walkthroughsTest:customAction', None), ('runtime_all_walkthroughsTest:locatorizedSubComponent', None), ('runtime_all_walkthroughsTest:playerEnvironment', None), ('runtime_all_walkthroughsinternal:autoCapture', None), ('runtime_all_walkthroughsinternal:captureSuccessToast', None), ('runtime_all_walkthroughsinternal:jsonEditor', None), ('runtime_all_walkthroughsinternal:router', None), ('runtime_all_walkthroughsinternal:targetEditor', None), ('runtime_all_walkthroughsinternal:walkthroughEditor', None), ('runtime_all_walkthroughsinternal:walkthroughEditorLauncher', None), ('runtime_all_walkthroughsinternal:walkthroughStep', None), ('runtime_all_walkthroughsinternal:walkthroughsView', None), ('runtime_all_walkthroughsinternalTest:walkthroughToolEnvironment', None), ('runtime_appointmentbooking:appointmentCardExpandedPanel', None), ('runtime_appointmentbooking:appointmentCollapsedCard', None), ('runtime_appointmentbooking:appointmentsBookedCard', None), ('runtime_appointmentbooking:appointmentsBookedCardDesign', None), ('runtime_appointmentbooking:cancelApp', None), ('runtime_appointmentbooking:createOperatingHours', None), ('runtime_appointmentbooking:eventManagementSetup', None), ('runtime_appointmentbooking:flowApptType', None), ('runtime_appointmentbooking:flowCandidate', None), ('runtime_appointmentbooking:flowConfirm', None), ('runtime_appointmentbooking:flowLocation', None), ('runtime_appointmentbooking:flowReview', None), ('runtime_appointmentbooking:flowReviewTester', None), ('runtime_appointmentbooking:flowTimeslot', None), ('runtime_appointmentbooking:flowTimeslotTester', None), ('runtime_appointmentbooking:flowTriage', None), ('runtime_appointmentbooking:flowWorkType', None), ('runtime_appointmentbooking:massAssignmentDateTime', None), ('runtime_appointmentbooking:modalFooter', None), ('runtime_appointmentbooking:operatingHours', None), ('runtime_appointmentbooking:operatingHoursDesign', None), ('runtime_appointmentbooking:resourceList', None), ('runtime_appointmentbooking:resourceSlot', None), ('runtime_appointmentbooking:suggestedResources', None), ('runtime_appointmentbooking:timeSlotsCalendar', None), ('runtime_appointmentbooking:userCard', None), ('runtime_appointmentbooking:visualPicker', None), ('runtime_appointmentbooking:visualPickerCard', None), ('runtime_approval_process:action', None), ('runtime_approval_process:actionContent', None), ('runtime_approval_process:basePanel', None), ('runtime_approval_process:commentsCard', None), ('runtime_approval_process:navigateToPendingApprovalList', None), ('runtime_approval_process:outputLookup', None), ('runtime_approval_process:outputName', None), ('runtime_approval_process:outputNameAndStatus', None), ('runtime_approval_process:outputStatus', None), ('runtime_approval_process:pendingApprovalCard', None), ('runtime_approval_process:pendingApprovalCardRow', None), ('runtime_approval_process:viewComments', None), ('runtime_commerce_oms:changeSummary', None), ('runtime_commerce_oms:changeSummaryRow', None), ('runtime_commerce_oms:deliveryGroup', None), ('runtime_commerce_oms:noDataMessage', None), ('runtime_commerce_oms:orderItemSummaryImage', None), ('runtime_commerce_oms:orderManagementSetup', None), ('runtime_commerce_oms:orderSummary', None), ('runtime_commerce_oms:orderSummaryListView', None), ('runtime_commerce_oms:productChanges', None), ('runtime_commerce_oms:productReasonSelection', None), ('runtime_commerce_oms:productReasonSelectionList', None), ('runtime_commerce_oms:productSelection', None), ('runtime_commerce_store:createCommerceStore', None), ('runtime_commerce_store:createStoreAndNetwork', None), ('runtime_commerce_store:setupStorePage', None), ('runtime_commerce_store:storeDetail', None), ('runtime_commerce_store:storeList', None), ('runtime_commerce_store:webstoresInAlohaRouter', None), ('runtime_communities_nba:builderNbaWidget', None), ('runtime_communities_nba:flowScreenNbaWidget', None), ('runtime_communities_nba:nbaCard', None), ('runtime_communities_nba:nbaWidget', None), ('runtime_communities_nba:propositionActionReferenceEdit', None), ('runtime_communities_nba:propositionActionReferenceView', None), ('runtime_communities_nba:propositionImage', None), ('runtime_communities_nba:propositionImageEdit', None), ('runtime_communities_nba:propositionImageView', None), ('runtime_communities_nba:setupStrategy', None), ('runtime_einstein_discovery:einsteinDiscoveryPanel', None), ('runtime_essential_checkout:addOnAddUnits', None), ('runtime_essential_checkout:addOnChooseLicenses', None), ('runtime_essential_checkout:addOnConfirmOrder', None), ('runtime_essential_checkout:addOnDescription', None), ('runtime_essential_checkout:addOnFlow', None), ('runtime_essential_checkout:addOnLoading', None), ('runtime_essential_checkout:cancellationFlow', None), ('runtime_essential_checkout:cancellationInfo', None), ('runtime_essential_checkout:cancellationSuccess', None), ('runtime_essential_checkout:checkoutBillingInfo', None), ('runtime_essential_checkout:checkoutConfirmOrder', None), ('runtime_essential_checkout:checkoutEnterBilling', None), ('runtime_essential_checkout:checkoutEnterUsers', None), ('runtime_essential_checkout:checkoutError', None), ('runtime_essential_checkout:checkoutFlow', None), ('runtime_essential_checkout:checkoutLoading', None), ('runtime_essential_checkout:checkoutSelectPlan', None), ('runtime_essential_checkout:checkoutSubscription', None), ('runtime_essential_checkout:checkoutSuccess', None), ('runtime_essential_checkout:classicCheckoutPage', None), ('runtime_essential_checkout:creditCard', None), ('runtime_essential_checkout:cybersource', None), ('runtime_essential_checkout:holdStatusPrompt', None), ('runtime_essential_checkout:inAppCheckoutPage', None), ('runtime_essential_checkout:inputNumber', None), ('runtime_essential_checkout:manageLicensesConfirmOrder', None), ('runtime_essential_checkout:manageLicensesDeactivateUsers', None), ('runtime_essential_checkout:manageLicensesEnterUsers', None), ('runtime_essential_checkout:manageLicensesFlow', None), ('runtime_essential_checkout:manageLicensesLoading', None), ('runtime_essential_checkout:manageSubscriptionError', None), ('runtime_essential_checkout:manageSubscriptionPage', None), ('runtime_essential_checkout:modifyAddOnConfirmOrder', None), ('runtime_essential_checkout:modifyAddOnFlow', None), ('runtime_essential_checkout:modifyAddOnLoading', None), ('runtime_essential_checkout:modifyAddOnUnits', None), ('runtime_essential_checkout:subscriptionDetail', None), ('runtime_essential_checkout:updatePaymentInfo', None), ('runtime_essential_checkout:updatePaymentInfoFlow', None), ('runtime_essential_checkout:updatePaymentInfoLoading', None), ('runtime_industries_actionplan:actionPlanPanel', None), ('runtime_industries_actionplan:addTaskModal', None), ('runtime_industries_actionplan:highlightsPanel', None), ('runtime_industries_actionplan:highlightsPanelDesign', None), ('runtime_industries_actionplan:itemListCard', None), ('runtime_industries_actionplan:itemListCardDesign', None), ('runtime_industries_actionplan:itemListCardRecord', None), ('runtime_industries_actionplan:listCard', None), ('runtime_industries_actionplan:listCardDesign', None), ('runtime_industries_actionplan:listCardRecord', None), ('runtime_industries_actionplan:taskList', None), ('runtime_industries_actionplan:taskManager', None), ('runtime_industries_actionplan:taskManagerDesign', None), ('runtime_industries_actionplan:versionDataManager', None), ('runtime_industries_healthcare:associationCard', None), ('runtime_industries_healthcare:associationCardGrid', None), ('runtime_industries_healthcare:associationCardTask', None), ('runtime_industries_healthcare:associationList', None), ('runtime_industries_healthcare:associationRelatedRecords', None), ('runtime_industries_healthcare:careProgramGrid', None), ('runtime_industries_healthcare:createAndViewTasks', None), ('runtime_industries_healthcare:createAssociation', None), ('runtime_industries_healthcare:entityLookup', None), ('runtime_industries_healthcare:programCard', None), ('runtime_industries_healthcare:selectAssociation', None), ('runtime_industries_insurance:emptyState', None), ('runtime_industries_insurance:genericOutputField', None), ('runtime_industries_insurance:hoverListPanel', None), ('runtime_industries_insurance:keyMetric', None), ('runtime_industries_insurance:lifeEvent', None), ('runtime_industries_insurance:lifeEventsDesignInfo', None), ('runtime_industries_insurance:message', None), ('runtime_industries_insurance:performanceCharts', None), ('runtime_industries_insurance:policies', None), ('runtime_industries_insurance:policiesKPI', None), ('runtime_industries_insurance:policiesKPIElement', None), ('runtime_industries_insurance:popover', None), ('runtime_industries_lending:flowCard', None), ('runtime_industries_lending:flowChoices', None), ('runtime_industries_lending:flowLiability', None), ('runtime_industries_lending:flowPill', None), ('runtime_industries_lending:flowSummary', None), ('runtime_industries_lending:flowUpload', None), ('runtime_industries_retailexecution:retailExecutionContainer', None), ('runtime_industries_retailexecution:retailExecutionSettings', None), ('runtime_industries_utilizationmanagement:careRequestDetailPanelWrapper', None), ('runtime_industries_utilizationmanagement:careRequestFormSection', None), ('runtime_industries_utilizationmanagement:createCareRequestForm', None), ('runtime_ladybug:ladybug', None), ('runtime_ladybug:ladybugContent', None), ('runtime_ladybug:ladybugContentTrigger', None), ('runtime_marketing_btobma:addToSegment', None), ('runtime_marketing_btobma:b2bma_container', None), ('runtime_marketing_btobma:b2bma_home', None), ('runtime_marketing_btobma:embeddedCampaignDashboard', None), ('runtime_marketing_btobma:engagementProgramView', None), ('runtime_marketing_btobma:engagementProgramViewSubstitute', None), ('runtime_marketing_btobma:iframe', None), ('runtime_marketing_btobma:nav', None), ('runtime_marketing_btobma:navItem', None), ('runtime_marketing_btobma:objectHome', None), ('runtime_marketing_btobma:piFrame', None), ('runtime_platform_actions:actionListEditor', None), ('runtime_platform_actions:actionListEditorItemEditor', None), ('runtime_platform_sfdx:linkNamespace', None), ('runtime_platform_sfdx:modalPanel', None), ('runtime_platform_testhistory:apexTestExecutionPage', None), ('runtime_platform_testhistory:fieldGrouper', None), ('runtime_platform_testhistory:outputDuration', None), ('runtime_platform_testhistory:selectApexJob', None), ('runtime_platformservices_condBuilder:conditionList', None), ('runtime_platformservices_condBuilder:conditionListRow', None), ('runtime_platformservices_condBuilder:inputOperator', None), ('runtime_platformservices_condBuilder:inputValue', None), ('runtime_platformservices_transactionSecurity:alohaRouter', None), ('runtime_platformservices_transactionSecurity:conditionLogicInput', None), ('runtime_platformservices_transactionSecurity:enableTransactionSecurity', None), ('runtime_platformservices_transactionSecurity:home', None), ('runtime_platformservices_transactionSecurity:homeContainer', None), ('runtime_platformservices_transactionSecurity:policyApexSetupFlowEditor', None), ('runtime_platformservices_transactionSecurity:policyConditionBuilderSetupFlowEditor', None), ('runtime_platformservices_transactionSecurity:policyDetail', None), ('runtime_platformservices_transactionSecurity:policyDetailCard', None), ('runtime_platformservices_transactionSecurity:policyEventNameInput', None), ('runtime_platformservices_transactionSecurity:policyFlowActionNamingStep', None), ('runtime_platformservices_transactionSecurity:policyFlowEventApexChooserStep', None), ('runtime_platformservices_transactionSecurity:policyFlowEventNameConditionBuilderStep', None), ('runtime_platformservices_transactionSecurity:policyLegacyAndRealTimeEventsSetupFlow', None), ('runtime_platformservices_transactionSecurity:policyLegacySetupFlow', None), ('runtime_platformservices_transactionSecurity:policyList', None), ('runtime_platformservices_transactionSecurity:policyNameDescriptionInput', None), ('runtime_platformservices_transactionSecurity:policyTypeChooserStep', None), ('runtime_platformservices_transactionSecurity:policyTypeOption', None), ('runtime_platformservices_transactionSecurity:preferencePage', None), ('runtime_platformservices_transactionSecurity:transactionSecurityModal', None), ('runtime_quip:quipNotifications', None), ('runtime_retail_runtime:createRecordButton', None), ('runtime_retail_runtime:customerProfileActionMenu', None), ('runtime_retail_runtime:customerProfileSearch', None), ('runtime_retail_runtime:customerSearchResults', None), ('runtime_retail_runtime:emptyState', None), ('runtime_retail_runtime:retailBasket', None), ('runtime_retail_runtime:retailCscFrame', None), ('runtime_retail_runtime:retailCustomerProfile', None), ('runtime_retail_runtime:retailOrderList', None), ('runtime_retail_runtime:retailOrderListLVMDataManager', None), ('runtime_retail_runtime:retailOrderListLink', None), ('runtime_retail_runtime:siteOrderSearch', None), ('runtime_retail_runtime:template', None), ('runtime_rtc:actions', None), ('runtime_rtc:googleSetupPage', None), ('runtime_rtc:googleSheetsUserSettings', None), ('runtime_rtc:googleSheetsUserSettingsPage', None), ('runtime_rtc:launchRtc', None), ('runtime_rtc:mobilePresence', None), ('runtime_rtc:mobileRtcContainer', None), ('runtime_rtc:oauthRedirect', None), ('runtime_rtc:presenceStatus', None), ('runtime_rtc:recordChatRoomCreate', None), ('runtime_rtc:rtcConversation', None), ('runtime_rtc:rtcDiscoveryBanner', None), ('runtime_rtc:rtcGlobalSignIn', None), ('runtime_rtc:rtcPreferenceCommon', None), ('runtime_rtc:rtcPreferenceSetup', None), ('runtime_rtc:rtcPresenceBase', None), ('runtime_rtc:rtcPresenceDesignInfo', None), ('runtime_rtc:rtcPresenceDesignSubstitute', None), ('runtime_rtc:rtcUserSettingsPage', None), ('runtime_rtc:signin', None), ('runtime_rtc:signout', None), ('runtime_rtc_spark:recentConversation', None), ('runtime_rtc_spark:signin', None), ('runtime_rtc_spark:signout', None), ('runtime_rtc_spark:spaceRow', None), ('runtime_rtc_spark:spaceStation', None), ('runtime_rtc_spark:spacesAutocompleteDataProvider', None), ('runtime_rtc_spark:sparkConversation', None), ('runtime_rtc_spark:sparkConversationSetup', None), ('runtime_rtc_spark:sparkDiscoveryBanner', None), ('runtime_rtc_spark:sparkForSalesforce', None), ('runtime_rtc_spark:sparkGlobalSignIn', None), ('runtime_rtc_spark:sparkPresence', None), ('runtime_rtc_spark:sparkPresenceDesignInfo', None), ('runtime_rtc_spark:sparkPresenceDesignSubstitute', None), ('runtime_rtc_spark:sparkRoom', None), ('runtime_rtc_spark:sparkSetupPage', None), ('runtime_rtc_spark:sparkSpaces', None), ('runtime_rtc_spark:sparkSpacesDesignSubstitute', None), ('runtime_rtc_spark:sparkUserSettings', None), ('runtime_rtc_spark:webExMeetingView', None), ('runtime_rtc_spark:webexComposer', None), ('runtime_rtc_spark:webexComposerDesignSubstitute', None), ('runtime_rtc_spark:webexDesignInfo', None), ('runtime_sales_activities:activityHistoryMenuItem', None), ('runtime_sales_activities:activityPanel', None), ('runtime_sales_activities:activityPanelDesignInfo', None), ('runtime_sales_activities:activityRecommendedConnections', None), ('runtime_sales_activities:activityRecommendedConnectionsDesignSubstitute', None), ('runtime_sales_activities:activityRecommendedConnectionsEntry', None), ('runtime_sales_activities:activityRecommendedConnectionsListCard', None), ('runtime_sales_activities:activityRecommendedConnectionsListView', None), ('runtime_sales_activities:activityRecommendedConnectionsWidget', None), ('runtime_sales_activities:activityRecurrenceDayOfWeek', None), ('runtime_sales_activities:activityRecurrenceDayOfYear', None), ('runtime_sales_activities:activityRecurrenceDaysMonthlyMenu', None), ('runtime_sales_activities:activityRecurrenceIntervalMenu', None), ('runtime_sales_activities:activityRelatedListRow', None), ('runtime_sales_activities:activityRelatedListStencil', None), ('runtime_sales_activities:activityReminderSettings', None), ('runtime_sales_activities:activitySubject', None), ('runtime_sales_activities:activitySubjectListView', None), ('runtime_sales_activities:activityTime', None), ('runtime_sales_activities:activityTimeline2EmailStreamDetail', None), ('runtime_sales_activities:activityTimeline2FilterMenu', None), ('runtime_sales_activities:activityTimeline2InsightPopover', None), ('runtime_sales_activities:activityTimelineBaseRow', None), ('runtime_sales_activities:activityTimelineEACPopover', None), ('runtime_sales_activities:activityTimelineEmailTracking', None), ('runtime_sales_activities:activityTimelineEventStreamAttendees', None), ('runtime_sales_activities:activityTimelineEventStreamDetail', None), ('runtime_sales_activities:activityTimelineEventStreamDetailStencil', None), ('runtime_sales_activities:activityTimelineEventStreamTime', None), ('runtime_sales_activities:activityTimelineFixedLayout', None), ('runtime_sales_activities:activityTimelineFixedLayoutExpandedSiqEmail', None), ('runtime_sales_activities:activityTimelineFixedLayoutExpandedSiqEvent', None), ('runtime_sales_activities:activityTimelineFixedLayoutExpandedTaskEventStencil', None), ('runtime_sales_activities:activityTimelineFixedStencil', None), ('runtime_sales_activities:activityTimelineInsightLabel', None), ('runtime_sales_activities:activityTimelineInsights', None), ('runtime_sales_activities:activityTimelineLabel', None), ('runtime_sales_activities:activityTimelineRowExpand', None), ('runtime_sales_activities:activityViewAllContainer', None), ('runtime_sales_activities:activityViewAllError', None), ('runtime_sales_activities:activityViewAllList', None), ('runtime_sales_activities:activityViewAllTemplate', None), ('runtime_sales_activities:baseActivityRecurringCreate', None), ('runtime_sales_activities:baseActivityReminderView', None), ('runtime_sales_activities:composerPageBlockSectionEdit', None), ('runtime_sales_activities:emailStreamDetailInsights', None), ('runtime_sales_activities:emailStreamReplyActions', None), ('runtime_sales_activities:eventRecurrenceDayOfWeek', None), ('runtime_sales_activities:eventRecurrenceDayOfYear', None), ('runtime_sales_activities:eventRecurrenceDaysMonthlyMenu', None), ('runtime_sales_activities:eventRecurrenceIntervalMenu', None), ('runtime_sales_activities:eventRecurrenceStartEnd', None), ('runtime_sales_activities:eventRecurring2PatternEdit', None), ('runtime_sales_activities:eventRecurring2PatternView', None), ('runtime_sales_activities:eventRecurringLegacyPatternView', None), ('runtime_sales_activities:eventRecurringPatternEdit', None), ('runtime_sales_activities:eventRecurringPatternView', None), ('runtime_sales_activities:eventReminderCreate', None), ('runtime_sales_activities:eventReminderView', None), ('runtime_sales_activities:followUpHandler', None), ('runtime_sales_activities:manyWhoInputLookup', None), ('runtime_sales_activities:manyWhoName', None), ('runtime_sales_activities:manyWhoNameCompact', None), ('runtime_sales_activities:multipleOwners', None), ('runtime_sales_activities:outputActivityDateTime', None), ('runtime_sales_activities:outputLookupWithAlternateDetailId', None), ('runtime_sales_activities:requestAccessSIQ', None), ('runtime_sales_activities:requestAccessSIQFixedLayout', None), ('runtime_sales_activities:siqCherrypickingLink', None), ('runtime_sales_activities:siqCherrypickingSettings', None), ('runtime_sales_activities:siqCherrypickingSettingsConfirmationBody', None), ('runtime_sales_activities:siqCherrypickingSettingsConfirmationFooter', None), ('runtime_sales_activities:statelessTaskStatus', None), ('runtime_sales_activities:taskActivityDateOverride', None), ('runtime_sales_activities:taskActivityDateOverrideMobile', None), ('runtime_sales_activities:taskBorderLayout', None), ('runtime_sales_activities:taskCommon', None), ('runtime_sales_activities:taskCompactStencil', None), ('runtime_sales_activities:taskContent', None), ('runtime_sales_activities:taskContentFields', None), ('runtime_sales_activities:taskContentInner', None), ('runtime_sales_activities:taskDetailPanelWrapper', None), ('runtime_sales_activities:taskDetails', None), ('runtime_sales_activities:taskDueDate', None), ('runtime_sales_activities:taskFilterMenuDesktop', None), ('runtime_sales_activities:taskHighlights', None), ('runtime_sales_activities:taskListDataManager', None), ('runtime_sales_activities:taskListHeader', None), ('runtime_sales_activities:taskListHeaderBase', None), ('runtime_sales_activities:taskListHeaderPhone', None), ('runtime_sales_activities:taskListViewsPopover', None), ('runtime_sales_activities:taskNewButton', None), ('runtime_sales_activities:taskOverdue', None), ('runtime_sales_activities:taskQuickCreateManager', None), ('runtime_sales_activities:taskRecurrenceDayOfWeek', None), ('runtime_sales_activities:taskRecurrenceDayOfYear', None), ('runtime_sales_activities:taskRecurrenceDaysMonthlyMenu', None), ('runtime_sales_activities:taskRecurrenceIntervalMenu', None), ('runtime_sales_activities:taskRecurrenceStartEnd', None), ('runtime_sales_activities:taskRecurringCreate', None), ('runtime_sales_activities:taskRecurringCreateLatestEndDateCalculator', None), ('runtime_sales_activities:taskRecurringView', None), ('runtime_sales_activities:taskReminderCreate', None), ('runtime_sales_activities:taskReminderView', None), ('runtime_sales_activities:taskRow', None), ('runtime_sales_activities:taskSplitList', None), ('runtime_sales_activities:taskSplitViewListRecord', None), ('runtime_sales_activities:taskStatus', None), ('runtime_sales_activities:taskStatusBroker', None), ('runtime_sales_activities:taskStatusButton', None), ('runtime_sales_activities:taskStatusModal', None), ('runtime_sales_activities:tempDepend', None), ('runtime_sales_activities:todayTaskContainer', None), ('runtime_sales_activities:todayTasksCardDataManager', None), ('runtime_sales_activities:todayTasksCardDataProvider', None), ('runtime_sales_activities:todayTasksFilter', None), ('runtime_sales_activities:todayTasksList', None), ('runtime_sales_ade:acceptSuggestion', None), ('runtime_sales_ade:rejectSuggestion', None), ('runtime_sales_ade:reviewSuggestion', None), ('runtime_sales_cadence:addToCadence', None), ('runtime_sales_cadence:cadenceStepsCard', None), ('runtime_sales_cadence:cadenceStepsCardStepList', None), ('runtime_sales_cadence:cadenceStepsCardStepListItem', None), ('runtime_sales_cadence:createCadence', None), ('runtime_sales_cadence:deleteCadence', None), ('runtime_sales_cadence:openCadenceBuilder', None), ('runtime_sales_cadence:removeAllTargetsFromCadence', None), ('runtime_sales_cadence:removeFromCadence', None), ('runtime_sales_cadencebuilder:cadenceBuilder', None), ('runtime_sales_cadencebuilder:cadenceBuilderContainer', None), ('runtime_sales_campaign:addMember', None), ('runtime_sales_campaign:addMemberStatus', None), ('runtime_sales_campaign:changeDefaultStatus', None), ('runtime_sales_campaign:influenceRelatedList', None), ('runtime_sales_campaign:massAddMember', None), ('runtime_sales_campaign:massRemoveMembers', None), ('runtime_sales_campaign:massUpdateMemberStatus', None), ('runtime_sales_campaign:memberRecordType', None), ('runtime_sales_campaign:memberRelatedList', None), ('runtime_sales_campaign:memberStatus', None), ('runtime_sales_campaign:metricsPanel', None), ('runtime_sales_campaign:percentageMetricsCard', None), ('runtime_sales_campaign:rawNumMetricsCard', None), ('runtime_sales_campaign:relatedAddMember', None), ('runtime_sales_commerce:activateDeactivateTerminateCommerceEntities', None), ('runtime_sales_commerce:activateOrderEntity', None), ('runtime_sales_dedupe:bulkDedupeJobLink', None), ('runtime_sales_dedupe:bulkDedupeJobList', None), ('runtime_sales_dedupe:bulkDedupeJobListDataProvider', None), ('runtime_sales_dedupe:bulkDedupeJobListView', None), ('runtime_sales_dedupe:bulkDedupeJobResult', None), ('runtime_sales_dedupe:bulkDedupeJobRunnable', None), ('runtime_sales_dedupe:drsParentLink', None), ('runtime_sales_dedupe:initiateBulkJobPanel', None), ('runtime_sales_dedupe:initiateBulkJobSection', None), ('runtime_sales_dedupe:matchedLead', None), ('runtime_sales_dedupe:matchedLeadField', None), ('runtime_sales_dedupe:matchedLeadsDesignInfo', None), ('runtime_sales_dedupe:matchedLeadsDesignSubstitute', None), ('runtime_sales_dedupe:matchedLeadsList', None), ('runtime_sales_dedupe:matchedLeadsPanel', None), ('runtime_sales_dedupe:matchedLeadsWrapper', None), ('runtime_sales_emailtemplateui:basePublisher', None), ('runtime_sales_emailtemplateui:emailTemplateListDataManager', None), ('runtime_sales_emailtemplateui:emailTemplateMergeFieldModal', None), ('runtime_sales_emailtemplateui:emailTemplateObjectHome', None), ('runtime_sales_emailtemplateui:emailToolbar', None), ('runtime_sales_emailtemplateui:enhancedEmailTemplateListDataManager', None), ('runtime_sales_emailtemplateui:enhancedEmailTemplateMergeFieldModal', None), ('runtime_sales_emailtemplateui:enhancedEmailTemplateObjectHome', None), ('runtime_sales_emailtemplateui:enhancedMergeFieldRowTemplate', None), ('runtime_sales_emailtemplateui:inputEmailTemplateBody', None), ('runtime_sales_emailtemplateui:inputEnhancedEmailTemplateBody', None), ('runtime_sales_emailtemplateui:insertEmailTemplateFieldsDialog', None), ('runtime_sales_emailtemplateui:insertEmailTemplateFieldsRecordHomeDialog', None), ('runtime_sales_emailtemplateui:insertEnhancedEmailTemplateFieldsDialog', None), ('runtime_sales_emailtemplateui:mergeFieldModal', None), ('runtime_sales_emailtemplateui:mergeFieldRowTemplate', None), ('runtime_sales_emailtemplateui:mergeableEntityTemplate', None), ('runtime_sales_emailtemplateui:outputEmailTemplateBody', None), ('runtime_sales_emailtemplateui:outputEnhancedEmailTemplateBody', None), ('runtime_sales_emailtemplateui:publisherMergeField', None), ('runtime_sales_emailtemplateui:publisherTemplateInsertDialog', None), ('runtime_sales_emailtemplateui:publisherTemplateQuickLink', None), ('runtime_sales_emailtemplateui:publisherTemplateSaveDialog', None), ('runtime_sales_emailtemplateui:publisherTemplateUpdateDialog', None), ('runtime_sales_emailtemplateui:recordHomeFolder', None), ('runtime_sales_emailtemplateui:recordHomeFolderPicklist', None), ('runtime_sales_emailtemplateui:recordHomeRelatedEntityPicklist', None), ('runtime_sales_emailtemplateui:templateDataProvider', None), ('runtime_sales_emailtemplateui:templateErrors', None), ('runtime_sales_emailtemplateui:templateInsertDialog', None), ('runtime_sales_emailtemplateui:templateInsertDialogFooter', None), ('runtime_sales_emailtemplateui:templateItem', None), ('runtime_sales_emailtemplateui:templateSaveDialog', None), ('runtime_sales_emailtemplateui:templateSaveDialogFooter', None), ('runtime_sales_emailtemplateui:templateSaveDialogHeader', None), ('runtime_sales_emailtemplateui:templateSetup', None), ('runtime_sales_emailtemplateui:templateWarningBanner', None), ('runtime_sales_forecasting:forecastingAdjustmentDialog', None), ('runtime_sales_forecasting:forecastingAdjustmentErrorDialog', None), ('runtime_sales_forecasting:forecastingAdjustmentPopup', None), ('runtime_sales_forecasting:forecastingBellCurve', None), ('runtime_sales_forecasting:forecastingCellCurrency', None), ('runtime_sales_forecasting:forecastingCellNumber', None), ('runtime_sales_forecasting:forecastingCellPredictionCurrency', None), ('runtime_sales_forecasting:forecastingCellQuotaCurrency', None), ('runtime_sales_forecasting:forecastingCellQuotaNumber', None), ('runtime_sales_forecasting:forecastingCellText', None), ('runtime_sales_forecasting:forecastingCurrencyRecordCollection', None), ('runtime_sales_forecasting:forecastingCustomColumnHeader', None), ('runtime_sales_forecasting:forecastingDisplayAsMenu', None), ('runtime_sales_forecasting:forecastingDisplayedFamilyRecordCollection', None), ('runtime_sales_forecasting:forecastingDropdownMenu', None), ('runtime_sales_forecasting:forecastingGenericFeedback', None), ('runtime_sales_forecasting:forecastingGraphPopup', None), ('runtime_sales_forecasting:forecastingGraphView', None), ('runtime_sales_forecasting:forecastingHeader', None), ('runtime_sales_forecasting:forecastingHeroShotChart', None), ('runtime_sales_forecasting:forecastingHeroShotChartGraph', None), ('runtime_sales_forecasting:forecastingHeroShotChartHeader', None), ('runtime_sales_forecasting:forecastingHeroShotChartKPIs', None), ('runtime_sales_forecasting:forecastingHierarchyBreadcrumb', None), ('runtime_sales_forecasting:forecastingHierarchyBreadcrumbNode', None), ('runtime_sales_forecasting:forecastingHierarchyBreadcrumbOverflowNode', None), ('runtime_sales_forecasting:forecastingJumpToListProvider', None), ('runtime_sales_forecasting:forecastingListView', None), ('runtime_sales_forecasting:forecastingListViewProvider', None), ('runtime_sales_forecasting:forecastingMassEditQuotaPanel', None), ('runtime_sales_forecasting:forecastingMyTerritoriesOrForecasts', None), ('runtime_sales_forecasting:forecastingNoAccessSplashMessage', None), ('runtime_sales_forecasting:forecastingNoTerritoryFoundSplashMessage', None), ('runtime_sales_forecasting:forecastingNotEnabledSplashMessage', None), ('runtime_sales_forecasting:forecastingOppLVMDataManager', None), ('runtime_sales_forecasting:forecastingOppListContainer', None), ('runtime_sales_forecasting:forecastingOppListSummary', None), ('runtime_sales_forecasting:forecastingOppListViewManager', None), ('runtime_sales_forecasting:forecastingOrgShapeSplashPage', None), ('runtime_sales_forecasting:forecastingPeriodRange', None), ('runtime_sales_forecasting:forecastingPeriodRecord', None), ('runtime_sales_forecasting:forecastingPredictionColumnHeader', None), ('runtime_sales_forecasting:forecastingPredictionPanel', None), ('runtime_sales_forecasting:forecastingRecordCollection', None), ('runtime_sales_forecasting:forecastingSettingsMenu', None), ('runtime_sales_forecasting:forecastingSharePanel', None), ('runtime_sales_forecasting:forecastingSharePanelSharedGrid', None), ('runtime_sales_forecasting:forecastingTab', None), ('runtime_sales_forecasting:forecastingTreeView', None), ('runtime_sales_forecasting:forecastingTreeViewDataManager', None), ('runtime_sales_forecasting:forecastingTypeRecordCollection', None), ('runtime_sales_forecasting:forecastingTypesNotActiveQuotaSettingsSplashMessage', None), ('runtime_sales_forecasting:forecastingUserRecord', None), ('runtime_sales_forecasting:forecastingUserRoleOrTerritoryRecord', None), ('runtime_sales_forecasting:forecastingUserRolePermNotEnabledMessage', None), ('runtime_sales_hvs:baseHvsListGroupData', None), ('runtime_sales_hvs:createMyList', None), ('runtime_sales_hvs:highVelocitySalesExpandedSetup', None), ('runtime_sales_hvs:highVelocitySalesSetup', None), ('runtime_sales_hvs:highVelocitySalesSetupPreferenceToggleRow', None), ('runtime_sales_hvs:highVelocitySalesSetupRow', None), ('runtime_sales_hvs:hvsLearningPath', None), ('runtime_sales_hvs:hvsLearningPathSection', None), ('runtime_sales_hvs:hvsLearningPathStep', None), ('runtime_sales_hvs:hvsOnboardingStepTopic', None), ('runtime_sales_hvs:hvsWelcomeMat', None), ('runtime_sales_hvs:hvsWelcomeMatHeader', None), ('runtime_sales_hvs:hvsWelcomeMatPrompt', None), ('runtime_sales_hvs:hvsWelcomeMatTile', None), ('runtime_sales_hvs:myListGroupsContainer', None), ('runtime_sales_hvs:viewDetailsDockedPanel', None), ('runtime_sales_hvs:workQueueActionsContainer', None), ('runtime_sales_hvs:workQueueContainer', None), ('runtime_sales_hvs:workQueueFilterContainer', None), ('runtime_sales_hvs:workQueueFilterMenu', None), ('runtime_sales_hvs:workQueueList', None), ('runtime_sales_hvs:workQueueListGroupsContainer', None), ('runtime_sales_insights:accountInsightsContainer', None), ('runtime_sales_insights:accountInsightsDataProvider', None), ('runtime_sales_insights:accountRationaleContainer', None), ('runtime_sales_insights:accountRationaleNewsArticle', None), ('runtime_sales_insights:alohaInsightsContainer', None), ('runtime_sales_insights:beginFreemiumButton', None), ('runtime_sales_insights:campaignInsightsContainer', None), ('runtime_sales_insights:campaignInsightsContainerInfo', None), ('runtime_sales_insights:campaignInsightsRationale', None), ('runtime_sales_insights:contactInsightsContainer', None), ('runtime_sales_insights:contactInsightsContainerInfo', None), ('runtime_sales_insights:contactSuggestionRationaleContainer', None), ('runtime_sales_insights:einsteinHeader', None), ('runtime_sales_insights:einsteinIcon', None), ('runtime_sales_insights:freemiumAdoptionBanner', None), ('runtime_sales_insights:freemiumAdoptionBannerAlohaWrapper', None), ('runtime_sales_insights:freemiumOptInOutPanel', None), ('runtime_sales_insights:genericInsightsDataProvider', None), ('runtime_sales_insights:highlightsPanelScoreRenderer', None), ('runtime_sales_insights:insightActionBeforeExecution', None), ('runtime_sales_insights:insightActivityDetails', None), ('runtime_sales_insights:insightActivityRequestAccess', None), ('runtime_sales_insights:insightsActionButton', None), ('runtime_sales_insights:insightsActionButtonBase', None), ('runtime_sales_insights:insightsActionManager', None), ('runtime_sales_insights:insightsActions', None), ('runtime_sales_insights:insightsBucket', None), ('runtime_sales_insights:insightsCard', None), ('runtime_sales_insights:insightsCardHeader', None), ('runtime_sales_insights:insightsCardHeaderTrigger', None), ('runtime_sales_insights:insightsCards', None), ('runtime_sales_insights:insightsCardsDataProvider', None), ('runtime_sales_insights:insightsContainer', None), ('runtime_sales_insights:insightsContainerInfo', None), ('runtime_sales_insights:insightsDataProvider', None), ('runtime_sales_insights:insightsDetailWrapper', None), ('runtime_sales_insights:insightsEllieButton', None), ('runtime_sales_insights:insightsEllieIcon', None), ('runtime_sales_insights:insightsEmailCard', None), ('runtime_sales_insights:insightsFeedbackDropdown', None), ('runtime_sales_insights:insightsGenericFeedback', None), ('runtime_sales_insights:insightsMessage', None), ('runtime_sales_insights:insightsNewsChatterShare', None), ('runtime_sales_insights:insightsPanelBody', None), ('runtime_sales_insights:insightsPlatformActionSmall', None), ('runtime_sales_insights:insightsRationaleContainer', None), ('runtime_sales_insights:insightsRelevantLatestActivity', None), ('runtime_sales_insights:insightsSFDCEventCard', None), ('runtime_sales_insights:insightsSIQEventCard', None), ('runtime_sales_insights:insightsTaskCard', None), ('runtime_sales_insights:insightsTitleContainer', None), ('runtime_sales_insights:insightsTrendingIcon', None), ('runtime_sales_insights:insightsVoiceCard', None), ('runtime_sales_insights:listViewBehaviorInsightsContainer', None), ('runtime_sales_insights:listViewBehaviorScoreRenderer', None), ('runtime_sales_insights:listViewInsightsContainer', None), ('runtime_sales_insights:listViewScoreRenderer', None), ('runtime_sales_insights:opportunityIQInsightsDataProvider', None), ('runtime_sales_insights:scoreDial', None), ('runtime_sales_insights:topInsight', None), ('runtime_sales_lead:accept', None), ('runtime_sales_lead:convert', None), ('runtime_sales_lead:convertAccountSearchDataProvider', None), ('runtime_sales_lead:convertCreatePanelDesktop', None), ('runtime_sales_lead:convertDesktop', None), ('runtime_sales_lead:convertDesktopConsole', None), ('runtime_sales_lead:convertDupePanelDesktop', None), ('runtime_sales_lead:convertMatchPanelDesktop', None), ('runtime_sales_lead:convertMatchPanelDesktopSearchDataProvider', None), ('runtime_sales_lead:convertModal', None), ('runtime_sales_lead:convertModalFooter', None), ('runtime_sales_lead:convertOpportunityCheckBox', None), ('runtime_sales_lead:convertSectionDesktop', None), ('runtime_sales_lead:convertedCardStencilDesktop', None), ('runtime_sales_lead:convertedConfirmation', None), ('runtime_sales_lead:convertedConfirmationDesktop', None), ('runtime_sales_lead:convertedConfirmationFooter', None), ('runtime_sales_lead:convertedConfirmationFooterDesktop', None), ('runtime_sales_lead:dupePanelCardStencil', None), ('runtime_sales_lead:dupePanelCardStencilTester', None), ('runtime_sales_lead:leadConvertSettingsLoadingError', None), ('runtime_sales_lead:leadConvertSettingsPanel', None), ('runtime_sales_lead:linkedInLeadGen', None), ('runtime_sales_lead:linkedInLeadGenAdAccounts', None), ('runtime_sales_lead:linkedInLeadGenFieldMapping', None), ('runtime_sales_lead:linkedInLeadGenFieldMappingAutocomplete', None), ('runtime_sales_lead:linkedInLeadGenFieldMappingBasic', None), ('runtime_sales_lead:linkedInLeadGenFieldMappingDataProvider', None), ('runtime_sales_lead:linkedInLeadGenMapping', None), ('runtime_sales_lead:linkedInLeadGenMappingSection', None), ('runtime_sales_lead:linkedInLeadGenSetup', None), ('runtime_sales_lead:notConvertedToastMessage', None), ('runtime_sales_lead:pathAssistant', None), ('runtime_sales_lead:pillContainerAutoComplete', None), ('runtime_sales_lead:recordTypeOutputText', None), ('runtime_sales_leadiq:alohaInsightsContainer', None), ('runtime_sales_leadiq:engagementScoreDataProvider', None), ('runtime_sales_leadiq:leadInsights', None), ('runtime_sales_leadiq:leadInsightsAccordionItem', None), ('runtime_sales_leadiq:leadInsightsDataProvider', None), ('runtime_sales_leadiq:leadScoreDial', None), ('runtime_sales_leadiq:leadScoreInfo', None), ('runtime_sales_leadiq:listViewInsightsContainer', None), ('runtime_sales_leadiq:listViewScoreRenderer', None), ('runtime_sales_leadiq:recordHomeInsightsContainer', None), ('runtime_sales_leadiq:recordHomeInsightsContainerInfo', None), ('runtime_sales_merge:findDup', None), ('runtime_sales_merge:manualMergeFlow', None), ('runtime_sales_merge:manualMergeFlowLauncher', None), ('runtime_sales_merge:massManualMergeFlow', None), ('runtime_sales_merge:massManualMergeFlowLauncher', None), ('runtime_sales_merge:mergeCandidatesACRelErrorPage', None), ('runtime_sales_merge:mergeCandidatesList', None), ('runtime_sales_merge:mergeCandidatesListDataProvider', None), ('runtime_sales_merge:mergeCandidatesListPanel', None), ('runtime_sales_merge:mergeCandidatesListSection', None), ('runtime_sales_merge:mergeCandidatesPreviewCard', None), ('runtime_sales_merge:mergeCandidatesPreviewCardDesignInfo', None), ('runtime_sales_merge:mergeCandidatesPreviewCardSubstitute', None), ('runtime_sales_merge:mergeComparison', None), ('runtime_sales_merge:mergeConfirm', None), ('runtime_sales_merge:mergeDesktopConsole', None), ('runtime_sales_merge:mergeFlow', None), ('runtime_sales_merge:mergeFlowBroker', None), ('runtime_sales_merge:mergePanel', None), ('runtime_sales_merge:mergeSearch', None), ('runtime_sales_merge:mergeSearchFlow', None), ('runtime_sales_merge:mergeSearchLauncher', None), ('runtime_sales_merge:multiAddCandidates', None), ('runtime_sales_pathassistant:collapsibleDrawer', None), ('runtime_sales_pathassistant:daysInStage', None), ('runtime_sales_pathassistant:defaultTabHover', None), ('runtime_sales_pathassistant:desktopScroller', None), ('runtime_sales_pathassistant:pathAssistant', None), ('runtime_sales_pathassistant:pathAssistantBody', None), ('runtime_sales_pathassistant:pathAssistantCard', None), ('runtime_sales_pathassistant:pathAssistantCardDesktop', None), ('runtime_sales_pathassistant:pathAssistantCardMobile', None), ('runtime_sales_pathassistant:pathAssistantContainer', None), ('runtime_sales_pathassistant:pathAssistantDesignInfo', None), ('runtime_sales_pathassistant:pathAssistantDesignInfoDialogContent', None), ('runtime_sales_pathassistant:pathAssistantDesignSubstitute', None), ('runtime_sales_pathassistant:pathAssistantErrorOnLoad', None), ('runtime_sales_pathassistant:pathAssistantFields', None), ('runtime_sales_pathassistant:pathAssistantHeader', None), ('runtime_sales_pathassistant:pathAssistantInfo', None), ('runtime_sales_pathassistant:pathAssistantStepClosed', None), ('runtime_sales_pathassistant:pathAssistantTab', None), ('runtime_sales_pathassistant:pathAssistantTabSet', None), ('runtime_sales_pathassistant:tempDepend', None), ('runtime_sales_pathassistant:uiTabBar', None), ('runtime_sales_pathassistant:uiTabItem', None), ('runtime_sales_pipelineboard:genericPipelineDataProvider', None), ('runtime_sales_pipelineboard:pipelineColumnDataProvider', None), ('runtime_sales_pipelineboard:pipelineDataProvider', None), ('runtime_sales_pipelineboard:pipelineView', None), ('runtime_sales_pipelineboard:pipelineViewActionsList', None), ('runtime_sales_pipelineboard:pipelineViewAlertModal', None), ('runtime_sales_pipelineboard:pipelineViewCardItemStencil', None), ('runtime_sales_pipelineboard:pipelineViewCardItemStencilOutputText', None), ('runtime_sales_pipelineboard:pipelineViewCardItemStencilOutputTextArea', None), ('runtime_sales_pipelineboard:pipelineViewCardStencil', None), ('runtime_sales_pipelineboard:pipelineViewCloseConfirmModal', None), ('runtime_sales_pipelineboard:pipelineViewCloseLostTarget', None), ('runtime_sales_pipelineboard:pipelineViewColumn', None), ('runtime_sales_pipelineboard:pipelineViewColumnHeader', None), ('runtime_sales_pipelineboard:pipelineViewColumnModal', None), ('runtime_sales_pipelineboard:pipelineViewConfigurationModal', None), ('runtime_sales_pipelineboard:pipelineViewMultipleRecordTypeTabSet', None), ('runtime_sales_pipelineboard:tempDepend', None), ('runtime_sales_quotes:createPDF', None), ('runtime_sales_quotes:createQuote', None), ('runtime_sales_quotes:quotePDFPreview', None), ('runtime_sales_quotes:quotePDFViewer', None), ('runtime_sales_quotes:quotesSetup', None), ('runtime_sales_quotes:quotesSetupPage', None), ('runtime_sales_quotes:syncQuote', None), ('runtime_sales_quotes:templatePicker', None), ('runtime_sales_skype:frameParent', None), ('runtime_sales_skype:signin', None), ('runtime_sales_skype:signout', None), ('runtime_sales_skype:skypeConversation', None), ('runtime_sales_skype:skypeForSalesforce', None), ('runtime_sales_skype:skypeGlobalSignIn', None), ('runtime_sales_skype:skypePresence', None), ('runtime_sales_skype:skypePresenceDesignInfo', None), ('runtime_sales_skype:skypePresenceDesignSubstitute', None), ('runtime_sales_skype:skypeSetup', None), ('runtime_sales_skype:skypeSetupPage', None), ('runtime_sales_skype:skypeUserSettings', None), ('runtime_sales_skype:skypeUserSettingsPage', None), ('runtime_sales_social:socialActionsMenu', None), ('runtime_sales_social:socialConnections', None), ('runtime_sales_social:socialConnectionsList', None), ('runtime_sales_social:socialConnectionsListProvider', None), ('runtime_sales_social:socialFeedItem', None), ('runtime_sales_social:socialList', None), ('runtime_sales_social:socialLoggingManager', None), ('runtime_sales_social:socialPanel', None), ('runtime_sales_social:socialPanelCard', None), ('runtime_sales_social:socialProfilePanel', None), ('runtime_sales_social:socialSearchButtonCard', None), ('runtime_sales_social:socialSearchPanel', None), ('runtime_sales_social:socialSearchPanelProvider', None), ('runtime_sales_social:socialSignInPanel', None), ('runtime_sales_social:tempDepend', None), ('runtime_sales_templatebuilder:breadcrumb', None), ('runtime_sales_templatebuilder:builderAppLaunch', None), ('runtime_sales_templatebuilder:buttonCmp', None), ('runtime_sales_templatebuilder:colSetCmp', None), ('runtime_sales_templatebuilder:colTab', None), ('runtime_sales_templatebuilder:defaultEmailTemplatePageTemplate', None), ('runtime_sales_templatebuilder:editor', None), ('runtime_sales_templatebuilder:emailComponent', None), ('runtime_sales_templatebuilder:emailRegion', None), ('runtime_sales_templatebuilder:emailTemplate', None), ('runtime_sales_templatebuilder:emailTemplateBuilder', None), ('runtime_sales_templatebuilder:emailTemplateCanvasConfig', None), ('runtime_sales_templatebuilder:header', None), ('runtime_sales_templatebuilder:htmlCmp', None), ('runtime_sales_templatebuilder:imageEditor', None), ('runtime_sales_templatebuilder:imgNoTextCmp', None), ('runtime_sales_templatebuilder:leftPanel', None), ('runtime_sales_templatebuilder:middlePanel', None), ('runtime_sales_templatebuilder:richCmp', None), ('runtime_sales_templatebuilder:richTextCkEditor', None), ('runtime_sales_templatebuilder:rightPanel', None), ('runtime_sales_templatebuilder:surfaceTemplate', None), ('runtime_sales_templatebuilder:tabset1ColCmp', None), ('runtime_sales_templatebuilder:tabset2ColCmp', None), ('runtime_sales_templatebuilder:tabset3ColCmp', None), ('runtime_sales_templatebuilder:tabset4ColCmp', None), ('runtime_sales_templatebuilder:topToolbar', None), ('runtime_sales_xclean:advancedSearchLauncher', None), ('runtime_sales_xclean:advancedSearchModal', None), ('runtime_sales_xclean:advancedSearchRow', None), ('runtime_sales_xclean:dataAssessment', None), ('runtime_sales_xclean:dataAssessmentConfig', None), ('runtime_sales_xclean:dataAssessmentConfigListView', None), ('runtime_sales_xclean:dataAssessmentConfigProvider', None), ('runtime_sales_xclean:dataAssessmentCustomerSegmentation', None), ('runtime_sales_xclean:dataAssessmentDataQuality', None), ('runtime_sales_xclean:dataAssessmentHealthOverview', None), ('runtime_sales_xclean:dataAssessmentMatchAnalysis', None), ('runtime_sales_xclean:dataAssessmentPrompt', None), ('runtime_sales_xclean:dataAssessmentUpgradePanel', None), ('runtime_sales_xclean:dataPreviewDashboard', None), ('runtime_sales_xclean:dataPreviewImproveMatchRate', None), ('runtime_sales_xclean:dataPreviewQuality', None), ('runtime_sales_xclean:dataPreviewReport', None), ('runtime_sales_xclean:dataPreviewReportTest', None), ('runtime_sales_xclean:discoveryAccountsTabHome', None), ('runtime_sales_xclean:discoveryUserLicenseSetup', None), ('runtime_sales_xclean:dummyListDataProvider', None), ('runtime_sales_xclean:dummyRangeFacets', None), ('runtime_sales_xclean:externalRecordsListDataProvider', None), ('runtime_sales_xclean:externalRecordsRangeFacets', None), ('runtime_sales_xclean:externalRecordsTab', None), ('runtime_sales_xclean:fieldMappingError', None), ('runtime_sales_xclean:fieldMappingPanel', None), ('runtime_sales_xclean:fieldMappingPanelTest', None), ('runtime_sales_xclean:fieldMappingRadioColumn', None), ('runtime_sales_xclean:fieldMappingTabs', None), ('runtime_sales_xclean:recommendationsFacetsPlaceholder', None), ('runtime_sales_xclean:recommendationsListDataProvider', None), ('runtime_sales_xclean:recommendationsRangeFacets', None), ('runtime_sales_xclean:search', None), ('runtime_sales_xclean:searchAccountsPlugin', None), ('runtime_sales_xclean:searchBar', None), ('runtime_sales_xclean:searchCommaSeparatedCell', None), ('runtime_sales_xclean:searchConcatenatedCell', None), ('runtime_sales_xclean:searchContactsPlugin', None), ('runtime_sales_xclean:searchContainer', None), ('runtime_sales_xclean:searchContractExpirationDate', None), ('runtime_sales_xclean:searchCreditMetrics', None), ('runtime_sales_xclean:searchCreditMetricsInvalidPackage', None), ('runtime_sales_xclean:searchCreditMetricsKnownError', None), ('runtime_sales_xclean:searchCreditMetricsTile', None), ('runtime_sales_xclean:searchCreditsAvailable', None), ('runtime_sales_xclean:searchFacetsPanel', None), ('runtime_sales_xclean:searchFilterPanel', None), ('runtime_sales_xclean:searchList', None), ('runtime_sales_xclean:searchListDataProvider', None), ('runtime_sales_xclean:searchPlugin', None), ('runtime_sales_xclean:searchPreviewCompanyPanel', None), ('runtime_sales_xclean:searchPreviewContainer', None), ('runtime_sales_xclean:searchPreviewableCell', None), ('runtime_sales_xclean:searchRangeFacets', None), ('runtime_sales_xclean:searchRemainingCredits', None), ('runtime_sales_xclean:searchSelectForImportCell', None), ('runtime_sales_xclean:searchStatusCell', None), ('runtime_sales_xclean:searchTotalCredits', None), ('runtime_sales_xclean:searchUserLicenseDataSource', None), ('runtime_sales_xclean:searchUserLicenseIsActive', None), ('runtime_sales_xclean:searchUserLicensesUsageLimit', None), ('runtime_sales_xclean:selectMatch', None), ('runtime_sales_xclean:selectMatchContainer', None), ('runtime_sales_xclean:selectMatchDetailPane', None), ('runtime_sales_xclean:selectMatchDetailPart', None), ('runtime_sales_xclean:selectMatchHighLightsStencil', None), ('runtime_sales_xclean:selectionContainer', None), ('runtime_sales_xclean:singleLineAddress', None), ('runtime_sales_xclean:stareAndCompare', None), ('runtime_sales_xclean:stareAndCompareComparison', None), ('runtime_sales_xclean:stareAndCompareHeader', None), ('runtime_sales_xclean:swiftFacet', None), ('runtime_sales_xclean:xCleanMetrics', None), ('runtime_sales_xclean:xCleanMetricsGenericError', None), ('runtime_sales_xclean:xCleanMetricsHeader', None), ('runtime_sales_xclean:xCleanMetricsItem', None), ('runtime_sales_xclean:xCleanRecordsComparison', None), ('runtime_sales_xclean:xCleanSimpleCompoundField', None), ('runtime_sales_xclean:xCleanStareAndCompareModal', None), ('runtime_sales_xclean:xCleanThisRecordModal', None), ('runtime_sales_xclean:xcleanHighlights', None), ('runtime_search_federated:externalOutputUrl', None), ('runtime_search_federated:externalResultsGridView', None), ('runtime_search_federated:externalScopes', None), ('runtime_search_federated:externalScopesList', None), ('runtime_search_federated:externalScopesListDataProvider', None), ('runtime_service_fieldservice:createServiceReportPDF', None), ('runtime_service_fieldservice:generateWorkOrders', None), ('runtime_service_fieldservice:languagePicker', None), ('runtime_service_fieldservice:objectHierarchy', None), ('runtime_service_fieldservice:objectHierarchyMessage', None), ('runtime_service_fieldservice:serviceReportPdfViewer', None), ('runtime_service_fieldservice:serviceReportTemplatePicker', None), ('runtime_service_liveagent:attachmentChatMessage', None), ('runtime_service_liveagent:baseChat', None), ('runtime_service_liveagent:baseNotification', None), ('runtime_service_liveagent:basePanelFooter', None), ('runtime_service_liveagent:baseToolbar', None), ('runtime_service_liveagent:blockVisitorFooter', None), ('runtime_service_liveagent:blockVisitorPanel', None), ('runtime_service_liveagent:chat', None), ('runtime_service_liveagent:chatApi', None), ('runtime_service_liveagent:chatBody', None), ('runtime_service_liveagent:chatEndNotification', None), ('runtime_service_liveagent:chatInput', None), ('runtime_service_liveagent:chatMessage', None), ('runtime_service_liveagent:chatMessenger', None), ('runtime_service_liveagent:chatNotification', None), ('runtime_service_liveagent:chatSlice', None), ('runtime_service_liveagent:chatSneakPeekIndicator', None), ('runtime_service_liveagent:chatStartNotification', None), ('runtime_service_liveagent:chatUnavailableMessage', None), ('runtime_service_liveagent:conferenceButton', None), ('runtime_service_liveagent:conferenceFooter', None), ('runtime_service_liveagent:conferencePanel', None), ('runtime_service_liveagent:conversationData', None), ('runtime_service_liveagent:conversationLog', None), ('runtime_service_liveagent:conversationToolkitAPI', None), ('runtime_service_liveagent:embeddedAlohaPage', None), ('runtime_service_liveagent:embeddedLiveChatButton', None), ('runtime_service_liveagent:embeddedLiveChatDeployment', None), ('runtime_service_liveagent:embeddedLiveChatSkill', None), ('runtime_service_liveagent:endChatFooter', None), ('runtime_service_liveagent:endChatPanel', None), ('runtime_service_liveagent:engagedChat', None), ('runtime_service_liveagent:fileTransferButton', None), ('runtime_service_liveagent:fileTransferFooter', None), ('runtime_service_liveagent:fileTransferPanel', None), ('runtime_service_liveagent:liveChatTranscriptHighlightsStencil', None), ('runtime_service_liveagent:liveagentToolbar', None), ('runtime_service_liveagent:lowerFlagFooter', None), ('runtime_service_liveagent:lowerFlagPanel', None), ('runtime_service_liveagent:panelCloseButton', None), ('runtime_service_liveagent:pastChats', None), ('runtime_service_liveagent:pastChatsDesignInfo', None), ('runtime_service_liveagent:raiseFlagFooter', None), ('runtime_service_liveagent:raiseFlagPanel', None), ('runtime_service_liveagent:scopedNotification', None), ('runtime_service_liveagent:toolkitMessenger', None), ('runtime_service_liveagent:transferButton', None), ('runtime_service_liveagent:transferFooter', None), ('runtime_service_liveagent:transferPanel', None), ('runtime_service_livemessage:appleBusinessChatInfoCard', None), ('runtime_service_livemessage:chatBody', None), ('runtime_service_livemessage:chatFileCard', None), ('runtime_service_livemessage:chatHover', None), ('runtime_service_livemessage:conversationLog', None), ('runtime_service_livemessage:linkObject', None), ('runtime_service_livemessage:linkObjectsNotification', None), ('runtime_service_livemessage:livemessageChat', None), ('runtime_service_livemessage:livemessageInput', None), ('runtime_service_livemessage:livemessageToolbar', None), ('runtime_service_livemessage:messagingSessionHighlightsStencil', None), ('runtime_service_livemessage:messagingSessionLinkedRecords', None), ('runtime_service_livemessage:relatedRecords', None), ('runtime_service_livemessage:selectFileButton', None), ('runtime_service_livemessage:startOutboundConversationAction', None), ('runtime_service_omnichannel:abstractPushedRequest', None), ('runtime_service_omnichannel:currentWork', None), ('runtime_service_omnichannel:currentWorkList', None), ('runtime_service_omnichannel:currentWorkTransfer', None), ('runtime_service_omnichannel:message', None), ('runtime_service_omnichannel:omniAPILoader', None), ('runtime_service_omnichannel:omniAPITester', None), ('runtime_service_omnichannel:omniWidget', None), ('runtime_service_omnichannel:omniWidgetPublicEventsTester', None), ('runtime_service_omnichannel:pushedEntityRequest', None), ('runtime_service_omnichannel:pushedEntityRequestTester', None), ('runtime_service_omnichannel:pushedEntityRequestTesterData', None), ('runtime_service_omnichannel:status', None), ('runtime_service_omnichannel:statusTester', None), ('runtime_service_omnichannel:statusTesterData', None), ('runtime_service_omnichannel:toolkitTester', None), ('runtime_service_predictions:einsteinArticleSuggestion', None), ('runtime_service_predictions:einsteinArticleSuggestionsCard', None), ('runtime_service_predictions:einsteinItemWrapper', None), ('runtime_service_predictions:einsteinSuggestedResponse', None), ('runtime_service_predictions:einsteinSuggestionsCard', None), ('runtime_service_predictions:einsteinSuggestionsCardContainer', None), ('runtime_service_predictions:fieldPredictionsLauncher', None), ('runtime_service_predictions:pilotRecommendationsManager', None), ('runtime_service_predictions:predictionInputCheckbox', None), ('runtime_service_predictions:predictionInputPicklist', None), ('runtime_service_predictions:predictionsEllieIcon', None), ('runtime_service_predictions:predictionsManager', None), ('runtime_service_predictions:predictionsStrengthIcon', None), ('runtime_service_predictions:recommendationInputLookup', None), ('runtime_service_predictions:recommendationInputLookupDataProvider', None), ('runtime_service_predictions:recommendationInputLookupDesktop', None), ('runtime_service_predictions:recommendationLookupOption', None), ('runtime_service_predictions:standalonePredictionsManager', None), ('runtime_service_predictions:standaloneRecordRecommendations', None), ('runtime_service_scs:attachments', None), ('runtime_service_scs:conversationCaseDetail', None), ('runtime_service_scs:conversationCaseDetailTester', None), ('runtime_service_scs:conversationCaseList', None), ('runtime_service_scs:conversationSocialPostDetail', None), ('runtime_service_scs:conversationSocialPostDetailFooter', None), ('runtime_service_scs:conversationSocialPostDetailTester', None), ('runtime_service_scs:conversationSocialPostList', None), ('runtime_service_scs:conversations', None), ('runtime_service_scs:conversationsPersona', None), ('runtime_service_scs:conversationsPersonaTester', None), ('runtime_service_scs:inputSocialPostAccount', None), ('runtime_service_scs:inputSocialPostContent', None), ('runtime_service_scs:inputSocialPostMessageType', None), ('runtime_service_scs:inputSocialPostProvider', None), ('runtime_service_scs:inputSocialPostReplyTo', None), ('runtime_service_scs:link', None), ('runtime_service_scs:publisherQuickSocialPost', None), ('runtime_service_scs:sfxCreateCase', None), ('runtime_service_scs:sfxIgnore', None), ('runtime_service_scs:sfxMassApproveSocialPosts', None), ('runtime_service_scs:sfxMassCreateCase', None), ('runtime_service_scs:sfxMassIgnore', None), ('runtime_service_scs:sfxMassRejectSocialPosts', None), ('runtime_service_scs:socialOutputLookup', None), ('runtime_service_scs:socialPersona', None), ('runtime_service_scs:socialPostContent', None), ('runtime_service_scs:socialPostContentLink', None), ('runtime_service_scs:socialPostContentListView', None), ('runtime_service_scs:socialPostFeedItem', None), ('runtime_service_scs:socialPostMessage', None), ('runtime_service_scs:socialPostPreamble', None), ('runtime_service_scs:socialPostProvider', None), ('runtime_service_scs:socialPostQuickAction', None), ('runtime_service_scs:socialPostYouTubeLinkPreview', None), ('runtime_service_scs:truncatedText', None), ('runtime_service_trials:expandedWelcomeMat', None), ('runtime_service_trials:expandedWelcomeMatPrompt', None), ('runtime_service_trials:miniSetup', None), ('runtime_service_trials:momentOfCelebration', None), ('runtime_service_trials:setupSocialFlow', None), ('runtime_service_trials:setupSocialSelectProvider', None), ('runtime_service_trials:surveyUserInterestInfo', None), ('runtime_service_trials:surveyUserInterestInfoPrompt', None), ('runtime_service_trials:welcomeMatTile', None), ('s1wizard:actionCard', None), ('s1wizard:actionListPicker', None), ('s1wizard:actions', None), ('s1wizard:actionsPreview', None), ('s1wizard:arrangeActions', None), ('s1wizard:comicText', None), ('s1wizard:compactLayout', None), ('s1wizard:compactLayoutPreview', None), ('s1wizard:createContactLayout', None), ('s1wizard:createGlobalAction', None), ('s1wizard:dndDragSource', None), ('s1wizard:dndDropTarget', None), ('s1wizard:duelingList', None), ('s1wizard:duelingListItem', None), ('s1wizard:duelingLists', None), ('s1wizard:iPhone', None), ('s1wizard:navMenuPreview', None), ('s1wizard:navigation', None), ('s1wizard:preview', None), ('s1wizard:review', None), ('s1wizard:share', None), ('s1wizard:shareDataProvider', None), ('s1wizard:shareFeedback', None), ('s1wizard:shareListOption', None), ('s1wizard:shareSelectedOption', None), ('s1wizard:template', None), ('s1wizard:welcome', None), ('salesforceIdentity:accountSettings', None), ('salesforceIdentity:appLauncher', None), ('salesforceIdentity:appLauncherDesktop', None), ('salesforceIdentity:appLauncherDesktopContainer', None), ('salesforceIdentity:appLauncherDesktopInternal', None), ('salesforceIdentity:appLauncherDesktopInternalTester', None), ('salesforceIdentity:appLauncherDesktopTester', None), ('salesforceIdentity:appLauncherHeader', None), ('salesforceIdentity:appLauncherManager', None), ('salesforceIdentity:appLauncherModal', None), ('salesforceIdentity:appLauncherSetupDesktop', None), ('salesforceIdentity:appLauncherSetupReorderer', None), ('salesforceIdentity:appLauncherSetupTile', None), ('salesforceIdentity:appLauncherTile', None), ('salesforceIdentity:changePassword', None), ('salesforceIdentity:changePassword2', None), ('salesforceIdentity:communityLogo', None), ('salesforceIdentity:communityLogo2', None), ('salesforceIdentity:employeeLoginLink', None), ('salesforceIdentity:employeeLoginLink2', None), ('salesforceIdentity:forgotPassword', None), ('salesforceIdentity:forgotPassword2', None), ('salesforceIdentity:identityBody', None), ('salesforceIdentity:identityCustomHomeLayout', None), ('salesforceIdentity:identityHeader', None), ('salesforceIdentity:identityTemplate', None), ('salesforceIdentity:identityVerification', None), ('salesforceIdentity:lightningLoginFlow', None), ('salesforceIdentity:loginBody', None), ('salesforceIdentity:loginBody2', None), ('salesforceIdentity:loginForm', None), ('salesforceIdentity:loginForm2', None), ('salesforceIdentity:loginTemplate', None), ('salesforceIdentity:loginTemplate2', None), ('salesforceIdentity:searchInput', None), ('salesforceIdentity:selfRegister', None), ('salesforceIdentity:selfRegister2', None), ('salesforceIdentity:sessionTimeoutWarn', None), ('salesforceIdentity:sessionTimeoutWatcher', None), ('salesforceIdentity:socialLogin', None), ('salesforceIdentity:socialLogin2', None), ('salesforceIdentity:tempDepend', None), ('securityHealth:alohaContainer', None), ('securityHealth:alohaMessage', None), ('securityHealth:fixItConfirmModal', None), ('securityHealth:fixItModal', None), ('securityHealth:fixItModalFooter', None), ('securityHealth:fixItRiskComponent', None), ('securityHealth:fixItSearch', None), ('securityHealth:genericRiskComponent', None), ('securityHealth:importBaselineModal', None), ('securityHealth:missingSettings', None), ('securityHealth:relatedListCard', None), ('securityHealth:securityHealthSetupComponent', None), ('securityHealth:urlSwitcher', None), ('securityHub:dashboard', None), ('securityHub:header', None), ('securityHub:healthCheck', None), ('securityHub:orgManagement', None), ('securityHub:securityHubHome', None), ('securitycentral:appsList', None), ('securitycentral:module', None), ('securitycentral:scList', None), ('securitycentral:tabs', None), ('securitycentral:terminateSessionAction', None), ('selfService:articleHeaderDetail', None), ('selfService:articleLayout', None), ('selfService:articleList', None), ('selfService:articleListDataProvider', None), ('selfService:articleListItem', None), ('selfService:articleReCaptchaFlipView', None), ('selfService:articleTopicList', None), ('selfService:articleTypeDataProvider', None), ('selfService:articleTypeFilter', None), ('selfService:articleView', None), ('selfService:articleVoting', None), ('selfService:articleVotingIcon', None), ('selfService:autoSuggest', None), ('selfService:autoSuggestDataProvider', None), ('selfService:autoSuggestOption', None), ('selfService:backButton', None), ('selfService:baseArticleList', None), ('selfService:baseCaseCreation', None), ('selfService:baseNavItem', None), ('selfService:baseNavList', None), ('selfService:baseNavigation', None), ('selfService:baseSimpleItem', None), ('selfService:baseSimpleItems', None), ('selfService:breadCrumb', None), ('selfService:breadCrumbBase', None), ('selfService:breadCrumbItem', None), ('selfService:breadCrumbProvider', None), ('selfService:caseArticleDeflection', None), ('selfService:caseArticleDeflectionItem', None), ('selfService:caseArticleDeflectionProvider', None), ('selfService:caseAttachment', None), ('selfService:caseAttachments', None), ('selfService:caseAttachmentsDataProvider', None), ('selfService:caseComment', None), ('selfService:caseComments', None), ('selfService:caseCommentsDataProvider', None), ('selfService:caseConfirmation', None), ('selfService:caseCreate', None), ('selfService:caseCreateAttachments', None), ('selfService:caseDescription', None), ('selfService:caseDetails', None), ('selfService:caseHighlights', None), ('selfService:caseListView', None), ('selfService:casePublisher', None), ('selfService:casePublisherFileInput', None), ('selfService:caseStatusButton', None), ('selfService:caseSubject', None), ('selfService:caseVirtualGrid', None), ('selfService:categoryFilter', None), ('selfService:categoryNavigation', None), ('selfService:categoryProvider', None), ('selfService:contactSupport', None), ('selfService:expandedCategoryNav', None), ('selfService:expandedCategoryNavItem', None), ('selfService:expandedTrendingArticleItem', None), ('selfService:expandedTrendingArticleSection', None), ('selfService:expandedTrendingArticleSectionProvider', None), ('selfService:expandedTrendingArticles', None), ('selfService:expandedTrendingArticlesProvider', None), ('selfService:featuredDataCategories', None), ('selfService:featuredDataCategoryProvider', None), ('selfService:featuredItem', None), ('selfService:featuredItemList', None), ('selfService:featuredSearch', None), ('selfService:filter', None), ('selfService:filterItem', None), ('selfService:inputEmail', None), ('selfService:inputText', None), ('selfService:inputTextArea', None), ('selfService:koaHeaderCompanyName', None), ('selfService:loadingSpinner', None), ('selfService:logout', None), ('selfService:miniSearch', None), ('selfService:myCaseList', None), ('selfService:outputRichTextWithSmartLinks', None), ('selfService:pageWrapper', None), ('selfService:postToCase', None), ('selfService:profileHome', None), ('selfService:profileMenu', None), ('selfService:profileMenuAPI', None), ('selfService:profileMenuTrigger', None), ('selfService:profileNavigation', None), ('selfService:profilePanel', None), ('selfService:reCaptchaCarouselView', None), ('selfService:searchWrapper', None), ('selfService:similarArticleItem', None), ('selfService:similarArticles', None), ('selfService:similarArticles42', None), ('selfService:similarArticles42DesignSubstitute', None), ('selfService:similarArticlesDataProvider', None), ('selfService:similarArticlesDesignSubstitute', None), ('selfService:similarFeedItem', None), ('selfService:similarItemWithViewCount', None), ('selfService:similarQuestions', None), ('selfService:similarQuestionsDataProvider', None), ('selfService:simpleArticleItem', None), ('selfService:singleArticleView', None), ('selfService:subCategoryItem', None), ('selfService:supportQuickActionField', None), ('selfService:supportQuickActionLayout', None), ('selfService:tempDepend', None), ('selfService:template', None), ('selfService:toggleButton', None), ('selfService:topicArticleList', None), ('selfService:topicArticleListDataProvider', None), ('selfService:topicBreadCrumb', None), ('selfService:topicBreadCrumbDataProvider', None), ('selfService:topicRelatedArticle', None), ('selfService:topicTrendingArticles', None), ('selfService:topicTrendingArticles42', None), ('selfService:topicTrendingArticles42DesignSubstitute', None), ('selfService:topicTrendingArticlesDataProvider', None), ('selfService:topicTrendingArticlesDesignInfo', None), ('selfService:topicTrendingArticlesDesignSubstitute', None), ('selfService:trendingArticles', None), ('selfService:trendingArticlesDataProvider', None), ('selfService:twoColumnFilterLayout', None), ('selfService:unsupported', None), ('selfService:userProfileMenu', None), ('serviceCommunity:askWidget', None), ('serviceCommunity:deflectionActions', None), ('serviceCommunity:searchAskWidgetMain', None), ('serviceCommunity:searchBox', None), ('serviceCommunity:searchDeflection', None), ('serviceCommunity:searchResult', None), ('serviceCommunity:searchResultsList', None), ('serviceCommunity:signInBox', None), ('serviceCommunity:zonedropdownoption', None), ('serviceCommunity:zoneswitcher', None), ('setup:assistantActionButtonLink', None), ('setup:assistantActionLSF', None), ('setup:assistantActionRPC', None), ('setup:assistantActionStep', None), ('setup:assistantActionToggle', None), ('setup:assistantActionVideoLink', None), ('setup:assistantDiscoverStepAlign', None), ('setup:assistantDiscoverStepEvaluate', None), ('setup:assistantDiscoverStepLearn', None), ('setup:assistantDiscoverStepPlan', None), ('setup:assistantModelService', None), ('setup:assistantNonTrackableSubStep', None), ('setup:assistantOptimizeStepIterate', None), ('setup:assistantOptimizeStepMeasure', None), ('setup:assistantOptimizeStepMotivate', None), ('setup:assistantOptimizeStepTurnOff', None), ('setup:assistantPage', None), ('setup:assistantPageDiscover', None), ('setup:assistantPageOptimize', None), ('setup:assistantPageOverview', None), ('setup:assistantPageRollout', None), ('setup:assistantRolloutStepAdapt', None), ('setup:assistantRolloutStepImplement', None), ('setup:assistantRolloutStepLaunch', None), ('setup:assistantRolloutStepPlan', None), ('setup:assistantStep', None), ('setup:assistantSubStep', None), ('setup:assistantSummaryCard', None), ('setup:autoTransitionOptOutAgreement', None), ('setup:autoTransitionOptOutConfirmation', None), ('setup:autoTransitionOptOutErrorPage', None), ('setup:autoTransitionOptOutLanding', None), ('setup:enableAdvancedMetadataCache', None), ('setup:enableAdvancedMetadataCacheSetupComponent', None), ('setup:enableConsentManagement', None), ('setup:enableEinsteinDataDiscovery', None), ('setup:enableLightningExperience', None), ('setup:enableLightningExperienceSetupComponent', None), ('setup:enableLightningExperienceTab', None), ('setup:enableLightningExperienceToggle', None), ('setup:enableLightningExperienceWrapper', None), ('setup:enableLightningModalBody', None), ('setup:enablePowerInsights', None), ('setup:eventMonitoring', None), ('setup:fieldService', None), ('setup:fieldServiceSetup', None), ('setup:flexList', None), ('setup:gear', None), ('setup:hoverHelp', None), ('setup:placeholder', None), ('setup:s1SetupHomePage', None), ('setup:s1SetupSection', None), ('setup:s1SetupSectionItem', None), ('setup:sfxSearchResultsGrid', None), ('setup:ssDataProvider', None), ('setup:ssResultsFilters', None), ('setup:ssResultsPage', None), ('setup:ssResultsTable', None), ('setup:walkthroughs', None), ('setup:wtSetupPage', None), ('setupAssistant:setupAssistantProgress', None), ('setupAssistant:setupAssistantProgressComponent', None), ('setupAssistant:setupAssistantWelcomeMat', None), ('setupAssistant:setupAssistantWelcomeMatModal', None), ('setupAssistant:sfxWelcomeMat', None), ('setup_einstein_assistant:agendaScreen', None), ('setup_einstein_assistant:assistantSetup', None), ('setup_einstein_assistant:auraWrapperForRaptor', None), ('setup_einstein_assistant:fieldUpdateScreen', None), ('setup_einstein_assistant:filterScreen', None), ('setup_einstein_assistant:objectSearch', None), ('setup_einstein_assistant:objectSearchCombinedScreen', None), ('setup_einstein_assistant:personObjectSelect', None), ('setup_einstein_assistant:setupTemplateFlow', None), ('setup_einstein_assistant:startScreen', None), ('setup_einstein_assistant:summaryScreen', None), ('setup_einstein_assistant:targetObjectSearch', None), ('setup_einstein_assistant:templateSettings', None), ('setup_einstein_assistant:templateSettingsGrid', None), ('setup_einstein_assistant:topicSelectionComponent', None), ('setup_einstein_assistant:topicsSelectionScreen', None), ('setup_einstein_assistant:welcomeScreen', None), ('setup_einstein_shared:assessorItem', None), ('setup_einstein_shared:fieldsTable', None), ('setup_einstein_shared:guidePanel', None), ('setup_einstein_shared:ignoredfields', None), ('setup_einstein_shared:info', None), ('setup_einstein_shared:inputRadio', None), ('setup_einstein_shared:layoutSplit', None), ('setup_einstein_shared:stepLayoutEinstein', None), ('setup_einstein_shared:stepLayoutOneColumn', None), ('setup_einstein_shared:stepLayoutSplit', None), ('setup_industries_insurance:iconEdit', None), ('setup_industries_insurance:iconList', None), ('setup_industries_insurance:iconManager', None), ('setup_industries_insurance:insuranceSettings', None), ('setup_industries_objectdetection:datasetTrainAction', None), ('setup_industries_objectdetection:datasetTrainModal', None), ('setup_industries_objectdetection:modelRetrainAction', None), ('setup_industries_objectdetection:objectDetectionHome', None), ('setup_industries_objectdetection:setupReviewTerms', None), ('setup_industries_objectdetection:setupReviewTermsFlow', None), ('setup_industries_referralscoring:referralScoringConfirmSettings', None), ('setup_industries_referralscoring:referralScoringHome', None), ('setup_industries_referralscoring:referralScoringModelFlow', None), ('setup_industries_referralscoring:referralScoringModels', None), ('setup_industries_referralscoring:referralScoringSegmentationScreen', None), ('setup_industries_referralscoring:setupReviewTerms', None), ('setup_industries_referralscoring:setupReviewTermsFlow', None), ('setup_lightning_visualforce:apexPageList', None), ('setup_lightning_visualforce:vfEditPage', None), ('setup_mobile_appclone:addDistributionAccountModal', None), ('setup_mobile_appclone:androidFeatureGraphicSection', None), ('setup_mobile_appclone:androidIconsSection', None), ('setup_mobile_appclone:androidMetadataDraft', None), ('setup_mobile_appclone:androidMetadataReadOnly', None), ('setup_mobile_appclone:androidPlayStoreSection', None), ('setup_mobile_appclone:androidPromoVideoSection', None), ('setup_mobile_appclone:androidPushSection', None), ('setup_mobile_appclone:androidScreenshotsSection', None), ('setup_mobile_appclone:appAvailabilityDataProvider', None), ('setup_mobile_appclone:appAvailabilityModal', None), ('setup_mobile_appclone:appAvailabilitySection', None), ('setup_mobile_appclone:appAvailabilitySelection', None), ('setup_mobile_appclone:appAvailabilitySelectionColumnCountry', None), ('setup_mobile_appclone:appAvailabilitySelectionColumnSelect', None), ('setup_mobile_appclone:appCloneCreationModal', None), ('setup_mobile_appclone:appCloneEmptyState', None), ('setup_mobile_appclone:appCloneResourceCard', None), ('setup_mobile_appclone:appCloneTableView', None), ('setup_mobile_appclone:appCloneVideo', None), ('setup_mobile_appclone:appDistributionDelegateConfigStep', None), ('setup_mobile_appclone:appDistributionEditFlow', None), ('setup_mobile_appclone:appDistributionSection', None), ('setup_mobile_appclone:appDistributionSelectionStep', None), ('setup_mobile_appclone:appTemplatePickerModal', None), ('setup_mobile_appclone:approveAppConfirmationFlowStep', None), ('setup_mobile_appclone:approveAppFlow', None), ('setup_mobile_appclone:approveAppFlowStep', None), ('setup_mobile_appclone:approveRejectStep', None), ('setup_mobile_appclone:asset', None), ('setup_mobile_appclone:assetMetadataSection', None), ('setup_mobile_appclone:assetUploader', None), ('setup_mobile_appclone:assetViewer', None), ('setup_mobile_appclone:authorizedDomainRow', None), ('setup_mobile_appclone:authorizedDomainsSection', None), ('setup_mobile_appclone:baseMetadataDraft', None), ('setup_mobile_appclone:baseMetadataReadOnly', None), ('setup_mobile_appclone:betaTesterSection', None), ('setup_mobile_appclone:collapsibleSection', None), ('setup_mobile_appclone:combobox', None), ('setup_mobile_appclone:communitySection', None), ('setup_mobile_appclone:confirmationModal', None), ('setup_mobile_appclone:connectedAppSection', None), ('setup_mobile_appclone:delegateAccountSection', None), ('setup_mobile_appclone:delegatedConfigurationSection', None), ('setup_mobile_appclone:disableIconSetConfirmationModal', None), ('setup_mobile_appclone:fileUploader', None), ('setup_mobile_appclone:fixedBanner', None), ('setup_mobile_appclone:generalMessaging', None), ('setup_mobile_appclone:headerColorSection', None), ('setup_mobile_appclone:iconSet', None), ('setup_mobile_appclone:inputFile', None), ('setup_mobile_appclone:installPackageModalPanel', None), ('setup_mobile_appclone:installPackageStep', None), ('setup_mobile_appclone:iosAppStoreSection', None), ('setup_mobile_appclone:iosIconsSection', None), ('setup_mobile_appclone:iosMetadataDraft', None), ('setup_mobile_appclone:iosMetadataReadOnly', None), ('setup_mobile_appclone:iosScreenshotsSection', None), ('setup_mobile_appclone:languageList', None), ('setup_mobile_appclone:lifecycle', None), ('setup_mobile_appclone:lifecycleStep', None), ('setup_mobile_appclone:lifecycle_TestLifecycle_General', None), ('setup_mobile_appclone:loadingScreenSection', None), ('setup_mobile_appclone:makeChangesModalFooter', None), ('setup_mobile_appclone:metadataAttribute', None), ('setup_mobile_appclone:metadataHeader', None), ('setup_mobile_appclone:metadataSection', None), ('setup_mobile_appclone:myS1Home', None), ('setup_mobile_appclone:myS1MetadataDetail', None), ('setup_mobile_appclone:myS1WarningModal', None), ('setup_mobile_appclone:mys1Lifecycle', None), ('setup_mobile_appclone:mys1LifecycleModalFooter', None), ('setup_mobile_appclone:mys1LifecycleStep', None), ('setup_mobile_appclone:mys1ModalPanel', None), ('setup_mobile_appclone:noAccess', None), ('setup_mobile_appclone:popover', None), ('setup_mobile_appclone:privateDistributionSection', None), ('setup_mobile_appclone:requestActionStep', None), ('setup_mobile_appclone:requestBetaModalPanel', None), ('setup_mobile_appclone:requestPackagePanel', None), ('setup_mobile_appclone:screenshotSet', None), ('setup_mobile_appclone:screenshotsSection', None), ('setup_mobile_appclone:setupTile', None), ('setup_mobile_appclone:stateMapRefreshModal', None), ('setup_mobile_appclone:submitConfirmationModal', None), ('setup_mobile_appclone:tmpLifecycleTriggers', None), ('setup_mobile_appclone:translationStateMapSection', None), ('setup_mobile_appclone:updatePackagePanel', None), ('setup_mobile_appclone:verticalImagePanel', None), ('setup_platformServices_eventManager:alohaRouter', None), ('setup_platformServices_eventManager:eventManagerDetail', None), ('setup_platformServices_eventManager:eventManagerHome', None), ('setup_platformServices_eventManager:eventManagerList', None), ('setup_platform_a2:lexEndUsersNoSwitchSetup', None), ('setup_platform_a2:scheduledSwitcherSetup', None), ('setup_platform_api_wsdl:webservicesSetupPage', None), ('setup_platform_cdc:availableCdcEntitiesProvider', None), ('setup_platform_cdc:cdcObjectEnablement', None), ('setup_platform_integration:dataloaderIoSetup', None), ('setup_platform_ltngbolt:abstractBoltTile', None), ('setup_platform_ltngbolt:boltDetail', None), ('setup_platform_ltngbolt:boltDetailAccordion', None), ('setup_platform_ltngbolt:boltDetailHome', None), ('setup_platform_ltngbolt:boltFeature', None), ('setup_platform_ltngbolt:boltGetStarted', None), ('setup_platform_ltngbolt:boltHomeBodyCard', None), ('setup_platform_ltngbolt:boltItemList', None), ('setup_platform_ltngbolt:boltSearchDataProvider', None), ('setup_platform_ltngbolt:boltTableDataProvider', None), ('setup_platform_ltngbolt:boltTile', None), ('setup_platform_ltngbolt:boltTiles', None), ('setup_platform_ltngbolt:createBoltButton', None), ('setup_platform_ltngbolt:errorBoltTile', None), ('setup_platform_ltngbolt:flowCategoryDetail', None), ('setup_platform_ltngbolt:flowCategoryInAlohaRouter', None), ('setup_platform_ltngbolt:flowCategorySetupHome', None), ('setup_platform_ltngbolt:flowDataProvider', None), ('setup_platform_ltngbolt:lightningBoltHome', None), ('setup_platform_ltngbolt:lightningBoltSetupHome', None), ('setup_platform_ltngbolt:lsfMilestoneCreate', None), ('setup_platform_ltngbolt:lsfMilestoneFlowCategory', None), ('setup_platform_ltngbolt:lsfMilestoneItems', None), ('setup_platform_ltngbolt:lsfMilestoneSummary', None), ('setup_platform_ltngbolt:lsfNewBolt', None), ('setup_platform_ltngbolt:lsfNewFlowCategory', None), ('setup_platform_notifications:customNotificationTypeActionMenu', None), ('setup_platform_notifications:customNotificationTypeEdit', None), ('setup_platform_notifications:customNotificationTypeList', None), ('setup_platform_notifications:customNotificationTypes', None), ('setup_platform_notifications:customNotificationTypesDataProvider', None), ('setup_platform_notifications:notificationTypesManager', None), ('setup_platform_perms:permissionSetGroupsBaseSetupPage', None), ('setup_platform_perms:permissionSetGroupsDetailPage', None), ('setup_platform_perms:permissionSetGroupsSetup', None), ('setup_platform_perms:permissionSetGroupsSetupPage', None), ('setup_platform_perms:permissionSetGroupsWelcomeScreen', None), ('setup_platform_perms:userManagementSettings', None), ('setup_platform_sfdx:cannotExpire', None), ('setup_platform_sfdx:cannotExpireWrapper', None), ('setup_platform_sfdx:einsteinReviewTerms', None), ('setup_platform_sfdx:einsteinReviewTermsFlow', None), ('setup_platform_sfdx:einsteinTermsSetup', None), ('setup_platform_sfdx:expireOrganization', None), ('setup_platform_sfdx:expireOrganizationWrapper', None), ('setup_platform_sfdx:shapeSetupPage', None), ('setup_platform_sfdx:shapeSubscriberSetup', None), ('setup_platform_sfdx:somaPreferenceSetup', None), ('setup_platform_sfdx:somaSetupPage', None), ('setup_platform_sfdx:test', None), ('setup_platform_sfdx:unexpireOrganization', None), ('setup_platform_sfdx:unexpireOrganizationWrapper', None), ('setup_platformservices_customplatform:schemaSettingsPage', None), ('setup_platformservices_customplatform:test', None), ('setup_sales_einsteinForecasting:tuner', None), ('setup_sales_einsteinForecasting:tunerFieldExclusionChoice', None), ('setup_sales_einsteinForecasting:tunerFieldFiltersSelection', None), ('setup_sales_einsteinForecasting:tunerSegmentationChoice', None), ('setup_sales_einsteinForecasting:tunerSegmentationDefinition', None), ('setup_sales_einsteinForecasting:tunerSegmentationDefinitionRow', None), ('setup_sales_einsteinForecasting:tunerSetupFlow', None), ('setup_sales_einsteinForecasting:tunerSetupFlowComplete', None), ('setup_sales_einsteinForecasting:tunerWelcomeMat', None), ('setup_sales_forecasting:forecastingPredictionEnablement', None), ('setup_sales_forecasting:forecastingPredictionSetup', None), ('setup_sales_forecasting:forecastingPredictionSetupStatus', None), ('setup_sales_forecasting:forecastingPredictionSetupStatusContainer', None), ('setup_sales_forecasting:forecastingPredictionVerifyHomepage', None), ('setup_sales_forecasting:forecastingQuotaSettings', None), ('setup_sales_insights:accountIqSetup', None), ('setup_sales_insights:autoDataEntrySetup', None), ('setup_sales_insights:campaignInsightsSetup', None), ('setup_sales_insights:engagementScoreSetup', None), ('setup_sales_insights:freemiumActionsAlohaWrapper', None), ('setup_sales_insights:freemiumModalFooter', None), ('setup_sales_insights:freemiumOptOutSetupStep', None), ('setup_sales_insights:freemiumSetupStepIcon', None), ('setup_sales_insights:insightsFreemiumSetupAssistantStep', None), ('setup_sales_insights:insightsSetupCustomizeBox', None), ('setup_sales_insights:insightsSetupStatus', None), ('setup_sales_insights:opportunityIqSetup', None), ('setup_sales_insights:opportunityScoreSetup', None), ('setup_sales_insights:readinessCheck', None), ('setup_sales_insights:readinessCheckFilesDataProvider', None), ('setup_sales_insights:readinessCheckFilesList', None), ('setup_sales_insights:readinessCheckFrame', None), ('setup_sales_insights:readinessCheckPardot', None), ('setup_sales_leadiq:assessor', None), ('setup_sales_leadiq:confirmationModal', None), ('setup_sales_leadiq:fieldFilter', None), ('setup_sales_leadiq:filterList', None), ('setup_sales_leadiq:filterOption', None), ('setup_sales_leadiq:filterRow', None), ('setup_sales_leadiq:filterRowValue', None), ('setup_sales_leadiq:leadScoreSetupFlow', None), ('setup_sales_leadiq:leadiqsettingpage2', None), ('setup_sales_leadiq:leadiqsetup', None), ('setup_sales_leadiq:leadiqsetupconfigs', None), ('setup_sales_leadiq:leadiqsetupdeploymentstatus', None), ('setup_sales_leadiq:milestone', None), ('setup_sales_leadiq:quickAssessment', None), ('setup_sales_leadiq:rowFilter', None), ('setup_sales_leadiq:rowFilterBoolean', None), ('setup_sales_leadiq:rowFilterPicklist', None), ('setup_sales_leadiq:settingsModal', None), ('setup_sales_leadiq:welcomeMat', None), ('setup_sales_pardot:einsteinAnalyticsSetup', None), ('setup_sales_pardot:enablePanel', None), ('setup_sales_pardot:enablePardotTabs', None), ('setup_sales_pardot:engagementHistorySetup', None), ('setup_sales_pardot:engagementHistorySetupCustomStep', None), ('setup_sales_pardot:engagementHistorySetupStepLink', None), ('setup_sales_pardot:engagementHistorySetupSummaryBlock', None), ('setup_sales_pardot:pardotAccountSetup', None), ('setup_sales_pardot:pardotTenantRow', None), ('setup_sales_pardot:pardotTenantSetup', None), ('setup_sales_pardot:searchableCombobox', None), ('setup_sales_pathassistant:paSetupDuelingListsDialog', None), ('setup_sales_pathassistant:paSetupHome', None), ('setup_sales_pathassistant:paSetupInputRichText', None), ('setup_sales_pathassistant:paSetupPAStep', None), ('setup_sales_pathassistant:paSetupStep1Definition', None), ('setup_sales_pathassistant:paSetupStep2Configure', None), ('setup_sales_pathassistant:paSetupStep3Finish', None), ('setup_sales_pathassistant:paSetupWizardTemplate', None), ('setup_sales_spark:chooseYourTrialModal', None), ('setup_sales_spark:customFieldCheckbox', None), ('setup_sales_spark:customFieldCurrency', None), ('setup_sales_spark:customFieldDate', None), ('setup_sales_spark:customFieldDateTime', None), ('setup_sales_spark:customFieldEmail', None), ('setup_sales_spark:customFieldEntityStep', None), ('setup_sales_spark:customFieldForm', None), ('setup_sales_spark:customFieldFormStep', None), ('setup_sales_spark:customFieldLongTextArea', None), ('setup_sales_spark:customFieldNumber', None), ('setup_sales_spark:customFieldPercent', None), ('setup_sales_spark:customFieldPhone', None), ('setup_sales_spark:customFieldPreviewStep', None), ('setup_sales_spark:customFieldSetupFlow', None), ('setup_sales_spark:customFieldText', None), ('setup_sales_spark:customFieldUrl', None), ('setup_sales_spark:eacAgreeToTerms', None), ('setup_sales_spark:eacLSF', None), ('setup_sales_spark:eacLSFPrompt', None), ('setup_sales_spark:eacLandingStep', None), ('setup_sales_spark:eacReviewTermsAndConnectEmailStep', None), ('setup_sales_spark:eacSendEmailStep', None), ('setup_sales_spark:essentialsAssistantPage', None), ('setup_sales_spark:essentialsSetupHome', None), ('setup_sales_spark:essentialsSetupHomeCarousel', None), ('setup_sales_spark:finishEacStep', None), ('setup_sales_spark:leadStatusesCustomizeRow', None), ('setup_sales_spark:opportunityStagesCustomizeRow', None), ('setup_sales_spark:opportunityStagesCustomizeStep', None), ('setup_sales_spark:opportunityStagesInfoStep', None), ('setup_sales_spark:opportunityStagesSetupFlow', None), ('setup_sales_spark:opportunityStagesTemplateStep', None), ('setup_sales_spark:setupAppExchangeTile', None), ('setup_sales_spark:setupLifetimePerformance', None), ('setup_sales_spark:setupOnboardingAssistant', None), ('setup_sales_spark:setupWeeklyPerformance', None), ('setup_sales_spark:sparkOnboarding', None), ('setup_service:allTiles', None), ('setup_service:commBranding', None), ('setup_service:commConfigTopic', None), ('setup_service:commContactForm', None), ('setup_service:commDomainName', None), ('setup_service:commExtension', None), ('setup_service:commExtensionWaiting', None), ('setup_service:commSetupFlow', None), ('setup_service:commStart', None), ('setup_service:commSuccess', None), ('setup_service:commUploader', None), ('setup_service:ctiActionItems', None), ('setup_service:ctiAddUsers', None), ('setup_service:ctiInstallingDependencies', None), ('setup_service:ctiProviderAdditionalDetails', None), ('setup_service:ctiProviderInfo', None), ('setup_service:ctiProviderPicklist', None), ('setup_service:ctiSelectProvider', None), ('setup_service:ctiSetupFlow', None), ('setup_service:ctiSetupSuccess', None), ('setup_service:ctiStart', None), ('setup_service:ctiTermsModal', None), ('setup_service:deleteSampleData', None), ('setup_service:deleteSampleDataLoading', None), ('setup_service:deleteSampleDataSetupFlow', None), ('setup_service:deleteSampleDataSuccessful', None), ('setup_service:e2cConfigForward', None), ('setup_service:e2cEmailName', None), ('setup_service:e2cGmailAddForwardingAddress', None), ('setup_service:e2cGmailForwardingConfirmation', None), ('setup_service:e2cGmailForwardingLinkLoader', None), ('setup_service:e2cGmailSave', None), ('setup_service:e2cGmailSetupFlow', None), ('setup_service:e2cRoundtripVerification', None), ('setup_service:e2cSelectProvider', None), ('setup_service:e2cSetupFlow', None), ('setup_service:e2cStart', None), ('setup_service:e2cSuccess', None), ('setup_service:e2cVerifyRoutingAddress', None), ('setup_service:facebookSetupFlow', None), ('setup_service:inlineEditPopover', None), ('setup_service:kbAuthors', None), ('setup_service:kbDataCategoryGroup', None), ('setup_service:kbSetupFlow', None), ('setup_service:kbStart', None), ('setup_service:kbSuccess', None), ('setup_service:liveAgentCodeSnippet', None), ('setup_service:liveAgentDeployWaiting', None), ('setup_service:liveAgentEndpoints', None), ('setup_service:liveAgentOfflineSupport', None), ('setup_service:liveAgentOfflineSupportConfig', None), ('setup_service:liveAgentPrechat', None), ('setup_service:liveAgentQueueCreation', None), ('setup_service:liveAgentSetupFlow', None), ('setup_service:liveAgentStart', None), ('setup_service:liveAgentSuccess', None), ('setup_service:liveMessageAppleBusinessChat', None), ('setup_service:liveMessageAuth', None), ('setup_service:liveMessageBestPractice', None), ('setup_service:liveMessageDeployWaiting', None), ('setup_service:liveMessageProceedOmni', None), ('setup_service:liveMessageSelectChannel', None), ('setup_service:liveMessageSelectFacebookPage', None), ('setup_service:liveMessageSetupFlow', None), ('setup_service:liveMessageSms', None), ('setup_service:liveMessageStart', None), ('setup_service:liveMessageSuccess', None), ('setup_service:liveMessageWeChat', None), ('setup_service:liveMessageWeChatDetails', None), ('setup_service:liveMessageWhatsApp', None), ('setup_service:lsfConnect', None), ('setup_service:lsfContent', None), ('setup_service:lsfEndStep', None), ('setup_service:lsfStart', None), ('setup_service:lsfSuccess', None), ('setup_service:lshLifetimePerformanceCharts', None), ('setup_service:lshQueueCreation', None), ('setup_service:lshRecommendedTopCards', None), ('setup_service:lshTileServices', None), ('setup_service:lshTodaysPerformanceCharts', None), ('setup_service:multiAddWithFooter', None), ('setup_service:omniDeployWaiting', None), ('setup_service:omniError', None), ('setup_service:omniQueueCreation', None), ('setup_service:omniRoutingConfig', None), ('setup_service:omniRoutingConfigTableRow', None), ('setup_service:omniSetupFlow', None), ('setup_service:omniStart', None), ('setup_service:omniSuccess', None), ('setup_service:omniWorkLoad', None), ('setup_service:orgShape', None), ('setup_service:packageInstaller', None), ('setup_service:queueRoutingConfigTableRow', None), ('setup_service:quickActionCustomizeFields', None), ('setup_service:quickActionCustomizeFieldsAddFieldPopover', None), ('setup_service:quickActionCustomizeFieldsRow', None), ('setup_service:quickActionCustomizeFieldsRowIconButton', None), ('setup_service:serviceCaseStatus', None), ('setup_service:serviceCaseStatusAddTemplate', None), ('setup_service:serviceSetupHome', None), ('setup_service:setupCaseStatusFlow', None), ('setup_service:setupFlowError', None), ('setup_service:setupMatTile', None), ('setup_service:socialAuth', None), ('setup_service:socialEnablePages', None), ('setup_service:socialStart', None), ('setup_service:socialSuccess', None), ('setup_service:socialTeamAccess', None), ('setup_service:socialWaiting', None), ('setup_service:treeGridSelectionTriggerCell', None), ('setup_service:twitterSetupFlow', None), ('setup_service_entityarchiving:entityArchivingSetup', None), ('setup_service_entityarchiving:entityArchivingSetupView', None), ('setup_service_fieldservice:baseTemplateAssignment', None), ('setup_service_fieldservice:emptyState', None), ('setup_service_fieldservice:fieldServiceSettings', None), ('setup_service_fieldservice:setupEntityList', None), ('setup_service_fieldservice:timeSheetTemplate', None), ('setup_service_fieldservice:timeSheetTemplateAssignment', None), ('setup_service_fieldservice:timeSheetTemplateWizard', None), ('setup_service_fieldservice:timeSheetTemplateWizardDetailsStep', None), ('setup_service_fieldservice:timeSheetTemplateWizardFlow', None), ('setup_service_fieldservice:updateTemplateAssignmentModal', None), ('setup_service_fieldservice:visionPrediction', None), ('setup_service_intents:createDomainModal', None), ('setup_service_intents:createIntentModal', None), ('setup_service_intents:domainList', None), ('setup_service_intents:domainListCard', None), ('setup_service_intents:domainQuickViewModal', None), ('setup_service_intents:globalIntentPicker', None), ('setup_service_intents:intentListCard', None), ('setup_service_intents:intentRecord', None), ('setup_service_intents:intentSetRecord', None), ('setup_service_intents:intentSetup', None), ('setup_service_intents:slotClassListCard', None), ('setup_service_intents:slotClassRecord', None), ('setup_service_livemessage:channelsContainer', None), ('setup_service_livemessage:channelsGrid', None), ('setup_service_livemessage:errorType', None), ('setup_service_livemessage:messageType', None), ('setup_service_livemessage:messagingChannelEditAction', None), ('setup_service_livemessage:messagingChannelEditModal', None), ('setup_service_livemessage:messagingDeliveryErrorLogContainer', None), ('setup_service_livemessage:messagingDeliveryErrorMassDelete', None), ('setup_service_livemessage:messagingDeliveryErrorViewAction', None), ('setup_service_livemessage:messagingDeliveryErrorViewModal', None), ('setup_service_livemessage:messagingSensitiveDataRuleEditAction', None), ('setup_service_livemessage:messagingSensitiveDataRuleEditModal', None), ('setup_service_livemessage:messagingSensitiveDataRules', None), ('setup_service_livemessage:messagingTemplateDeveloperNameField', None), ('setup_service_livemessage:messagingTemplateMasterLabelField', None), ('setup_service_livemessage:messagingTemplateMessageField', None), ('setup_service_livemessage:messagingTemplateSettingsContainer', None), ('setup_service_livemessage:saveButton', None), ('setup_service_livemessage:sensitiveDataRuleActionTypeListField', None), ('setup_service_livemessage:sensitiveDataRuleEnforceOnListField', None), ('setup_service_livemessage:sensitiveDataRulePatternListField', None), ('setup_service_livemessage:settingsContainer', None), ('setup_service_omnichannel:attributeBasedRoutingCombobox', None), ('setup_service_omnichannel:attributeBasedRoutingSelectAttributeList', None), ('setup_service_omnichannel:attributeBasedRoutingSelectAttributeRow', None), ('setup_service_omnichannel:attributeBasedRoutingSetup', None), ('setup_service_omnichannel:attributeBasedRoutingSetupFooter', None), ('setup_service_omnichannel:attributeBasedRoutingSetupHeader', None), ('setup_service_omnichannel:attributeBasedRoutingSetupModal', None), ('setup_service_omnichannel:attributeBasedRoutingSetupSelectAttributes', None), ('setup_service_omnichannel:attributeBasedRoutingSetupSelectEntity', None), ('setup_service_omnichannel:attributeBasedRoutingSetupSelectFields', None), ('setup_service_omnichannel:attributeBasedSaveModalFooter', None), ('setup_service_omnichannel:errorPopover', None), ('setup_service_predictions:einsteinCaseClassificationDataSegmentation', None), ('setup_service_predictions:einsteinCaseClassificationReviewBasics', None), ('setup_service_predictions:einsteinCaseClassificationReviewFields', None), ('setup_service_predictions:einsteinCaseClassificationSetup', None), ('setup_service_predictions:einsteinCaseClassificationSetupAddFields', None), ('setup_service_predictions:einsteinCaseClassificationSetupConfirmationModal', None), ('setup_service_predictions:einsteinCaseClassificationSetupDataSegmentation', None), ('setup_service_predictions:einsteinCaseClassificationSetupFieldList', None), ('setup_service_predictions:einsteinCaseClassificationSetupFieldListItem', None), ('setup_service_predictions:einsteinCaseClassificationSetupHomePage', None), ('setup_service_predictions:einsteinCaseClassificationSetupModal', None), ('setup_service_predictions:einsteinCaseClassificationSetupProgressBar', None), ('setup_service_predictions:einsteinCaseClassificationSetupReviewFields', None), ('setup_service_predictions:einsteinCaseClassificationThresholdPicker', None), ('setup_service_predictions:reviewTerms', None), ('setup_service_predictions:reviewTermsFlow', None), ('setup_service_scs:caseRulesTab', None), ('setup_service_scs:inboundSettingsTab', None), ('setup_service_scs:scopedNotification', None), ('setup_service_scs:socialBusinessRulesCaseSubject', None), ('setup_service_scs:socialBusinessRulesCaseSubjectAddField', None), ('setup_service_scs:socialBusinessRulesCaseSubjectCustomSubject', None), ('setup_service_scs:socialBusinessRulesContainer', None), ('setup_service_scs:socialBusinessRulesFooter', None), ('setup_service_scs:socialBusinessRulesTabs', None), ('setup_service_smb:audioUploader', None), ('setup_service_smb:createAgentQueue', None), ('setup_service_smb:hcCreateTopics', None), ('setup_service_smb:hcCreateTopicsRow', None), ('setup_service_smb:hcSetupFlow', None), ('setup_service_smb:hcStart', None), ('setup_service_smb:hcSuccess', None), ('setup_service_smb:helpCenterSetupPage', None), ('setup_service_smb:lsfGenericStep', None), ('setup_service_smb:lsfQueueCreation', None), ('setup_service_smb:voiceChannelBusinessHours', None), ('setup_service_smb:voiceChannelMessageUploader', None), ('setup_service_smb:voiceChannelName', None), ('setup_service_smb:voiceChannelSelectNumber', None), ('setup_service_smb:voiceChannelSetupFlow', None), ('setup_service_smb:voiceChannelStart', None), ('setup_service_smb:voiceChannelSuccess', None), ('setup_service_smb:voiceRouting', None), ('setup_service_smb:voiceRoutingSetupFlow', None), ('setup_service_smb:voiceSelectPhone', None), ('setupnav:appImageUpload', None), ('setupnav:appLauncherPreview', None), ('setupnav:appManager', None), ('setupnav:availableProfilesDataProvider', None), ('setupnav:formFactorsCellRenderer', None), ('setupnav:iconPicker', None), ('setupnav:iconPickerListItem', None), ('setupnav:iconPickerModal', None), ('setupnav:infiniteDuelingListTestHarness', None), ('setupnav:lsfEditFlow', None), ('setupnav:lsfMilestone', None), ('setupnav:lsfMilestoneAppNavigation', None), ('setupnav:lsfMilestoneCreate', None), ('setupnav:lsfMilestoneItems', None), ('setupnav:lsfMilestoneNavigationRules', None), ('setupnav:lsfMilestoneProfiles', None), ('setupnav:lsfMilestoneUtilityBar', None), ('setupnav:lsfNewFlow', None), ('setupnav:uitypeCellRenderer', None), ('setupnav:upgradeCustomApp', None), ('setupnav:utilityBarItemIconPicker', None), ('setupnav:utilityBarSetup', None), ('setupnav:utilityBarSetupPropertyEditor', None), ('setupnav:utilityBarSetupTab', None), ('setupnav:utilityBarSetupTabset', None), ('setupnav:utilityBarSetupVisualEditorPalette', None), ('setupwizard:alertBox', None), ('setupwizard:footer', None), ('setupwizard:header', None), ('setupwizard:milestoneMarker', None), ('setupwizard:milestoneTracker', None), ('setupwizard:overlay', None), ('setupwizard:stdMilestone', None), ('setupwizard:stdOverlay', None), ('setupwizard:stdSubstep', None), ('setupwizard:stepLevelMessage', None), ('setupwizard:testMilestone', None), ('setupwizard:wizard', None), ('sfa:accountLookupCard', None), ('sfa:addAccTeamOnOpp', None), ('sfa:addCustomPriceOnPricebook', None), ('sfa:addCustomPriceOnProduct', None), ('sfa:addCustomPriceOnProductFooter', None), ('sfa:addDefaultTeam', None), ('sfa:analyticsHome', None), ('sfa:analyticsHomeLegacy', None), ('sfa:caseLookupCard', None), ('sfa:checkboxButton', None), ('sfa:checkboxToggle', None), ('sfa:choosePricebook', None), ('sfa:choosePricebookFooter', None), ('sfa:choosePricebookPostSaveRunnable', None), ('sfa:closableMessage', None), ('sfa:contactLookupCard', None), ('sfa:createPartnerContainer', None), ('sfa:datePicker', None), ('sfa:datePickerItem', None), ('sfa:datePickerScroller', None), ('sfa:datePickerWeek', None), ('sfa:deleteAllTeams', None), ('sfa:detailPanelWrapper', None), ('sfa:dialog', None), ('sfa:duelingListBoxes', None), ('sfa:eventActivityDate', None), ('sfa:eventActivityDateTime', None), ('sfa:eventDateTime', None), ('sfa:eventDurationInMinutes', None), ('sfa:eventIsAllDayEvent', None), ('sfa:eventOwnerPreventEntityChange', None), ('sfa:filterMenu', None), ('sfa:folderHome', None), ('sfa:forecasting', None), ('sfa:hierarchyDataManager', None), ('sfa:hierarchyFullView', None), ('sfa:hierarchyListViewAction', None), ('sfa:hierarchyListViewCard', None), ('sfa:hierarchyListViewDetails', None), ('sfa:hierarchyPrompt', None), ('sfa:hierarchyTriggerCell', None), ('sfa:importButton', None), ('sfa:importContact', None), ('sfa:launchPhone', None), ('sfa:lightningConversionWelcomeMat', None), ('sfa:linkedInSalesNavigatorPage', None), ('sfa:navigateToHierarchyButton', None), ('sfa:objTerrAssociationCreate', None), ('sfa:objTerrAssociationCreateFooter', None), ('sfa:ocrMultiEdit', None), ('sfa:ocrRelatedListPrimaryField', None), ('sfa:opportunityContactRoleIsPrimary', None), ('sfa:opportunityFieldOverride', None), ('sfa:opportunityLineItemFieldOverride', None), ('sfa:opportunityLineItemMultiEdit', None), ('sfa:opportunityLineItemScheduleMultiEdit', None), ('sfa:opportunityLineItemScheduleSubtotalsFooter', None), ('sfa:opportunityLookupCard', None), ('sfa:opportunitySplitMultiEdit', None), ('sfa:opportunitySplitSubtotalsFooter', None), ('sfa:opportunitySplitUser', None), ('sfa:outputCompoundPhotoUserName', None), ('sfa:outputLookupForContactPoint', None), ('sfa:outputLookupNoNavigation', None), ('sfa:outputLookupWithHierarchyIcon', None), ('sfa:outputNameWithHierarchyIcon', None), ('sfa:outputYearQuarter', None), ('sfa:placeholder', None), ('sfa:productNameOutputLookup', None), ('sfa:productScheduleDeleteAll', None), ('sfa:productScheduleEstablish', None), ('sfa:productScheduleEstablishInputFields', None), ('sfa:saveAndNewEventEntity', None), ('sfa:saveEventEntityAction', None), ('sfa:sfdcEventList', None), ('sfa:sfdcEventListDataManager', None), ('sfa:sfdcEventListStencil', None), ('sfa:stageNameService', None), ('sfa:stageNameServiceForMDP', None), ('sfa:stageNameServiceForecastCategoryWrapper', None), ('sfa:stageNameServiceProbabilityWrapper', None), ('sfa:taskList', None), ('sfa:teamAccessLevel', None), ('sfa:teamDetailPanel', None), ('sfa:teamDetailPanelInfoMessage', None), ('sfa:teamMiniRelatedStencil', None), ('sfa:teamMiniRelatedStencilMobile', None), ('sfa:tempDepend', None), ('sfa:useStandardPrice', None), ('sfa:useStandardPriceUnitPriceWrapper', None), ('siteforce:baseInvalidComponent', None), ('siteforce:baseScopedSldsTemplate', None), ('siteforce:baseSldsTemplate', None), ('siteforce:baseTemplate', None), ('siteforce:cmsConnectManager', None), ('siteforce:cmsConnectProvider', None), ('siteforce:communityTemplate', None), ('siteforce:conditional', None), ('siteforce:contentArea', None), ('siteforce:cptBody', None), ('siteforce:cptThemeCss', None), ('siteforce:designTimeCmpLoader', None), ('siteforce:designTimeCmpLoaderWrapper', None), ('siteforce:designTimeComponent', None), ('siteforce:designTimeEmptyRegion', None), ('siteforce:designTimeLabelLoader', None), ('siteforce:designTimeMode', None), ('siteforce:designTimeModeLoader', None), ('siteforce:designTimeRegion', None), ('siteforce:dialogMessage', None), ('siteforce:dialogModal', None), ('siteforce:dialogOfflineMessage', None), ('siteforce:dialogPanel', None), ('siteforce:dialogService', None), ('siteforce:fontContainer', None), ('siteforce:fontStyle', None), ('siteforce:helpCenterBody', None), ('siteforce:hiddenRegion', None), ('siteforce:hybridAppManager', None), ('siteforce:integrationServiceAppTemplate', None), ('siteforce:koaBody', None), ('siteforce:koaTemplate', None), ('siteforce:kokuaBody', None), ('siteforce:kokuaTemplate', None), ('siteforce:loadingBalls', None), ('siteforce:napiliBody', None), ('siteforce:napiliFooter', None), ('siteforce:napiliFooterDesignInfo', None), ('siteforce:napiliStyle', None), ('siteforce:napiliTemplate', None), ('siteforce:navigationProvider', None), ('siteforce:networkTracking', None), ('siteforce:oneColumnLayout', None), ('siteforce:pageLoader', None), ('siteforce:panelManager', None), ('siteforce:panelsContainer', None), ('siteforce:placeholderComponent', None), ('siteforce:prmBody', None), ('siteforce:prmThemeCss', None), ('siteforce:publiclyCacheableComponentLoader', None), ('siteforce:qb', None), ('siteforce:quarterback', None), ('siteforce:recordServiceComponent', None), ('siteforce:regionLoader', None), ('siteforce:regionLoaderWrapper', None), ('siteforce:routerInitializer', None), ('siteforce:runtimeComponent', None), ('siteforce:runtimeMode', None), ('siteforce:runtimeRegion', None), ('siteforce:serviceBody', None), ('siteforce:serviceThemeCss', None), ('siteforce:sfdcPage', None), ('siteforce:sldsOneColLayout', None), ('siteforce:sldsThreeCol336Layout', None), ('siteforce:sldsThreeCol363Layout', None), ('siteforce:sldsThreeCol444Layout', None), ('siteforce:sldsThreeCol633Layout', None), ('siteforce:sldsTwoCol48Layout', None), ('siteforce:sldsTwoCol66Layout', None), ('siteforce:sldsTwoCol84Layout', None), ('siteforce:sldsTwoCol84SidebarFeaturedLayout', None), ('siteforce:spinnerManager', None), ('siteforce:starterBody', None), ('siteforce:style', None), ('siteforce:themeLayoutStarter', None), ('siteforce:toast', None), ('siteforce:twoCol74Layout', None), ('siteforce:twoColumnLayout', None), ('siteforce:warningComponent', None), ('siteforce:warningComponentNoData', None), ('siteforceBuilder:cmcHubMenuWrapper', None), ('siteforceBuilder:communityBuilderComponentPalettePanel', None), ('siteforceBuilder:communityBuilderComponentPropertyPanel', None), ('siteforceBuilder:communityBuilderLibraryLoader', None), ('siteforceBuilder:communityBuilderPanelManager', None), ('siteforceBuilder:communityBuilderTemplate', None), ('siteforceBuilder:dropdown', None), ('siteforceBuilder:dropdownTrigger', None), ('siteforceBuilder:headerDropdownTrigger', None), ('siteforceBuilder:outerLayoutEditor', None), ('siteforceBuilder:paletteSectionDisabledMessage', None), ('siteforceBuilder:setupFlowLibraryWrapper', None), ('siteforceBuilder:siteLinkDropdown', None), ('support:caseCommentIsNotificationSelectedField', None), ('support:caseCommentIsPublishedField', None), ('support:caseCommentOutputText', None), ('support:caseHighlightsPreviewStencil', None), ('support:caseHoverDescription', None), ('support:caseTeamActions', None), ('support:compactClumpItem', None), ('support:compactClumpItemForPreview', None), ('support:compactFeedItem', None), ('support:compactFeedItemArticleContent', None), ('support:compactFeedItemCaseCommentContent', None), ('support:compactFeedItemChatTranscriptContent', None), ('support:compactFeedItemContent', None), ('support:compactFeedItemDefaultContent', None), ('support:compactFeedItemEmailMessageContent', None), ('support:compactFeedItemFieldChangeContent', None), ('support:compactFeedItemForPreview', None), ('support:compactFeedItemHeader', None), ('support:compactFeedItemLogCallContent', None), ('support:compactFeedItemRecordSummaryContent', None), ('support:compactFeedItemSocialPostContent', None), ('support:compactFeedOverflowActionMenu', None), ('support:compactRecordFeedContainerDesktop', None), ('support:contactRequestButton', None), ('support:contactRequestButtonDesignInfo', None), ('support:contactRequestFlow', None), ('support:contactRequestFlowAvailableChannelsDataProvider', None), ('support:contactRequestFlowAvailableReasonsDataProvider', None), ('support:contactRequestFlowChannelSelection', None), ('support:contactRequestFlowDetails', None), ('support:contactRequestFlowError', None), ('support:contactRequestFlowOwnerSelection', None), ('support:contactRequestFlowReasonSelection', None), ('support:contactRequestFlowSuccess', None), ('support:contactRequestFlowsListView', None), ('support:contactRequestFlowsSetup', None), ('support:contactRequestWhatIdLookup', None), ('support:contactRequestWhoIdLookup', None), ('support:crossFrameApiManager', None), ('support:draftOverwriteWarningModal', None), ('support:emailAddress', None), ('support:emailAddresses', None), ('support:emailApproval', None), ('support:emailApprovalNotification', None), ('support:emailAutosaver', None), ('support:emailBody', None), ('support:emailHeader', None), ('support:emailMessageDropdown', None), ('support:emailMessageDropdownButton', None), ('support:emailMessageMergeFieldOverride', None), ('support:emailMessageSubjectFieldLinkOverride', None), ('support:emailReplyActionLink', None), ('support:enhancedOutputURL', None), ('support:feedContainerForPreview', None), ('support:feedFilters', None), ('support:feedItemAction', None), ('support:inputEmailAttachmentIds', None), ('support:inputEmailRecipients', None), ('support:inputFolderField', None), ('support:inputTextArea', None), ('support:label', None), ('support:lightningQuickTextSetup', None), ('support:likeAction', None), ('support:milestoneItem', None), ('support:milestoneTimer', None), ('support:milestones', None), ('support:milestonesDesignInfo', None), ('support:milestonesList', None), ('support:outputFolderField', None), ('support:outputPhoneManager', None), ('support:outputTextArea', None), ('support:ownerAssignmentForContactRequest', None), ('support:progressRing', None), ('support:publisherQuickSendEmail', None), ('support:quickActionLink', None), ('support:quickActionLinkManager', None), ('support:quickActionRunnable', None), ('support:quickText', None), ('support:quickTextBrowserContainer', None), ('support:quickTextChannelField', None), ('support:quickTextFloater', None), ('support:quickTextMessageField', None), ('support:quickTextPreview', None), ('support:quickTextToolbarButton', None), ('support:sendEmailQuickAction', None), ('support:toInputEmailRecipients', None), ('support:toggleObjectHomeView', None), ('support:urlImageSelector', None), ('survey:analytics', None), ('survey:analyticsPublished', None), ('survey:analyticsUnpublished', None), ('survey:answerCsat', None), ('survey:answerDateNew', None), ('survey:answerInputTemplate', None), ('survey:answerMultiChoice', None), ('survey:answerPicklist', None), ('survey:answerRadio', None), ('survey:answerRating', None), ('survey:answerRuntimeBase', None), ('survey:answerSlider', None), ('survey:answerStackRank', None), ('survey:answerStackRankItem', None), ('survey:answerStackRankWeight', None), ('survey:answerTextarea', None), ('survey:baseTemplate', None), ('survey:build', None), ('survey:builder', None), ('survey:builderAddImage', None), ('survey:builderLeftPanel', None), ('survey:builderLeftPanelSurveyItem', None), ('survey:builderRichText', None), ('survey:builderStylePanel', None), ('survey:builderToolbar', None), ('survey:cloneNewSurveyModal', None), ('survey:colorPicker', None), ('survey:confirmActiveOverrideModal', None), ('survey:createInvitationAction', None), ('survey:emailPreviewModal', None), ('survey:emailPreviewPublisher', None), ('survey:expireInvitation', None), ('survey:fileSelector', None), ('survey:getSharableLinkModal', None), ('survey:header', None), ('survey:logicConditionInput', None), ('survey:logicConditionItem', None), ('survey:logicCreateRule', None), ('survey:logicLabel', None), ('survey:logicModal', None), ('survey:logicOperator', None), ('survey:logicRuleList', None), ('survey:logicRuleListItem', None), ('survey:logicRuleListItemDetail', None), ('survey:modal', None), ('survey:newSurveyVersionModal', None), ('survey:notDeleteableSurveyItemModal', None), ('survey:pageHeader', None), ('survey:picklistDataProvider', None), ('survey:questionCreatorPanel', None), ('survey:questionEditor', None), ('survey:questionList', None), ('survey:questionOptions', None), ('survey:questionTypePanelItem', None), ('survey:runtimeActionBar', None), ('survey:runtimeAnswerTextarea', None), ('survey:runtimeBaseAnswer', None), ('survey:runtimeCsat', None), ('survey:runtimeDate', None), ('survey:runtimeMultiChoice', None), ('survey:runtimeOutputText', None), ('survey:runtimePicklist', None), ('survey:runtimeQuestionDescription', None), ('survey:runtimeQuestionImage', None), ('survey:runtimeQuestionLabel', None), ('survey:runtimeRadioButton', None), ('survey:runtimeRating', None), ('survey:runtimeScreen', None), ('survey:runtimeScreenActionButtons', None), ('survey:runtimeSlider', None), ('survey:runtimeStackRank', None), ('survey:runtimeSurvey', None), ('survey:runtimeThankYou', None), ('survey:runtimeWelcome', None), ('survey:saveAsModal', None), ('survey:send', None), ('survey:sendPublished', None), ('survey:sendUnpublished', None), ('survey:slider', None), ('survey:survey', None), ('survey:surveyActivationModal', None), ('survey:surveyCustomSvgIcons', None), ('survey:surveyDesignInfo', None), ('survey:surveyDesignSubstitute', None), ('survey:surveyDetailsLocalization', None), ('survey:surveyEmailBranding', None), ('survey:surveyEmailEditor', None), ('survey:surveyEmailSummary', None), ('survey:surveyEmailWizard', None), ('survey:surveyEmailWizardFooter', None), ('survey:surveyFreeTextDateResponse', None), ('survey:surveyLocalization', None), ('survey:surveyLocalizationEditor', None), ('survey:surveyLocalizationWizard', None), ('survey:surveyPageLocalization', None), ('survey:surveyQuestionLabelLocalization', None), ('survey:surveyQuestionResponse', None), ('survey:surveyQuestionResponseCharts', None), ('survey:surveyResponseStatusCharts', None), ('survey:tester_builderLeftPanel', None), ('survey:visualPickerInput', None), ('templatesetup:deployPage', None), ('templatesetup:deploymentNotification', None), ('templatesetup:historyPage', None), ('templatesetup:notificationToast', None), ('templatesetup:openNewBrowserTabLink', None), ('templatesetup:pageTitle', None), ('templatesetup:svgIcon', None), ('templatesetup:template', None), ('templatesetup:templateDesc', None), ('templatesetup:templateHistoryItems', None), ('templatesetup:templateIntro', None), ('templatesetup:templateItem', None), ('templatesetup:templateListPage', None), ('templatesetup:templatePrerequisites', None), ('templatesetup:templatePromptedValue', None), ('templatesetup:templatePromptedValues', None), ('templatesetup:templateSearch', None), ('templatesetup:templateSearchDataProvider', None), ('templatesetup:templateUninstallLink', None), ('templatesetup:templatesDataProvider', None), ('today:acceptanceStatusIcon', None), ('today:agendaCard', None), ('today:agendaRow', None), ('today:bridgeWrapper', None), ('today:calendar', None), ('today:card', None), ('today:cardLoader', None), ('today:cardLoaderFeeder', None), ('today:cardLoadingUI', None), ('today:clientSideDataProvider', None), ('today:conferenceCall', None), ('today:dashboardCardContainer', None), ('today:debugBox', None), ('today:deviceFeature', None), ('today:deviceManager', None), ('today:eventCard', None), ('today:eventContainer', None), ('today:eventDetailContainer', None), ('today:eventDetailSlide', None), ('today:eventNotesCard', None), ('today:eventRecordHome', None), ('today:eventRecordHomeContainer', None), ('today:eventsManager', None), ('today:geolocation', None), ('today:heroCardItemStencil', None), ('today:inviteeList', None), ('today:inviteeListCard', None), ('today:inviteeListDataProvider', None), ('today:inviteeListRow', None), ('today:inviteeListRowStencil', None), ('today:inviteeRecordHome', None), ('today:landingNew', None), ('today:newsContainer', None), ('today:pageActionManager', None), ('today:perfTools', None), ('today:quickMessage', None), ('today:recentRecordContainer', None), ('today:recentRecordList', None), ('today:recentsCard', None), ('today:recentsCardContainer', None), ('today:relatedRecordList', None), ('today:relatedRecordListAbstract', None), ('today:relatedRecordListCard', None), ('today:relatedRecordListCardStencil', None), ('today:relatedRecordListContainer', None), ('today:settings', None), ('today:settingsButton', None), ('today:settingsHeader', None), ('today:smartStore', None), ('today:taskContainer', None), ('today:tasksCard', None), ('today:tempDepend', None), ('today:template', None), ('today:timeContainer', None), ('ui:abstractDataGrid', None), ('ui:abstractList', None), ('ui:action', None), ('ui:actionButton', None), ('ui:actionCheckbox', None), ('ui:actionDelegate', None), ('ui:actionMenuItem', None), ('ui:asyncComponentManager', None), ('ui:asyncImage', None), ('ui:autocomplete', None), ('ui:autocompleteList', None), ('ui:autocompleteOption', None), ('ui:autocompletePanel', None), ('ui:block', None), ('ui:button', None), ('ui:calendar', None), ('ui:carousel', None), ('ui:carouselDeprecated', None), ('ui:carouselIndicator', None), ('ui:carouselPage', None), ('ui:carouselPageDeprecated', None), ('ui:carouselPageIndicator', None), ('ui:carouselPageIndicatorItem', None), ('ui:checkboxMenuItem', None), ('ui:containerManager', None), ('ui:dataGrid', None), ('ui:dataGridActionColumn', None), ('ui:dataGridColumn', None), ('ui:dataGridSelectionColumn', None), ('ui:dataGridSummaryCell', None), ('ui:dataProvider', None), ('ui:dataTable', None), ('ui:dataTableColumn', None), ('ui:dataTableHeader', None), ('ui:dataTableRow', None), ('ui:dataWriter', None), ('ui:datePicker', None), ('ui:datePickerGrid', None), ('ui:datePickerManager', None), ('ui:dayInMonthCell', None), ('ui:dialog', None), ('ui:dialogButtons', None), ('ui:dialogManager', None), ('ui:dragAndDropAccessibility', None), ('ui:dragAndDropAccessibilityMenu', None), ('ui:draggable', None), ('ui:dropzone', None), ('ui:fieldLabel', None), ('ui:format', None), ('ui:image', None), ('ui:infiniteList', None), ('ui:infiniteListRow', None), ('ui:inlineEditPanelBody', None), ('ui:inlinePanel', None), ('ui:input', None), ('ui:inputCheckbox', None), ('ui:inputCurrency', None), ('ui:inputDate', None), ('ui:inputDateHtml', None), ('ui:inputDateRange', None), ('ui:inputDateTime', None), ('ui:inputDateTimeHtml', None), ('ui:inputDateTrigger', None), ('ui:inputDefaultError', None), ('ui:inputEmail', None), ('ui:inputFile', None), ('ui:inputFileDroppableZone', None), ('ui:inputFileFilesList', None), ('ui:inputFileOpenBrowse', None), ('ui:inputNumber', None), ('ui:inputPercent', None), ('ui:inputPhone', None), ('ui:inputRadio', None), ('ui:inputRange', None), ('ui:inputRichText', None), ('ui:inputSearch', None), ('ui:inputSecret', None), ('ui:inputSelect', None), ('ui:inputSelectOption', None), ('ui:inputSelectOptionGroup', None), ('ui:inputSmartNumber', None), ('ui:inputText', None), ('ui:inputTextArea', None), ('ui:inputTextAreaForAutocomplete', None), ('ui:inputTextForAutocomplete', None), ('ui:inputTimePicker', None), ('ui:inputURL', None), ('ui:interactive', None), ('ui:label', None), ('ui:legend', None), ('ui:list', None), ('ui:listSorter', None), ('ui:manifest', None), ('ui:menu', None), ('ui:menuItem', None), ('ui:menuItemSeparator', None), ('ui:menuList', None), ('ui:menuTrigger', None), ('ui:menuTriggerLink', None), ('ui:message', None), ('ui:modal', None), ('ui:output', None), ('ui:outputCheckbox', None), ('ui:outputCurrency', None), ('ui:outputDate', None), ('ui:outputDateTime', None), ('ui:outputEmail', None), ('ui:outputLabel', None), ('ui:outputMultiSelect', None), ('ui:outputNumber', None), ('ui:outputPercent', None), ('ui:outputPhone', None), ('ui:outputRichText', None), ('ui:outputSelect', None), ('ui:outputText', None), ('ui:outputTextArea', None), ('ui:outputURL', None), ('ui:pager', None), ('ui:pagerJumpToPage', None), ('ui:pagerNextPrevious', None), ('ui:pagerPageInfo', None), ('ui:pagerPageSize', None), ('ui:panel', None), ('ui:panelManager2', None), ('ui:picklistLabel', None), ('ui:pill', None), ('ui:pillContainer', None), ('ui:pillContainerAutoComplete', None), ('ui:pillContainerAutoCompleteOption', None), ('ui:popup', None), ('ui:popupTarget', None), ('ui:popupTrigger', None), ('ui:radioMenuItem', None), ('ui:radioToggleMenuItem', None), ('ui:resizeObserver', None), ('ui:scroller', None), ('ui:scrollerDeprecated', None), ('ui:scrollerWrapper', None), ('ui:spinner', None), ('ui:stamp', None), ('ui:tab', None), ('ui:tabBar', None), ('ui:tabItem', None), ('ui:tabOverflowMenuItem', None), ('ui:tabset', None), ('ui:timePicker', None), ('ui:toolbar', None), ('ui:tooltip', None), ('ui:tooltipAdvanced', None), ('ui:tree', None), ('ui:treeNode', None), ('ui:vbox', None), ('ui:virtualDataGrid', None), ('ui:virtualDataTable', None), ('ui:virtualList', None), ('ui:virtualMenuWrapper', None), ('uiExamples:autocompleteDataProvider', None), ('uiExamples:autocompleteExample', None), ('uiExamples:autocompleteOptionExample', None), ('uiExamples:autocompleteOptionExampleExtended', None), ('uiExamples:buttonExample', None), ('uiExamples:carouselExample', None), ('uiExamples:checkbox', None), ('uiExamples:columnResizing', None), ('uiExamples:currency', None), ('uiExamples:dataGridDynamicColumns', None), ('uiExamples:dataGridKitchenSink', None), ('uiExamples:dataGridKitchenSinkDataProvider', None), ('uiExamples:dataProviderExample', None), ('uiExamples:date', None), ('uiExamples:datePicker', None), ('uiExamples:datetime', None), ('uiExamples:detailPopover', None), ('uiExamples:dragAndDropExample', None), ('uiExamples:dragAndDropProvider', None), ('uiExamples:email', None), ('uiExamples:gridActionCell', None), ('uiExamples:headerGridActionCell', None), ('uiExamples:iconCmp', None), ('uiExamples:infiniteDataProvider', None), ('uiExamples:infiniteList', None), ('uiExamples:infiniteListDataProvider', None), ('uiExamples:infiniteListRow', None), ('uiExamples:inputExample', None), ('uiExamples:inputNumberExample', None), ('uiExamples:inputTextExample', None), ('uiExamples:iterationExample', None), ('uiExamples:libraryExample', None), ('uiExamples:mobileViewport', None), ('uiExamples:modalContent', None), ('uiExamples:outputExample', None), ('uiExamples:panelContent', None), ('uiExamples:panelFooter', None), ('uiExamples:panelHeader', None), ('uiExamples:panelPositioningExample', None), ('uiExamples:phone', None), ('uiExamples:popupExample', None), ('uiExamples:radio', None), ('uiExamples:registerCustomPanel', None), ('uiExamples:renderIfExample', None), ('uiExamples:secret', None), ('uiExamples:tabsetExample', None), ('uiExamples:text', None), ('uiExamples:textarea', None), ('uiExamples:tooltipExample', None), ('uiExamples:url', None), ('uiExamples:virtualDataGridKitchenSink', None), ('uiExamples:virtualDataTable', None), ('uiExamples:virtualListExample', None), ('uns:activitiesCard', None), ('uns:activitiesManager', None), ('uns:cardQueue', None), ('uns:defaultNotificationManager', None), ('uns:eventsCard', None), ('uns:eventsManager', None), ('uns:notificationCardFrame', None), ('uns:notificationDefaultCard', None), ('uns:notifications', None), ('uns:notificationsCounter', None), ('uns:notificationsDataProvider', None), ('uns:notificationsListRow', None), ('uns:notificationsPanel', None), ('uns:notificationsVirtualList', None), ('uns:tasksCard', None), ('uns:tasksManager', None), ('userProvisioningUI:analyze', None), ('userProvisioningUI:approval', None), ('userProvisioningUI:break', None), ('userProvisioningUI:collect', None), ('userProvisioningUI:commit', None), ('userProvisioningUI:connector', None), ('userProvisioningUI:errorMessage', None), ('userProvisioningUI:linking', None), ('userProvisioningUI:operation', None), ('userProvisioningUI:summary', None), ('userProvisioningUI:welcome', None), ('visualEditor:accordionSectionsEditor', None), ('visualEditor:appBuilderProvider', None), ('visualEditor:assignmentTable', None), ('visualEditor:attributeDataProvider', None), ('visualEditor:baseBuilder', None), ('visualEditor:baseEditor', None), ('visualEditor:baseEditorPanel', None), ('visualEditor:booleanEditor', None), ('visualEditor:booleanEditorDataProvider', None), ('visualEditor:booleanPicklistEditor', None), ('visualEditor:clientAttributeTypeProvider', None), ('visualEditor:colorEditor', None), ('visualEditor:componentPropertiesEditor', None), ('visualEditor:componentPropertiesEditorSection', None), ('visualEditor:containerComponentEditorItem', None), ('visualEditor:containerComponentEditorItemAttributesEditor', None), ('visualEditor:containerComponentEditorItemEditor', None), ('visualEditor:criteriaEditor', None), ('visualEditor:criteriaEditorPanelBody', None), ('visualEditor:dateTimeEditor', None), ('visualEditor:dialogErrors', None), ('visualEditor:doubleEditor', None), ('visualEditor:draggable', None), ('visualEditor:droppable', None), ('visualEditor:duelingList', None), ('visualEditor:duelingListItem', None), ('visualEditor:entityNameEditor', None), ('visualEditor:facetEditor', None), ('visualEditor:fieldEditor', None), ('visualEditor:fieldTraverser', None), ('visualEditor:flowArgumentsEditor', None), ('visualEditor:flowArgumentsRecordIdInput', None), ('visualEditor:focusablePanel', None), ('visualEditor:highlightsPanelDesignInfo', None), ('visualEditor:highlightsPanelDesignInfoDialogContent', None), ('visualEditor:inboxTabsetEditor', None), ('visualEditor:infoComponent', None), ('visualEditor:infoHeader', None), ('visualEditor:infoList', None), ('visualEditor:integerEditor', None), ('visualEditor:itemList', None), ('visualEditor:itemListRow', None), ('visualEditor:jQueryUIInteraction', None), ('visualEditor:labelEditor', None), ('visualEditor:labelEditorDeprecated', None), ('visualEditor:modal', None), ('visualEditor:modelData', None), ('visualEditor:modelHost', None), ('visualEditor:modelRemoteData', None), ('visualEditor:modelRemoteHost', None), ('visualEditor:motifPicker', None), ('visualEditor:motifPickerItem', None), ('visualEditor:motifPickerList', None), ('visualEditor:multiLineTextEditor', None), ('visualEditor:multiselectEditor', None), ('visualEditor:multiselectPicklistEditor', None), ('visualEditor:pageAssignmentBaseDataProvider', None), ('visualEditor:pageAssignmentBaseStep', None), ('visualEditor:pageAssignmentProfilePickerStepDataProvider', None), ('visualEditor:pageAssignmentWizard', None), ('visualEditor:pageAssignmentWizardFooter', None), ('visualEditor:palette', None), ('visualEditor:paletteItem', None), ('visualEditor:paletteItemRow', None), ('visualEditor:paletteSection', None), ('visualEditor:picklistAutocomplete', None), ('visualEditor:picklistAutocompleteOption', None), ('visualEditor:picklistAutocompleteSpecialOption', None), ('visualEditor:picklistEditor', None), ('visualEditor:picklistEditorDataProvider', None), ('visualEditor:postmessageManager', None), ('visualEditor:propertyEditor', None), ('visualEditor:propertyEditorItem', None), ('visualEditor:readOnlyEditor', None), ('visualEditor:recordHomeTabsDesignInfo', None), ('visualEditor:relatedFieldSummary', None), ('visualEditor:relatedFieldTraversalDialog', None), ('visualEditor:resizable', None), ('visualEditor:richTextCkEditor', None), ('visualEditor:richTextQuillEditor', None), ('visualEditor:ruleEditor', None), ('visualEditor:ruleInfo', None), ('visualEditor:ruleList', None), ('visualEditor:selectableTable', None), ('visualEditor:serverPaletteItemsProvider', None), ('visualEditor:serverPropertyEditorProvider', None), ('visualEditor:sortable', None), ('visualEditor:sortableList', None), ('visualEditor:sortableListItem', None), ('visualEditor:stringEditor', None), ('visualEditor:style', None), ('visualEditor:tableActionCell', None), ('visualEditor:tabsetEditor', None), ('visualEditor:template', None), ('voice:baseCallHandlerContainer', None), ('voice:baseCallHandlerInConsole', None), ('voice:callAudioLevel', None), ('voice:callDisposition', None), ('voice:callDispositionList', None), ('voice:callDispositionListContainer', None), ('voice:callDispositionListItem', None), ('voice:callFeedback', None), ('voice:callHandlerContainer', None), ('voice:callHandlerInConsole', None), ('voice:callHistoryItem', None), ('voice:callHistoryList', None), ('voice:callListContainer', None), ('voice:callListItem', None), ('voice:callPanel', None), ('voice:callSavePanel', None), ('voice:callTemplatePanel', None), ('voice:coachingListContainer', None), ('voice:coachingListItem', None), ('voice:coachingPanel', None), ('voice:coachingRecord', None), ('voice:coachingTraineeListContainer', None), ('voice:compactRecord', None), ('voice:connectedPanel', None), ('voice:createCallList', None), ('voice:dialPad', None), ('voice:durationRenderer', None), ('voice:feedbackPanel', None), ('voice:getVendorLine', None), ('voice:incomingPanel', None), ('voice:keyPad', None), ('voice:launchSms', None), ('voice:manageLogACall', None), ('voice:networkConnectivity', None), ('voice:numberManagement', None), ('voice:outputDuration', None), ('voice:outputPhone', None), ('voice:phoneNumberPanel', None), ('voice:phoneRenderer', None), ('voice:phoneRowEntry', None), ('voice:phoneSettings', None), ('voice:powerDialer', None), ('voice:quickSetupButton', None), ('voice:recordingDurationRenderer', None), ('voice:recordingManagement', None), ('voice:recordingMassDelete', None), ('voice:recordingSettings', None), ('voice:releaseNumber', None), ('voice:replaceRecording', None), ('voice:replaceRecordingSetup', None), ('voice:selectPhone', None), ('voice:simpleActivityTimeline', None), ('voice:sliderCheckBox', None), ('voice:softphone', None), ('voice:talkChannelConfigSetup', None), ('voice:talkEditUsers', None), ('voice:talkEnabledSuccessModal', None), ('voice:talkNumberSetup', None), ('voice:talkSetupErrorHeader', None), ('voice:talkSetupErrorMessage', None), ('voice:talkSetupLogicDiagramPanel', None), ('voice:talkSetupPage', None), ('voice:trialTerms', None), ('voice:unknownContact', None), ('voice:usageRenderer', None), ('voice:usageReport', None), ('voice:voiceAudioPlayer', None), ('voice:voiceLocalPresencePage', None), ('voice:voiceMailItem', None), ('voice:voiceMailList', None), ('voice:voiceMailRecorder', None), ('voice:voiceMailSettings', None), ('voice:voiceSetupPage', None), ('voice:voicemailMessageListContainer', None), ('voice:voicemailMessageListItem', None), ('wave:annotationFeedControl', None), ('wave:annotationPanel', None), ('wave:annotationPublisher', None), ('wave:annotationPublisherControl', None), ('wave:appNameRenderer', None), ('wave:asset', None), ('wave:feedItemFullView', None), ('wave:filterEditor', None), ('wave:sdk', None), ('wave:tempDepend', None), ('wave:waveAssetRecordHome', None), ('wave:waveDashboard', None), ('wave:waveHelpTrayWrapper', None), ('wave:waveHomeEacFreeTab', None), ('wave:waveHomeTab', None), ('wave:waveTemplate', None), ('waveapps:clientSegmentation', None), ('waveapps:demoLearningAdventure', None), ('waveapps:demoSalesAnalytics', None), ('wits:execsTeamMember', None), ('wits:feedbackButton', None), ('wits:news', None), ('wits:newsActionsMenu', None), ('wits:newsArticleImage', None), ('wits:newsCardsContainer', None), ('wits:newsCarouselItem', None), ('wits:newsCategoryList', None), ('wits:newsItem', None), ('wits:newsLanding', None), ('wits:newsList', None), ('wits:newsListItem', None), ('wits:newsPanel', None), ('wits:newsReportDialog', None), ('wits:newsTeaserCard', None), ('wits:newsTweetCarouselItem', None), ('wits:newsTweetItem', None), ('wits:newsTweetListItem', None), ('wits:suggestedNameField', None), ('wits:suggestionsController', None), ('wits:suggestionsDataProvider', None), ('wits:suggestionsMatchProvider', None), ('wits:tempDepend', None), ('work:coachedByField', None), ('work:customMetricDueDateField', None), ('work:customMetricProgressField', None), ('work:goalImage', None), ('work:metricNameField', None), ('work:metricProgress', None), ('work:relatedMetricV2ListRecord', None), ('work:relatedWorkBadgeListRecord', None), ('workAloha:editMetricWeights', None), ('workAloha:metricWeightItem', None)], blank=True, null=True)
    render_component_enum_or_id = models.CharField(max_length=255, verbose_name='Lightning Definition Bundle ID', choices=[('adminui:adminTemplate', None), ('aloha_sales_forecasting:forecasting3OrgSettings', None), ('aloha_sales_forecasting:forecasting3TypeSettings', None), ('aloha_sales_forecasting:forecasting3settings', None), ('aloha_sales_opptysplit:multiLineEdit', None), ('aloha_sales_opptysplit:multiLineEditColumn', None), ('aloha_sales_opptysplit:multiLineEditExample', None), ('aloha_sales_opptysplit:multiLineEditItem', None), ('aloha_sales_opptysplit:multiLineEditRecordHeader', None), ('aloha_sales_opptysplit:multiLineEditSection', None), ('aloha_sales_opptysplit:multiLineEditSectionFooter', None), ('aloha_sales_opptysplit:multiLineEditWrapper', None), ('aloha_sales_opptysplit:opportunitySplitTabBody', None), ('aloha_sales_opptysplit:opportunitySplitTabHeader', None), ('aloha_sales_opptysplit:opportunitySplitTabSet', None), ('aloha_sales_opptysplit:opportunitySplitTypeMultiEditSection', None), ('aloha_sales_opptysplit:opportunitySplitsTypeSectionFooter', None), ('aloha_sales_tm2:territory2AsyncHelper', None), ('aloha_sales_tm2:territory2DialogAlert', None), ('aloha_sales_tm2:territory2ModelHeader', None), ('aloha_sales_tm2:territory2Settings', None), ('aloha_sales_tm2:territoryManagement2Enable', None), ('analytics:chart', None), ('analytics:componentError', None), ('analytics:cordaChart', None), ('analytics:csrPopChart', None), ('analytics:embeddedChart', None), ('analytics:embeddedReportChart', None), ('analytics:metric', None), ('analytics:pluginChart', None), ('analytics:reportChart', None), ('analytics:reportMetadata', None), ('analytics:scheduleSelectorBase', None), ('analytics:subscribeDialog', None), ('analytics:subscribeDialogFooter', None), ('analytics:table', None), ('analytics:urogFilterableList', None), ('analyticsHome:analyticsDataProvider', None), ('analyticsHome:analyticsListView', None), ('analyticsHome:analyticsVirtualAction', None), ('analyticsHome:analyticsWritableFolderProvider', None), ('analyticsHome:createNewDashboard', None), ('analyticsHome:createNewReport', None), ('analyticsHome:dashboardListViewColumns', None), ('analyticsHome:deleteFolderErrorDialog', None), ('analyticsHome:deleteFolderErrorDialogFooter', None), ('analyticsHome:deleteShareConfirmationDialog', None), ('analyticsHome:deleteShareConfirmationDialogFooter', None), ('analyticsHome:folderListViewColumns', None), ('analyticsHome:folderNameDialog', None), ('analyticsHome:folderNameDialogFooter', None), ('analyticsHome:folderOutput', None), ('analyticsHome:folderShare', None), ('analyticsHome:folderShareEntityDataProvider', None), ('analyticsHome:folderShareGrid', None), ('analyticsHome:folderShareGridDataProvider', None), ('analyticsHome:folderShareGridEditAccessColumn', None), ('analyticsHome:folderShareGridEntityColumn', None), ('analyticsHome:folderShareGridRemoveShareColumn', None), ('analyticsHome:folderSharePanel', None), ('analyticsHome:folderSharePanelFooter', None), ('analyticsHome:folderShareWhoCanAccess', None), ('analyticsHome:formattedOutputDateTime', None), ('analyticsHome:leftNav', None), ('analyticsHome:leftNavItem', None), ('analyticsHome:mixedEntityListViewColumns', None), ('analyticsHome:mixedEntityName', None), ('analyticsHome:mixedEntitySubscription', None), ('analyticsHome:reportListViewColumns', None), ('analyticsHome:subscribeCondition', None), ('analyticsHome:subscribeConditionSection', None), ('analyticsHome:subscribeConditionsList', None), ('analyticsHome:subscribeEmailOptionsSection', None), ('analyticsHome:subscriptionEditRecipientsDialog', None), ('analyticsHome:subscriptionRecipientsFilterableList', None), ('analyticsHome:subscriptionRecipientsFilterableListDataSource', None), ('analyticsHome:subscriptionRecipientsLookup', None), ('analyticsHome:subscriptionRecipientsLookupDataProvider', None), ('analyticsHome:titleBreadCrumb', None), ('appexUi:appExchangeSetupOverlayOpener', None), ('appexUi:appexchangeOverlay', None), ('appexUi:appexchangeOverlayTest', None), ('appexUi:appexchangeOverlayWrapper', None), ('appexUi:appxBase', None), ('appexUi:bannersSide', None), ('appexUi:base', None), ('appexUi:breadcrumb', None), ('appexUi:carItem', None), ('appexUi:carousel', None), ('appexUi:category', None), ('appexUi:confirmInstallationDetails', None), ('appexUi:contentWrapper', None), ('appexUi:deleteReviewModal', None), ('appexUi:dropdownFilter', None), ('appexUi:editUserProfile', None), ('appexUi:error', None), ('appexUi:filter', None), ('appexUi:filterActionButtons', None), ('appexUi:filterBox', None), ('appexUi:filterTooltip', None), ('appexUi:filterTrigger', None), ('appexUi:footer', None), ('appexUi:footerListingDetail', None), ('appexUi:genericExtraModal', None), ('appexUi:header', None), ('appexUi:history', None), ('appexUi:homeMenu', None), ('appexUi:landingPageTable', None), ('appexUi:landingPageTableSection', None), ('appexUi:landingPageTableSectionTitle', None), ('appexUi:linksList', None), ('appexUi:listingDetail', None), ('appexUi:listingDetailContent', None), ('appexUi:listingDetailContentTest', None), ('appexUi:listingDetailHeader', None), ('appexUi:listingDetailLeftSidePanel', None), ('appexUi:listingDetailLeftSidePanelTest', None), ('appexUi:listingDetailMenu', None), ('appexUi:listingDetailTest', None), ('appexUi:listingDetails', None), ('appexUi:listingDetailsTest', None), ('appexUi:listingInstallContent', None), ('appexUi:listingProvider', None), ('appexUi:listingReviews', None), ('appexUi:listingReviewsContent', None), ('appexUi:logInActions', None), ('appexUi:loginActionsModalHandler', None), ('appexUi:loginActionsModalHandlerTest', None), ('appexUi:loginActionsTest', None), ('appexUi:modalHandler', None), ('appexUi:modalHandlerTest', None), ('appexUi:mostHelpfulReviews', None), ('appexUi:navMenu', None), ('appexUi:pageBodyWrapper', None), ('appexUi:pageBodyWrapperTest', None), ('appexUi:pageHeaderWrapper', None), ('appexUi:popupMessage', None), ('appexUi:rating', None), ('appexUi:reportAbuseModal', None), ('appexUi:restAPI', None), ('appexUi:resultsMeta', None), ('appexUi:review', None), ('appexUi:reviewRating', None), ('appexUi:reviewsList', None), ('appexUi:reviewsModal', None), ('appexUi:richText', None), ('appexUi:searchInput', None), ('appexUi:searchResultText', None), ('appexUi:searchResults', None), ('appexUi:setupTile', None), ('appexUi:sort', None), ('appexUi:storeFilters', None), ('appexUi:storeFiltersTooltip', None), ('appexUi:svg', None), ('appexUi:tabsSearch', None), ('appexUi:template', None), ('appexUi:textAreaWithCounter', None), ('appexUi:tile', None), ('appexUi:tilesList', None), ('appexUi:userInfoReadOnly', None), ('appexUi:userInfoWriteProfile', None), ('assistantFramework:assistantBlock', None), ('assistantFramework:assistantBlockCompressed', None), ('assistantFramework:assistantPage', None), ('assistantFramework:header', None), ('assistantFramework:learningPathCustomStep', None), ('assistantFramework:learningPathList', None), ('assistantFramework:learningPathStepCompressedTemplate', None), ('assistantFramework:learningPathStepTemplate', None), ('assistantFramework:linkWithTooltip', None), ('assistantFramework:navigationComponent', None), ('assistantFramework:pathCompleteBlock', None), ('assistantFramework:pathSummaryBlock', None), ('assistantFramework:relatedContent', None), ('assistantFramework:setupAssistantProgress', None), ('assistantFramework:summaryBlock', None), ('assistantFramework:wizard', None), ('assistantFramework:wizardHeader', None), ('assistantFramework:wizardNavigator', None), ('assistantFramework:wizardStep', None), ('assistantFrameworkModules:addUsersInput', None), ('assistantFrameworkModules:addUsersInputStep', None), ('assistantFrameworkModules:addUsersList', None), ('assistantFrameworkModules:addUsersSuccess', None), ('assistantFrameworkModules:addUsersSuccessStep', None), ('assistantFrameworkModules:addUsersWizard', None), ('assistantFrameworkModules:dataImportContainer', None), ('assistantFrameworkModules:dragDropList', None), ('assistantFrameworkModules:eacConnectStep', None), ('assistantFrameworkModules:eacContactAdmin', None), ('assistantFrameworkModules:eacEnableStep', None), ('assistantFrameworkModules:eacLandingStep', None), ('assistantFrameworkModules:eacReviewTermsStep', None), ('assistantFrameworkModules:eacWizard', None), ('assistantFrameworkModules:inviteUsersInput', None), ('assistantFrameworkModules:inviteUsersInputStep', None), ('assistantFrameworkModules:inviteUsersWizard', None), ('assistantFrameworkModules:listItemMover', None), ('assistantFrameworkModules:opportunityStageAddTemplate', None), ('assistantFrameworkModules:opportunityStageConfigureTemplate', None), ('assistantFrameworkModules:opportunityStagesAdd', None), ('assistantFrameworkModules:opportunityStagesAddStep', None), ('assistantFrameworkModules:opportunityStagesConfigure', None), ('assistantFrameworkModules:opportunityStagesConfigureStep', None), ('assistantFrameworkModules:opportunityStagesReview', None), ('assistantFrameworkModules:opportunityStagesReviewStep', None), ('assistantFrameworkModules:opportunityStagesWizard', None), ('assistantFrameworkModules:resourceDownloadStep', None), ('assistantFrameworkModules:resourceDownloadWizard', None), ('assistantFrameworkModules:videoStep', None), ('assistantFrameworkModules:vidyardVideoWizard', None), ('aura:component', None), ('aura:debug', None), ('aura:embeddedTemplate', None), ('aura:expression', None), ('aura:html', None), ('aura:if', None), ('aura:include', None), ('aura:integrationServiceTemplate', None), ('aura:iteration', None), ('aura:label', None), ('aura:placeholder', None), ('aura:renderIf', None), ('aura:template', None), ('aura:text', None), ('aura:unescapedHtml', None), ('auraStorage:crypto', None), ('auraStorage:fuelGauge', None), ('auraStorage:init', None), ('auradev:blankTemplate', None), ('auradev:testDataProvider', None), ('auradev:testDataProvider2', None), ('auradocs:about', None), ('auradocs:api', None), ('auradocs:apiParam', None), ('auradocs:apiParams', None), ('auradocs:apiSymbol', None), ('auradocs:apiSymbols', None), ('auradocs:apiTopic', None), ('auradocs:codeblock', None), ('auradocs:def', None), ('auradocs:defDependencies', None), ('auradocs:defDescription', None), ('auradocs:defLayout', None), ('auradocs:defLink', None), ('auradocs:defMemberList', None), ('auradocs:defOverview', None), ('auradocs:demoAutocomplete', None), ('auradocs:demoAutocompleteProvider', None), ('auradocs:demoCarousel', None), ('auradocs:demoCss', None), ('auradocs:demoDataProvider', None), ('auradocs:demoDialog', None), ('auradocs:demoEvents', None), ('auradocs:demoForm', None), ('auradocs:demoFriendlyError', None), ('auradocs:demoLabel', None), ('auradocs:demoLabelDyn', None), ('auradocs:demoLangLocale', None), ('auradocs:demoList', None), ('auradocs:demoListTemplate', None), ('auradocs:demoLocale', None), ('auradocs:demoMenu', None), ('auradocs:demoMenuMeta', None), ('auradocs:demoMessage', None), ('auradocs:demoModal', None), ('auradocs:demoPanel', None), ('auradocs:demoScroller', None), ('auradocs:demoSelect', None), ('auradocs:demoSpinner', None), ('auradocs:demoStamp', None), ('auradocs:demoSubmitForm', None), ('auradocs:demoTab', None), ('auradocs:demoTable', None), ('auradocs:demoTodo', None), ('auradocs:demoToolbar', None), ('auradocs:demoTooltip', None), ('auradocs:demoVbox', None), ('auradocs:demoVdatagrid', None), ('auradocs:demos', None), ('auradocs:descriptorLink', None), ('auradocs:docTestRef', None), ('auradocs:doctabs', None), ('auradocs:download', None), ('auradocs:editorPanel', None), ('auradocs:empty', None), ('auradocs:error', None), ('auradocs:helloAttributes', None), ('auradocs:helpPanel', None), ('auradocs:home', None), ('auradocs:htmlTags', None), ('auradocs:htmlTagsTopic', None), ('auradocs:info', None), ('auradocs:nav', None), ('auradocs:navLink', None), ('auradocs:openTopicTree', None), ('auradocs:prefixerTopic', None), ('auradocs:referenceTabTopic', None), ('auradocs:referenceTopicLink', None), ('auradocs:referenceTree', None), ('auradocs:referenceTreeSection', None), ('auradocs:sampleUnescape', None), ('auradocs:searchFilterTree', None), ('auradocs:sidebar', None), ('auradocs:simpledragdrop', None), ('auradocs:spinnerTopic', None), ('auradocs:stretchEditorPanel', None), ('auradocs:stretchTab', None), ('auradocs:tableDemo', None), ('auradocs:template', None), ('auradocs:topic', None), ('auradocs:topicExample', None), ('auradocs:topicLink', None), ('auradocs:topicList', None), ('auradocs:topicPanel', None), ('auradocs:topics', None), ('auradocs:warning', None), ('auradocs:welcomeTopic', None), ('aurajstest:jstestCase', None), ('auraplat:defSource', None), ('auraplat:lockerServiceSetup', None), ('b2b_buyer_builder:cartContents', None), ('b2b_buyer_builder:cartSummary', None), ('b2b_buyer_builder:cartSummaryDesignInfo', None), ('b2b_buyer_builder:cartThemeHeaderButtonIcon', None), ('b2b_buyer_builder:categoryBreadcrumbs', None), ('b2b_buyer_builder:categoryBreadcrumbsDesignInfo', None), ('b2b_buyer_builder:checkoutButtonWrapper', None), ('b2b_buyer_builder:productDescription', None), ('b2b_buyer_builder:productDescriptionDesignInfo', None), ('b2b_buyer_builder:productDetailsSummary', None), ('b2b_buyer_builder:productDetailsSummaryDesignInfo', None), ('b2b_buyer_builder:quickOrderPage', None), ('b2b_buyer_data:cartService', None), ('b2b_buyer_data:productCategoryService', None), ('b2b_buyer_data:productDetailsService', None), ('b2b_buyer_data:productSearchService', None), ('b2b_search_builder:resultsDisplay', None), ('b2b_search_builder:searchInput', None), ('builder_communities_nba:editorPanelProxy', None), ('builder_communities_nba:nbaWidgetDesignInfo', None), ('builder_communities_nba:runPanel', None), ('builder_communities_nba:serverDataLibInit', None), ('builder_communities_nba:strategyBuilderBody', None), ('builder_communities_nba:strategyBuilderTemplate', None), ('builder_industries_healthcare:careDeterminants', None), ('builder_industries_healthcare:careProgramsCommunity', None), ('builder_industries_insurance:fscMultiTbl', None), ('builder_industries_insurance:fscSinglTbl', None), ('builder_industries_insurance:keyHomeMetrices', None), ('builder_industries_insurance:lifeEvents', None), ('builder_industries_insurance:outlookperformance', None), ('builder_industries_insurance:policy360', None), ('builder_industries_survey:deleteSurvey', None), ('builder_industries_survey:surveySetup', None), ('builder_industries_utilizationmanagement:careRequestDetails', None), ('builder_industries_utilizationmanagement:createCareRequest', None), ('builder_industries_utilizationmanagement:createCareRequestCommunity', None), ('builder_platform_blockchain:blockchainManager', None), ('builder_platform_blockchain:serverLibWrapper', None), ('builder_platform_interaction:container', None), ('builder_platform_interaction:flowBuilderTemplate', None), ('builder_platform_interaction:panelManagerWrapper', None), ('builder_platform_interaction:propertyEditor', None), ('builder_platform_interaction:propertyEditorFooter', None), ('builder_platform_interaction:propertyEditorHeader', None), ('builder_platform_interaction:serverDataLibInit', None), ('builder_platform_process:test', None), ('builder_service_chatbots:analyticsState', None), ('builder_service_chatbots:appHeader', None), ('builder_service_chatbots:appNavigation', None), ('builder_service_chatbots:avatarMessage', None), ('builder_service_chatbots:baseTemplate', None), ('builder_service_chatbots:botDomainsListCard', None), ('builder_service_chatbots:botGlobalSettings', None), ('builder_service_chatbots:botList', None), ('builder_service_chatbots:botListItem', None), ('builder_service_chatbots:botLogFilter', None), ('builder_service_chatbots:botLogList', None), ('builder_service_chatbots:botLogPanel', None), ('builder_service_chatbots:botOptionsMenuModal', None), ('builder_service_chatbots:botOverview', None), ('builder_service_chatbots:botPerformance', None), ('builder_service_chatbots:botReviewTerms', None), ('builder_service_chatbots:botReviewTermsFlow', None), ('builder_service_chatbots:botSessionFilter', None), ('builder_service_chatbots:botSessionList', None), ('builder_service_chatbots:botSetup', None), ('builder_service_chatbots:botSetupWizard', None), ('builder_service_chatbots:botSetupWizardAstro', None), ('builder_service_chatbots:botSetupWizardComplete', None), ('builder_service_chatbots:botSetupWizardDetails', None), ('builder_service_chatbots:botSetupWizardGreeting', None), ('builder_service_chatbots:botSetupWizardMainMenu', None), ('builder_service_chatbots:botSetupWizardWelcome', None), ('builder_service_chatbots:botState', None), ('builder_service_chatbots:botVersionListItem', None), ('builder_service_chatbots:botVersionSettings', None), ('builder_service_chatbots:builderCanvas', None), ('builder_service_chatbots:builderHeader', None), ('builder_service_chatbots:builderNav', None), ('builder_service_chatbots:builderPage', None), ('builder_service_chatbots:buttonSpin', None), ('builder_service_chatbots:channelProviders', None), ('builder_service_chatbots:combobox', None), ('builder_service_chatbots:confirmModal', None), ('builder_service_chatbots:createChannelProviderModal', None), ('builder_service_chatbots:createDialogGroupModal', None), ('builder_service_chatbots:createDialogModal', None), ('builder_service_chatbots:createSlotClassModal', None), ('builder_service_chatbots:createVariableModal', None), ('builder_service_chatbots:dialogBuilder', None), ('builder_service_chatbots:dialogCanvas', None), ('builder_service_chatbots:dialogDetail', None), ('builder_service_chatbots:dialogElement', None), ('builder_service_chatbots:dialogIntent', None), ('builder_service_chatbots:dialogMap', None), ('builder_service_chatbots:dialogMapConnector', None), ('builder_service_chatbots:dialogMapNode', None), ('builder_service_chatbots:dialogMapNodePopover', None), ('builder_service_chatbots:dialogMapZoomPanel', None), ('builder_service_chatbots:dialogState', None), ('builder_service_chatbots:domainState', None), ('builder_service_chatbots:editDialogGroupModal', None), ('builder_service_chatbots:editDialogModal', None), ('builder_service_chatbots:element', None), ('builder_service_chatbots:elementCollectInfoQuickReply', None), ('builder_service_chatbots:elementCollectVariableInfo', None), ('builder_service_chatbots:elementMenu', None), ('builder_service_chatbots:elementMenuItem', None), ('builder_service_chatbots:elementMessage', None), ('builder_service_chatbots:elementRoute', None), ('builder_service_chatbots:elementRules', None), ('builder_service_chatbots:elementScript', None), ('builder_service_chatbots:errorModal', None), ('builder_service_chatbots:errorPopover', None), ('builder_service_chatbots:filter', None), ('builder_service_chatbots:intentCanvas', None), ('builder_service_chatbots:intentConflicts', None), ('builder_service_chatbots:intentExtensionList', None), ('builder_service_chatbots:intentExtensionListItem', None), ('builder_service_chatbots:intentExtensionsCard', None), ('builder_service_chatbots:intentState', None), ('builder_service_chatbots:intentStateIcon', None), ('builder_service_chatbots:intentTraining', None), ('builder_service_chatbots:intentTrainingGame', None), ('builder_service_chatbots:intentTrainingList', None), ('builder_service_chatbots:intentTrainingReassignModal', None), ('builder_service_chatbots:intentTrainingSetCompleteModal', None), ('builder_service_chatbots:iteration', None), ('builder_service_chatbots:logCustomerDataEditModal', None), ('builder_service_chatbots:metrics', None), ('builder_service_chatbots:modal', None), ('builder_service_chatbots:modelState', None), ('builder_service_chatbots:nluDashboard', None), ('builder_service_chatbots:nluDashboardDataManager', None), ('builder_service_chatbots:nluDashboardIntentDetails', None), ('builder_service_chatbots:nluDashboardIntentDetailsAccuracy', None), ('builder_service_chatbots:nluDashboardIntentDetailsTopConflicts', None), ('builder_service_chatbots:nluDashboardIntentSummary', None), ('builder_service_chatbots:nluDashboardListView', None), ('builder_service_chatbots:nluDashboardSummary', None), ('builder_service_chatbots:nluDashboardTile', None), ('builder_service_chatbots:nluDashboardTilesView', None), ('builder_service_chatbots:nluIntentExtensions', None), ('builder_service_chatbots:nluIntentUtterances', None), ('builder_service_chatbots:nluModelManagement', None), ('builder_service_chatbots:nluTestInput', None), ('builder_service_chatbots:nluWarningsPopover', None), ('builder_service_chatbots:previewPanel', None), ('builder_service_chatbots:progressBar', None), ('builder_service_chatbots:router', None), ('builder_service_chatbots:routerState', None), ('builder_service_chatbots:routerUrlManager', None), ('builder_service_chatbots:scoreDial', None), ('builder_service_chatbots:selectChannelDeployment', None), ('builder_service_chatbots:selectDialog', None), ('builder_service_chatbots:selectIntent', None), ('builder_service_chatbots:selectInvocableAction', None), ('builder_service_chatbots:selectOrgUser', None), ('builder_service_chatbots:selectRecord', None), ('builder_service_chatbots:selectSlotClass', None), ('builder_service_chatbots:selectVariable', None), ('builder_service_chatbots:setupState', None), ('builder_service_chatbots:slotClassCanvas', None), ('builder_service_chatbots:slotClassList', None), ('builder_service_chatbots:slotClassRecord', None), ('builder_service_chatbots:slotClassRecords', None), ('builder_service_chatbots:slotClassRecordsHeader', None), ('builder_service_chatbots:slotClassValueList', None), ('builder_service_chatbots:stateManager', None), ('builder_service_chatbots:store', None), ('builder_service_chatbots:template', None), ('builder_service_chatbots:tooltip', None), ('builder_service_chatbots:updateBotModal', None), ('builder_service_chatbots:utterancesCard', None), ('builder_service_chatbots:variableRecords', None), ('calendar:attendee', None), ('calendar:attendeeComposer', None), ('calendar:attendeeComposerWrapper', None), ('calendar:attendees', None), ('calendar:calendarColorMenuItem', None), ('calendar:calendarShareConfirmationModalBody', None), ('calendar:calendarShareDataProvider', None), ('calendar:calendarShareGrid', None), ('calendar:calendarShareGridAccessLevelColumn', None), ('calendar:calendarShareGridRemoveColumn', None), ('calendar:calendarShareGridTitleColumn', None), ('calendar:calendarTextureBox', None), ('calendar:createCalendarModal', None), ('calendar:createCalendarModalHeader', None), ('calendar:createCalendarWizardStep1', None), ('calendar:createCalendarWizardStep2', None), ('calendar:customColor', None), ('calendar:deleteEventSeriesModal', None), ('calendar:deleteModal', None), ('calendar:discoveryModal', None), ('calendar:home', None), ('calendar:listItem', None), ('calendar:listPanel', None), ('calendar:pillContainer', None), ('calendar:resourceAttendeeDataProvider', None), ('calendar:sfdcCalendarDataProvider', None), ('calendar:shareModal', None), ('calendar:sharedEventDetailPage', None), ('calendar:sharedEventDetailStencil', None), ('calendar:sidebar', None), ('calendar:updateCalendarModal', None), ('chatbots:movable', None), ('chatbots:movableContainer', None), ('chatbots:treeGrid', None), ('chatbots:treeGridColumn', None), ('chatbots:treeGridRow', None), ('clients:accountInsightsContainer', None), ('clients:actionContainer', None), ('clients:activateMailAppPage', None), ('clients:activitySyncEngine', None), ('clients:activitySyncEngineSelectUsers', None), ('clients:activitySyncEngineSetupRow', None), ('clients:associationContext', None), ('clients:associationSelectionManager', None), ('clients:attachment', None), ('clients:attachmentsCard', None), ('clients:attachmentsDataProvider', None), ('clients:attachmentsDataProviderComposeMode', None), ('clients:attachmentsManager', None), ('clients:authEpt', None), ('clients:autoFocusForceSearchInputDesktop', None), ('clients:bustOutButton', None), ('clients:cardMetrics', None), ('clients:clientServices', None), ('clients:defaultMailAppTemplate', None), ('clients:detailedErrorModal', None), ('clients:duplicatePersonCardStencil', None), ('clients:einsteinInline', None), ('clients:einsteinInsightsButton', None), ('clients:emailContextComponentDecorator', None), ('clients:emailTemplateHover', None), ('clients:emailTemplateList', None), ('clients:emailTemplateRow', None), ('clients:emailTemplatesActionContainerFlex', None), ('clients:emailTemplatesContainer', None), ('clients:emailTemplatesDataManager', None), ('clients:emailTemplatesDesignInfo', None), ('clients:emailToSalesforceSettings', None), ('clients:exchangeUserMappingList', None), ('clients:exchangeUserMappingListDataProvider', None), ('clients:exchangeUserMappingSettings', None), ('clients:header', None), ('clients:hidingListRecordItem', None), ('clients:highlightsStencil', None), ('clients:homeCard', None), ('clients:hvsManager', None), ('clients:insightAggregator', None), ('clients:inviteeAddRowStencil', None), ('clients:inviteeListRowStencil', None), ('clients:labelWithLink', None), ('clients:leadScoreInline', None), ('clients:mailAppAndS2XPreferenceToggle', None), ('clients:mailAppCommonSettings', None), ('clients:mailAppFlexiPageList', None), ('clients:mailAppFlexiPageListDataProvider', None), ('clients:mailAppFlexiPageSettings', None), ('clients:mailAppGmailAndS2XGoogleSettings', None), ('clients:mailAppGmailSettings', None), ('clients:mailAppLightningPageDataProvider', None), ('clients:mailAppOutlookAndS2XExchangeSettings', None), ('clients:mailAppOutlookSettings', None), ('clients:mailAppSettingsSection', None), ('clients:mailAppSettingsSubsection', None), ('clients:matchingManager', None), ('clients:msMailContainerFlex', None), ('clients:msMailFooter', None), ('clients:opportunityInsightsContainer', None), ('clients:opportunityScoreInline', None), ('clients:opportunityTopInsightInline', None), ('clients:outlookDiagnosticTool', None), ('clients:outlookPublisherLayoutTable', None), ('clients:outlookPublisherLayoutTableDataProvider', None), ('clients:outputEmail', None), ('clients:owaWhitelistDataProvider', None), ('clients:owaWhitelistDisplay', None), ('clients:owaWhitelistEditor', None), ('clients:owaWhitelistSettings', None), ('clients:pageActionMenu', None), ('clients:pageAssignmentByProfileReviewStep', None), ('clients:pageAssignmentDefaultAssignmentReviewStep', None), ('clients:pageAssignmentPickerStep', None), ('clients:pageAssignmentProfilePickerStep', None), ('clients:pageAssignmentReviewStepDataProvider', None), ('clients:pageAssignmentSetDefaultOrAssignStep', None), ('clients:pardotEngageContainer', None), ('clients:pardotEngagePersonSelector', None), ('clients:pardotEngageToggle', None), ('clients:peopleCardContainerFlex', None), ('clients:peopleCardContainerFlexDesignInfo', None), ('clients:peopleCardDesignSubstitute', None), ('clients:peopleDupeRadio', None), ('clients:peopleDuplicateButton', None), ('clients:peopleDuplicateList', None), ('clients:peopleListCard', None), ('clients:peopleListDataManager', None), ('clients:peopleListDesignDataManager', None), ('clients:peopleListing', None), ('clients:permanentlyDismissableDialog', None), ('clients:pre', None), ('clients:profilePageAssignment', None), ('clients:profilePageAssignmentDataProvider', None), ('clients:progressBar', None), ('clients:publisherLayoutSettings', None), ('clients:quickActionHeader', None), ('clients:quickActionLayout', None), ('clients:quickActionsLoader', None), ('clients:quickCreateButton', None), ('clients:quickCreateMenuItem', None), ('clients:recipientList', None), ('clients:recordDetail', None), ('clients:recordLayoutLoader', None), ('clients:recordList', None), ('clients:recordListing', None), ('clients:relatedCustomEntity', None), ('clients:relatedCustomEntityDesignInfo', None), ('clients:relatedCustomEntitySubstitute', None), ('clients:relatedRecordCollectionDataManager', None), ('clients:relatedRecordCollectionDesignDataManager', None), ('clients:relatedRecordEntityDesignInfo', None), ('clients:relatedRecordListCard', None), ('clients:relatedRecordListCardStencil', None), ('clients:relatedRecordStencilBase', None), ('clients:relatedRecordsPageDesignSubstitute', None), ('clients:relatedRecordsPageFlex', None), ('clients:relatedToLabelManager', None), ('clients:s2xCredentialFlowStepContainer', None), ('clients:s2xCredentialFlowStepIcon', None), ('clients:s2xCredentialsFlow', None), ('clients:s2xCredentialsTestUser', None), ('clients:s2xExchangeOAuthCredentials', None), ('clients:s2xExchangeServiceAccountCredentials', None), ('clients:s2xExchangeSettings', None), ('clients:s2xGoogleOAuthCredentials', None), ('clients:s2xGoogleSettings', None), ('clients:s2xServerTypeChangeModal', None), ('clients:s2xStatusSettings', None), ('clients:saveEmailTemplateContainer', None), ('clients:searchButton', None), ('clients:searchStencil', None), ('clients:selectiveAttachments', None), ('clients:sfoEndOfSale', None), ('clients:sidepanelAppDependenciesTemplate', None), ('clients:speedtest', None), ('clients:styledOutAppContainer', None), ('clients:styledOutAppTemplate', None), ('clients:tab', None), ('clients:tabset', None), ('clients:tabsetDesignInfo', None), ('clients:tasksActionContainerFlex', None), ('clients:tasksCardContainerFlex', None), ('clients:tasksContainerFlexDesignInfo', None), ('clients:tasksListFilter', None), ('clients:tasksListViewAll', None), ('clients:template', None), ('clients:unactionableRelatedRecordStencil', None), ('clients:userFeedbackManager', None), ('clients:userProfileCard', None), ('clients:virtualAction', None), ('clients:workQueueWidget', None), ('clients:workQueueWidgetDesignInfo', None), ('cmsAuthor:addPublishTargets', None), ('cmsAuthor:cmsAuthorApp', None), ('cmsAuthor:cmsAuthorHome', None), ('cmsAuthor:cmsAuthorSpace', None), ('cmsAuthor:cmsRichEditorCreateLinkPanel', None), ('cmsAuthor:cmsRichEditorCreateVideoPanel', None), ('cmsAuthor:cmsRichEditorHeaderSelect', None), ('cmsAuthor:cmsRichEditorLinkButton', None), ('cmsAuthor:cmsRichEditorVideoButton', None), ('cmsAuthor:collaborators', None), ('cmsAuthor:content', None), ('cmsAuthor:contentSpaceCreateForm', None), ('cmsAuthor:contentSpaceCreateWizard', None), ('cmsAuthor:contentSpaceForm', None), ('cmsAuthor:contentSpaceSummary', None), ('cmsAuthor:imageUploadWithPreview', None), ('cmsAuthor:managePublishTargets', None), ('cmsAuthor:managePublishTargetsDataProvider', None), ('cmsAuthor:managedContentEmptyState', None), ('cmsAuthor:managedContentForm', None), ('cmsAuthor:managedContentItemHeader', None), ('cmsAuthor:managedContentList', None), ('cmsAuthor:managedContentPage', None), ('cmsAuthor:managedContentVersionList', None), ('cmsAuthor:mcontentNavigationCMC', None), ('cmsAuthor:mcontentNavigationLEX', None), ('cmsAuthor:mcontentPermissionsProvider', None), ('cmsAuthor:publishingTargets', None), ('cmsAuthor:tabItem', None), ('commerce:orderItemDataProvider', None), ('commerce:orderItemMultiLineEdit', None), ('commerce:orderItemMultiLineEditWrapper', None), ('commerce_catalog:enrichmentFileInfo', None), ('commerce_catalog:enrichmentFileMetadataWrapper', None), ('commerce_catalog:enrichmentFileOrder', None), ('commerce_catalog:enrichmentFilePicker', None), ('commerce_catalog:enrichmentFilePreview', None), ('commerce_catalog:enrichmentFileProperties', None), ('commerce_catalog:enrichmentGallery', None), ('commerce_catalog:massAddProductsToCategory', None), ('commerce_catalog:productEnrichment', None), ('commerce_console:outputBooleanBadge', None), ('commerce_console:webStoreTileNavigation', None), ('communitySetup:actionMenuCMSConnection', None), ('communitySetup:addArticlesDialog', None), ('communitySetup:appLauncherManager', None), ('communitySetup:arsrSetupPage', None), ('communitySetup:arsrSetupPageLightning', None), ('communitySetup:articleCategoryFilterMenu', None), ('communitySetup:articleGroupFilterMenu', None), ('communitySetup:articleManagement', None), ('communitySetup:articleManagementRow', None), ('communitySetup:assistantCustomStep', None), ('communitySetup:assistantHelpAndTrailhead', None), ('communitySetup:assistantPage', None), ('communitySetup:assistantSubStepLink', None), ('communitySetup:audienceCriteriaAutoComplete', None), ('communitySetup:audienceCriteriaDataProvider', None), ('communitySetup:audienceCriteriaExpressionRow', None), ('communitySetup:audienceCriteriaFieldTraversal', None), ('communitySetup:audienceCriteriaGeoLocation', None), ('communitySetup:audienceCriteriaSection', None), ('communitySetup:audienceCustomEditor', None), ('communitySetup:audienceDeleteAction', None), ('communitySetup:audienceEditor', None), ('communitySetup:audienceSelector', None), ('communitySetup:audienceSummary', None), ('communitySetup:authorDetailCard', None), ('communitySetup:authorFeedInfo', None), ('communitySetup:authorList', None), ('communitySetup:authorModerationInfoIcon', None), ('communitySetup:badgeAccessListEditor', None), ('communitySetup:badgeAccessListItem', None), ('communitySetup:badgeAccessListItemContainer', None), ('communitySetup:badgeImageUpload', None), ('communitySetup:badgeTypeCheckBox', None), ('communitySetup:badgeUserRelatedListRecord', None), ('communitySetup:badgesList', None), ('communitySetup:baseCMCComponent', None), ('communitySetup:baseRecommendationRow', None), ('communitySetup:baseRecommendationRowEditMode', None), ('communitySetup:baseRecommendationRowViewMode', None), ('communitySetup:baseRecommendationSetup', None), ('communitySetup:baseTopicRow', None), ('communitySetup:baseTopics', None), ('communitySetup:cbBackgroundImageEditor', None), ('communitySetup:cbBackgroundImagePositionDataProvider', None), ('communitySetup:cbBackgroundImageSizeOrRepeatDataProvider', None), ('communitySetup:cbColorEditor', None), ('communitySetup:cbCreateRecordEditor', None), ('communitySetup:cbHtmlContentEditor', None), ('communitySetup:cbIntegerSlider', None), ('communitySetup:cbOmniboxTypeaheadEditor', None), ('communitySetup:cbRichTextEditor', None), ('communitySetup:cbRichTextPicker', None), ('communitySetup:cbSearchResultsEditor', None), ('communitySetup:cbSelectComponentEditor', None), ('communitySetup:cbTabsetEditor', None), ('communitySetup:cbTabsetEditorItemEditor', None), ('communitySetup:cbTopArticleListEditor', None), ('communitySetup:cbUserProfileBannerEditor', None), ('communitySetup:cmcAppLayoutContainer', None), ('communitySetup:cmcButton', None), ('communitySetup:cmcErrorPage', None), ('communitySetup:cmcHeader', None), ('communitySetup:cmcHelpCenterUpgrade', None), ('communitySetup:cmcHelpLinkSection', None), ('communitySetup:cmcHelpLinks', None), ('communitySetup:cmcHelpMenu', None), ('communitySetup:cmcHome', None), ('communitySetup:cmcHomeHeader', None), ('communitySetup:cmcHubMenu', None), ('communitySetup:cmcHubMenuItem', None), ('communitySetup:cmcListButton', None), ('communitySetup:cmcNodeItem', None), ('communitySetup:cmcPageLayout', None), ('communitySetup:cmcProfileMenu', None), ('communitySetup:cmcQuickLinks', None), ('communitySetup:cmcReleaseNotes', None), ('communitySetup:cmcStyledList', None), ('communitySetup:cmcTemplate', None), ('communitySetup:cmcTrailhead', None), ('communitySetup:cmcWelcomePanel', None), ('communitySetup:cmcWelcomePanelWrapper', None), ('communitySetup:cmcWhatsNew', None), ('communitySetup:cmcWorkspaceChangeHandler', None), ('communitySetup:cmcWorkspaceLauncher', None), ('communitySetup:cmcWorkspaceTabs', None), ('communitySetup:cmcWorkspaceTile', None), ('communitySetup:cmsConnectEditor', None), ('communitySetup:cmsConnectScriptRow', None), ('communitySetup:cmsContentEditor', None), ('communitySetup:cmsContentEditorSection', None), ('communitySetup:cmsContentLayoutDesignAttribute', None), ('communitySetup:cmsContentLinkEditor', None), ('communitySetup:cmsContentParamRow', None), ('communitySetup:cmsJSONResourceDefintion', None), ('communitySetup:cmsJSONResourceTypes', None), ('communitySetup:cmsJSONSection', None), ('communitySetup:collaboratorsChangeRoleModal', None), ('communitySetup:collaboratorsListView', None), ('communitySetup:collaboratorsManager', None), ('communitySetup:collaboratorsSetupAddMembers', None), ('communitySetup:collaboratorsSetupDataProvider', None), ('communitySetup:collaboratorsSetupMultiSelectTable', None), ('communitySetup:collaboratorsSetupSelectRoles', None), ('communitySetup:collaboratorsSetupWizard', None), ('communitySetup:collapsibleSection', None), ('communitySetup:colorPicker', None), ('communitySetup:communityWorkspaceBanner', None), ('communitySetup:communityWorkspaceCollaboratorsManager', None), ('communitySetup:compoundFieldBadgeGivenBy', None), ('communitySetup:compoundFieldBadgeImageUrl', None), ('communitySetup:compoundFieldBadgeMessage', None), ('communitySetup:compoundFieldBadgeName', None), ('communitySetup:compoundFieldTimeAgo', None), ('communitySetup:compoundFieldsBadgeLastModifiedBy', None), ('communitySetup:compoundFieldsBadgeName', None), ('communitySetup:createCustomBadge', None), ('communitySetup:createMission', None), ('communitySetup:createRecordEditorItem', None), ('communitySetup:createRecordEditorItemEditor', None), ('communitySetup:crmContentHome', None), ('communitySetup:customBadgeAction', None), ('communitySetup:customMissionAction', None), ('communitySetup:customRecommendationDataProvider', None), ('communitySetup:customRecommendationRow', None), ('communitySetup:customRecommendationRowEditMode', None), ('communitySetup:customRecommendationRowViewMode', None), ('communitySetup:customRecommendationSetup', None), ('communitySetup:customRecommendationUploadFileButton', None), ('communitySetup:customTopicAction', None), ('communitySetup:cwBulkApprove', None), ('communitySetup:cwBulkDelete', None), ('communitySetup:cwBulkFlag', None), ('communitySetup:cwBulkFreezeUnfreeze', None), ('communitySetup:cwBulkPost', None), ('communitySetup:cwBulkUnflag', None), ('communitySetup:cwFlaggers', None), ('communitySetup:cwInsightActionsContainer', None), ('communitySetup:cwInsightQActionsManager', None), ('communitySetup:cwInsightQGrid', None), ('communitySetup:cwInsightQHeader', None), ('communitySetup:cwInsightQueue', None), ('communitySetup:cwModerationHomeMetrics', None), ('communitySetup:cwQContainer', None), ('communitySetup:cwReportDataProvider', None), ('communitySetup:cwSpinner', None), ('communitySetup:cwVFAction', None), ('communitySetup:cwVirtualActionColumn', None), ('communitySetup:cwVirtualColumn', None), ('communitySetup:cwVirtualSelectionColumn', None), ('communitySetup:dataCategoriesListDataProvider', None), ('communitySetup:dataCategoryListRow', None), ('communitySetup:deleteCommunityBadge', None), ('communitySetup:deleteMission', None), ('communitySetup:dynamicCollectionEditor', None), ('communitySetup:enableTopicsForContent', None), ('communitySetup:engagementHomeSettings', None), ('communitySetup:errorMessage', None), ('communitySetup:extensionOverview', None), ('communitySetup:extensionTile', None), ('communitySetup:extensionsHome', None), ('communitySetup:extensionsHomeFeatureTiles', None), ('communitySetup:featureCMCPopover', None), ('communitySetup:featuredTopicRow', None), ('communitySetup:featuredTopics', None), ('communitySetup:filterMenu', None), ('communitySetup:flagQueue', None), ('communitySetup:flagReasonHolder', None), ('communitySetup:inputRadioGroup', None), ('communitySetup:inputSelectWrapper', None), ('communitySetup:installConfirmation', None), ('communitySetup:installPackage', None), ('communitySetup:installSetupPackage', None), ('communitySetup:listCMSConnection', None), ('communitySetup:localeMappingEditor', None), ('communitySetup:locationPicker', None), ('communitySetup:locationPill', None), ('communitySetup:lsfMilestoneSelectContentSource', None), ('communitySetup:manageCMSConnection', None), ('communitySetup:managedContentBindingEditor', None), ('communitySetup:managedContentBlockPropertyEditor', None), ('communitySetup:managedContentCollectionDataProviderEditor', None), ('communitySetup:managedContentCollectionDetail', None), ('communitySetup:managedContentCollectionItemLayoutPropertyEditor', None), ('communitySetup:managedContentCollectionLayoutPropertyEditor', None), ('communitySetup:managedContentCollectionPicker', None), ('communitySetup:managedContentCollectionsCMSEditModal', None), ('communitySetup:managedContentCollectionsDeleteDialog', None), ('communitySetup:managedContentCollectionsHome', None), ('communitySetup:managedContentCollectionsList', None), ('communitySetup:managedContentDetailPropertyEditor', None), ('communitySetup:managedContentHome', None), ('communitySetup:managedContentItemCreatePage', None), ('communitySetup:managedContentItemVersionPage', None), ('communitySetup:managedContentItemsPicker', None), ('communitySetup:managedContentItemsPropertiesEditor', None), ('communitySetup:managedContentLayoutPropertyEditor', None), ('communitySetup:managedContentLayoutVisualPicker', None), ('communitySetup:managedContentMultiSelectTable', None), ('communitySetup:managedContentPicker', None), ('communitySetup:managedContentPropertiesPanelSection', None), ('communitySetup:managedContentQueryCriteria', None), ('communitySetup:managedContentQueryCriteriaList', None), ('communitySetup:managedContentQueryCriteriaListRow', None), ('communitySetup:managedContentQueryCriteriaWrapper', None), ('communitySetup:managedContentTopics', None), ('communitySetup:managedContentTypeList', None), ('communitySetup:managedContentTypeListDataProvider', None), ('communitySetup:managedContentTypeWhitelist', None), ('communitySetup:managedTopicsDataProvider', None), ('communitySetup:mcfManualCollectionDataProvider', None), ('communitySetup:mcfSetupCreateContentCollection', None), ('communitySetup:mcfSetupCreateManualCollection', None), ('communitySetup:mcfSetupEditCRMListView', None), ('communitySetup:mcfSetupEditManualCollection', None), ('communitySetup:mcfSetupSelectCRMListView', None), ('communitySetup:mcfSetupSelectCollectionType', None), ('communitySetup:mcfSetupSelectContentSource', None), ('communitySetup:mcfSetupVisualPicker', None), ('communitySetup:mcfSetupWizard', None), ('communitySetup:mergeTopicDialog', None), ('communitySetup:missionsList', None), ('communitySetup:moderationAppReportMetrics', None), ('communitySetup:moderationFeedItemDetail', None), ('communitySetup:moderationQueueFeedComment', None), ('communitySetup:moderationQueueFeedItem', None), ('communitySetup:moderationQueueFeedItemFooter', None), ('communitySetup:moderationQueueFeedItemHeader', None), ('communitySetup:moderationQueueFeedIterationElement', None), ('communitySetup:navigationBarCustomEditor', None), ('communitySetup:navigationBarEditorItem', None), ('communitySetup:navigationBarEditorItemPlaceholder', None), ('communitySetup:navigationBarEditorPropertiesPanel', None), ('communitySetup:navigationBarEditorPropertiesPanelV2', None), ('communitySetup:navigationMenuEditor', None), ('communitySetup:navigationMenuEditorDataProvider', None), ('communitySetup:navigationalTopicRow', None), ('communitySetup:navigationalTopics', None), ('communitySetup:navigationalTopicsPickList', None), ('communitySetup:nestedComponentPropertyPanel', None), ('communitySetup:networkDashboardWrapper', None), ('communitySetup:networkWorkspaceMetricDefaultPage', None), ('communitySetup:networkWorkspaceMetricEditorItem', None), ('communitySetup:networkWorkspaceMetricPropertiesPanel', None), ('communitySetup:networkWorkspaceMetricSetupEditor', None), ('communitySetup:networksWorkspaceErrorInfo', None), ('communitySetup:networksWorkspaceMetricsHolder', None), ('communitySetup:networksWorkspaceMetricsInstallPackage', None), ('communitySetup:networksWorkspaceMetricsTile', None), ('communitySetup:newTopicDialog', None), ('communitySetup:pageAssignmentAudienceSummary', None), ('communitySetup:pencilButton', None), ('communitySetup:pillContainerAutoComplete', None), ('communitySetup:placeholderForTable', None), ('communitySetup:quillButtonWithPanel', None), ('communitySetup:quillPanel', None), ('communitySetup:recommendationAudienceDataProvider', None), ('communitySetup:recommendationAudienceRow', None), ('communitySetup:recommendationAudienceRowEditMode', None), ('communitySetup:recommendationAudienceRowViewMode', None), ('communitySetup:recommendationAudienceSetup', None), ('communitySetup:recommendationPreview', None), ('communitySetup:reorderArrows', None), ('communitySetup:resourceDefinitionEditor', None), ('communitySetup:searchResultsEditorItemEditor', None), ('communitySetup:secondaryNav', None), ('communitySetup:sectionHeaderCMSConnection', None), ('communitySetup:sentiments', None), ('communitySetup:setupFeedback', None), ('communitySetup:summaryBlock', None), ('communitySetup:taskSummaryErrorHandler', None), ('communitySetup:taskSummaryHolder', None), ('communitySetup:thanksButton', None), ('communitySetup:topicAssignmentRules', None), ('communitySetup:topicImageUpload', None), ('communitySetup:topicListView', None), ('communitySetup:topicRow', None), ('communitySetup:topics', None), ('communitySetup:topicsDataProvider', None), ('communitySetup:unearnedBadgeListRecord', None), ('communitySetup:userRecognitionBadgeItem', None), ('communitySetup:userRecognitionList', None), ('communitySetup:vFActionComponent', None), ('communitySetup:viewReportWrapper', None), ('componentReference:baseLayoutContainer', None), ('componentReference:bundle', None), ('componentReference:dataProvider', None), ('componentReference:defTypesByName', None), ('componentReference:dscFooter', None), ('componentReference:dscHeader', None), ('componentReference:examples', None), ('componentReference:highlightComponent', None), ('componentReference:iconGenerator', None), ('componentReference:iconItem', None), ('componentReference:iconLibrary', None), ('componentReference:iconList', None), ('componentReference:offCoreTemplate', None), ('componentReference:quickFindFilter', None), ('componentReference:sidebar', None), ('componentReference:summaryDetail', None), ('componentReference:template', None), ('componentReference:tree', None), ('componentReference:treeBranch', None), ('componentReference:treeItem', None), ('console:bookmarkEntry', None), ('console:community360FilterMenu', None), ('console:componentManager', None), ('console:embeddedReportChart', None), ('console:history', None), ('console:lastViewedInCommunity', None), ('console:lastViewedInCommunityDataProvider', None), ('console:lastViewedInCommunityItem', None), ('console:lastViewedInCommunityWrapper', None), ('console:mruEntry', None), ('console:mruEntryMenuTrigger', None), ('console:mruSubEntry', None), ('console:mruWidget', None), ('console:relatedRecord', None), ('console:relatedRecordCompact', None), ('console:relatedRecordDescriptionDesignInfo', None), ('console:relatedRecordDesignInfo', None), ('console:tabIcon', None), ('cooper:companyInsight', None), ('cooper:companyInsightCompetitors', None), ('cooper:companyInsightContacts', None), ('cooper:companyInsightFinancialDetails', None), ('cooper:companyInsightFullAddress', None), ('cooper:companyInsightHighlight', None), ('cooper:companyInsightIndustries', None), ('cooper:companyInsightRevenue', None), ('cooper:companyInsightSubcomponent', None), ('cooper:companyInsightSummary', None), ('cooper:companyInsightSummaryText', None), ('cooper:companyInsightTeaser', None), ('cooper:companyInsightTeaserCard', None), ('cooper:companyInsightTeaserDesignInfo', None), ('cooper:companyInsightText', None), ('cooper:insightCard', None), ('cooper:newsApp', None), ('cooper:tempDepend', None), ('cordaDashboards:component', None), ('cordaDashboards:dashboardComponent', None), ('cordaDashboards:dashboardSingleComponentView', None), ('cordaDashboards:feedAux', None), ('cordaDashboards:filterSlidePanel', None), ('cordaDashboards:primer', None), ('cordaDashboards:primerActionConnector', None), ('cordaDashboards:primerConfigConnector', None), ('cordaDashboards:primerTabConnector', None), ('cordaDashboards:slide', None), ('cordaDashboards:snapshot', None), ('cordaDashboards:snapshotPost', None), ('cordaDashboards:tempDepend', None), ('cordaDashboards:visualForcePageComponent', None), ('dashboards:actionBar', None), ('dashboards:actionProxy', None), ('dashboards:componentFiltersView', None), ('dashboards:dashboardLoader', None), ('dashboards:eclairChartTypeOption', None), ('dashboards:eclairChartTypeSwitcher', None), ('dashboards:eclairComponent', None), ('dashboards:eclairSingleComponentView', None), ('dashboards:eclairSlide', None), ('dashboards:eclairSnapshotPost', None), ('dashboards:filterPanel', None), ('dashboards:filterPanelRow', None), ('dashboards:highlightsStencilExtension', None), ('dashboards:linkCard', None), ('dashboards:pagedReportDetail', None), ('dashboards:refresher', None), ('dashboards:reportDetailContainer', None), ('dashboards:reportEntityLink', None), ('dashboards:runAsUserPanel', None), ('dashboards:slidingPanel', None), ('dashboards:tableChart', None), ('dashboards:tmpDepends', None), ('dataImporter:diActivityHeader', None), ('dataImporter:diAdvancedAccountContactOptions', None), ('dataImporter:diAdvancedCampaignMemberUpdateOptions', None), ('dataImporter:diAdvancedCustomOptions', None), ('dataImporter:diAdvancedGenericOptions', None), ('dataImporter:diAdvancedLeadOptions', None), ('dataImporter:diAdvancedLookupFieldOptions', None), ('dataImporter:diAdvancedOpportunityOptions', None), ('dataImporter:diAdvancedPersonAccountOptions', None), ('dataImporter:diAdvancedSolutionOptions', None), ('dataImporter:diButtonBar', None), ('dataImporter:diCsvFileDropzone', None), ('dataImporter:diCsvFileSelector', None), ('dataImporter:diCsvSelectionActivity', None), ('dataImporter:diErrorBlock', None), ('dataImporter:diErrorMessage', None), ('dataImporter:diFileSelectionBase', None), ('dataImporter:diFileUploadButton', None), ('dataImporter:diFutureActivity', None), ('dataImporter:diInitialStep', None), ('dataImporter:diInputFile', None), ('dataImporter:diInputFileDropzone', None), ('dataImporter:diInvisibleFileUploader', None), ('dataImporter:diLanding', None), ('dataImporter:diLegacy', None), ('dataImporter:diMappingFieldDataProvider', None), ('dataImporter:diMappingStep', None), ('dataImporter:diMappingStepSampleRow', None), ('dataImporter:diMatchingChoiceActivity', None), ('dataImporter:diOverlay', None), ('dataImporter:diProgressBar', None), ('dataImporter:diProgressMarker', None), ('dataImporter:diReviewStep', None), ('dataImporter:diSfdcObjectSelectionActivity', None), ('dataImporter:diSingleMapping', None), ('dataImporter:diSingleMappingEditor', None), ('dataImporter:diStep', None), ('dataImporter:diStepHeader', None), ('dataImporter:diTemplate', None), ('ddcProspector:accountPreview', None), ('ddcProspector:companyHierarchy', None), ('ddcProspector:companyHierarchyPreview', None), ('ddcProspector:companyHierarchyPreviewDesignInfo', None), ('ddcProspector:getAccountsMultiAddButton', None), ('ddcProspector:getAccountsMultiAddHeader', None), ('ddcProspector:getContactsMultiAddButton', None), ('ddcProspector:getContactsMultiAddHeader', None), ('ddcProspector:isInCrmIcon', None), ('ddcProspector:isOwnedIcon', None), ('ddcProspector:messageBlock', None), ('ddcProspector:tree', None), ('ddcProspector:treeNode', None), ('ddcProspector:treeNodeContent', None), ('ddcProspector:updatedDate', None), ('desktopDashboards:componentShareModalFooter', None), ('desktopDashboards:dashboard', None), ('desktopDashboards:embeddedDashboard', None), ('desktopDashboards:embeddedDashboardDataSourceInfo', None), ('desktopDashboards:embeddedDashboardDesignSubstitute', None), ('desktopDashboards:feedPanel', None), ('desktopDashboards:tempDepend', None), ('desktopDashboards:webtemplate', None), ('einsteinbuilder:assessor', None), ('einsteinbuilder:autocomplete', None), ('einsteinbuilder:conditionLogicTypes', None), ('einsteinbuilder:detailsSummaryCount', None), ('einsteinbuilder:dialogHeader', None), ('einsteinbuilder:einsteinBuilderHeader', None), ('einsteinbuilder:einsteinBuilderPredictions', None), ('einsteinbuilder:emptyState', None), ('einsteinbuilder:eplite', None), ('einsteinbuilder:exclusionFields', None), ('einsteinbuilder:fieldSearchAndTrainingFilterSelection', None), ('einsteinbuilder:fieldSearchAutocomplete', None), ('einsteinbuilder:fieldSearchAutocompleteOption', None), ('einsteinbuilder:fieldSearchDataProvider', None), ('einsteinbuilder:fieldSelect', None), ('einsteinbuilder:globalFilterList', None), ('einsteinbuilder:globalFilterRowCondition', None), ('einsteinbuilder:guidePanel', None), ('einsteinbuilder:input', None), ('einsteinbuilder:inputBoolean', None), ('einsteinbuilder:inputCurrency', None), ('einsteinbuilder:inputDate', None), ('einsteinbuilder:inputDateTime', None), ('einsteinbuilder:inputError', None), ('einsteinbuilder:inputNumber', None), ('einsteinbuilder:inputPicklist', None), ('einsteinbuilder:inputSelect', None), ('einsteinbuilder:inputString', None), ('einsteinbuilder:inputText', None), ('einsteinbuilder:inputValueText', None), ('einsteinbuilder:logicTypesRadioButtons', None), ('einsteinbuilder:objectSearchAndGlobalFilterSelection', None), ('einsteinbuilder:objectSearchAutocomplete', None), ('einsteinbuilder:objectSearchAutocompleteOption', None), ('einsteinbuilder:objectSearchDataProvider', None), ('einsteinbuilder:operatorSelect', None), ('einsteinbuilder:popover', None), ('einsteinbuilder:predictionBuilderConfirmation', None), ('einsteinbuilder:predictionConfirmSettings', None), ('einsteinbuilder:predictionCsvDownload', None), ('einsteinbuilder:predictionQualityCard', None), ('einsteinbuilder:predictionSettings', None), ('einsteinbuilder:pushbackCustomField', None), ('einsteinbuilder:pushbackFieldSelection', None), ('einsteinbuilder:reviewTerms', None), ('einsteinbuilder:reviewTermsFlow', None), ('einsteinbuilder:scorecard', None), ('einsteinbuilder:scorecardDetails', None), ('einsteinbuilder:scorecardOverview', None), ('einsteinbuilder:scorecardPredictorsOverview', None), ('einsteinbuilder:setupPredictionFlow', None), ('einsteinbuilder:setupTile', None), ('einsteinbuilder:splashScreen', None), ('einsteinbuilder:startScreen', None), ('einsteinbuilder:statusCount', None), ('einsteinbuilder:stepLayout', None), ('einsteinbuilder:stepLayoutFinish', None), ('einsteinbuilder:stepLayoutSplit', None), ('einsteinbuilder:tile', None), ('einsteinbuilder:topPredictorsCard', None), ('einsteinbuilder:welcomeModal', None), ('einsteinconduit:commanderApi', None), ('einsteinconduit:commanderUi', None), ('emailStream:activityStorage', None), ('emailStream:activityStoragePage', None), ('emailStream:activitySyncEngineSetupMain', None), ('emailStream:activitySyncEngineSetupSplashScreen', None), ('emailStream:activitySyncEngineTabbed', None), ('emailStream:aseAdvancedSettingsTab', None), ('emailStream:aseEditConfiguration', None), ('emailStream:aseFilterRow', None), ('emailStream:aseSetupAssignUsers', None), ('emailStream:aseSetupConfigurations', None), ('emailStream:aseSetupExcludeAddresses', None), ('emailStream:aseSetupModalFinalize', None), ('emailStream:aseSetupModalFlowContainer', None), ('emailStream:aseSetupModalProgressIndicator', None), ('emailStream:aseSetupModalReviewTerms', None), ('emailStream:aseSetupModalStart', None), ('emailStream:aseSetupModalStep', None), ('emailStream:aseSetupSyncSettings', None), ('emailStream:aseTabHome', None), ('emailStream:aseTabSyncConfigurations', None), ('emailStream:automaticActivityCaptureSetup', None), ('emailStream:automaticActivityCaptureSetupAssistant', None), ('emailStream:automaticActivityCaptureSetupAssistantPage', None), ('emailStream:automaticActivityCaptureSetupPage', None), ('emailStream:automaticActivityCaptureSetupSplashScreen', None), ('emailStream:baseSetup', None), ('emailStream:chooseDataSourceType', None), ('emailStream:connectEmail', None), ('emailStream:connectEmailAgreement', None), ('emailStream:connectEmailWrapper', None), ('emailStream:customInsightCreate', None), ('emailStream:customInsightList', None), ('emailStream:customInsightSetupPage', None), ('emailStream:dataSourceStatus', None), ('emailStream:dataSourceStatusRow', None), ('emailStream:defaultOrgSharingSettingsPanel', None), ('emailStream:defaultOrgSharingSettingsPanelFooter', None), ('emailStream:defaultSharingSettings', None), ('emailStream:defaultSharingSettingsPanel', None), ('emailStream:defaultSharingSettingsPanelFooter', None), ('emailStream:emailIqSetup', None), ('emailStream:emailIqSetupPage', None), ('emailStream:emailIqSetupRow', None), ('emailStream:emailStreamSettings', None), ('emailStream:enabledEntities', None), ('emailStream:entitySelector', None), ('emailStream:iconLabel', None), ('emailStream:insightsEmailAgreement', None), ('emailStream:insightsOrgSettingSetupStep', None), ('emailStream:insightsPermissionSetSetupStep', None), ('emailStream:insightsSetupAssistant', None), ('emailStream:insightsSetupAssistantStep', None), ('emailStream:insightsSetupCheckmark', None), ('emailStream:launchpad', None), ('emailStream:launchpadMat', None), ('emailStream:oauthFlowContainer', None), ('emailStream:orgBlacklistModalFlowContainer', None), ('emailStream:orgBlacklistModalToConfirmInput', None), ('emailStream:orgBlacklistModalToEnterDetails', None), ('emailStream:orgBlacklistModalToSelectType', None), ('emailStream:reviewTerms', None), ('emailStream:reviewTermsFlow', None), ('emailStream:salesforceInboxDeleteEmailsAndEvents', None), ('emailStream:salesforceInboxDeleteEmailsAndEventsEmailTab', None), ('emailStream:salesforceInboxDeleteEmailsAndEventsUserTab', None), ('emailStream:salesforceInboxExchangeSetting', None), ('emailStream:salesforceInboxExchangeSettingDetails', None), ('emailStream:salesforceInboxExchangeSettingPage', None), ('emailStream:salesforceInboxExchangeSettingRowAction', None), ('emailStream:salesforceInboxExcludeFromML', None), ('emailStream:salesforceInboxOrgBlacklist', None), ('emailStream:salesforceInboxOrgBlacklistPage', None), ('emailStream:salesforceInboxOrgBlacklistRowAction', None), ('emailStream:salesforceInboxUserBlacklist', None), ('emailStream:salesforceInboxUserBlacklistPage', None), ('emailStream:salesforceInboxUserBlacklistRowAction', None), ('emailStream:sharingControl', None), ('emailStream:sharingPreview', None), ('emailStream:tempDepend', None), ('emailStream:updateSharing', None), ('emailStream:updateSharingBody', None), ('emailStream:userBlacklistModalToConfirmInput', None), ('emailStream:usersAndLicenses', None), ('emailStream:usersAndLicensesPage', None), ('emailStream:waveJobList', None), ('emailStream:welcomeMat', None), ('emailStream:whatIsIq', None), ('emailui:activityTimeline2EmailMessageAddressListOverride', None), ('emailui:activityTimeline2EmailMessageBccAddressFieldOverride', None), ('emailui:activityTimeline2EmailMessageCcAddressFieldOverride', None), ('emailui:activityTimeline2EmailMessageFromAddressFieldOverride', None), ('emailui:activityTimeline2EmailMessageToAddressFieldOverride', None), ('emailui:activityTimelineFixedLayoutEmailMessageStencil', None), ('emailui:addressContainer', None), ('emailui:addressListOutput', None), ('emailui:baseAddressContainer', None), ('emailui:baseEmailHighlightsStencil', None), ('emailui:consentManager', None), ('emailui:consentWarningModal', None), ('emailui:consentWarningModalFooter', None), ('emailui:emailAttachment', None), ('emailui:emailBaseReplyActions', None), ('emailui:emailMessage', None), ('emailui:emailMessageDetailDropdown', None), ('emailui:emailMessageEngagementSummary', None), ('emailui:emailMessageEngagementTab', None), ('emailui:emailMessageFromProfilePhoto', None), ('emailui:emailMessageHighlightsActionsContainer', None), ('emailui:emailMessageHighlightsStencil', None), ('emailui:emailMessageRecordHome', None), ('emailui:emailMessageReplyActions', None), ('emailui:emailRelatedToContainer', None), ('emailui:emailTemplateDataGrid', None), ('emailui:emailToolbarContainer', None), ('emailui:emailToolbarRelatedTo', None), ('emailui:enhancedEmailSetup', None), ('emailui:enhancedEmailSetupPage', None), ('emailui:externalEmailAuthenticator', None), ('emailui:formattedEmail', None), ('emailui:illustrationInlineText', None), ('emailui:integrationOrgSetup', None), ('emailui:listEmailCampaignDropDown', None), ('emailui:listEmailEngagementTab', None), ('emailui:listEmailHighlightsStencil', None), ('emailui:listEmailRecipientSuggestionDataProvider', None), ('emailui:listEmailRecordHome', None), ('emailui:listEmailRelatedListContainer', None), ('emailui:massEmailActionFooter', None), ('emailui:massEmailContentTab', None), ('emailui:massEmailList', None), ('emailui:massEmailReviewTab', None), ('emailui:massEmailTab', None), ('emailui:massEmailTabSet', None), ('emailui:oauthSplash', None), ('emailui:outboxActivity', None), ('emailui:outboxActivityTimeline', None), ('emailui:outputEmail', None), ('emailui:outputEmailPanel', None), ('emailui:outputRichText', None), ('emailui:outputRichTextWithoutIframe', None), ('emailui:pageError', None), ('emailui:pendingEmailActivity', None), ('emailui:pillContainer', None), ('emailui:pillContainerAutoComplete', None), ('emailui:placeholderEmailGenerator', None), ('emailui:placeholderLookup', None), ('emailui:previewModal', None), ('emailui:publisherAttachmentsMenuItem', None), ('emailui:publisherDiscardDraft', None), ('emailui:publisherPreview', None), ('emailui:publisherResetFields', None), ('emailui:publisherSpawnDocker', None), ('emailui:recipientAutocompleteOption', None), ('emailui:recipientListAutocomplete', None), ('emailui:recipientListAutocompleteOption', None), ('emailui:recipientSuggestionDataProvider', None), ('emailui:relatedOtherPeopleContainer', None), ('emailui:relatedPeople', None), ('emailui:relatedRecordContainer', None), ('emailui:resetDraftModal', None), ('emailui:resetDraftModalFooter', None), ('emailui:resetDraftModalHeader', None), ('emailui:salesEngagementRelatedList', None), ('emailui:salesforceFileWarningModal', None), ('emailui:salesforceInboxConnector', None), ('emailui:sendListEmailAction', None), ('emailui:warningModal', None), ('emailui:whatAndWhoOutput', None), ('embeddedService:activateEmbeddedServicePage', None), ('embeddedService:basePanel', None), ('embeddedService:deploymentInputLookup', None), ('embeddedService:deploymentInputLookupResult', None), ('embeddedService:deploymentList', None), ('embeddedService:embeddedServicePageTemplateDefault', None), ('embeddedService:embeddedServiceSetup', None), ('embeddedService:fieldServiceActionBar', None), ('embeddedService:fieldServiceAppointmentCard', None), ('embeddedService:fieldServicePageActivationSetupFlow', None), ('embeddedService:fieldServicePageActivationSetupFlowDeploymentSelection', None), ('embeddedService:fieldServicePageActivationSetupFlowNextSteps', None), ('embeddedService:fieldServicePageActivationSetupFlowStatusSelection', None), ('embeddedService:fieldServicePageActivationSetupFlowUpdateReview', None), ('embeddedService:fieldServiceScheduling', None), ('embeddedService:fieldServiceSelectionTabs', None), ('embeddedService:fieldServiceSidebarFeature', None), ('embeddedService:fieldServiceStateAppointmentDetail', None), ('embeddedService:fieldServiceStateAppointmentHome', None), ('embeddedService:fieldServiceStateAppointmentList', None), ('embeddedService:fieldServiceStateConfirmation', None), ('embeddedService:fieldServiceStateHome', None), ('embeddedService:fieldServiceStateSchedulingApexService', None), ('embeddedService:fieldServiceStateServiceResourceDetail', None), ('embeddedService:flowActionButton', None), ('embeddedService:flowInput', None), ('embeddedService:flowInputBaseCheckbox', None), ('embeddedService:flowInputCheckbox', None), ('embeddedService:flowInputCurrency', None), ('embeddedService:flowInputDate', None), ('embeddedService:flowInputDateTime', None), ('embeddedService:flowInputLongText', None), ('embeddedService:flowInputMultiCheckbox', None), ('embeddedService:flowInputMultiSelect', None), ('embeddedService:flowInputNumber', None), ('embeddedService:flowInputOptions', None), ('embeddedService:flowInputPassword', None), ('embeddedService:flowInputRadio', None), ('embeddedService:flowInputSelect', None), ('embeddedService:flowInputSimple', None), ('embeddedService:flowInputText', None), ('embeddedService:flowOutputDisplayText', None), ('embeddedService:flowSidebarFeature', None), ('embeddedService:flowStateViewer', None), ('embeddedService:icon', None), ('embeddedService:keyValuePairList', None), ('embeddedService:liveAgentQueuePosition', None), ('embeddedService:liveAgentSidebar', None), ('embeddedService:liveAgentSidebarFeature', None), ('embeddedService:liveAgentStateChat', None), ('embeddedService:liveAgentStateChatAction', None), ('embeddedService:liveAgentStateChatAvatar', None), ('embeddedService:liveAgentStateChatBubble', None), ('embeddedService:liveAgentStateChatButtonItem', None), ('embeddedService:liveAgentStateChatButtonMessage', None), ('embeddedService:liveAgentStateChatEventMessage', None), ('embeddedService:liveAgentStateChatFileTransferMessage', None), ('embeddedService:liveAgentStateChatHeader', None), ('embeddedService:liveAgentStateChatHeaderAvatars', None), ('embeddedService:liveAgentStateChatHeaderOption', None), ('embeddedService:liveAgentStateChatInputFooter', None), ('embeddedService:liveAgentStateChatItem', None), ('embeddedService:liveAgentStateChatMenuMessage', None), ('embeddedService:liveAgentStateChatMessage', None), ('embeddedService:liveAgentStateChatPlaintextMessageDefaultUI', None), ('embeddedService:liveAgentStateChatRichItem', None), ('embeddedService:liveAgentStateChatRichMessage', None), ('embeddedService:liveAgentStateChatTypingIndicator', None), ('embeddedService:liveAgentStateChatUnreadMessageBanner', None), ('embeddedService:liveAgentStateOfflineSupport', None), ('embeddedService:liveAgentStateOfflineSupportDefaultUI', None), ('embeddedService:liveAgentStatePostchat', None), ('embeddedService:liveAgentStatePrechat', None), ('embeddedService:liveAgentStatePrechatDefaultUI', None), ('embeddedService:liveAgentStateSelfService', None), ('embeddedService:liveAgentStateSelfServiceArticleList', None), ('embeddedService:liveAgentStateSelfServiceArticleListItem', None), ('embeddedService:liveAgentStateSelfServiceArticleView', None), ('embeddedService:liveAgentStateWaiting', None), ('embeddedService:liveAgentStateWaitingHeader', None), ('embeddedService:loadingBalls', None), ('embeddedService:noAssignedResourceView', None), ('embeddedService:prechatSetupFlow', None), ('embeddedService:prechatSetupFlowCustomizeFields', None), ('embeddedService:prechatSetupFlowDefaultFields', None), ('embeddedService:prechatSetupFlowRecordAssociations', None), ('embeddedService:prechatSetupFlowRecordAssociationsRecordTypePicklist', None), ('embeddedService:serviceAppointmentFullView', None), ('embeddedService:serviceAppointmentRecordCard', None), ('embeddedService:serviceAppointmentReducedView', None), ('embeddedService:serviceResourceFullView', None), ('embeddedService:serviceResourceRecordCard', None), ('embeddedService:serviceResourceReducedView', None), ('embeddedService:setupBaseCard', None), ('embeddedService:setupBrandingStencil', None), ('embeddedService:setupBrandingStencilDialog', None), ('embeddedService:setupBrandingStencilFieldServiceAppointmentDetail', None), ('embeddedService:setupBrandingStencilFieldServiceAppointmentList', None), ('embeddedService:setupBrandingStencilFieldServiceAppointmentListEmpty', None), ('embeddedService:setupBrandingStencilFieldServiceAuthenticationFailure', None), ('embeddedService:setupBrandingStencilFieldServiceBase', None), ('embeddedService:setupBrandingStencilFieldServiceConfirmation', None), ('embeddedService:setupBrandingStencilFieldServiceDialog', None), ('embeddedService:setupBrandingStencilFieldServiceDialogWithFooter', None), ('embeddedService:setupBrandingStencilFieldServiceHome', None), ('embeddedService:setupBrandingStencilFieldServiceResourceDetail', None), ('embeddedService:setupBrandingStencilFieldServiceScheduling', None), ('embeddedService:setupBrandingStencilFieldServiceSchedulingWithError', None), ('embeddedService:setupBrandingStencilLiveAgentBase', None), ('embeddedService:setupBrandingStencilLiveAgentChat', None), ('embeddedService:setupBrandingStencilLiveAgentChatBotActions', None), ('embeddedService:setupBrandingStencilLiveAgentChatEnded', None), ('embeddedService:setupBrandingStencilLiveAgentChatExtendedHeader', None), ('embeddedService:setupBrandingStencilLiveAgentChatFileUpload', None), ('embeddedService:setupBrandingStencilLiveAgentChatMinimized', None), ('embeddedService:setupBrandingStencilLiveAgentChatReconnecting', None), ('embeddedService:setupBrandingStencilLiveAgentChatTimeout', None), ('embeddedService:setupBrandingStencilLiveAgentChatTransfer', None), ('embeddedService:setupBrandingStencilLiveAgentChatTransferQueuePosition', None), ('embeddedService:setupBrandingStencilLiveAgentChatUnseenMessages', None), ('embeddedService:setupBrandingStencilLiveAgentChatWithAttachment', None), ('embeddedService:setupBrandingStencilLiveAgentOfflineSupportMinimized', None), ('embeddedService:setupBrandingStencilLiveAgentPostchat', None), ('embeddedService:setupBrandingStencilLiveAgentPrechat', None), ('embeddedService:setupBrandingStencilLiveAgentWaiting', None), ('embeddedService:setupBrandingStencilLiveAgentWaitingMinimized', None), ('embeddedService:setupBrandingStencilLiveAgentWaitingQueuePosition', None), ('embeddedService:setupBrandingStencilMinimized', None), ('embeddedService:setupBrandingStencilMinimizedStack', None), ('embeddedService:setupBrandingStencilRegion', None), ('embeddedService:setupBrandingStencilViewer', None), ('embeddedService:setupCard', None), ('embeddedService:setupCardActionButton', None), ('embeddedService:setupCardActionButtonToggle', None), ('embeddedService:setupCardBranding', None), ('embeddedService:setupCardCodeSnippet', None), ('embeddedService:setupCardFieldServiceAppointmentHome', None), ('embeddedService:setupCardLiveAgentCustomization', None), ('embeddedService:setupCardLiveAgentOfflineCases', None), ('embeddedService:setupCardPrechat', None), ('embeddedService:setupCardWarning', None), ('embeddedService:setupCustomizationPicklist', None), ('embeddedService:setupFlexipageList', None), ('embeddedService:setupFlowBranding', None), ('embeddedService:setupFlowCard', None), ('embeddedService:setupFlowCustomizeFieldsTable', None), ('embeddedService:setupFlowCustomizeFieldsTableAddFieldPopover', None), ('embeddedService:setupFlowCustomizeFieldsTableRow', None), ('embeddedService:setupFlowCustomizeFieldsTableRowIconButton', None), ('embeddedService:setupFlowCustomizeFieldsTableTooltip', None), ('embeddedService:setupFlowLiveAgentOfflineCases', None), ('embeddedService:setupFlowLiveAgentOfflineCasesConfiguration', None), ('embeddedService:setupFlowRecordTypePicklist', None), ('embeddedService:setupFlowTooltip', None), ('embeddedService:setupHeaderCard', None), ('embeddedService:setupHeaderCardSnapins', None), ('embeddedService:setupPage', None), ('embeddedService:setupPageCard', None), ('embeddedService:setupPageFieldService', None), ('embeddedService:setupPageFlows', None), ('embeddedService:setupPageLiveAgent', None), ('embeddedService:setupPageSnapins', None), ('embeddedService:setupPageViewer', None), ('embeddedService:setupPanel', None), ('embeddedService:setupPanelBranding', None), ('embeddedService:setupPanelBrandingColorPicker', None), ('embeddedService:setupPanelCard', None), ('embeddedService:setupPanelCodeSnippet', None), ('embeddedService:setupPanelFieldService', None), ('embeddedService:setupPanelFieldServiceAuthentication', None), ('embeddedService:setupPanelFieldServiceBranding', None), ('embeddedService:setupPanelFieldServiceFlows', None), ('embeddedService:setupPanelFlows', None), ('embeddedService:setupPanelFlowsBranding', None), ('embeddedService:setupPanelInput', None), ('embeddedService:setupPanelInputCheckbox', None), ('embeddedService:setupPanelInputJunctionRecordPicklist', None), ('embeddedService:setupPanelInputNumber', None), ('embeddedService:setupPanelInputPicklist', None), ('embeddedService:setupPanelInputText', None), ('embeddedService:setupPanelLiveAgent', None), ('embeddedService:setupPanelLiveAgentBranding', None), ('embeddedService:setupPanelSnapins', None), ('embeddedService:setupPanelTab', None), ('embeddedService:setupTab', None), ('embeddedService:setupTabCustomLabels', None), ('embeddedService:setupTabCustomLabelsHeader', None), ('embeddedService:setupTabCustomLabelsTableRow', None), ('embeddedService:setupTabCustomizeLabelsTable', None), ('embeddedService:setupTabFlow', None), ('embeddedService:setupTabFlowCard', None), ('embeddedService:setupTabFlowContents', None), ('embeddedService:sidebar', None), ('embeddedService:sidebarBaseFeature', None), ('embeddedService:sidebarButton', None), ('embeddedService:sidebarDialogState', None), ('embeddedService:sidebarExtendedHeader', None), ('embeddedService:sidebarFeature', None), ('embeddedService:sidebarForm', None), ('embeddedService:sidebarFormField', None), ('embeddedService:sidebarHeader', None), ('embeddedService:sidebarMinimizedContainer', None), ('embeddedService:sidebarMinimizedDefaultUI', None), ('embeddedService:sidebarScriptLoader', None), ('embeddedService:sidebarState', None), ('embeddedService:verticalTab', None), ('embeddedService:verticalTabsEditor', None), ('embeddedService:verticalTabset', None), ('environmenthub:connectOrganization', None), ('environmenthub:createOrganization', None), ('environmenthub:displayNameRenderer', None), ('environmenthub:errorHandlingDisplay', None), ('environmenthub:generateModal', None), ('environmenthub:isFedIdSsoMatchAllowedEditRenderer', None), ('environmenthub:isFedIdSsoMatchAllowedRenderer', None), ('environmenthub:logIntoOrganization', None), ('environmenthub:modalButtons', None), ('environmenthub:serviceProviderRenderer', None), ('environmenthub:ssoMappedUsersRenderer', None), ('environmenthub:ssoStatusFilter', None), ('environmenthub:ssoStatusFilterEdit', None), ('environmenthub:ssoUserMapping', None), ('environmenthub:ssoUsernameFormulaEditRenderer', None), ('environmenthub:ssoUsernameFormulaRenderer', None), ('environmenthub:toggleSso', None), ('environmenthub:validatingInput', None), ('environmenthub:validatingMyDomainInput', None), ('environmenthub:validatingTemplateIdInput', None), ('environmenthub:validatingUserNameInput', None), ('externalServicesSetup:actionExplorer', None), ('externalServicesSetup:actionLink', None), ('externalServicesSetup:actionMenuItem', None), ('externalServicesSetup:createLsf', None), ('externalServicesSetup:detailPage', None), ('externalServicesSetup:externalServicesV2Toggle', None), ('externalServicesSetup:listPage', None), ('externalServicesSetup:milestoneRegistration', None), ('externalServicesSetup:milestoneSplashPage', None), ('externalServicesSetup:milestoneSyncActions', None), ('externalServicesSetup:setupComponent', None), ('flexipage:accordion', None), ('flexipage:accordionDesignInfo', None), ('flexipage:accordionDesignSubstitute', None), ('flexipage:accordionSection', None), ('flexipage:actionBar', None), ('flexipage:activeChild', None), ('flexipage:appHomeTemplateHeaderThreeColumns', None), ('flexipage:appHomeTemplateHeaderTwoColumns', None), ('flexipage:appHomeTemplateHeaderTwoColumnsEqualWidth', None), ('flexipage:appHomeTemplateHeaderTwoColumnsLeftSidebar', None), ('flexipage:appHomeTemplateThreeColumns', None), ('flexipage:appHomeTemplateTwoColumns', None), ('flexipage:appHomeTemplateTwoColumnsStacked', None), ('flexipage:backgroundComponentsWrapper', None), ('flexipage:baseFlexipageWithGlobalPublisherContext', None), ('flexipage:baseRecordHomeTemplateDesktop', None), ('flexipage:card', None), ('flexipage:clientError', None), ('flexipage:component', None), ('flexipage:component3', None), ('flexipage:componentDecorator', None), ('flexipage:defaultAppHomeTemplate', None), ('flexipage:defaultObjectHomeTemplate', None), ('flexipage:filterListCard', None), ('flexipage:filterListCardDesignInfo', None), ('flexipage:filterListCardDesignSubstitute', None), ('flexipage:inlineExpandableContainer', None), ('flexipage:listRecord', None), ('flexipage:objectHomeTemplateThreeColumns', None), ('flexipage:objectHomeTemplateTwoColumns', None), ('flexipage:objectHomeTemplateTwoColumnsStacked', None), ('flexipage:page', None), ('flexipage:pageDeprecated', None), ('flexipage:recentItemStencil', None), ('flexipage:recentItemTemplate', None), ('flexipage:recentItems', None), ('flexipage:recentItemsDesignSubstitute', None), ('flexipage:recordHomeLeftSidebarTemplateDesktop', None), ('flexipage:recordHomePinnedHeaderLeftSidebarTemplateDesktop', None), ('flexipage:recordHomePinnedHeaderLeftSidebarTwoColTemplateDesktop', None), ('flexipage:recordHomePinnedHeaderTemplateDesktop', None), ('flexipage:recordHomePinnedLeftRightSidebarsTemplateDesktop', None), ('flexipage:recordHomePinnedLeftSidebarTemplateDesktop', None), ('flexipage:recordHomePinnedLeftSidebarTwoColTemplateDesktop', None), ('flexipage:recordHomeSimpleViewTemplate', None), ('flexipage:recordHomeSingleColNoHeaderTemplateDesktop', None), ('flexipage:recordHomeSingleColTemplateDesktop', None), ('flexipage:recordHomeTemplateDesktop', None), ('flexipage:recordHomeThreeColHeaderTemplateDesktop', None), ('flexipage:recordHomeThreeColTemplateDesktop', None), ('flexipage:recordHomeTwoColEqualHeaderTemplateDesktop', None), ('flexipage:recordHomeWithSubheaderLeftSidebarTemplateDesktop', None), ('flexipage:recordHomeWithSubheaderTemplateDesktop', None), ('flexipage:reportChart', None), ('flexipage:richText', None), ('flexipage:tab', None), ('flexipage:tabset', None), ('flexipage:tempDepend', None), ('flexipage:visualforcePage', None), ('flexipageEditor:activateActionOverrideAppAssignmentDataProvider', None), ('flexipageEditor:activateActionOverrideAppAssignmentStep', None), ('flexipageEditor:activateActionOverrideAppFormFactorSelectionStep', None), ('flexipageEditor:activateActionOverrideAppFormFactorSelectionStepDataProvider', None), ('flexipageEditor:activateActionOverrideFormFactorSelectionStep', None), ('flexipageEditor:activateActionOverrideModeSelectionStep', None), ('flexipageEditor:activateActionOverrideRemoveAppAssignmentWithFormFactorsStep', None), ('flexipageEditor:activateActionOverrideReviewAssignmentDataProvider', None), ('flexipageEditor:activateActionOverrideReviewAssignmentStep', None), ('flexipageEditor:activateActionOverrideReviewAssignmentStepWithFormFactor', None), ('flexipageEditor:activateActionOverrideReviewDefaultAssignmentStep', None), ('flexipageEditor:activateActionOverrideReviewDefaultWithFormFactorAssignmentStep', None), ('flexipageEditor:activateActionOverrideSelectedAppList', None), ('flexipageEditor:activateActionOverrideSelectedAppListWithFormFactor', None), ('flexipageEditor:activateAppPage', None), ('flexipageEditor:activateAppPageMenu', None), ('flexipageEditor:activateAppPageMultipleTabs', None), ('flexipageEditor:activateAppPageSettings', None), ('flexipageEditor:activateAppRecordTypeProfileFormFactorReviewStep', None), ('flexipageEditor:activateAppRecordTypeProfileReviewStep', None), ('flexipageEditor:activateAppRecordTypeProfileReviewStepDataProvider', None), ('flexipageEditor:activateAssignmentListHeaderActions', None), ('flexipageEditor:activateContainer', None), ('flexipageEditor:activateContent', None), ('flexipageEditor:activateOnFirstSaveDialog', None), ('flexipageEditor:activateProfileOverrideProfileStep', None), ('flexipageEditor:activateProfileOverrideProfileStepDataProvider', None), ('flexipageEditor:activateProfileOverrideRecordTypeStep', None), ('flexipageEditor:activateProfileOverrideRecordTypeStepDataProvider', None), ('flexipageEditor:activateRecordHomeHierarchy', None), ('flexipageEditor:activateRecordPage', None), ('flexipageEditor:activateSelectedAppRecordTypeProfileFormFactorList', None), ('flexipageEditor:activateSelectedAppRecordTypeProfileList', None), ('flexipageEditor:activateSelectedAppRecordTypeProfileListDataProvider', None), ('flexipageEditor:activateTabMenuIcon', None), ('flexipageEditor:activateTabMenus', None), ('flexipageEditor:appBuilderExperience', None), ('flexipageEditor:appExchangeModal', None), ('flexipageEditor:appPageCanvasConfig', None), ('flexipageEditor:appSettings', None), ('flexipageEditor:appSettingsAppNavigation', None), ('flexipageEditor:appSettingsAppNavigationContainer', None), ('flexipageEditor:appSettingsDetails', None), ('flexipageEditor:appSettingsDetailsContainer', None), ('flexipageEditor:appSettingsEditor', None), ('flexipageEditor:appSettingsHeader', None), ('flexipageEditor:appSettingsItem', None), ('flexipageEditor:appSettingsNavigationItems', None), ('flexipageEditor:appSettingsNavigationItemsContainer', None), ('flexipageEditor:appSettingsNavigationRules', None), ('flexipageEditor:appSettingsNavigationRulesContainer', None), ('flexipageEditor:appSettingsOptimizer', None), ('flexipageEditor:appSettingsUserProfiles', None), ('flexipageEditor:appSettingsUserProfilesContainer', None), ('flexipageEditor:appSettingsUtilityBarContainer', None), ('flexipageEditor:assignmentLookup', None), ('flexipageEditor:assignmentVisibilityBanner', None), ('flexipageEditor:availableNavItemsDataProvider', None), ('flexipageEditor:baseBuilder', None), ('flexipageEditor:baseFlexipageEditorCanvasConfig', None), ('flexipageEditor:baseFormInfo', None), ('flexipageEditor:baseInvalidComponent', None), ('flexipageEditor:breadcrumb', None), ('flexipageEditor:canvas', None), ('flexipageEditor:component', None), ('flexipageEditor:componentPlaceholder', None), ('flexipageEditor:confirm', None), ('flexipageEditor:consoleTabset', None), ('flexipageEditor:container', None), ('flexipageEditor:customMessagePlaceholder', None), ('flexipageEditor:debugDialog', None), ('flexipageEditor:designLayout', None), ('flexipageEditor:editor', None), ('flexipageEditor:element', None), ('flexipageEditor:errorComponent', None), ('flexipageEditor:errorListFlyout', None), ('flexipageEditor:errorListFlyoutBody', None), ('flexipageEditor:expressionsContextDataProvider', None), ('flexipageEditor:flexipageList', None), ('flexipageEditor:flexipageListDataProvider', None), ('flexipageEditor:formDetailEditor', None), ('flexipageEditor:formDetailPanelSectionEditInfo', None), ('flexipageEditor:formDetailPanelSectionMessageInfo', None), ('flexipageEditor:formEditBaseModal', None), ('flexipageEditor:formFactorSelectionActionCell', None), ('flexipageEditor:formItem', None), ('flexipageEditor:formNameEditor', None), ('flexipageEditor:formNewSectionModal', None), ('flexipageEditor:formOrderEditor', None), ('flexipageEditor:formPaletteItemsProvider', None), ('flexipageEditor:formPaletteSectionItemRow', None), ('flexipageEditor:formSection', None), ('flexipageEditor:formSectionColumn', None), ('flexipageEditor:formSectionView', None), ('flexipageEditor:formSectionsEditor', None), ('flexipageEditor:formsPalette', None), ('flexipageEditor:header', None), ('flexipageEditor:helpDropdown', None), ('flexipageEditor:homePageCanvasConfig', None), ('flexipageEditor:keyboardHelpDialog', None), ('flexipageEditor:lastModifiedByOn', None), ('flexipageEditor:leftPanel', None), ('flexipageEditor:mailAppCanvasConfig', None), ('flexipageEditor:menu', None), ('flexipageEditor:menuItem', None), ('flexipageEditor:menuTrigger', None), ('flexipageEditor:message', None), ('flexipageEditor:middlePanel', None), ('flexipageEditor:migrationWizard', None), ('flexipageEditor:migrationWizardDescription', None), ('flexipageEditor:migrationWizardDifferences', None), ('flexipageEditor:migrationWizardExplanation', None), ('flexipageEditor:migrationWizardFormInfo', None), ('flexipageEditor:migrationWizardLayoutProvider', None), ('flexipageEditor:migrationWizardLayoutSource', None), ('flexipageEditor:multiselectEditorModal', None), ('flexipageEditor:newPageDialog', None), ('flexipageEditor:newPageWizardPageTypeStep', None), ('flexipageEditor:newPageWizardPropertiesStep', None), ('flexipageEditor:newPageWizardTemplateStep', None), ('flexipageEditor:noDataPlaceholder', None), ('flexipageEditor:noRecordAccessPlaceholder', None), ('flexipageEditor:noUserAccessPlaceholder', None), ('flexipageEditor:node', None), ('flexipageEditor:objectManagerAppDefaultList', None), ('flexipageEditor:objectManagerAppDefaultListDataProvider', None), ('flexipageEditor:objectManagerAppDefaultListWithoutFormFactor', None), ('flexipageEditor:objectManagerAppRecTypeProfileAssignmentList', None), ('flexipageEditor:objectManagerAppRecTypeProfileAssignmentListDataProvider', None), ('flexipageEditor:objectManagerAppRecTypeProfileAssignmentListWithoutFormFactor', None), ('flexipageEditor:objectManagerRecordPageAssignmentList', None), ('flexipageEditor:openPageModal', None), ('flexipageEditor:openPageModalFooter', None), ('flexipageEditor:orgDefaultPageAssignment', None), ('flexipageEditor:page', None), ('flexipageEditor:pageBuilder', None), ('flexipageEditor:pageListing', None), ('flexipageEditor:pageSwitcherMenu', None), ('flexipageEditor:paletteMyDomainMessage', None), ('flexipageEditor:picker', None), ('flexipageEditor:pickerItem', None), ('flexipageEditor:pickerSection', None), ('flexipageEditor:readOnlyBanner', None), ('flexipageEditor:recordHomeCanvasConfig', None), ('flexipageEditor:recordPageAssignments', None), ('flexipageEditor:region', None), ('flexipageEditor:removeSelectedAppRecordTypeProfileFormFactorStep', None), ('flexipageEditor:removeSelectedAppRecordTypeProfileStep', None), ('flexipageEditor:resolvedPageInfo', None), ('flexipageEditor:rightPanel', None), ('flexipageEditor:routeCalculator', None), ('flexipageEditor:routeCalculatorDataProvider', None), ('flexipageEditor:routeCalculatorPickList', None), ('flexipageEditor:routeCalculatorTester', None), ('flexipageEditor:ruleDynamicTypeEditor', None), ('flexipageEditor:ruleLHSRecordFieldDataProvider', None), ('flexipageEditor:ruleLHSRelatedFieldDataProvider', None), ('flexipageEditor:rulePropertyEditorProvider', None), ('flexipageEditor:setupDetailPageLink', None), ('flexipageEditor:surfaceTemplate', None), ('flexipageEditor:templateEditor', None), ('flexipageEditor:templateMyDomainMessage', None), ('flexipageEditor:templateSwitchingRegionMappingRow', None), ('flexipageEditor:templateSwitchingWizard', None), ('flexipageEditor:templateSwitchingWizardRegionMapping', None), ('flexipageEditor:templateSwitchingWizardSelectTemplate', None), ('flexipageEditor:topToolbar', None), ('flexipageEditor:unsupportedFormFactorComponent', None), ('flexipageEditor:warningComponent', None), ('flexipageEditor:workspace', None), ('flowruntime:actionBar', None), ('flowruntime:actionBase', None), ('flowruntime:actionButton', None), ('flowruntime:address', None), ('flowruntime:body', None), ('flowruntime:cancelButton', None), ('flowruntime:checkboxInput', None), ('flowruntime:choiceUserInput', None), ('flowruntime:currencyInput', None), ('flowruntime:dateInput', None), ('flowruntime:dateTimeInput', None), ('flowruntime:debug', None), ('flowruntime:debugInput', None), ('flowruntime:debugOutput', None), ('flowruntime:dependentPicklists', None), ('flowruntime:displayText', None), ('flowruntime:dropDownInput', None), ('flowruntime:email', None), ('flowruntime:errorText', None), ('flowruntime:flowRuntime', None), ('flowruntime:flowRuntimeForFlexiPage', None), ('flowruntime:flowRuntimeForQuickAction', None), ('flowruntime:flowRuntimeForS1', None), ('flowruntime:flowRuntimeForS1Header', None), ('flowruntime:flowRuntimeHeaderForModal', None), ('flowruntime:flowruntimeForModal', None), ('flowruntime:header', None), ('flowruntime:helpIcon', None), ('flowruntime:helpText', None), ('flowruntime:image', None), ('flowruntime:inputWrapper', None), ('flowruntime:interview', None), ('flowruntime:interviewDesignInfo', None), ('flowruntime:interviewDesignSubstitute', None), ('flowruntime:longTextInput', None), ('flowruntime:modalManager', None), ('flowruntime:multiCheckbox', None), ('flowruntime:name', None), ('flowruntime:numberInput', None), ('flowruntime:oneColumn', None), ('flowruntime:passwordInput', None), ('flowruntime:pauseFinalizedMessage', None), ('flowruntime:pauseScreen', None), ('flowruntime:pausedInterviewCard', None), ('flowruntime:pausedInterviewCardRow', None), ('flowruntime:phone', None), ('flowruntime:picklistInput', None), ('flowruntime:radioButtonInput', None), ('flowruntime:richTextWrapper', None), ('flowruntime:runtime', None), ('flowruntime:slider', None), ('flowruntime:spinner', None), ('flowruntime:tempDepend', None), ('flowruntime:textInput', None), ('flowruntime:toggle', None), ('flowruntime:twoColumn', None), ('flowruntime:url', None), ('flowruntime:visibilityWrapper', None), ('folder:actionBar', None), ('folder:analyticsIntegration', None), ('folder:baseIntegration', None), ('folder:breadcrumb', None), ('folder:breadcrumbItem', None), ('folder:configRetriever', None), ('folder:folderActionProcessor', None), ('folder:forceActionProxy', None), ('folder:listView', None), ('folder:listViewDataProvider', None), ('folder:navigator', None), ('folder:pickerDialog', None), ('folder:pickerDialogFooter', None), ('folder:pickerDialogPanel', None), ('folder:searchResult', None), ('folder:selectColumnPanelFooter', None), ('folder:sidebar', None), ('folder:sidebarItem', None), ('force:abstractBorderLayout', None), ('force:abstractBorderLayoutDataProvider', None), ('force:abstractComponent', None), ('force:access', None), ('force:action', None), ('force:actionAPILoader', None), ('force:actionButton', None), ('force:actionEventLink', None), ('force:actionIconMenuItem', None), ('force:actionLink', None), ('force:actionMenuItem', None), ('force:actionOverrideCallback', None), ('force:actionRow', None), ('force:actionsContainer', None), ('force:actionsDropDownMenuList', None), ('force:actionsText', None), ('force:addressAutocomplete', None), ('force:addressAutocompleteOption', None), ('force:addressCompletionDataProvider', None), ('force:alohaPageTemplate', None), ('force:alternateIdProvider', None), ('force:apiBridgeLoader', None), ('force:apiVersion', None), ('force:appMessageManager', None), ('force:asyncCarousel', None), ('force:asyncCarouselIndicator', None), ('force:asyncCarouselPage', None), ('force:badgeButton', None), ('force:baseCard', None), ('force:baseHome', None), ('force:baseListView', None), ('force:baseLookupCardTemplate', None), ('force:borderLayoutPageHost', None), ('force:brandBand', None), ('force:brandBandPageContainer', None), ('force:breadCrumbItem', None), ('force:breadCrumbs', None), ('force:buttonBarDeprecated', None), ('force:buyerAccountDetailPanelWrapper', None), ('force:calendar', None), ('force:calendarButtonIconRefresh', None), ('force:calendarDay', None), ('force:calendarDayHeader', None), ('force:calendarEvent', None), ('force:calendarEventAllDay', None), ('force:calendarEventIcons', None), ('force:calendarEventPopup', None), ('force:calendarEventTimed', None), ('force:calendarExternalEventPopup', None), ('force:calendarExternalEventPreview', None), ('force:calendarHeader', None), ('force:calendarItemForPopup', None), ('force:calendarItemListPopup', None), ('force:calendarMonthView', None), ('force:calendarMonthWeek', None), ('force:calendarSidebar', None), ('force:calendarTrough', None), ('force:callHandler', None), ('force:canvasApp', None), ('force:canvasAppCard', None), ('force:canvasAppTemplate', None), ('force:card', None), ('force:changeOwnerContent', None), ('force:changeRecordType', None), ('force:changeRecordTypeFooter', None), ('force:chartDataProvider', None), ('force:colorPicker', None), ('force:colorPickerTrigger', None), ('force:componentDeveloper', None), ('force:componentDeveloperInstance', None), ('force:componentDeveloperManager', None), ('force:componentSpinner', None), ('force:componentsText', None), ('force:confirmDialog', None), ('force:confirmationWindow', None), ('force:consoleActionOverrideCallback', None), ('force:containerMediator', None), ('force:copyToClipboardButton', None), ('force:createAnchorPanel', None), ('force:createLinkAdvancedPanel', None), ('force:createLinkPanel', None), ('force:createMediaEmbedPanel', None), ('force:createRecordTypeChecker', None), ('force:createSmartLinkPanel', None), ('force:createTablePanel', None), ('force:dashboardHome', None), ('force:dataManager', None), ('force:dataProviderLoadErrorMessage', None), ('force:dedupeManager', None), ('force:defenseHook', None), ('force:deferredDropDownAction', None), ('force:densityDiscoveryDockedContent', None), ('force:dependencyManagerAPI', None), ('force:dependentFieldContainer', None), ('force:detailPanel', None), ('force:detailPanelDesktop', None), ('force:detailPanelDesktop2', None), ('force:detailPanelEventBroker', None), ('force:detailPanelMobile', None), ('force:detailViewPanelDesignInfo', None), ('force:detailViewPanelDesignInfoDialogContent', None), ('force:dirtyStateManager', None), ('force:dockableActionRunnable', None), ('force:dockingPanel', None), ('force:dockingPanelOverflow', None), ('force:dockingPanelOverflowItem', None), ('force:dotsSpinner', None), ('force:downloadHandler', None), ('force:duelingLists', None), ('force:duplicateList', None), ('force:duplicateListDataManager', None), ('force:duplicateListStencil', None), ('force:duplicateTabs', None), ('force:dynamicLabel', None), ('force:dynamicLabelProvider', None), ('force:eclairChart', None), ('force:eclairChartListView', None), ('force:emailHandler', None), ('force:emailTemplateInfo', None), ('force:embeddedTemplate', None), ('force:empApi', None), ('force:empty', None), ('force:entityBannerPhotoDetail', None), ('force:entityIcon', None), ('force:entityShare', None), ('force:eventLink', None), ('force:featureDiscoveryDocked', None), ('force:featureDiscoveryDockedContent', None), ('force:fieldDependencyManager', None), ('force:fieldMapping', None), ('force:fieldMappingTabs', None), ('force:fileUpload', None), ('force:filterCriteria', None), ('force:filterCriteriaBlockSectionRow', None), ('force:filterCriteriaDataProvider', None), ('force:filterCriteriaInputField', None), ('force:filterCriteriaMenuItem', None), ('force:filterDataProvider', None), ('force:filterInfiniteScrollDataProvider', None), ('force:filterList', None), ('force:filterListDeprecated', None), ('force:filterMenu', None), ('force:filterMenuItem', None), ('force:filterPanel', None), ('force:filterPanelBooleanCriterionEditor', None), ('force:filterPanelCallout', None), ('force:filterPanelDateCriterionEditor', None), ('force:filterPanelFieldSelector', None), ('force:filterPanelFilterCriterion', None), ('force:filterPanelFilterEditor', None), ('force:filterPanelMultiPicklistCriterionEditor', None), ('force:filterPanelScope', None), ('force:filterPanelScopeEditor', None), ('force:filterPanelTextFieldEditor', None), ('force:fingerprint', None), ('force:fireEventAfterLogging', None), ('force:formDetailPanelSection', None), ('force:formDetailPanelSectionDesignSubstitute', None), ('force:headerButton', None), ('force:headerButtonDeprecated', None), ('force:headerLayout', None), ('force:headerMenuTrigger', None), ('force:heightMemoizer', None), ('force:highlightText', None), ('force:highlights', None), ('force:highlightsActionWrapper', None), ('force:highlightsAttributeContainer', None), ('force:highlightsDesktopListRecordItem', None), ('force:highlightsPanel', None), ('force:highlightsPlaceholder', None), ('force:highlightsPreviewStencil', None), ('force:highlightsStencil', None), ('force:highlightsStencilDesktop', None), ('force:highlightsStencilDesktopVertical', None), ('force:hostConfig', None), ('force:hoverPanel', None), ('force:hoverPrototype', None), ('force:hoverPrototypeManager', None), ('force:icon', None), ('force:iconDeprecated', None), ('force:iconTriggerLink', None), ('force:imageRelatedListStencil', None), ('force:infiniteDuelingList', None), ('force:infiniteDuelingListAvailableItems', None), ('force:infiniteDuelingListSelectableItems', None), ('force:infiniteDuelingListSelectedItems', None), ('force:inlineEdit', None), ('force:inlineEditCell', None), ('force:inlineEditComponent', None), ('force:inlineEditGrid', None), ('force:inlineEditGridStencil', None), ('force:inlineEditKeyNavCell', None), ('force:inlineEditPanelBody', None), ('force:inlineEditPanelFooter', None), ('force:inlinePulsingSpinner', None), ('force:inlineRotatingSpinner', None), ('force:inlineSpinner', None), ('force:inputAddress', None), ('force:inputCompoundField', None), ('force:inputField', None), ('force:inputFieldInternal', None), ('force:inputLocation', None), ('force:inputLookup', None), ('force:inputLookupManager', None), ('force:inputLookupPanel', None), ('force:inputLookupPanelItem', None), ('force:inputLookupPanelSelector', None), ('force:inputLookupTrigger', None), ('force:inputMultiPicklist', None), ('force:inputName', None), ('force:inputPicklist', None), ('force:inputRadio', None), ('force:inputRichText', None), ('force:inputTextarea', None), ('force:inputTime', None), ('force:inputURL', None), ('force:ldsPushInvalidationManager', None), ('force:linkCard', None), ('force:linkTemplate', None), ('force:list', None), ('force:listLoadingTemplate', None), ('force:listRecord', None), ('force:listRecordItem', None), ('force:listSorterDataProvider', None), ('force:listTemplate', None), ('force:listView', None), ('force:listViewDataManager', None), ('force:listViewDataManagerAdapter', None), ('force:listViewEntityShareDataProvider', None), ('force:listViewManager', None), ('force:listViewManagerDisplayActionConfiguration', None), ('force:listViewManagerDisplayDataConfiguration', None), ('force:listViewManagerDisplayDependencyConfiguration', None), ('force:listViewManagerDisplayDependencyItem', None), ('force:listViewManagerDisplayInlineEditConfiguration', None), ('force:listViewManagerDisplaySwitcher', None), ('force:listViewManagerDisplayViewConfiguration', None), ('force:listViewManagerDisplaysConfiguration', None), ('force:listViewManagerGrid', None), ('force:listViewManagerGridColumnHeaderConfiguration', None), ('force:listViewManagerGridColumnHeaderMenu', None), ('force:listViewManagerGridFooter', None), ('force:listViewManagerGridWrapText', None), ('force:listViewManagerHeader', None), ('force:listViewManagerLayoutHandlingConfiguration', None), ('force:listViewManagerNavigateToObjectHome', None), ('force:listViewManagerPinnedListConfiguration', None), ('force:listViewManagerPrimaryDisplayManager', None), ('force:listViewManagerSecondaryDisplayManager', None), ('force:listViewManagerSettingsMenuConfiguration', None), ('force:listViewManagerSettingsMenuOptionConfiguration', None), ('force:listViewManagerSplitViewList', None), ('force:listViewManagerStateManager', None), ('force:listViewPicker', None), ('force:listViewPickerAutocomplete', None), ('force:listViewPickerAutocompleteList', None), ('force:listViewPickerAutocompleteOption', None), ('force:listViewPickerDataProvider', None), ('force:listViewPlaceholder', None), ('force:listViewSettingsDetail', None), ('force:listViewSettingsMenu', None), ('force:listViewStatusInfo', None), ('force:listViewStencil', None), ('force:listviewChartsSetupPage', None), ('force:loaderBar', None), ('force:loading', None), ('force:loadingLaser', None), ('force:localRecordChangeObserver', None), ('force:logoutHandler', None), ('force:lookupCard', None), ('force:lookupCardTemplate', None), ('force:lookupCreateActionManager', None), ('force:managePortalUserPermSets', None), ('force:mask', None), ('force:maskOutputText', None), ('force:massChangeOwner', None), ('force:massChangeStatus', None), ('force:massErrorsManager', None), ('force:massErrorsPanel', None), ('force:massQuickActionRunnable', None), ('force:menuTriggerIcon', None), ('force:message', None), ('force:mobileActionModal', None), ('force:mobileOverlay', None), ('force:modal', None), ('force:modalActionContainer', None), ('force:modalListViewFooterAdapter', None), ('force:modalSpinner', None), ('force:mruDataProvider', None), ('force:multiAdd', None), ('force:multiAddDataManagerSwitcher', None), ('force:multiAddDefaultNextAction', None), ('force:multiAddMultiEditBackAction', None), ('force:multiAddMultiEditHeader', None), ('force:multiAddMultiEditNextAction', None), ('force:multiAddSearch', None), ('force:multiAddUsingLVM', None), ('force:multiEdit', None), ('force:multiEditDataManager', None), ('force:multiEditDataManagerConverter', None), ('force:multiEditDefaultNextAction', None), ('force:multiTemplateVirtualList', None), ('force:navigateConfirmation', None), ('force:noRowActions', None), ('force:notesBaseListViewNonGrid', None), ('force:notesObjectHomeListViewNonGrid', None), ('force:objectHome', None), ('force:objectHomeChart', None), ('force:objectHomeDataProvider', None), ('force:objectHomeDesktop', None), ('force:objectHomePipelineView', None), ('force:outputAddress', None), ('force:outputAddressText', None), ('force:outputAnimatedNumber', None), ('force:outputAnytype', None), ('force:outputCurrency', None), ('force:outputCustomLinkUrl', None), ('force:outputEventDateTime', None), ('force:outputField', None), ('force:outputFieldInternal', None), ('force:outputFile', None), ('force:outputFormulaHtml', None), ('force:outputImage', None), ('force:outputLocation', None), ('force:outputLookup', None), ('force:outputLookupText', None), ('force:outputLookupWithPreview', None), ('force:outputModStamp', None), ('force:outputModStampWithPreview', None), ('force:outputName', None), ('force:outputNameForUser', None), ('force:outputNoteorAttachment', None), ('force:outputOwnerIdLookupWithChangeLink', None), ('force:outputOwnerLookup', None), ('force:outputPhone', None), ('force:outputPicklist', None), ('force:outputPlainText', None), ('force:outputRecordType', None), ('force:outputRecordTypeWithoutChangeLink', None), ('force:outputRichText', None), ('force:outputScheduleDateField', None), ('force:outputTime', None), ('force:outputURL', None), ('force:pageBlock', None), ('force:pageBlockItem', None), ('force:pageBlockItemEdit', None), ('force:pageBlockItemView', None), ('force:pageBlockSection', None), ('force:pageBlockSectionEdit', None), ('force:pageBlockSectionRow', None), ('force:pageBlockSectionView', None), ('force:pageError', None), ('force:pageInfo', None), ('force:panelCallbackAction', None), ('force:panelOverlay', None), ('force:panelSlider', None), ('force:personalSettingsPageRouter', None), ('force:photoCrop', None), ('force:photoCropDraggable', None), ('force:placeholder', None), ('force:pluginButton', None), ('force:pluginForm', None), ('force:pluginFormItem', None), ('force:pluginFormItemList', None), ('force:pluginItem', None), ('force:pluginItemList', None), ('force:pluginListDataProvider', None), ('force:popOutManagerAura', None), ('force:popover', None), ('force:previewPanel', None), ('force:publisherQuickActionCollapser', None), ('force:quickActionHandler', None), ('force:quickActionLayout', None), ('force:quickActionManager', None), ('force:quickActionRecord', None), ('force:quickActionRecordCollection', None), ('force:quickActionRunnable', None), ('force:quickActionWrapper', None), ('force:quickEdit', None), ('force:quickEditField', None), ('force:quill', None), ('force:quillButtonLink', None), ('force:quillInsertImageButton', None), ('force:readOnlyRelatedListStencil', None), ('force:record', None), ('force:recordCollection', None), ('force:recordContentPlugin', None), ('force:recordData', None), ('force:recordEdit', None), ('force:recordEditActions', None), ('force:recordGlobalValueProvider', None), ('force:recordHome', None), ('force:recordHomeInContext', None), ('force:recordLandingPage', None), ('force:recordLayout', None), ('force:recordLayoutBroker', None), ('force:recordLayoutList', None), ('force:recordLayoutRaptorContainerTest', None), ('force:recordLayoutTemplate', None), ('force:recordList', None), ('force:recordListDummyDataProvider', None), ('force:recordMergeLibraryTester', None), ('force:recordPageUserSettings', None), ('force:recordPageUserSettingsPage', None), ('force:recordPreviewItem', None), ('force:recordPreviewTemplateDesktop', None), ('force:recordRunnable', None), ('force:recordView', None), ('force:recordsComparison', None), ('force:recordsComparisonTemplate', None), ('force:regionHidden', None), ('force:relatedCardContainer', None), ('force:relatedContentContainer', None), ('force:relatedList', None), ('force:relatedListAdvancedGridInfo', None), ('force:relatedListAdvancedGridPrompt', None), ('force:relatedListCard', None), ('force:relatedListCardDesktop', None), ('force:relatedListContainer', None), ('force:relatedListContainerDataProvider', None), ('force:relatedListContainerDesignInfo', None), ('force:relatedListContainerDesignInfoDialogContent', None), ('force:relatedListContainerMetadataProvider', None), ('force:relatedListDataProvider', None), ('force:relatedListDesktop', None), ('force:relatedListHeader', None), ('force:relatedListHover', None), ('force:relatedListPreview', None), ('force:relatedListPreviewAdvancedGrid', None), ('force:relatedListPreviewDataProvider', None), ('force:relatedListPreviewGrid', None), ('force:relatedListPreviewRecordLayoutList', None), ('force:relatedListPreviewTransitionList', None), ('force:relatedListQuickLinksContainer', None), ('force:relatedListQuickLinksContainerDataProvider', None), ('force:relatedListQuickLinksContainerDesignInfo', None), ('force:relatedListRowsToDisplayEditor', None), ('force:relatedListShowActionBarEditor', None), ('force:relatedListSingleContainer', None), ('force:relatedListSingleContainerDesignInfo', None), ('force:relatedListSingleContainerDesignSubstitute', None), ('force:relatedListView', None), ('force:relatedListViewDataManager', None), ('force:relatedListViewManager', None), ('force:relatedListVisibilityEditor', None), ('force:relatedListsDataCollection', None), ('force:requires', None), ('force:retryButton', None), ('force:retryPanel', None), ('force:routingRetryPanel', None), ('force:rrhVersionIndicator', None), ('force:saveOption', None), ('force:scopedSldsTemplate', None), ('force:scrollableContext', None), ('force:scrollablePanel', None), ('force:searchFilterHeader', None), ('force:selectableListDataProvider', None), ('force:selectableListDataProviderSwitcher', None), ('force:selectableListView', None), ('force:selectableListViewHeader', None), ('force:selectableListViewSelectionColumn', None), ('force:selectableTargetAdapter', None), ('force:setupRouter', None), ('force:showSelectedListDataProvider', None), ('force:simpleRecordHomeActivitiesToggle', None), ('force:simpleRecordHomePageAssignments', None), ('force:simpleRecordHomePrompt', None), ('force:simpleRecordHomeSetupPage', None), ('force:simpleRecordHomeToggle', None), ('force:singularPluralMany', None), ('force:skipLink', None), ('force:sldsTemplate', None), ('force:socialAction', None), ('force:socialImage', None), ('force:socialPhoto', None), ('force:socialPhotoActionDialog', None), ('force:socialPhotoController', None), ('force:socialPhotoWrapper', None), ('force:socialPhoto_v2', None), ('force:sortFilterMenuItem', None), ('force:splitViewListRecord', None), ('force:splitViewListRecordItem', None), ('force:stackedTab', None), ('force:stackedTabContent', None), ('force:stackedTabset', None), ('force:stackedTabsetContainer', None), ('force:staticGoogleMap', None), ('force:statusIcon', None), ('force:statusIconSummary', None), ('force:storageIsolationKey', None), ('force:streamingConfiguration', None), ('force:style', None), ('force:switchToNetworkHandler', None), ('force:tabBar', None), ('force:tabBarItem', None), ('force:targetInteractionHandler', None), ('force:tempDepend', None), ('force:templateWorkspace', None), ('force:templateWorkspaceWrapper', None), ('force:textEnumLookup', None), ('force:themeCssVarLoader', None), ('force:themedTemplate', None), ('force:toast', None), ('force:toastManager', None), ('force:toastMessage', None), ('force:treeGridTriggerCell', None), ('force:userAssistanceDocPreview', None), ('force:userAssistanceLightbox', None), ('force:userAssistanceMenu', None), ('force:userAssistanceMenuItem', None), ('force:userAssistanceMenuItemNew', None), ('force:userAssistanceMenuNew', None), ('force:userAssistancePlatform', None), ('force:userAssistancePopovers', None), ('force:userAssistancePopoversManager', None), ('force:video', None), ('force:videoPreview', None), ('force:virtualAction', None), ('force:virtualAutocompleteMenu', None), ('force:virtualAutocompleteMenuDataProviderAdaptor', None), ('force:virtualAutocompleteMenuList', None), ('force:virtualAutocompleteMenuOption', None), ('force:virtualCheckbox', None), ('force:virtualGrid', None), ('force:virtualRecordList', None), ('force:virtualRecordsComparison', None), ('force:virtualRowAction', None), ('force:virtualRowActionColumn', None), ('force:virtualRowNumberCell', None), ('force:virtualSelectionColumn', None), ('force:virtualTreeGrid', None), ('force:visualMessageQueue', None), ('force:walkthrough', None), ('force:walkthroughApps', None), ('forceChatter:abstractFeedItem', None), ('forceChatter:actionChatterContainer', None), ('forceChatter:actionLink', None), ('forceChatter:actionLinkButton', None), ('forceChatter:actionLinkGroup', None), ('forceChatter:actionLinkGroupStatus', None), ('forceChatter:addMemberCard', None), ('forceChatter:addMembers', None), ('forceChatter:addMembersTemplate', None), ('forceChatter:addParticipantDialog', None), ('forceChatter:addSkillToProfileAction', None), ('forceChatter:addToStreamAction', None), ('forceChatter:addToStreamPanel', None), ('forceChatter:addToStreamPopover', None), ('forceChatter:addToStreamPopoverFollowButton', None), ('forceChatter:alohaPagePost', None), ('forceChatter:anchor', None), ('forceChatter:announcementPost', None), ('forceChatter:askToJoinGroupAction', None), ('forceChatter:attachFileActionButton', None), ('forceChatter:attachFileButton', None), ('forceChatter:autocomplete', None), ('forceChatter:badgeFilterMenu', None), ('forceChatter:bannerPhotoCrop', None), ('forceChatter:basePublisher', None), ('forceChatter:bookmarkAction', None), ('forceChatter:canvasPost', None), ('forceChatter:changeFeedStatusAction', None), ('forceChatter:changeGroupType', None), ('forceChatter:chatterDisabledMessage', None), ('forceChatter:chatterExtensionButton', None), ('forceChatter:chatterExtensionsSetup', None), ('forceChatter:chatterFollow', None), ('forceChatter:chatterGenericRelatedListRecord', None), ('forceChatter:chatterGroupAnalytics', None), ('forceChatter:chatterGroupAnalyticsCountCard', None), ('forceChatter:chatterGroupAnalyticsFeedHistory', None), ('forceChatter:chatterGroupAnalyticsInAloha', None), ('forceChatter:chatterGroupAnalyticsNewMembers', None), ('forceChatter:chatterGroupAnalyticsTotals', None), ('forceChatter:chatterGroupCompactStencil', None), ('forceChatter:chatterGroupCompactStencilDesktop', None), ('forceChatter:chatterGroupMemberRequestRelatedListRecord', None), ('forceChatter:chatterGroupMemberRequestRelatedListRecordDesktop', None), ('forceChatter:chatterGroupMemberRequestRelatedListRecordMobile', None), ('forceChatter:chatterNotification', None), ('forceChatter:chatterUserRelatedListRecord', None), ('forceChatter:chatterUserRelatedListRecordDrillIn', None), ('forceChatter:closeAction', None), ('forceChatter:clumpHeader', None), ('forceChatter:clumpItem', None), ('forceChatter:clumpItemFullView', None), ('forceChatter:codeSnippetButton', None), ('forceChatter:codeSnippetModal', None), ('forceChatter:collatedUserPhotos', None), ('forceChatter:comment', None), ('forceChatter:commentRetrievalService', None), ('forceChatter:compactFeed', None), ('forceChatter:compactFeedDesignInfo', None), ('forceChatter:compactFeedItem', None), ('forceChatter:compactFeedItemBody', None), ('forceChatter:compactFeedMetric', None), ('forceChatter:compositeRecsDataProvider', None), ('forceChatter:compositionComponentContainer', None), ('forceChatter:compositionComponentContainerFooter', None), ('forceChatter:compoundFieldUserNameRenderer', None), ('forceChatter:compoundFieldsGroupName', None), ('forceChatter:compoundNameWithOutOfOffice', None), ('forceChatter:conditionalRichTextInputButton', None), ('forceChatter:contentFileSize', None), ('forceChatter:contentFolderItemTileTemplate', None), ('forceChatter:contentPost', None), ('forceChatter:contentVisibilityMonitor', None), ('forceChatter:crudStream', None), ('forceChatter:deleteBannerPhoto', None), ('forceChatter:deleteCommentAction', None), ('forceChatter:deleteFeedItemAction', None), ('forceChatter:deletePhoto', None), ('forceChatter:desktopChatter', None), ('forceChatter:desktopChatterContainer', None), ('forceChatter:desktopChatterFeedPanel', None), ('forceChatter:downVoteAction', None), ('forceChatter:editCommentAction', None), ('forceChatter:editGroupMembership', None), ('forceChatter:editGroupMembershipRequest', None), ('forceChatter:editGroupNotification', None), ('forceChatter:editGroupNotificationSettings', None), ('forceChatter:editManager', None), ('forceChatter:editPostAction', None), ('forceChatter:editTopicsAction', None), ('forceChatter:emailConfirmation', None), ('forceChatter:emojiButton', None), ('forceChatter:emojiPicker', None), ('forceChatter:endorseProfileSkillUserAction', None), ('forceChatter:enterGroupDetails', None), ('forceChatter:entityCard', None), ('forceChatter:entityLink', None), ('forceChatter:entityPhoto', None), ('forceChatter:entityPhotoDetail', None), ('forceChatter:exposedFeed', None), ('forceChatter:exposedFeedDesignInfo', None), ('forceChatter:exposedFeedDesktop', None), ('forceChatter:exposedFeedMobile', None), ('forceChatter:extensionInstanceRenderWrapper', None), ('forceChatter:facepilePreviewItem', None), ('forceChatter:feed', None), ('forceChatter:feedAnchor', None), ('forceChatter:feedAnchorSubMenu', None), ('forceChatter:feedAuxBody', None), ('forceChatter:feedAuxBodyCanvasPost', None), ('forceChatter:feedAuxBodyCaseComment', None), ('forceChatter:feedAuxBodyChatterExtensionInstance', None), ('forceChatter:feedAuxBodyChatterExtensionInstancesContainer', None), ('forceChatter:feedAuxBodyContentPost', None), ('forceChatter:feedAuxBodyEmailMessage', None), ('forceChatter:feedAuxBodyEmpty', None), ('forceChatter:feedAuxBodyEnhancedLink', None), ('forceChatter:feedAuxBodyLinkPost', None), ('forceChatter:feedAuxBodyMediaReferences', None), ('forceChatter:feedAuxBodyPollPost', None), ('forceChatter:feedAuxBodyPollPostResults', None), ('forceChatter:feedAuxBodyPollPostVote', None), ('forceChatter:feedAuxBodyQuestionPost', None), ('forceChatter:feedAuxBodyQuestionPostInner', None), ('forceChatter:feedAuxBodyRecordSummary', None), ('forceChatter:feedAuxBodySharedPost', None), ('forceChatter:feedAuxBodySharedRecord', None), ('forceChatter:feedAuxBodySocialPost', None), ('forceChatter:feedAuxBodyText', None), ('forceChatter:feedAuxBodyTrackedChange', None), ('forceChatter:feedBody', None), ('forceChatter:feedBodyBanner', None), ('forceChatter:feedBodyQuestionWithBestAnswer', None), ('forceChatter:feedBodyQuestionWithoutAnswer', None), ('forceChatter:feedBodySimple', None), ('forceChatter:feedBodyText', None), ('forceChatter:feedCommentInput', None), ('forceChatter:feedCommentInputDesktop', None), ('forceChatter:feedCommentInputMobile', None), ('forceChatter:feedContentAttachment', None), ('forceChatter:feedContentAttachmentPreview', None), ('forceChatter:feedContentFilePreview', None), ('forceChatter:feedElement', None), ('forceChatter:feedElementFullView', None), ('forceChatter:feedElementFullViewDefault', None), ('forceChatter:feedElementIteration', None), ('forceChatter:feedEventsProcessor', None), ('forceChatter:feedInner', None), ('forceChatter:feedItem', None), ('forceChatter:feedItemActionLinks', None), ('forceChatter:feedItemFullView', None), ('forceChatter:feedItemHeader', None), ('forceChatter:feedItemInteractions', None), ('forceChatter:feedPill', None), ('forceChatter:feedQbProxy', None), ('forceChatter:feedSorter', None), ('forceChatter:feedSwitcher', None), ('forceChatter:feedback', None), ('forceChatter:feeditemAttachments', None), ('forceChatter:fileIcon', None), ('forceChatter:fileSize', None), ('forceChatter:fileThumbnail', None), ('forceChatter:fileUploader', None), ('forceChatter:flagAction', None), ('forceChatter:flags', None), ('forceChatter:followAction', None), ('forceChatter:followInStreamAction', None), ('forceChatter:ftcList', None), ('forceChatter:ftcPreamble', None), ('forceChatter:fullFeed', None), ('forceChatter:genericFeedElement', None), ('forceChatter:groupAnnouncement', None), ('forceChatter:groupArchiveBanner', None), ('forceChatter:groupCreationWizard', None), ('forceChatter:groupDetailCard', None), ('forceChatter:groupMemberRoleSwitch', None), ('forceChatter:groupMembershipRequestButton', None), ('forceChatter:groupPreviewStencil', None), ('forceChatter:groupSearchDataProvider', None), ('forceChatter:groupTileMembershipButton', None), ('forceChatter:groupTileTemplate', None), ('forceChatter:headerPhotoCallout', None), ('forceChatter:highlightingScriptWrapper', None), ('forceChatter:inlineImageFileAction', None), ('forceChatter:inputInformationBody', None), ('forceChatter:invitePeople', None), ('forceChatter:joinGroupAction', None), ('forceChatter:knowledgeArticleHighlightsPreviewStencil', None), ('forceChatter:lazyFeedAuxBody', None), ('forceChatter:leaveGroupAction', None), ('forceChatter:lightningComponent', None), ('forceChatter:lightningFeedBodyText', None), ('forceChatter:likersCard', None), ('forceChatter:linkPost', None), ('forceChatter:mediaReferenceFullview', None), ('forceChatter:mediaReferencePreview', None), ('forceChatter:mediaReferences', None), ('forceChatter:mediaReferencesViewer', None), ('forceChatter:mentionAutocomplete', None), ('forceChatter:menuTriggerLinkWithTooltip', None), ('forceChatter:messageActivity', None), ('forceChatter:messageBodyInput', None), ('forceChatter:messageBodyInputPlainTextArea', None), ('forceChatter:messageBodyInputRichTextArea', None), ('forceChatter:messageBodyInputRichTextEditor', None), ('forceChatter:messageDetailView', None), ('forceChatter:messageDetailViewHeader', None), ('forceChatter:messageItem', None), ('forceChatter:messageListViewDataProvider', None), ('forceChatter:messagePublisher', None), ('forceChatter:messagePublisherDesktop', None), ('forceChatter:messageSegmentWrapper', None), ('forceChatter:messageSegments', None), ('forceChatter:messageSummary', None), ('forceChatter:messages', None), ('forceChatter:messagesListView', None), ('forceChatter:messagesListViewHeader', None), ('forceChatter:messagesManager', None), ('forceChatter:mobileChatter', None), ('forceChatter:moderationDialog', None), ('forceChatter:moveAction', None), ('forceChatter:moveExecution', None), ('forceChatter:muteAction', None), ('forceChatter:navigationalTopicDropdown', None), ('forceChatter:newContent', None), ('forceChatter:newContentButton', None), ('forceChatter:newMessageButton', None), ('forceChatter:newMessageNotification', None), ('forceChatter:notes', None), ('forceChatter:objectHomeTileView', None), ('forceChatter:outOfOfficeSettings', None), ('forceChatter:outputDescription', None), ('forceChatter:outputGroupCombinedType', None), ('forceChatter:outputGroupIsActivityGroup', None), ('forceChatter:outputGroupIsArchived', None), ('forceChatter:outputGroupIsBroadcast', None), ('forceChatter:outputGroupMemberCount', None), ('forceChatter:outputGroupMemberRole', None), ('forceChatter:outputInformationBody', None), ('forceChatter:outputRewardFundValue', None), ('forceChatter:outputShareType', None), ('forceChatter:outputSkillEndorsementCount', None), ('forceChatter:outputSkillUserCount', None), ('forceChatter:outputSkillUserName', None), ('forceChatter:outputUserAboutMe', None), ('forceChatter:outputUserCompanyName', None), ('forceChatter:outputUserIsActive', None), ('forceChatter:outputVersionNumber', None), ('forceChatter:overflowActionMenu', None), ('forceChatter:panelLauncherBadgeSelect', None), ('forceChatter:participantsInput', None), ('forceChatter:pill', None), ('forceChatter:pillBox', None), ('forceChatter:pillContainer', None), ('forceChatter:pillItem', None), ('forceChatter:pinAction', None), ('forceChatter:pinnedItemManager', None), ('forceChatter:pollPost', None), ('forceChatter:pollPostChoice', None), ('forceChatter:pollPostDesktop', None), ('forceChatter:pollPostMobile', None), ('forceChatter:postLinkSharing', None), ('forceChatter:preamble', None), ('forceChatter:progressBar', None), ('forceChatter:publishDraftPostAction', None), ('forceChatter:publisher', None), ('forceChatter:publisherAttachmentActionEmptyContainer', None), ('forceChatter:publisherAttachmentButton', None), ('forceChatter:publisherAttachmentFileUploadButton', None), ('forceChatter:publisherAttachmentItem', None), ('forceChatter:publisherAttachmentPreview', None), ('forceChatter:publisherAttachments', None), ('forceChatter:publisherAttachmentsGroup', None), ('forceChatter:publisherAttachmentsMenu', None), ('forceChatter:publisherContentAttachmentsPreviewContainer', None), ('forceChatter:publisherDesignInfo', None), ('forceChatter:publisherDesignSubstitute', None), ('forceChatter:publisherInput', None), ('forceChatter:publisherPresentation', None), ('forceChatter:publisherPresentationDesktop', None), ('forceChatter:publisherPresentationMobile', None), ('forceChatter:publisherPresentationPanel', None), ('forceChatter:publisherQuickAction', None), ('forceChatter:publisherQuickCreate', None), ('forceChatter:publisherSalesforceFileAction', None), ('forceChatter:publisherUploadFileAction', None), ('forceChatter:publisherVisibility', None), ('forceChatter:publisherVisibilityWrapper', None), ('forceChatter:questionPost', None), ('forceChatter:questionPostDesktop', None), ('forceChatter:questionPostMobile', None), ('forceChatter:quickActionLoader', None), ('forceChatter:recommendationAcceptButton', None), ('forceChatter:recommendationBase', None), ('forceChatter:recommendationBaseWidget', None), ('forceChatter:recommendationBig', None), ('forceChatter:recommendationCarousel', None), ('forceChatter:recommendationCarouselPage', None), ('forceChatter:recommendationCarouselWidget', None), ('forceChatter:recommendationFollowButton', None), ('forceChatter:recommendationInFeed', None), ('forceChatter:recommendationJoinButton', None), ('forceChatter:recommendationListCard', None), ('forceChatter:recommendationListWidget', None), ('forceChatter:recommendationSingleCard', None), ('forceChatter:recommendationSmall', None), ('forceChatter:recommendationTile', None), ('forceChatter:recommendationUiButton', None), ('forceChatter:recommendations', None), ('forceChatter:recommendationsBig', None), ('forceChatter:recommendationsBigDesignInfo', None), ('forceChatter:recommendationsDesignSubstitute', None), ('forceChatter:recordFeedActions', None), ('forceChatter:recordFeedContainer', None), ('forceChatter:recordFeedContainerDesignInfo', None), ('forceChatter:recordFeedContainerDesktop', None), ('forceChatter:recordFeedContainerDesktopWrapper', None), ('forceChatter:recordFeedContainerMobile', None), ('forceChatter:relatedCardContainer', None), ('forceChatter:relatedTopics', None), ('forceChatter:relatedTopicsDataProvider', None), ('forceChatter:removeParticipantDialog', None), ('forceChatter:richLinkPreviewMetadata', None), ('forceChatter:router', None), ('forceChatter:s1FeedsProxy', None), ('forceChatter:scroller', None), ('forceChatter:searchInFeed', None), ('forceChatter:seenByCard', None), ('forceChatter:selectBadge', None), ('forceChatter:selectBadgeDesktop', None), ('forceChatter:selectBadgeMobile', None), ('forceChatter:selectFileFromListViewPanel', None), ('forceChatter:selectGroupType', None), ('forceChatter:selectMention', None), ('forceChatter:selectMentionCachedDataProvider', None), ('forceChatter:selectMentionDataProvider', None), ('forceChatter:selectMentionOption', None), ('forceChatter:selectTopicSuggestion', None), ('forceChatter:selectTopicSuggestionDataProvider', None), ('forceChatter:selectTopicSuggestionOption', None), ('forceChatter:selectUserDataProvider', None), ('forceChatter:selectUserOption', None), ('forceChatter:selectedFileBadge', None), ('forceChatter:selectedThanksBadge', None), ('forceChatter:sfxAnnouncementPost', None), ('forceChatter:sfxEditGroupNotificationSettings', None), ('forceChatter:sfxFollowAction', None), ('forceChatter:sfxJoinGroupAction', None), ('forceChatter:sfxLeaveGroupAction', None), ('forceChatter:shareButton', None), ('forceChatter:sharePostMenu', None), ('forceChatter:simpleFeedItemTopics', None), ('forceChatter:slashAutocomplete', None), ('forceChatter:sortMenu', None), ('forceChatter:streamDeleteModalBody', None), ('forceChatter:streamEditDeleteAction', None), ('forceChatter:streamHeader', None), ('forceChatter:streamNotifications', None), ('forceChatter:streamsListing', None), ('forceChatter:streamsListingHeader', None), ('forceChatter:streamsListingMobile', None), ('forceChatter:streamsListingNavigation', None), ('forceChatter:streamsListingProvider', None), ('forceChatter:streamsListingRecordCell', None), ('forceChatter:streamsListingRowActionMenu', None), ('forceChatter:style', None), ('forceChatter:stypiEditor', None), ('forceChatter:tempDepend', None), ('forceChatter:textPost', None), ('forceChatter:textPostDesktop', None), ('forceChatter:textPostDesktopConditionalPanelActions', None), ('forceChatter:textPostMobile', None), ('forceChatter:thanksBadge', None), ('forceChatter:thanksBadgeSelected', None), ('forceChatter:thanksPost', None), ('forceChatter:thanksPostDesktop', None), ('forceChatter:thanksPostMobile', None), ('forceChatter:thanksPostUserSelect', None), ('forceChatter:thanksPostUserSelectDesktop', None), ('forceChatter:thanksPostUserSelectMobile', None), ('forceChatter:threadedComment', None), ('forceChatter:todayToMeFeed', None), ('forceChatter:toggleLike', None), ('forceChatter:topicAutocompleteInput', None), ('forceChatter:topicDescription', None), ('forceChatter:topicList', None), ('forceChatter:topicMetrics', None), ('forceChatter:topicMetricsItem', None), ('forceChatter:topicSuggestionAutoComplete', None), ('forceChatter:topicSuggestionPillBox', None), ('forceChatter:topicsOnRecordWrapper', None), ('forceChatter:topicsOnRecordWrapperDesignSubstitute', None), ('forceChatter:trailHeadCard', None), ('forceChatter:trailheadBadge', None), ('forceChatter:translationLanguageSelectionAction', None), ('forceChatter:trendingTopics', None), ('forceChatter:trendingTopicsDataProvider', None), ('forceChatter:trendingTopicsDesignSubstitute', None), ('forceChatter:truncatedOutputText', None), ('forceChatter:typingIndicator', None), ('forceChatter:unansweredQuestions', None), ('forceChatter:unansweredQuestionsDataProvider', None), ('forceChatter:upVote', None), ('forceChatter:updateBannerPhoto', None), ('forceChatter:updatePhoto', None), ('forceChatter:userPhoto', None), ('forceChatter:userPreviewStencil', None), ('forceChatter:userProfileAboutMeEdit', None), ('forceChatter:userProfileHighlightsStencil', None), ('forceChatter:userProfileHighlightsStencilDesktop', None), ('forceChatter:usersLookupDataProvider', None), ('forceChatter:verifyUnverifyAction', None), ('forceChatter:viewPhoto', None), ('forceChatter:votersCard', None), ('forceChatter:workspaceTileTemplate', None), ('forceCommunity:accountBrandImage', None), ('forceCommunity:accountBrandImageEdit', None), ('forceCommunity:accountBrandImageView', None), ('forceCommunity:accountBrandRecord', None), ('forceCommunity:accountBrandRecordDesignSubstitute', None), ('forceCommunity:actionButtonMobile', None), ('forceCommunity:actionsContainerMobile', None), ('forceCommunity:activateDeactivatePortalUser', None), ('forceCommunity:activityPanel', None), ('forceCommunity:addMember', None), ('forceCommunity:allResults', None), ('forceCommunity:analyticsListener', None), ('forceCommunity:analyticsObjectHome', None), ('forceCommunity:appLauncher', None), ('forceCommunity:appLauncherTester', None), ('forceCommunity:articleThumbVote', None), ('forceCommunity:askCommunity', None), ('forceCommunity:askCommunityDesignInfo', None), ('forceCommunity:askCommunitySuggestionDesignInfo', None), ('forceCommunity:bannerImageLayout', None), ('forceCommunity:baseRecordValidationComponent', None), ('forceCommunity:baseSearch', None), ('forceCommunity:breadcrumbs', None), ('forceCommunity:breadcrumbsDesignInfo', None), ('forceCommunity:buyerAccountDetail', None), ('forceCommunity:calendar', None), ('forceCommunity:campaignImage', None), ('forceCommunity:campaignImageEdit', None), ('forceCommunity:campaignImageView', None), ('forceCommunity:campaignSignup', None), ('forceCommunity:campaignTileList', None), ('forceCommunity:campaignTileListDataFieldsEditor', None), ('forceCommunity:campaignTileListDataFieldsItemEditor', None), ('forceCommunity:campaignTileListDataManager', None), ('forceCommunity:campaignTileTemplate', None), ('forceCommunity:cardLayoutWithImage', None), ('forceCommunity:cardLayoutWithTitleAndText', None), ('forceCommunity:carousel', None), ('forceCommunity:caseDeflection', None), ('forceCommunity:caseDeflectionDesignInfo', None), ('forceCommunity:caseDeflectionMetricsDesignInfo', None), ('forceCommunity:caseDeflectionZeroStateDesignInfo', None), ('forceCommunity:caseFeed', None), ('forceCommunity:changePassword', None), ('forceCommunity:chatterGroupAnalytics', None), ('forceCommunity:chatterGroupAnalyticsFeedHistory', None), ('forceCommunity:chatterGroupAnalyticsNewMembers', None), ('forceCommunity:chatterGroupAnalyticsTotals', None), ('forceCommunity:cmsConnect', None), ('forceCommunity:cmsConnectBindingProvider', None), ('forceCommunity:cmsConnectJSONCollectionDataBindingProvider', None), ('forceCommunity:cmsConnectJSONDataProvider', None), ('forceCommunity:cmsConnectJSONItemDataBindingProvider', None), ('forceCommunity:cmsContent', None), ('forceCommunity:cmsContentCardLayout', None), ('forceCommunity:cmsContentCollectionLayoutManager', None), ('forceCommunity:cmsContentGridLayout', None), ('forceCommunity:cmsContentItemDetailLayout', None), ('forceCommunity:cmsContentItemDetailManager', None), ('forceCommunity:cmsContentItemRenderer', None), ('forceCommunity:cmsContentLink', None), ('forceCommunity:commerceBilling', None), ('forceCommunity:commerceDelivery', None), ('forceCommunity:commerceNextButton', None), ('forceCommunity:commerceOrderConfirmation', None), ('forceCommunity:commerceOrderSummary', None), ('forceCommunity:commerceOrdersList', None), ('forceCommunity:commercePayment', None), ('forceCommunity:commerceReorder', None), ('forceCommunity:communitySelectBadge', None), ('forceCommunity:communitySelectBadgeDesktop', None), ('forceCommunity:communitySelectBadgeMobile', None), ('forceCommunity:communityThanksBadge', None), ('forceCommunity:communityThanksBadgeWrapper', None), ('forceCommunity:confirmMessageBody', None), ('forceCommunity:connectedSources', None), ('forceCommunity:contactSupportButton', None), ('forceCommunity:contactSupportButtonDesignInfo', None), ('forceCommunity:contactSupportConfirmation', None), ('forceCommunity:contactSupportFileInput', None), ('forceCommunity:contactSupportForm', None), ('forceCommunity:contactSupportFormDesignInfo', None), ('forceCommunity:contactSupportFormDesignSetupLink', None), ('forceCommunity:contactSupportFormDesignSupportSetupLink', None), ('forceCommunity:contactSupportSetupError', None), ('forceCommunity:createRecordButton', None), ('forceCommunity:createRecordForm', None), ('forceCommunity:dashboard', None), ('forceCommunity:dashboardDesignInfo', None), ('forceCommunity:dashboardList', None), ('forceCommunity:defaultCommAppPageTemplate', None), ('forceCommunity:deflection', None), ('forceCommunity:deflectionDataProvider', None), ('forceCommunity:deflectionOption', None), ('forceCommunity:deflectionSignalActions', None), ('forceCommunity:deflectionTracking', None), ('forceCommunity:deleteBadgeAssignment', None), ('forceCommunity:detailImageFirstLayout', None), ('forceCommunity:disablePortalUser', None), ('forceCommunity:dynamicCollection', None), ('forceCommunity:dynamicCollectionBaseDataProvider', None), ('forceCommunity:dynamicCollectionCarousel', None), ('forceCommunity:dynamicCollectionCarouselMultiSlide', None), ('forceCommunity:dynamicCollectionCarouselSlideshow', None), ('forceCommunity:dynamicCollectionEditorDesignInfo', None), ('forceCommunity:dynamicCollectionGrid', None), ('forceCommunity:dynamicCollectionListviewDataProvider', None), ('forceCommunity:embeddedQuipComponent', None), ('forceCommunity:embeddedService', None), ('forceCommunity:embeddedServiceDesignInfo', None), ('forceCommunity:embeddedServiceFeature', None), ('forceCommunity:embeddedServiceFieldService', None), ('forceCommunity:embeddedServiceFieldServiceDesignInfo', None), ('forceCommunity:embeddedServiceHelpButton', None), ('forceCommunity:embeddedServiceSidebar', None), ('forceCommunity:emptyComponentPlaceholder', None), ('forceCommunity:enablePortalUser', None), ('forceCommunity:expiringContent', None), ('forceCommunity:expiringContentBase', None), ('forceCommunity:expiringContentDesignInfo', None), ('forceCommunity:expiringContentDesignSubstitute', None), ('forceCommunity:feedCommentInput', None), ('forceCommunity:feedItemDetail', None), ('forceCommunity:feedPublisher', None), ('forceCommunity:feedPublisherDesignInfo', None), ('forceCommunity:feedResults', None), ('forceCommunity:fileDetailPage', None), ('forceCommunity:fileEngagement', None), ('forceCommunity:filesList', None), ('forceCommunity:flexTileLayoutWithImage', None), ('forceCommunity:flowCommunity', None), ('forceCommunity:flowCommunityDesignSubstitute', None), ('forceCommunity:follow', None), ('forceCommunity:followDesignInfo', None), ('forceCommunity:forceCommunityFeed', None), ('forceCommunity:forceCommunityFeedDesignInfo', None), ('forceCommunity:freeze', None), ('forceCommunity:freezeUserAction', None), ('forceCommunity:giveBadgeAction', None), ('forceCommunity:globalNavigation', None), ('forceCommunity:globalSearchInput', None), ('forceCommunity:groupAnnouncement', None), ('forceCommunity:groupContainer', None), ('forceCommunity:groupDetail', None), ('forceCommunity:groupHeadline', None), ('forceCommunity:groupHighlightStencilNapili', None), ('forceCommunity:groupObjectHome', None), ('forceCommunity:groupRecordHomeTabs', None), ('forceCommunity:groupRecordHomeTabsDesignInfo', None), ('forceCommunity:groupRelatedList', None), ('forceCommunity:headerCheckout', None), ('forceCommunity:headline', None), ('forceCommunity:headlineDesignInfo', None), ('forceCommunity:homeTabs', None), ('forceCommunity:homeTabsDesignInfo', None), ('forceCommunity:htmlBlock', None), ('forceCommunity:htmlBlockDesignInfo', None), ('forceCommunity:interactive', None), ('forceCommunity:iotEmbedded', None), ('forceCommunity:knowledgeablePeople', None), ('forceCommunity:languageMenuItem', None), ('forceCommunity:languagePicker', None), ('forceCommunity:languagePickerDesignInfo', None), ('forceCommunity:languagePickerTrigger', None), ('forceCommunity:languageSelector43', None), ('forceCommunity:languageSelectorDesignInfo', None), ('forceCommunity:leadInbox', None), ('forceCommunity:leadInboxStencil', None), ('forceCommunity:linkMenuItem', None), ('forceCommunity:listView', None), ('forceCommunity:loginAsPortalUser', None), ('forceCommunity:manageBuyerAccount', None), ('forceCommunity:managePartnerSuperUser', None), ('forceCommunity:managePortalAccount', None), ('forceCommunity:managedContent', None), ('forceCommunity:managedContentCollectionDataProvider', None), ('forceCommunity:managedContentDesignInfo', None), ('forceCommunity:managedContentDetail', None), ('forceCommunity:multiLevelNavigation', None), ('forceCommunity:navBar', None), ('forceCommunity:navigationMenu', None), ('forceCommunity:navigationMenuBase', None), ('forceCommunity:navigationMenuBaseInternal', None), ('forceCommunity:navigationMenuItem', None), ('forceCommunity:navigationMenuItemTriggerLink', None), ('forceCommunity:nbaWidget', None), ('forceCommunity:notifications', None), ('forceCommunity:objectHome', None), ('forceCommunity:objectHomeDesignInfo', None), ('forceCommunity:objectHomeEmptyDesignSubstitute', None), ('forceCommunity:omniBox', None), ('forceCommunity:omniBoxContactSupportActionMenuItem', None), ('forceCommunity:omniBoxSwitcher', None), ('forceCommunity:omniBoxTopicTriggerLink', None), ('forceCommunity:ordersMobileHome', None), ('forceCommunity:outputRichText', None), ('forceCommunity:pathAssistant', None), ('forceCommunity:pathAssistantDesignInfo', None), ('forceCommunity:pausedInterviewCard', None), ('forceCommunity:pausedInterviewCardDesignSubstitute', None), ('forceCommunity:pausedInterviewCardRow', None), ('forceCommunity:placeholder', None), ('forceCommunity:productDetail', None), ('forceCommunity:profileRenderer', None), ('forceCommunity:psscFeedsProxy', None), ('forceCommunity:psscPublisherSalesforceFileAction', None), ('forceCommunity:psscPublisherUploadFileAction', None), ('forceCommunity:psscSelectFileFromListViewPanel', None), ('forceCommunity:questionPostCommunities', None), ('forceCommunity:quillInsertAssetImageButton', None), ('forceCommunity:quipCard', None), ('forceCommunity:reCaptcha', None), ('forceCommunity:recommendations', None), ('forceCommunity:recommendationsDesignInfo', None), ('forceCommunity:recordDetail', None), ('forceCommunity:recordDetailDesignInfo', None), ('forceCommunity:recordHeadline', None), ('forceCommunity:recordHomeTabs', None), ('forceCommunity:recordListCompact', None), ('forceCommunity:recordListCompactCard', None), ('forceCommunity:recordListDesktop', None), ('forceCommunity:recordListMobile', None), ('forceCommunity:recordListStandard', None), ('forceCommunity:relatedList', None), ('forceCommunity:relatedListDesignSubstitute', None), ('forceCommunity:relatedListSingle', None), ('forceCommunity:relatedQuipItemsView', None), ('forceCommunity:relatedRecords', None), ('forceCommunity:relatedRecordsDesignInfo', None), ('forceCommunity:relatedTopics', None), ('forceCommunity:reportBuilder', None), ('forceCommunity:reportChart', None), ('forceCommunity:reportChartDesignInfo', None), ('forceCommunity:reportList', None), ('forceCommunity:reportPage', None), ('forceCommunity:reportPageDesignInfo', None), ('forceCommunity:reputationLeaderboard', None), ('forceCommunity:reputationLeaderboard42', None), ('forceCommunity:reputationLeaderboardDataProvider', None), ('forceCommunity:reputationLeaderboardDesignInfo', None), ('forceCommunity:reputationLeaderboardRow', None), ('forceCommunity:reputationWidget', None), ('forceCommunity:resetPasswordPortalUser', None), ('forceCommunity:resultsList', None), ('forceCommunity:retrieveCommunityRoute', None), ('forceCommunity:richText', None), ('forceCommunity:richTextDesignInfo', None), ('forceCommunity:richTextInline', None), ('forceCommunity:richTextInlineDesignInfo', None), ('forceCommunity:routeLink', None), ('forceCommunity:scorecard', None), ('forceCommunity:scorecardMetric', None), ('forceCommunity:search', None), ('forceCommunity:searchBox', None), ('forceCommunity:selectGroupType', None), ('forceCommunity:seoAssistant', None), ('forceCommunity:showPortalUserMemberList', None), ('forceCommunity:showUserNetworkMemberList', None), ('forceCommunity:signalCollector', None), ('forceCommunity:stamp', None), ('forceCommunity:standardListViewGrid', None), ('forceCommunity:streamDetail', None), ('forceCommunity:streamDetailDesktop', None), ('forceCommunity:streamDetailMobile', None), ('forceCommunity:streamList', None), ('forceCommunity:suggestedFilesCard', None), ('forceCommunity:surveyCommunity', None), ('forceCommunity:surveyCommunityDesignSubstitute', None), ('forceCommunity:tabset', None), ('forceCommunity:taskList', None), ('forceCommunity:taskListCompact', None), ('forceCommunity:tempDepend', None), ('forceCommunity:themeHeaderB2B', None), ('forceCommunity:themeHeaderBase', None), ('forceCommunity:themeHeaderCompact', None), ('forceCommunity:themeHeaderCompactMenuStylesDesignInfo', None), ('forceCommunity:themeHeaderHelpCenter', None), ('forceCommunity:themeHeaderStacked', None), ('forceCommunity:themeHeaderStackedMenuStylesDesignInfo', None), ('forceCommunity:themeHeroBase', None), ('forceCommunity:themeHeroStarter', None), ('forceCommunity:themeLogo', None), ('forceCommunity:themeLogoSalesforce', None), ('forceCommunity:themeNav', None), ('forceCommunity:themeNavSubMenu', None), ('forceCommunity:themeNavTrigger', None), ('forceCommunity:themeProfileMenu', None), ('forceCommunity:themeProfileMenuLoginButtonDesignInfo', None), ('forceCommunity:themeSearch', None), ('forceCommunity:themeSearchHero', None), ('forceCommunity:themeSearchSection', None), ('forceCommunity:tileLayoutWithImage', None), ('forceCommunity:tileMenu', None), ('forceCommunity:tileMenuItem', None), ('forceCommunity:topArticleItem', None), ('forceCommunity:topArticleList', None), ('forceCommunity:topArticleListDataProvider', None), ('forceCommunity:topArticleListDesignInfo', None), ('forceCommunity:topArticleListForTopic', None), ('forceCommunity:topicCatalog', None), ('forceCommunity:topicCatalogDesignInfo', None), ('forceCommunity:topicDescription', None), ('forceCommunity:topicMerticsDesignInfo', None), ('forceCommunity:topicMetrics', None), ('forceCommunity:topicsOnRecordDesignSubstitute', None), ('forceCommunity:topicsOnRecordWrapper', None), ('forceCommunity:trendingTopics', None), ('forceCommunity:trendingTopicsDesignInfo', None), ('forceCommunity:trendingTopicsDesignSubstitute', None), ('forceCommunity:updatePhotoSitecomWrapper', None), ('forceCommunity:userPreviewStencilNapili', None), ('forceCommunity:userProfileAndSettings', None), ('forceCommunity:userProfileBase', None), ('forceCommunity:userProfileBody', None), ('forceCommunity:userProfileDetail', None), ('forceCommunity:userProfileEdit', None), ('forceCommunity:userProfileHeader', None), ('forceCommunity:userProfileHeaderDetail', None), ('forceCommunity:userProfileKnowledgeableAbout', None), ('forceCommunity:userProfileStats', None), ('forceCommunity:userProfileTabs', None), ('forceCommunity:userProfileWithBanner', None), ('forceCommunity:userProfileWithBannerDesignInfo', None), ('forceCommunity:userRecognitionList', None), ('forceCommunity:userRecognitions', None), ('forceCommunity:userRecordHome', None), ('forceCommunity:userRecordHomeDesignInfo', None), ('forceCommunity:userRelatedList', None), ('forceCommunity:userSettings', None), ('forceCommunity:userSettingsCustomizable', None), ('forceCommunity:userSettingsInternal', None), ('forceCommunity:visualforcePage', None), ('forceCommunity:waveDashboard', None), ('forceCommunity:workspacesList', None), ('forceCommunity:workspacesListBetaBadge', None), ('forceContent:actionEventLink', None), ('forceContent:actionNewVersion', None), ('forceContent:assetDetailsPanel', None), ('forceContent:assetPicker', None), ('forceContent:baseFolderAction', None), ('forceContent:basePreview', None), ('forceContent:basePreviewPlayer', None), ('forceContent:basePreviewToolbar', None), ('forceContent:baseQuipSetupAssistantStep', None), ('forceContent:compoundFieldsTitleRenderer', None), ('forceContent:contentDistributionViewer', None), ('forceContent:contentDistributionViewerToolbar', None), ('forceContent:contentDocumentHighlightsStencilDesktop', None), ('forceContent:contentFolderDistributionViewer', None), ('forceContent:contentHubAuthenticationBanner', None), ('forceContent:contentHubError', None), ('forceContent:contentLinkableEntityIcon', None), ('forceContent:contentThumbnail', None), ('forceContent:contentVersionEditorPanel', None), ('forceContent:contentVersionFieldsEditor', None), ('forceContent:contentVersionRelatedListRecord', None), ('forceContent:contentVersionsEditWizard', None), ('forceContent:contentWorkspaceDataProvider', None), ('forceContent:contentWorkspaceImage', None), ('forceContent:contentWorkspaceNameRenderer', None), ('forceContent:createContentDocForContentHubFile', None), ('forceContent:createFolderAction', None), ('forceContent:deleteFolderAction', None), ('forceContent:documentLinkRowStencil', None), ('forceContent:downloadExternalFileAction', None), ('forceContent:editContentWorkspaceImage', None), ('forceContent:editFolderAction', None), ('forceContent:embeddedQuipActionMenu', None), ('forceContent:embeddedQuipActionMenuBase', None), ('forceContent:embeddedQuipComponent', None), ('forceContent:embeddedQuipCreateFieldButton', None), ('forceContent:embeddedQuipDocumentChangePanel', None), ('forceContent:embeddedQuipEditor', None), ('forceContent:embeddedQuipEditorOption', None), ('forceContent:embeddedQuipFieldEditor', None), ('forceContent:embeddedQuipSharingEditor', None), ('forceContent:embeddedQuipUrlEditor', None), ('forceContent:feedActionOpenExternalFile', None), ('forceContent:feedActionsDropDown', None), ('forceContent:feedAttachmentAction', None), ('forceContent:fileBadge', None), ('forceContent:fileCard', None), ('forceContent:fileDataManager', None), ('forceContent:fileDataProvider', None), ('forceContent:fileDroppableZone', None), ('forceContent:fileInfoPopover', None), ('forceContent:fileLinkShare', None), ('forceContent:fileLinkShareAction', None), ('forceContent:fileList', None), ('forceContent:fileListDesktop', None), ('forceContent:fileListSorterDataProvider', None), ('forceContent:fileListViewDataManager', None), ('forceContent:filePicker', None), ('forceContent:filePickerDesktop', None), ('forceContent:filePickerMobile', None), ('forceContent:filePreview', None), ('forceContent:fileSearchPanel', None), ('forceContent:fileShareConfirmationModalBody', None), ('forceContent:fileShareDataProvider', None), ('forceContent:fileShareGrid', None), ('forceContent:fileShareGridRemoveColumn', None), ('forceContent:fileShareGridShareTypeColumn', None), ('forceContent:fileShareGridTitleColumn', None), ('forceContent:fileSharePanel', None), ('forceContent:fileShareRecommendation', None), ('forceContent:fileSourceListItem', None), ('forceContent:fileSourceMenu', None), ('forceContent:fileSourceMenuDesktop', None), ('forceContent:fileSourceMenuItem', None), ('forceContent:fileSourceMenuItemDesktop', None), ('forceContent:fileSourceMenuSeparator', None), ('forceContent:fileTestingUtil', None), ('forceContent:fileTitle', None), ('forceContent:fileUpload', None), ('forceContent:fileUploadAction', None), ('forceContent:fileUploaderPanel', None), ('forceContent:filesHomeBreadcrumbs', None), ('forceContent:filesHomeDesktop', None), ('forceContent:filesHomeDesktopHeader', None), ('forceContent:filesListDesktop', None), ('forceContent:filesListMobile', None), ('forceContent:filesManager', None), ('forceContent:folderCreateAndEditPanel', None), ('forceContent:folderDeletePanel', None), ('forceContent:folderLinkShareAction', None), ('forceContent:folderManager', None), ('forceContent:folderSelectorPanel', None), ('forceContent:folderizeActionPanel', None), ('forceContent:folderizeButton', None), ('forceContent:inlineSpinner', None), ('forceContent:latestVersionDetailPanel', None), ('forceContent:librariesHomeDesktop', None), ('forceContent:librariesHomeMobile', None), ('forceContent:listLoadingTemplate', None), ('forceContent:listRecord', None), ('forceContent:listUploadFileAction', None), ('forceContent:listViewTitleRenderer', None), ('forceContent:manageWorkspaceMembersAction', None), ('forceContent:manageWorkspaceMembersPanel', None), ('forceContent:mobilePreviewPlayer', None), ('forceContent:mobilePreviewPlayerPageToolbar', None), ('forceContent:mobilePreviewPlayerTopToolbar', None), ('forceContent:modalFileUploader', None), ('forceContent:modalPreviewManager', None), ('forceContent:modalPreviewPlayer', None), ('forceContent:moveFilePanel', None), ('forceContent:multiFileUploader', None), ('forceContent:openExternalFileAction', None), ('forceContent:outputEntityName', None), ('forceContent:outputReasonForChange', None), ('forceContent:outputSourceTitle', None), ('forceContent:outputTitle', None), ('forceContent:panelFooter', None), ('forceContent:panelHeader', None), ('forceContent:previewInfoProvider', None), ('forceContent:previewPanel', None), ('forceContent:previewPlayer', None), ('forceContent:previewPlayerPagingToolbar', None), ('forceContent:previewPlayerTopToolbar', None), ('forceContent:previewStatus', None), ('forceContent:previewerAction', None), ('forceContent:previewerActionNewVersion', None), ('forceContent:previewerActionOpenExternalFile', None), ('forceContent:previewerActionsBar', None), ('forceContent:quipActionMenu', None), ('forceContent:quipActionMenuAloha', None), ('forceContent:quipActionMenuBase', None), ('forceContent:quipCard', None), ('forceContent:quipCardAloha', None), ('forceContent:quipCardLightning', None), ('forceContent:quipChooseDocumentPanel', None), ('forceContent:quipContentHubAuthPanel', None), ('forceContent:quipContentHubErrorAloha', None), ('forceContent:quipCreatePanel', None), ('forceContent:quipCreateSiteSetupFlow', None), ('forceContent:quipCreateSiteStartStep', None), ('forceContent:quipExistingSiteSetupFlow', None), ('forceContent:quipExistingSiteSuccessStep', None), ('forceContent:quipExistingSiteUpgradeRequiredStep', None), ('forceContent:quipExistingSiteVerificationStep', None), ('forceContent:quipItem', None), ('forceContent:quipItemDropdown', None), ('forceContent:quipItemDropdownAloha', None), ('forceContent:quipItemsAloha', None), ('forceContent:quipMarketingBlock', None), ('forceContent:quipMassActionCreatePanel', None), ('forceContent:quipPreview', None), ('forceContent:quipSearchAutocompleteOption', None), ('forceContent:quipSearchBox', None), ('forceContent:quipSearchDataProvider', None), ('forceContent:quipSearchPanel', None), ('forceContent:quipSetupAssistant', None), ('forceContent:quipSetupAssistantButton', None), ('forceContent:quipSetupAssistantCustomLinkTemplate', None), ('forceContent:quipSetupAssistantIframe', None), ('forceContent:quipSetupAssistantStep', None), ('forceContent:quipSetupAssistantSubstepButton', None), ('forceContent:quipSheetIframe', None), ('forceContent:quipSheetMassAction', None), ('forceContent:quipSiteFlowButton', None), ('forceContent:quipSiteInput', None), ('forceContent:quipSiteSuccessStep', None), ('forceContent:quipSummaryBlock', None), ('forceContent:quipSupportTextDesignInfo', None), ('forceContent:quipTemplateButton', None), ('forceContent:relatedListPreviewFileList', None), ('forceContent:relatedQuipItemsActionMenu', None), ('forceContent:relatedQuipItemsView', None), ('forceContent:searchCompoundFieldsTitleRenderer', None), ('forceContent:searchStencil', None), ('forceContent:selectFileFromSalesforce', None), ('forceContent:shareExternalFileAction', None), ('forceContent:shareFileAction', None), ('forceContent:singleFileUploader', None), ('forceContent:statsPanel', None), ('forceContent:suggestedFile', None), ('forceContent:suggestedFilesCard', None), ('forceContent:suggestedFilesConfirmationPanel', None), ('forceContent:svgPreview', None), ('forceContent:tempDepend', None), ('forceContent:thumbnailPreview', None), ('forceContent:unshareQuipItemPanel', None), ('forceContent:uploadAssetAction', None), ('forceContent:uploadPanel', None), ('forceContent:uploadPanelFooter', None), ('forceContent:videoPreview', None), ('forceContent:virtualRelatedListStencil', None), ('forceContent:workspaceMemberDeleteColumn', None), ('forceContent:workspaceMembersDataProvider', None), ('forceContent:workspaceMembersGrid', None), ('forceContent:workspaceMembersPermissionColumn', None), ('forceContent:workspaceMembersTitleColumn', None), ('forceDiscovery:knowledgeablePeople', None), ('forceDiscovery:knowledgeablePeopleDataProvider', None), ('forceDiscovery:knowledgeablePeopleRow', None), ('forceDiscovery:userProfileKnowledgeableAbout', None), ('forceDiscovery:userProfileKnowledgeableAboutDataProvider', None), ('forceDiscovery:userProfileKnowledgeableAboutModal', None), ('forceDiscovery:userProfileKnowledgeableAboutTopic', None), ('forceHelp:contentSearch', None), ('forceHelp:contentSearchDataProvider', None), ('forceHelp:helpMenu', None), ('forceKnowledge:KnowledgeArticleVersionArchiveMassAction', None), ('forceKnowledge:KnowledgeArticleVersionAttachArticleAction', None), ('forceKnowledge:KnowledgeArticleVersionInsertContentToEmailAction', None), ('forceKnowledge:KnowledgeArticleVersionInsertUrlToEmailAction', None), ('forceKnowledge:KnowledgeArticleVersionPreviewPanel', None), ('forceKnowledge:articleDataCategoryChooser', None), ('forceKnowledge:articleDataCategoryChooserTester', None), ('forceKnowledge:articleDataCategoryViewer', None), ('forceKnowledge:articleDataCategoryViewerTester', None), ('forceKnowledge:articleInputDesktopDataProvider', None), ('forceKnowledge:articleMasterVersion', None), ('forceKnowledge:articleRedirect', None), ('forceKnowledge:articleSearchDesktop', None), ('forceKnowledge:articleSearchInputDesktop', None), ('forceKnowledge:articleSearchPrefilter', None), ('forceKnowledge:articleSearchResult', None), ('forceKnowledge:articleSearchSortMenu', None), ('forceKnowledge:articleStars', None), ('forceKnowledge:articleThumbVote', None), ('forceKnowledge:articleVersionHistory', None), ('forceKnowledge:articleVersionHistoryDataProvider', None), ('forceKnowledge:articlesObjectHomeTablet', None), ('forceKnowledge:articlesSearch', None), ('forceKnowledge:assignArticle', None), ('forceKnowledge:blockSection', None), ('forceKnowledge:createCodeBlockPanel', None), ('forceKnowledge:highlightedOutputText', None), ('forceKnowledge:inputRichText', None), ('forceKnowledge:kbResultFieldTitle', None), ('forceKnowledge:kbResultStencil', None), ('forceKnowledge:kbResultStencilDesktop', None), ('forceKnowledge:kbResultStencilWithHover', None), ('forceKnowledge:knowledgeArchiveOptionDialog', None), ('forceKnowledge:knowledgeArticleVersionActionsCommon', None), ('forceKnowledge:knowledgeArticleVersionArchiveAction', None), ('forceKnowledge:knowledgeArticleVersionCreateDraftFromOnlineAction', None), ('forceKnowledge:knowledgeArticleVersionDeleteDraftAction', None), ('forceKnowledge:knowledgeArticleVersionDeleteMassAction', None), ('forceKnowledge:knowledgeArticleVersionFollowAction', None), ('forceKnowledge:knowledgeArticleVersionHighlightsPreviewStencil', None), ('forceKnowledge:knowledgeArticleVersionMassAssignAction', None), ('forceKnowledge:knowledgeArticleVersionMassSubmitForTranslationAction', None), ('forceKnowledge:knowledgeArticleVersionPublishAction', None), ('forceKnowledge:knowledgeArticleVersionPublishMassAction', None), ('forceKnowledge:knowledgeArticleVersionRestoreAction', None), ('forceKnowledge:knowledgeArticleVersionRestoreMassAction', None), ('forceKnowledge:knowledgeArticleVersionShareSites', None), ('forceKnowledge:knowledgeArticleVersionTranslationPublishAction', None), ('forceKnowledge:knowledgeDeleteOptionDialog', None), ('forceKnowledge:knowledgeEditCompletedTranslation', None), ('forceKnowledge:knowledgeMassArchiveOptionDialog', None), ('forceKnowledge:knowledgeMassAssignArticle', None), ('forceKnowledge:knowledgeMassDeleteOptionDialog', None), ('forceKnowledge:knowledgeMassPublishOptionDialog', None), ('forceKnowledge:knowledgeMassRestoreOptionDialog', None), ('forceKnowledge:knowledgeMassSubmitForTranslationOptionDialog', None), ('forceKnowledge:knowledgeMigrationFieldsMappingTab', None), ('forceKnowledge:knowledgeMigrationFieldsMappingTabInputSelect', None), ('forceKnowledge:knowledgeMigrationFlow', None), ('forceKnowledge:knowledgeMigrationFlowEndStep', None), ('forceKnowledge:knowledgeMigrationFlowFieldsMappingStep', None), ('forceKnowledge:knowledgeMigrationFlowFilesMigrationStep', None), ('forceKnowledge:knowledgeMigrationFlowStartStep', None), ('forceKnowledge:knowledgeMigrationForSingleArticleTypeFlow', None), ('forceKnowledge:knowledgeMigrationForSingleArticleTypeFlowEndStep', None), ('forceKnowledge:knowledgeMigrationForSingleArticleTypeFlowStartStep', None), ('forceKnowledge:knowledgeMigrationSetup', None), ('forceKnowledge:knowledgeMigrationSetupNonUiAction', None), ('forceKnowledge:knowledgePublishOptionDialog', None), ('forceKnowledge:knowledgeRestoreOptionDialog', None), ('forceKnowledge:multiSelectTable', None), ('forceKnowledge:multiSelectTree', None), ('forceKnowledge:multiSelectTreeNode', None), ('forceKnowledge:optionDialogFooter', None), ('forceKnowledge:outputPublishStatus', None), ('forceKnowledge:outputRichTextForKnowledge', None), ('forceKnowledge:pillListSection', None), ('forceKnowledge:pillListViewer', None), ('forceKnowledge:recordHomeLanguageSwitcher', None), ('forceKnowledge:submitKnowledgeArticleVersionForTranslation', None), ('forceKnowledge:suggestedArticle', None), ('forceKnowledge:tempDepend', None), ('forceKnowledge:titleInput', None), ('forceKnowledge:urlNameInput', None), ('forceSearch:actionDataProvider', None), ('forceSearch:assistant', None), ('forceSearch:assistantDialog', None), ('forceSearch:assistantDialogContainer', None), ('forceSearch:assistantListViewPreview', None), ('forceSearch:assistantRecordPreview', None), ('forceSearch:assistantSecondaryPanel', None), ('forceSearch:assistantSuggestionItem', None), ('forceSearch:assistantSuggestionsDataProvider', None), ('forceSearch:assistantSuggestionsList', None), ('forceSearch:assistantTip', None), ('forceSearch:baseSearch', None), ('forceSearch:baseSearchInput', None), ('forceSearch:baseSearchPage', None), ('forceSearch:bestResult', None), ('forceSearch:bestResultFeedback', None), ('forceSearch:bestResultFooter', None), ('forceSearch:desktopHeader', None), ('forceSearch:desktopHeaderManager', None), ('forceSearch:entityMenuItem', None), ('forceSearch:entitySelectorMenu', None), ('forceSearch:experimentContextInitializer', None), ('forceSearch:feedback', None), ('forceSearch:filterInput', None), ('forceSearch:filterInputPicklist', None), ('forceSearch:filterInputRadio', None), ('forceSearch:filterInputRange', None), ('forceSearch:filterInputText', None), ('forceSearch:filterPanel', None), ('forceSearch:globalSearchLauncher', None), ('forceSearch:groupContainer', None), ('forceSearch:headerSearchInput', None), ('forceSearch:input', None), ('forceSearch:inputDataProvider', None), ('forceSearch:inputDesktop', None), ('forceSearch:inputDesktopDataProvider', None), ('forceSearch:inputDesktopListFooter', None), ('forceSearch:inputDesktopOption', None), ('forceSearch:inputDesktopPillWrapper', None), ('forceSearch:inputEntitySelector', None), ('forceSearch:inputEntitySelectorDataProvider', None), ('forceSearch:inputLookupDesktop', None), ('forceSearch:inputLookupDesktopActionItem', None), ('forceSearch:inputLookupDesktopDataProvider', None), ('forceSearch:inputLookupDesktopOption', None), ('forceSearch:inputMobile', None), ('forceSearch:intentQueryMessage', None), ('forceSearch:lookupAdvanced', None), ('forceSearch:lookupAdvancedFooter', None), ('forceSearch:mouseTrap', None), ('forceSearch:mru', None), ('forceSearch:mruDataProvider', None), ('forceSearch:mruMobile', None), ('forceSearch:mruMobileItem', None), ('forceSearch:multiScopesDataProvider', None), ('forceSearch:noResults', None), ('forceSearch:optionDataProvider', None), ('forceSearch:predictedResults', None), ('forceSearch:predictedResultsAppChart', None), ('forceSearch:predictedResultsDataProvider', None), ('forceSearch:queryExpansionMessage', None), ('forceSearch:queryFeedback', None), ('forceSearch:queryFeedbackMessage', None), ('forceSearch:queryMessage', None), ('forceSearch:queryRecourseMessage', None), ('forceSearch:queryRemediationMessage', None), ('forceSearch:queryRemediationMessagePanel', None), ('forceSearch:recordPicker', None), ('forceSearch:recordPickerOption', None), ('forceSearch:recordPickerOptionCard', None), ('forceSearch:recordPickerOptionInline', None), ('forceSearch:recordPreview', None), ('forceSearch:recordPreviewActions', None), ('forceSearch:recordPreviewBody', None), ('forceSearch:recordPreviewFields', None), ('forceSearch:recordPreviewHeader', None), ('forceSearch:recordPreviewRelatedList', None), ('forceSearch:recordPreviewTitle', None), ('forceSearch:results', None), ('forceSearch:resultsCardView', None), ('forceSearch:resultsCompact', None), ('forceSearch:resultsDataProvider', None), ('forceSearch:resultsFeed', None), ('forceSearch:resultsFeedMouseTrap', None), ('forceSearch:resultsFilters', None), ('forceSearch:resultsGridLVM', None), ('forceSearch:resultsGridLVMDataManager', None), ('forceSearch:resultsGridView', None), ('forceSearch:resultsGridViewMouseTrap', None), ('forceSearch:resultsHeaderFilters', None), ('forceSearch:resultsList', None), ('forceSearch:resultsListDataManager', None), ('forceSearch:resultsListItem', None), ('forceSearch:resultsListMouseTrap', None), ('forceSearch:resultsMultiScope', None), ('forceSearch:resultsMultiScopeCompact', None), ('forceSearch:resultsRegion', None), ('forceSearch:resultsRegionDesktop', None), ('forceSearch:resultsRegionMobile', None), ('forceSearch:resultsTopResults', None), ('forceSearch:resultsTopResultsDataProvider', None), ('forceSearch:scopeItem', None), ('forceSearch:scopeOverflow', None), ('forceSearch:scopeOverflowList', None), ('forceSearch:scopes', None), ('forceSearch:scopesDataProvider', None), ('forceSearch:scopesList', None), ('forceSearch:scopesListDataProvider', None), ('forceSearch:scopesListPlaceholder', None), ('forceSearch:scopesListSection', None), ('forceSearch:scopesRibbon', None), ('forceSearch:scopesRibbonDataProvider', None), ('forceSearch:search', None), ('forceSearch:searchDataProvider', None), ('forceSearch:searchFor', None), ('forceSearch:searchGDP', None), ('forceSearch:searchGDPCache', None), ('forceSearch:searchGDPCacheActivity', None), ('forceSearch:searchGDPCacheMrus', None), ('forceSearch:searchGDPCachePermsAndPrefs', None), ('forceSearch:searchGDPCacheResultsFilters', None), ('forceSearch:searchGDPCacheScopes', None), ('forceSearch:searchInputListHeader', None), ('forceSearch:searchMoreBox', None), ('forceSearch:searchPage', None), ('forceSearch:searchPageAssistant', None), ('forceSearch:searchPageAssistantDesktop', None), ('forceSearch:searchPageAssistantMobile', None), ('forceSearch:searchPageDesktop', None), ('forceSearch:searchResultsGridHeader', None), ('forceSearch:searchResultsSummary', None), ('forceSearch:searchScopeHeader', None), ('forceSearch:test', None), ('forceSearch:testMockDataProvider', None), ('forceSearch:typeAheadDataProvider', None), ('forceTopic:featuredTopicItem', None), ('forceTopic:featuredTopics', None), ('forceTopic:featuredTopicsDataProvider', None), ('forceTopic:featuredTopicsDesignInfo', None), ('forceTopic:navigationTopicsMenu', None), ('forceTopic:placeholder', None), ('forceTopic:publisherTopicsWidget', None), ('forceTopic:simpleTopicAssignmentItem', None), ('forceTopic:simpleTopicAssignments', None), ('forceTopic:subTopicNavigation', None), ('forceTopic:subTopicNavigationDropDown', None), ('forceTopic:topicBreadcrumbs', None), ('forceTopic:topicLink', None), ('forceTopic:topicList', None), ('forceTopic:topicNavigationMenu', None), ('forceTopic:topicNavigationMenuLink', None), ('forceTopic:topicTriggerLink', None), ('frameworkEditor:arrangementEditor', None), ('frameworkEditor:baseEditorCanvasConfig', None), ('frameworkEditor:baseInvalidComponent', None), ('frameworkEditor:canvas', None), ('frameworkEditor:canvasContainer', None), ('frameworkEditor:canvasElement', None), ('frameworkEditor:canvasNode', None), ('frameworkEditor:canvasPanel', None), ('frameworkEditor:componentPlaceholder', None), ('frameworkEditor:errorComponent', None), ('frameworkEditor:modelRemoteData', None), ('frameworkEditor:noUserAccessPlaceholder', None), ('frameworkEditor:palettePanel', None), ('frameworkEditor:propertyPanel', None), ('frameworkEditor:surfaceTemplate', None), ('frameworkEditor:unsupportedFormFactorComponent', None), ('frameworkEditor:warningComponent', None), ('googleConnector:emailTransportServiceSetting', None), ('googleConnector:emailTransportServiceSetupPage', None), ('hammerSetup:hammerResultStatus', None), ('hammerSetup:progressPie', None), ('home:activateActionOverrideAppAssignmentDataProvider', None), ('home:activateActionOverrideAppAssignmentStep', None), ('home:activateActionOverrideModeSelectionStep', None), ('home:activateActionOverrideReviewAssignmentDataProvider', None), ('home:activateActionOverrideReviewAssignmentStep', None), ('home:activateActionOverrideSelectedAppList', None), ('home:activateAppProfileReviewStep', None), ('home:activateAppProfileReviewStepDataProvider', None), ('home:activateHomeHierarchy', None), ('home:activateHomePage', None), ('home:activateProfileOverrideProfileStep', None), ('home:activateProfileOverrideProfileStepDataProvider', None), ('home:activateSelectedAppProfileList', None), ('home:activateSelectedAppProfileListDataProvider', None), ('home:assistant', None), ('home:assistantActionsContainer', None), ('home:assistantCardExpandedPanel', None), ('home:assistantCardList', None), ('home:assistantCardStencil', None), ('home:assistantCollapsedCard', None), ('home:assistantSmallActionButton', None), ('home:baseCollapsedCard', None), ('home:defaultPageAssignment', None), ('home:desktopTemplate', None), ('home:eventCardDataManager', None), ('home:eventCardStencil', None), ('home:eventContainer', None), ('home:goalEditor', None), ('home:goalSetting', None), ('home:heroChart', None), ('home:heroChartHeader', None), ('home:heroChartLegend', None), ('home:heroChartOpptyContainer', None), ('home:heroChartOverlay', None), ('home:heroChartTable', None), ('home:homeCard', None), ('home:landing', None), ('home:myDayHeroChart', None), ('home:newsPanel', None), ('home:outputLookup', None), ('home:outputLookupWithPreviewWithoutProfilePic', None), ('home:pageAssignmentByProfileReviewStep', None), ('home:pageAssignmentDefaultAssignmentReviewStep', None), ('home:pageAssignmentList', None), ('home:pageAssignmentListByApp', None), ('home:pageAssignmentListByAppDataProvider', None), ('home:pageAssignmentListDataProvider', None), ('home:pageAssignmentPagePickerStep', None), ('home:pageAssignmentPagePickerStepDataProvider', None), ('home:pageAssignmentProfilePickerStep', None), ('home:pageAssignmentReviewStepDataProvider', None), ('home:pageAssignmentSetDefaultOrAssignStep', None), ('home:pageAssignmentsSetupPage', None), ('home:productivityMetrics', None), ('home:productivityMetricsCard', None), ('home:productivityMetricsEditor', None), ('home:productivityMetricsEditorRow', None), ('home:productivityMetricsHeader', None), ('home:recentRecordContainer', None), ('home:recentRecordListRow', None), ('home:recentsItemStencil', None), ('home:recentsRecordListView', None), ('home:removeSelectedAppProfileStep', None), ('home:setupActionMenu', None), ('home:tempDepend', None), ('home:topDealsCardDataProvider', None), ('home:topDealsContainer', None), ('home:topDealsListStencil', None), ('home:workQueueSummary', None), ('industries_manufacturing:actualsCalculationModeRenderer', None), ('industries_manufacturing:agreementCancelAction', None), ('industries_manufacturing:agreementSettings', None), ('industries_manufacturing:agreementTerms', None), ('industries_manufacturing:agreementTermsDataGrid', None), ('industries_manufacturing:statusRenderer', None), ('industries_manufacturing:updateContact', None), ('industries_manufacturing:updateContactFooterActions', None), ('instrumentation:accessLocatorEngine', None), ('instrumentation:beacon', None), ('instrumentation:chart', None), ('instrumentation:dockingContent', None), ('instrumentation:dynamicChartWrapper', None), ('instrumentation:lightningUsage', None), ('instrumentation:lightningUsageChatterFeedback', None), ('instrumentation:lightningUsageSetup', None), ('instrumentation:locatorEngine', None), ('instrumentation:locatorViewer', None), ('instrumentation:mainTemplate', None), ('instrumentation:transactionViewer', None), ('instrumentation:transactionsDefault', None), ('instrumentation:transactionsLtnginteraction', None), ('instrumentation:transactionsLtngpageView', None), ('instrumentation:transactionsProvider', None), ('instrumentation:uiManager', None), ('instrumentation:usageAppHeader', None), ('instrumentation:usageBody', None), ('instrumentation:usageChartGroup', None), ('instrumentation:usageNavBar', None), ('instrumentation:usageOptimizer', None), ('instrumentation:usageTab', None), ('instrumentation:viewerDockingPanel', None), ('instrumentation:viewerSeparateWindow', None), ('instrumentation:viewerSharedWindow', None), ('instrumentation:viewerWaterfall', None), ('instrumentation:waterfall', None), ('iot:activityLog', None), ('iot:context', None), ('iot:dataProviderOrchestrationContext', None), ('iot:dataproviderActivityLog', None), ('iot:dataproviderDataset', None), ('iot:dataproviderOrchestration', None), ('iot:dataproviderOrchestrationUsage', None), ('iot:embedded', None), ('iot:enablePanel', None), ('iot:insightsMetricsEditor', None), ('iot:insightsSourcePicklistEditor', None), ('iot:iotBasicSetup', None), ('iot:iotui', None), ('iot:orchestration', None), ('iot:usage', None), ('iot:webtemplate', None), ('knowledgeone:articleActions', None), ('knowledgeone:dialog', None), ('knowledgeone:knowledgeentitydetail', None), ('knowledgeone:message', None), ('laf:appLayoutHost', None), ('laf:baseLayoutContainer', None), ('laf:baseRouter', None), ('laf:directCmpReferenceRouter', None), ('laf:layoutContainer', None), ('laf:mobileWebLayoutContainer', None), ('laf:navEventManager', None), ('laf:navigationServiceAPI', None), ('laf:pageHost', None), ('laf:pageTransactionProcessor', None), ('laf:platformPageResolver', None), ('laf:platformRouter', None), ('laf:sObjectRouter', None), ('laf:singlePaneWindowManager', None), ('laf:standardLayoutContainer', None), ('laf:standardLayoutContentSelector', None), ('laf:windowedLayoutContainer', None), ('lbpm:actionHistoryList', None), ('lbpm:actionHistoryListDataProvider', None), ('lbpm:actionHistoryListItem', None), ('lbpm:actionHistoryTab', None), ('lbpm:actionList', None), ('lbpm:actionListChannelSettingsModal', None), ('lbpm:actionListChannelSettingsTab', None), ('lbpm:actionListChannelsEditor', None), ('lbpm:actionListDefaultFlow', None), ('lbpm:actionListDefaultFlowsSelector', None), ('lbpm:actionListDesignInfo', None), ('lbpm:actionListFlow', None), ('lbpm:actionListFlowStages', None), ('lbpm:actionListModalHeader', None), ('lbpm:actionListTab', None), ('lbpm:actionPicker', None), ('lbpm:actionPickerDataProvider', None), ('lbpm:actionSettings', None), ('lbpm:actionSettingsEditor', None), ('lbpm:actionSettingsModal', None), ('lbpm:availableEntitiesDataProvider', None), ('lbpm:defaultFlowDropZone', None), ('lbpm:flowBody', None), ('lbpm:flowRuntimeForRecordAction', None), ('lbpm:lsfActionSettings', None), ('lbpm:lsfChannelSettings', None), ('lbpm:lsfChannelSettingsStep', None), ('lbpm:lsfChannelSettingsTab', None), ('lbpm:lsfDefaultFlow', None), ('lbpm:lsfDefaultFlowDropZone', None), ('lbpm:lsfDefaultFlowsSelector', None), ('lbpm:lsfEditDeployment', None), ('lbpm:lsfEntitySelectionStep', None), ('lbpm:lsfFilterStep', None), ('lbpm:lsfIntroStep', None), ('lbpm:lsfNameStep', None), ('lbpm:lsfNewDeployment', None), ('lbpm:lsfRecommendationsStep', None), ('lbpm:lsfSaveStep', None), ('lbpm:lsfSuccessStep', None), ('lbpm:nbaPanel', None), ('lbpm:pausedFlowsSection', None), ('lbpm:recordActionDeployment', None), ('lbpm:recordActionDeploymentList', None), ('lbpm:recordActionManager', None), ('lcwizard:dataLoaderSetupPage', None), ('lcwizard:lcGuidedSetupAuthProviderStep', None), ('lcwizard:lcGuidedSetupAuthStep', None), ('lcwizard:lcGuidedSetupDialog', None), ('lcwizard:lcGuidedSetupHome', None), ('lcwizard:lcGuidedSetupNewXdsStep', None), ('lcwizard:lcGuidedSetupObjectRelDialog', None), ('lcwizard:lcGuidedSetupParametersStep', None), ('lcwizard:lcGuidedSetupPrereqStep', None), ('lcwizard:lcGuidedSetupRelChooseObjectStep', None), ('lcwizard:lcGuidedSetupRelFLSStep', None), ('lcwizard:lcGuidedSetupRelFieldDetailStep', None), ('lcwizard:lcGuidedSetupRelPageLayoutStep', None), ('lcwizard:lcGuidedSetupRelRelatedListStep', None), ('lcwizard:lcGuidedSetupSearchLayoutStep', None), ('lcwizard:lcGuidedSetupTabNextStep', None), ('lcwizard:lcGuidedSetupTabStep', None), ('lcwizard:lcGuidedSetupValidateAndSyncStep', None), ('lightning:accordion', None), ('lightning:accordionSection', None), ('lightning:breadcrumbs', None), ('lightning:button', None), ('lightning:buttonGroup', None), ('lightning:buttonIcon', None), ('lightning:buttonMenu', None), ('lightning:buttonStateful', None), ('lightning:card', None), ('lightning:carousel', None), ('lightning:container', None), ('lightning:conversationToolkitAPI', None), ('lightning:deprecatedButtonIcon', None), ('lightning:deprecatedFormattedTime', None), ('lightning:deprecatedIcon', None), ('lightning:deprecatedPrimitiveIcon', None), ('lightning:eventBusAPI', None), ('lightning:fileCard', None), ('lightning:flexipageRegionInfo', None), ('lightning:flow', None), ('lightning:formElement', None), ('lightning:inputRichText', None), ('lightning:inputRichTextButtonBase', None), ('lightning:inputRichTextButtonSimple', None), ('lightning:insertImageButton', None), ('lightning:layout', None), ('lightning:layoutItem', None), ('lightning:listView', None), ('lightning:menuItem', None), ('lightning:navigation', None), ('lightning:navigationItemAPI', None), ('lightning:nextBestActions', None), ('lightning:notificationsLibrary', None), ('lightning:omniToolkitAPI', None), ('lightning:overlayInteropWrapper', None), ('lightning:overlayLibrary', None), ('lightning:path', None), ('lightning:picklistPath', None), ('lightning:pill', None), ('lightning:primitiveFileDroppableZone', None), ('lightning:primitiveIconTest', None), ('lightning:primitiveTextOrComponent', None), ('lightning:progressIndicator', None), ('lightning:quickActionAPI', None), ('lightning:quipCard', None), ('lightning:recordEditForm', None), ('lightning:recordViewForm', None), ('lightning:select', None), ('lightning:tab', None), ('lightning:tabset', None), ('lightning:test', None), ('lightning:tile', None), ('lightning:tooltip', None), ('lightning:unsavedChanges', None), ('lightning:utilityBarAPI', None), ('lightning:verticalNavigation', None), ('lightning:verticalNavigationOverflow', None), ('lightning:verticalNavigationSection', None), ('lightning:workspaceAPI', None), ('lightningInbox:associateButton', None), ('lightningInbox:contextualTrackingContainer', None), ('lightningInbox:contextualTrackingDesignInfo', None), ('lightningInbox:contextualTrackingDesignSubstitute', None), ('lightningInbox:eacWidgetContainer', None), ('lightningInbox:fuelGaugeHeader', None), ('lightningInbox:globalsManager', None), ('lightningInbox:gmailAfterSendManager', None), ('lightningInbox:insertFreeTimeWidgetContainer', None), ('lightningInbox:insertFreeTimeWidgetDesignInfo', None), ('lightningInbox:logItemButtonContainer', None), ('lightningInbox:logItemButtonDesignInfo', None), ('lightningInbox:logItemCardHeader', None), ('lightningInbox:logItemFlowContainer', None), ('lightningInbox:logItemFlowContainerFooter', None), ('lightningInbox:logItemInfoBanner', None), ('lightningInbox:logItemInviteeListRowStencil', None), ('lightningInbox:logItemNoneRow', None), ('lightningInbox:logItemPeopleListCard', None), ('lightningInbox:logItemRelatedRecordListCard', None), ('lightningInbox:logItemRelatedRecordListCardStencil', None), ('lightningInbox:logItemRelatedRecordViewMoreListCardStencil', None), ('lightningInbox:logItemSearchBar', None), ('lightningInbox:manageLinksContainer', None), ('lightningInbox:pinnedComponentToggle', None), ('lightningInbox:placeholder', None), ('lightningInbox:readReceiptListContainer', None), ('lightningInbox:readReceiptListContainerDesignInfo', None), ('lightningInbox:readReceiptListContainerSubstitute', None), ('lightningInbox:readReceiptWidgetDesignInfo', None), ('lightningInbox:readreceiptWidgetContainer', None), ('lightningInbox:recordSelectButton', None), ('lightningInbox:sendLaterListContainer', None), ('lightningInbox:sendLaterListDesignInfo', None), ('lightningInbox:sendLaterListDesignSubstitute', None), ('lightningInbox:sendLaterWidgetContainer', None), ('lightningInbox:sendLaterWidgetDesignInfo', None), ('lightningInbox:snippetsActionContainer', None), ('lightningInbox:snippetsActionContainerDesignSubstitute', None), ('lightningInbox:snippetsDesignInfo', None), ('lightningInbox:welcomeMatContainer', None), ('lightningInbox:whatEntityMatchingManager', None), ('lightningcommunity:backButton', None), ('lightningcomponentdemo:exampleAccordionBasic', None), ('lightningcomponentdemo:exampleAccordionConditional', None), ('lightningcomponentdemo:exampleAccordionMultiple', None), ('lightningcomponentdemo:exampleAccordionSection', None), ('lightningcomponentdemo:exampleAvatarBasic', None), ('lightningcomponentdemo:exampleAvatarIcons', None), ('lightningcomponentdemo:exampleAvatarInitials', None), ('lightningcomponentdemo:exampleAvatarSizes', None), ('lightningcomponentdemo:exampleAvatarVariants', None), ('lightningcomponentdemo:exampleBadge', None), ('lightningcomponentdemo:exampleBaseBreadcrumbs', None), ('lightningcomponentdemo:exampleBreadcrumbsWithIteration', None), ('lightningcomponentdemo:exampleBreadcrumbsWithOnClick', None), ('lightningcomponentdemo:exampleButtonGroup', None), ('lightningcomponentdemo:exampleButtonGroupDisabled', None), ('lightningcomponentdemo:exampleButtonGroupInverse', None), ('lightningcomponentdemo:exampleButtonGroupWithButtonMenu', None), ('lightningcomponentdemo:exampleButtonGroupWithButtonMenuDisabled', None), ('lightningcomponentdemo:exampleButtonIconStateful', None), ('lightningcomponentdemo:exampleButtonIconStatefulBorderFilled', None), ('lightningcomponentdemo:exampleButtonIconStatefulInverse', None), ('lightningcomponentdemo:exampleButtonIconStatefulSelected', None), ('lightningcomponentdemo:exampleButtonMenu', None), ('lightningcomponentdemo:exampleButtonMenuContainerIcon', None), ('lightningcomponentdemo:exampleButtonMenuDifferentIcon', None), ('lightningcomponentdemo:exampleButtonMenuDoubleIcon', None), ('lightningcomponentdemo:exampleButtonMenuSingleIcon', None), ('lightningcomponentdemo:exampleButtonStateful', None), ('lightningcomponentdemo:exampleButtonStatefulBrand', None), ('lightningcomponentdemo:exampleButtonStatefulInverse', None), ('lightningcomponentdemo:exampleButtonStatefulText', None), ('lightningcomponentdemo:exampleButtonsAccessibility', None), ('lightningcomponentdemo:exampleButtonsDisabled', None), ('lightningcomponentdemo:exampleButtonsIcon', None), ('lightningcomponentdemo:exampleButtonsIconInverse', None), ('lightningcomponentdemo:exampleButtonsInverse', None), ('lightningcomponentdemo:exampleCardBase', None), ('lightningcomponentdemo:exampleCardCustom', None), ('lightningcomponentdemo:exampleCardNarrow', None), ('lightningcomponentdemo:exampleCarousel', None), ('lightningcomponentdemo:exampleCarouselAutoScrollOff', None), ('lightningcomponentdemo:exampleCheckboxGroup', None), ('lightningcomponentdemo:exampleCheckboxGroupDisabled', None), ('lightningcomponentdemo:exampleCheckboxGroupRequired', None), ('lightningcomponentdemo:exampleClickToDial', None), ('lightningcomponentdemo:exampleClickToDialPlain', None), ('lightningcomponentdemo:exampleColorPicker', None), ('lightningcomponentdemo:exampleCombobox', None), ('lightningcomponentdemo:exampleComboboxDisabled', None), ('lightningcomponentdemo:exampleComboboxLong', None), ('lightningcomponentdemo:exampleComboboxMultiSelectedOptions', None), ('lightningcomponentdemo:exampleComboboxRequired', None), ('lightningcomponentdemo:exampleCurrencyFormatting', None), ('lightningcomponentdemo:exampleDatatableBase', None), ('lightningcomponentdemo:exampleDatatableDynamicRowActions', None), ('lightningcomponentdemo:exampleDatatableInAction', None), ('lightningcomponentdemo:exampleDatatableInfiniteLoading', None), ('lightningcomponentdemo:exampleDatatableInlineEdit', None), ('lightningcomponentdemo:exampleDatatableMaxRowSelection', None), ('lightningcomponentdemo:exampleDatatableRowSelection', None), ('lightningcomponentdemo:exampleDatatableStaticRowActions', None), ('lightningcomponentdemo:exampleDatatableWithoutCheckboxes', None), ('lightningcomponentdemo:exampleDateFormatting', None), ('lightningcomponentdemo:exampleDateTimeFormatting', None), ('lightningcomponentdemo:exampleDecimalFormatting', None), ('lightningcomponentdemo:exampleDualListbox', None), ('lightningcomponentdemo:exampleDualListboxDefaultValues', None), ('lightningcomponentdemo:exampleDualListboxMinMaxValues', None), ('lightningcomponentdemo:exampleDualListboxRequiredValues', None), ('lightningcomponentdemo:exampleDynamicIconEQ', None), ('lightningcomponentdemo:exampleDynamicIconEllie', None), ('lightningcomponentdemo:exampleDynamicIconScore', None), ('lightningcomponentdemo:exampleDynamicIconStrength', None), ('lightningcomponentdemo:exampleDynamicIconTrend', None), ('lightningcomponentdemo:exampleDynamicIconWaffle', None), ('lightningcomponentdemo:exampleFileSelectorDisabled', None), ('lightningcomponentdemo:exampleFileUpload', None), ('lightningcomponentdemo:exampleFlow', None), ('lightningcomponentdemo:exampleFormattedAddress', None), ('lightningcomponentdemo:exampleFormattedEmail', None), ('lightningcomponentdemo:exampleFormattedLocation', None), ('lightningcomponentdemo:exampleFormattedName', None), ('lightningcomponentdemo:exampleFormattedPhone', None), ('lightningcomponentdemo:exampleFormattedRichText', None), ('lightningcomponentdemo:exampleFormattedText', None), ('lightningcomponentdemo:exampleFormattedUrl', None), ('lightningcomponentdemo:exampleGroupedCombobox', None), ('lightningcomponentdemo:exampleHelptextBasic', None), ('lightningcomponentdemo:exampleHelptextIcon', None), ('lightningcomponentdemo:exampleIcon', None), ('lightningcomponentdemo:exampleIconCustom', None), ('lightningcomponentdemo:exampleIconVariants', None), ('lightningcomponentdemo:exampleInputAddress', None), ('lightningcomponentdemo:exampleInputAddressWithList', None), ('lightningcomponentdemo:exampleInputCheckbox', None), ('lightningcomponentdemo:exampleInputCheckboxButton', None), ('lightningcomponentdemo:exampleInputColor', None), ('lightningcomponentdemo:exampleInputDate', None), ('lightningcomponentdemo:exampleInputDateTime', None), ('lightningcomponentdemo:exampleInputEmail', None), ('lightningcomponentdemo:exampleInputFile', None), ('lightningcomponentdemo:exampleInputLocation', None), ('lightningcomponentdemo:exampleInputMaxlength', None), ('lightningcomponentdemo:exampleInputName', None), ('lightningcomponentdemo:exampleInputNumber', None), ('lightningcomponentdemo:exampleInputPassword', None), ('lightningcomponentdemo:exampleInputRadio', None), ('lightningcomponentdemo:exampleInputRichTextButtonImage', None), ('lightningcomponentdemo:exampleInputRichTextButtonLink', None), ('lightningcomponentdemo:exampleInputSearch', None), ('lightningcomponentdemo:exampleInputSearchHiddenLabel', None), ('lightningcomponentdemo:exampleInputSearchWithSpinner', None), ('lightningcomponentdemo:exampleInputTel', None), ('lightningcomponentdemo:exampleInputText', None), ('lightningcomponentdemo:exampleInputTime', None), ('lightningcomponentdemo:exampleInputToggle', None), ('lightningcomponentdemo:exampleInputUrl', None), ('lightningcomponentdemo:exampleInputValidation', None), ('lightningcomponentdemo:exampleLayoutHorizontalSpace', None), ('lightningcomponentdemo:exampleLayoutHorizontalSpread', None), ('lightningcomponentdemo:exampleLayoutItems', None), ('lightningcomponentdemo:exampleLayoutItemsAlignmentBump', None), ('lightningcomponentdemo:exampleLayoutItemsBase', None), ('lightningcomponentdemo:exampleLayoutItemsDefaultSize', None), ('lightningcomponentdemo:exampleLayoutItemsFlexNoGrow', None), ('lightningcomponentdemo:exampleLayoutItemsFlexible', None), ('lightningcomponentdemo:exampleLayoutItemsMediumSizeOverride', None), ('lightningcomponentdemo:exampleLayoutItemsPadding', None), ('lightningcomponentdemo:exampleLayoutItemsSizeOverrides', None), ('lightningcomponentdemo:exampleLayoutPage', None), ('lightningcomponentdemo:exampleLayoutPullToBoundary', None), ('lightningcomponentdemo:exampleLayoutSimple', None), ('lightningcomponentdemo:exampleLayoutVerticalCenter', None), ('lightningcomponentdemo:exampleLayoutVerticalStretch', None), ('lightningcomponentdemo:exampleMapAttributes', None), ('lightningcomponentdemo:exampleMapMultipleMarkers', None), ('lightningcomponentdemo:exampleMapSingleMarker', None), ('lightningcomponentdemo:exampleMultiPicklist', None), ('lightningcomponentdemo:exampleOpenFiles', None), ('lightningcomponentdemo:exampleOutputField', None), ('lightningcomponentdemo:exampleOutputFieldDisplay', None), ('lightningcomponentdemo:exampleOutputFieldVariants', None), ('lightningcomponentdemo:exampleOutputFieldVariantsDisplay', None), ('lightningcomponentdemo:examplePercentFormatting', None), ('lightningcomponentdemo:examplePicklist', None), ('lightningcomponentdemo:examplePillAvatar', None), ('lightningcomponentdemo:examplePillBase', None), ('lightningcomponentdemo:examplePillContainer', None), ('lightningcomponentdemo:examplePillIcon', None), ('lightningcomponentdemo:examplePillWithError', None), ('lightningcomponentdemo:exampleProgressBar', None), ('lightningcomponentdemo:exampleProgressBarInAction', None), ('lightningcomponentdemo:exampleProgressIndicator', None), ('lightningcomponentdemo:exampleProgressIndicatorPath', None), ('lightningcomponentdemo:exampleProgressIndicatorWithIfCondition', None), ('lightningcomponentdemo:exampleProgressIndicatorWithIteration', None), ('lightningcomponentdemo:exampleRadioButtonGroup', None), ('lightningcomponentdemo:exampleRadioButtonGroupDisabled', None), ('lightningcomponentdemo:exampleRadioButtonGroupRequired', None), ('lightningcomponentdemo:exampleRadioGroup', None), ('lightningcomponentdemo:exampleRadioGroupDisabled', None), ('lightningcomponentdemo:exampleRadioGroupRequired', None), ('lightningcomponentdemo:exampleRecordCreate', None), ('lightningcomponentdemo:exampleRecordEdit', None), ('lightningcomponentdemo:exampleRegularButtons', None), ('lightningcomponentdemo:exampleRegularButtonsIcon', None), ('lightningcomponentdemo:exampleRelativeDateTime', None), ('lightningcomponentdemo:exampleRichTextBottomToolbar', None), ('lightningcomponentdemo:exampleRichTextButton', None), ('lightningcomponentdemo:exampleRichTextEditor', None), ('lightningcomponentdemo:exampleRichTextEditorWithButton', None), ('lightningcomponentdemo:exampleSelect', None), ('lightningcomponentdemo:exampleSelectChange', None), ('lightningcomponentdemo:exampleSelectDynamic', None), ('lightningcomponentdemo:exampleSelectIteration', None), ('lightningcomponentdemo:exampleSlider', None), ('lightningcomponentdemo:exampleSliderBasic', None), ('lightningcomponentdemo:exampleSliderSizes', None), ('lightningcomponentdemo:exampleSliderType', None), ('lightningcomponentdemo:exampleSliderVariant', None), ('lightningcomponentdemo:exampleSpinnerIf', None), ('lightningcomponentdemo:exampleSpinnerInverse', None), ('lightningcomponentdemo:exampleSpinnerSizes', None), ('lightningcomponentdemo:exampleTabsAuraIf', None), ('lightningcomponentdemo:exampleTabsDefault', None), ('lightningcomponentdemo:exampleTabsLazy', None), ('lightningcomponentdemo:exampleTabsScoped', None), ('lightningcomponentdemo:exampleTabsVertical', None), ('lightningcomponentdemo:exampleTabset', None), ('lightningcomponentdemo:exampleTabsetOverflow', None), ('lightningcomponentdemo:exampleTabsetSelect', None), ('lightningcomponentdemo:exampleTextarea', None), ('lightningcomponentdemo:exampleTile', None), ('lightningcomponentdemo:exampleTileBoard', None), ('lightningcomponentdemo:exampleTileWithAvatar', None), ('lightningcomponentdemo:exampleTileWithIcon', None), ('lightningcomponentdemo:exampleTimeFormatting', None), ('lightningcomponentdemo:exampleTooltipAuto', None), ('lightningcomponentdemo:exampleTooltipButton', None), ('lightningcomponentdemo:exampleTooltipSimple', None), ('lightningcomponentdemo:exampleTree', None), ('lightningcomponentdemo:exampleTreeAddition', None), ('lightningcomponentdemo:exampleTreeGridAsyncExpand', None), ('lightningcomponentdemo:exampleTreeGridBase', None), ('lightningcomponentdemo:exampleTreeGridWithExpandedStateQuery', None), ('lightningcomponentdemo:exampleTreeNavigation', None), ('lightningcomponentdemo:exampleTreeNested', None), ('lightningcomponentdemo:exampleTreeSelect', None), ('lightningcomponentdemo:exampleTreeWithMetatext', None), ('lightningcomponentdemo:exampleVerticalNavAdvanced', None), ('lightningcomponentdemo:exampleVerticalNavBadge', None), ('lightningcomponentdemo:exampleVerticalNavBasic', None), ('lightningcomponentdemo:exampleVerticalNavCompact', None), ('lightningcomponentdemo:exampleVerticalNavHref', None), ('lightningcomponentdemo:exampleVerticalNavIcon', None), ('lightningcomponentdemo:exampleVerticalNavIteration', None), ('lightningcomponentdemo:exampleVerticalNavOverflow', None), ('lightningcomponentdemo:exampleVerticalNavSelected', None), ('lightningcomponentdemo:exampleVerticalNavShaded', None), ('lightningcomponentdemo:exampleVerticalNavValidation', None), ('lightningcomponentdemo:fileItem', None), ('lightningcomponentdemo:fileSelector', None), ('lightningcomponentdemo:filesList', None), ('lightningcomponentdemo:iconGenerator', None), ('lightningcomponentdemo:iconItem', None), ('lightningcomponentdemo:iconLibrary', None), ('lightningcomponentdemo:iconList', None), ('lightningcomponentdemo:layoutGenerator', None), ('lightningdocs:avatar', None), ('lightningdocs:badge', None), ('lightningdocs:breadcrumb', None), ('lightningdocs:buttonIconStateful', None), ('lightningdocs:checkboxGroup', None), ('lightningdocs:clickToDial', None), ('lightningdocs:combobox', None), ('lightningdocs:datatable', None), ('lightningdocs:dualListbox', None), ('lightningdocs:dynamicIcon', None), ('lightningdocs:empApi', None), ('lightningdocs:fileUpload', None), ('lightningdocs:formattedAddress', None), ('lightningdocs:formattedDateTime', None), ('lightningdocs:formattedEmail', None), ('lightningdocs:formattedLocation', None), ('lightningdocs:formattedName', None), ('lightningdocs:formattedNumber', None), ('lightningdocs:formattedPhone', None), ('lightningdocs:formattedRichText', None), ('lightningdocs:formattedText', None), ('lightningdocs:formattedTime', None), ('lightningdocs:formattedUrl', None), ('lightningdocs:helptext', None), ('lightningdocs:icon', None), ('lightningdocs:input', None), ('lightningdocs:inputAddress', None), ('lightningdocs:inputField', None), ('lightningdocs:inputLocation', None), ('lightningdocs:inputName', None), ('lightningdocs:map', None), ('lightningdocs:outputField', None), ('lightningdocs:pillContainer', None), ('lightningdocs:progressBar', None), ('lightningdocs:radioGroup', None), ('lightningdocs:recordForm', None), ('lightningdocs:relativeDateTime', None), ('lightningdocs:slider', None), ('lightningdocs:spinner', None), ('lightningdocs:textarea', None), ('lightningdocs:tree', None), ('lightningdocs:treeGrid', None), ('lightningdocs:verticalNavigationItem', None), ('lightningdocs:verticalNavigationItemBadge', None), ('lightningdocs:verticalNavigationItemIcon', None), ('lightningsnapin:minimizedAPI', None), ('lightningsnapin:prechatAPI', None), ('lightningsnapin:settingsAPI', None), ('liveAgent:abstractPushedRequest', None), ('liveAgent:chatWidgetWork', None), ('liveAgent:liveChatButton', None), ('liveAgent:presenceStatus', None), ('liveAgent:presenceStatusMenuLink', None), ('liveAgent:presenceStatusTester', None), ('liveAgent:presenceStatusTesterData', None), ('liveAgent:presenceWidget', None), ('liveAgent:presenceWidgetTester', None), ('liveAgent:presenceWidgetTesterData', None), ('liveAgent:pushedEntityRequest', None), ('liveAgent:pushedEntityRequestTester', None), ('liveAgent:pushedEntityRequestTesterData', None), ('lst:listViewManagerDataTableWrapper', None), ('ltng:developerError', None), ('ltng:outAppTemplate', None), ('ltng:require', None), ('ltngtools:dataProvider', None), ('macros:browser', None), ('macros:browserPanel', None), ('macros:browserPanelEmptyListPreview', None), ('macros:browserPanelList', None), ('macros:browserPanelListDataProvider', None), ('macros:browserPanelListFolderItem', None), ('macros:browserPanelListItem', None), ('macros:browserPanelListRecordItem', None), ('macros:browserPanelNavigationBreadCrumbItem', None), ('macros:browserPanelNavigationBreadCrumbs', None), ('macros:canvas', None), ('macros:dialog', None), ('macros:editor', None), ('macros:emailTemplatePillList', None), ('macros:engine', None), ('macros:executionPanel', None), ('macros:expressionContainer', None), ('macros:expressionGroup', None), ('macros:expressionGroupContainer', None), ('macros:header', None), ('macros:helpDropdown', None), ('macros:instructionsPanel', None), ('macros:keyboardHelpDialog', None), ('macros:lightningAdapter', None), ('macros:lightningMacroSetup', None), ('macros:macroDetail', None), ('macros:macroInstructions', None), ('macros:macroList', None), ('macros:macroListItem', None), ('macros:macroUtilityItem', None), ('macros:openBuilderAction', None), ('macros:outputEntityIcon', None), ('macros:progressDialog', None), ('macros:readOnlyValueDisplay', None), ('macros:relativeDateTime', None), ('macros:rightPanel', None), ('macros:rightPanelInstruction', None), ('macros:rightPanelInstructionList', None), ('macros:rightPanelSubInstruction', None), ('macros:searchInput', None), ('macros:surfaceTemplate', None), ('macros:topToolbar', None), ('macros:widget', None), ('myday:landing', None), ('myday:myDay', None), ('native:layoutContainer', None), ('native:navigateToComponentShim', None), ('native:tempDepend', None), ('native:template', None), ('notes:contentNoteObjectHomeListStencil', None), ('notes:contentNoteRelatedListStencil', None), ('notes:editPanel', None), ('notes:editPanelManager', None), ('notes:editPanelStencil', None), ('notes:noteAutoCompleteOption', None), ('notes:noteDeleteRunnable', None), ('notes:noteEditor', None), ('notes:noteEditorDesktop', None), ('notes:noteEditorDesktopQuill', None), ('notes:noteEditorMobile', None), ('notes:noteEditorMobileQuill', None), ('notes:noteEditorPicker', None), ('notes:noteList', None), ('notes:noteListItem', None), ('notes:notePreviewPanel', None), ('notes:noteRecord', None), ('notes:noteVersionList', None), ('notes:noteVersionListDataProvider', None), ('notes:notesAbstractPanel', None), ('notes:notesDetail', None), ('notes:notesLandingPage', None), ('notes:notesListDesktop', None), ('notes:notesListViewHeader', None), ('notes:notesObjectHome', None), ('notes:notesTaskList', None), ('notes:notesTaskListDataProvider', None), ('notes:notesTaskListPanel', None), ('notes:notesTaskRowStencil', None), ('notes:outputFileType', None), ('notes:placeholder', None), ('notes:publisherCreatePanel', None), ('notes:quillAccessButton', None), ('notes:quillAddTaskButton', None), ('notes:quillInsertImageButton', None), ('notes:relateMruList', None), ('notes:relatePanel', None), ('notes:relateRecordsPanel', None), ('notes:relateSelectionItem', None), ('notes:relatedRecordPill', None), ('notes:relatedRecordsGrid', None), ('notes:relatedRecordsGridRemoveColumn', None), ('notes:relatedRecordsGridTitleColumn', None), ('notes:relatedRecordsList', None), ('notes:relatedRecordsListDesktop', None), ('notes:relatedRecordsListMobile', None), ('notes:sharingPrivacyIconLabel', None), ('notes:title', None), ('notes:utilityBarNoteList', None), ('objectManager:actionsMenu', None), ('objectManager:actionsMenuItem', None), ('objectManager:apexTriggerDetail', None), ('objectManager:apexTriggerDetailList', None), ('objectManager:buttonsLinksActionsDetailList', None), ('objectManager:byOn', None), ('objectManager:cellToDisplayFormFactorDetails', None), ('objectManager:cellToDisplayPageLinkBasedOnFormFactor', None), ('objectManager:clientArrayDataProvider', None), ('objectManager:collapsible', None), ('objectManager:commChannelLayoutDetailList', None), ('objectManager:compactLayoutDetail', None), ('objectManager:compactLayoutDetailList', None), ('objectManager:customFieldDeleteWarning', None), ('objectManager:customObjectDeleteWarning', None), ('objectManager:dataTable', None), ('objectManager:detailCard', None), ('objectManager:detailLink', None), ('objectManager:detailRow', None), ('objectManager:detailRowDualField', None), ('objectManager:detailRowSingleField', None), ('objectManager:detailTable', None), ('objectManager:externalLink', None), ('objectManager:fieldSetDetailList', None), ('objectManager:fieldsAndRelationshipsDetailList', None), ('objectManager:fixableHeader', None), ('objectManager:flexiPagesDetailList', None), ('objectManager:globalSearchBox', None), ('objectManager:hierarchyColumnDetailList', None), ('objectManager:leftNav', None), ('objectManager:limitDetailList', None), ('objectManager:lookupEntityByApiName', None), ('objectManager:lookupLayoutIdByRecordId', None), ('objectManager:lookupRedirect', None), ('objectManager:mySearchLayoutDetailList', None), ('objectManager:objectDataProvider', None), ('objectManager:objectDetail', None), ('objectManager:objectDetailComponent', None), ('objectManager:objectDetailPage', None), ('objectManager:objectEditLink', None), ('objectManager:objectLink', None), ('objectManager:objectList', None), ('objectManager:objectManagerAlohaPage', None), ('objectManager:objectManagerRouter', None), ('objectManager:outputCheckbox', None), ('objectManager:pageAssignment', None), ('objectManager:pageLayoutDetailList', None), ('objectManager:recordTypeDetail', None), ('objectManager:recordTypeDetailList', None), ('objectManager:relatedListCardButton', None), ('objectManager:relatedListCardDataProvider', None), ('objectManager:relatedLookupFilterDetail', None), ('objectManager:relatedLookupFilterDetailList', None), ('objectManager:schemaBuilderLink', None), ('objectManager:searchLayoutDetailList', None), ('objectManager:setupAlohaPage', None), ('objectManager:setupComponent', None), ('objectManager:spannableDataTableColumn', None), ('objectManager:style', None), ('objectManager:validationRuleDetail', None), ('objectManager:validationRuleDetailList', None), ('objectManager:virtualActionMenu', None), ('objectManager:virtualRelatedListCard', None), ('offline:banner', None), ('offline:conflictResolution', None), ('offline:draftRunnable', None), ('offline:offlineDraftActionHelper', None), ('offline:offlineDraftDataProvider', None), ('offline:offlineDraftList', None), ('offline:offlineDraftListItem', None), ('offline:offlineDrafts', None), ('offline:recordGvpTestTemplate', None), ('offline:recordsComparison', None), ('offline:sash', None), ('offline:smartStoreAdapter', None), ('offline:smartStoreAdapterEventListener', None), ('offline:syncManager', None), ('offline:tempDepend', None), ('omni:abstractDataProvider', None), ('omni:agentCurrentWorkDataProvider', None), ('omni:agentCurrentWorkList', None), ('omni:agentCurrentWorkListHeader', None), ('omni:agentCurrentWorkRow', None), ('omni:agentDataProvider', None), ('omni:agentDetailActivity', None), ('omni:agentDetailConfigurations', None), ('omni:agentDetailTabs', None), ('omni:agentDetailTabsTester', None), ('omni:agentDetailTabsTesterData', None), ('omni:agentDetailTimeLine', None), ('omni:agentDetailTimelineTester', None), ('omni:agentList', None), ('omni:agentListHeader', None), ('omni:agentRow', None), ('omni:agentRowTester', None), ('omni:agentTimeLineStatus', None), ('omni:agentTimeLineWork', None), ('omni:agentsByQueueDataProvider', None), ('omni:agentsByQueueList', None), ('omni:agentsByQueueListHeader', None), ('omni:agentsByQueueRow', None), ('omni:agentsTab', None), ('omni:backlogList', None), ('omni:backlogListDataProvider', None), ('omni:backlogListHeader', None), ('omni:backlogListRow', None), ('omni:backlogListTester', None), ('omni:backlogListTesterData', None), ('omni:backlogView', None), ('omni:backlogViewHeader', None), ('omni:chatMonitor', None), ('omni:chatPreview', None), ('omni:chatPreviewTester', None), ('omni:chatPreviewTesterData', None), ('omni:detailView', None), ('omni:loadingDots', None), ('omni:omniIcon', None), ('omni:omniIcons', None), ('omni:pager', None), ('omni:panelManager', None), ('omni:popupAgentRow', None), ('omni:popupChangeQueues', None), ('omni:popupChangeSkills', None), ('omni:popupFooter', None), ('omni:popupHeader', None), ('omni:popupQueueRow', None), ('omni:popupSkillRow', None), ('omni:queueDetails', None), ('omni:queueDetailsTester', None), ('omni:queueDetailsTesterData', None), ('omni:queueItemRow', None), ('omni:queueItemsDataProvider', None), ('omni:queueItemsHeader', None), ('omni:queueItemsList', None), ('omni:queueRow', None), ('omni:queuesDataProvider', None), ('omni:queuesList', None), ('omni:queuesListHeader', None), ('omni:queuesView', None), ('omni:scrtLibTester', None), ('omni:skillDetails', None), ('omni:supervisorComponentsTest', None), ('omni:supervisorComponentsTestTemplate', None), ('omni:supervisorConsole', None), ('omni:supervisorHeaderColumn', None), ('omni:supervisorHeaderFilterMenuList', None), ('omni:supervisorList', None), ('omni:supervisorPanel', None), ('omni:supervisorTabTester', None), ('omni:targetEntityCompactLayoutNoImage', None), ('omni:targetEntityCompactLayoutNoImageTester', None), ('omni:timestamp', None), ('omni:toast', None), ('omni:workAction', None), ('omni:workQueueDetails', None), ('omni:workQueueDetailsTester', None), ('omni:workQueueDetailsTesterData', None), ('omni:workQueueItemRow', None), ('omni:workQueueItemsDataProvider', None), ('omni:workQueueItemsHeader', None), ('omni:workQueueItemsList', None), ('omni:workQueueView', None), ('omni:worksByQueueDataProvider', None), ('omni:worksByQueueList', None), ('omni:worksByQueueListHeader', None), ('omni:worksByQueueRow', None), ('onboarding:analytics', None), ('onboarding:linkLabel', None), ('onboarding:onboardingComponent', None), ('onboarding:questionSet', None), ('onboarding:smartWelcomeMat', None), ('onboarding:template', None), ('onboardingTest:customStep', None), ('onboardingTest:customSummaryBlock', None), ('onboardingTest:opportunityStage', None), ('onboardingTest:pathProgress', None), ('onboardingTest:setupAssistantWelcomeMatContainer', None), ('onboardingTest:template', None), ('onboardingTest:welcomeMatService', None), ('onboardingTest:wizardSample1', None), ('onboardingTest:wizardStepCustomAction', None), ('onboardingTest:wizardStepCustomFinish', None), ('one:actionBar', None), ('one:actionBarPlugin', None), ('one:actionButtonIcon', None), ('one:actionCard', None), ('one:actionCardContent', None), ('one:actionCardPhone', None), ('one:actionOverflow', None), ('one:actionOverflowMenuItem', None), ('one:actionSimpleContainer', None), ('one:actionsComposer', None), ('one:actionsDropDown', None), ('one:actionsManager', None), ('one:actionsRibbon', None), ('one:adoptionComposer', None), ('one:adoptionContent', None), ('one:alohaPage', None), ('one:alohaPageCard', None), ('one:alohaPageDeprecated', None), ('one:anchorHeader', None), ('one:apiHandler', None), ('one:appAnalytics', None), ('one:appDetail', None), ('one:appLauncherItem', None), ('one:appLauncherItemList', None), ('one:appNavAddItemsBaseDataProvider', None), ('one:appNavAddItemsFavoritesDataProvider', None), ('one:appNavAddItemsTabsDataProvider', None), ('one:appNavBackButton', None), ('one:appNavBarItem', None), ('one:appNavBarOverflowMenuItem', None), ('one:appNavButtons', None), ('one:appNavContainer', None), ('one:appNavItems', None), ('one:appNavMenu', None), ('one:appNavMenuPanel', None), ('one:appNavMenuPopupTarget', None), ('one:appNavPromptContent', None), ('one:appNavTabsets', None), ('one:appNavToggle', None), ('one:applicationError', None), ('one:auraContainer', None), ('one:auraCustomerErrorHandler', None), ('one:auraSystemErrorHandler', None), ('one:branding', None), ('one:celebrationManager', None), ('one:centerStage', None), ('one:chatter', None), ('one:closeTabsConfirmationModal', None), ('one:consoleAppCustomizationDefault', None), ('one:consoleAppCustomizationSetup', None), ('one:consoleInlinePanel', None), ('one:consoleLayoutContainer2', None), ('one:consoleLi', None), ('one:consoleNav', None), ('one:consoleObjectHome', None), ('one:consoleOverflowItem', None), ('one:consolePersistenceForceLogoutPlugin', None), ('one:consolePersistenceManager', None), ('one:consoleTab', None), ('one:consoleTabContainer', None), ('one:consoleTabCustomizationPanel', None), ('one:consoleTabItem', None), ('one:consoleTabScrollManager', None), ('one:consoleTabset', None), ('one:consoleToolkitTestUtility', None), ('one:consoleVFOverridesTester', None), ('one:content', None), ('one:contentLoadedPlugin', None), ('one:cryptoLibraryManager', None), ('one:darkModeUserSettings', None), ('one:declarativeDockedContent', None), ('one:declarativePromptSetup', None), ('one:densitySetup', None), ('one:densityUserSettings', None), ('one:densityUserSettingsConfirmationDialog', None), ('one:dialog', None), ('one:dockingPanelManager', None), ('one:dragAndDropEditItem', None), ('one:dragAndDropEditList', None), ('one:editMyNav', None), ('one:editMyNavListHandler', None), ('one:editablePagePlugin', None), ('one:empAPILoader', None), ('one:emptyPerfUtility', None), ('one:ept', None), ('one:establishVFSessionComponent', None), ('one:externalRedirect', None), ('one:favorites', None), ('one:favoritesDragAndDropEditListHandler', None), ('one:favoritesEditPanel', None), ('one:favoritesPicker', None), ('one:favoritesPickerDataProvider', None), ('one:flexipage', None), ('one:floatingPanelPrompt', None), ('one:footer', None), ('one:globalCreate', None), ('one:globalCreateIcon', None), ('one:globalCreateItem', None), ('one:globalNav', None), ('one:header', None), ('one:helpAndTrainingExperience', None), ('one:helpAndTrainingFeedback', None), ('one:helpAndTrainingKeyboardShortcuts', None), ('one:helpMenu', None), ('one:helpMenuDataProvider', None), ('one:helpMenuSectionsContainer', None), ('one:helpMenuSetup', None), ('one:hiddenRegion', None), ('one:homeCardListPhone', None), ('one:homeCardSeparator', None), ('one:iframeComposer', None), ('one:iframeContentPlugin', None), ('one:iframeMessageManager', None), ('one:inAppChat', None), ('one:keyboardShortcutList', None), ('one:keyboardShortcutListFooter', None), ('one:keyboardShortcutListener', None), ('one:ladybugTrigger', None), ('one:leftContentWrapper', None), ('one:lexOnIpadSetup', None), ('one:listRow', None), ('one:liveChat', None), ('one:liveChatPreview', None), ('one:lwcGvpClient', None), ('one:moreCard', None), ('one:multiTabList', None), ('one:multiTabListItem', None), ('one:multiTabListTab', None), ('one:navItemDropdown', None), ('one:navItemDropdownMenuItem', None), ('one:navItemDropdownMenuItemSeparator', None), ('one:navigationItemAPILoader', None), ('one:networkSwitcher', None), ('one:networkSwitcherMenuTrigger', None), ('one:networkSwitcherRadioMenuItem', None), ('one:noNavItems', None), ('one:npsContainer', None), ('one:objectHomeFlexipage', None), ('one:onboardingAssistanceSetup', None), ('one:onboardingManager', None), ('one:onboardingManagerWrapper', None), ('one:panelManager', None), ('one:panelManagerMobile', None), ('one:panelService', None), ('one:persistenceTestComponent', None), ('one:pocketGuide', None), ('one:pocketGuideMenuNew', None), ('one:pocketGuidePrompt', None), ('one:preloadLayout', None), ('one:promptAuthoringContainer', None), ('one:promptAuthoringDialog', None), ('one:promptLsfFlow', None), ('one:promptLsfMilestoneContent', None), ('one:promptLsfMilestoneDetails', None), ('one:promptLsfMilestoneFrequency', None), ('one:promptLsfMilestonePermissions', None), ('one:promptLsfMilestonePosition', None), ('one:promptLsfMilestoneType', None), ('one:publicGroupLookupDataProvider', None), ('one:recordActionWrapper', None), ('one:recordHomeFlexipage', None), ('one:recordHomeFlexipage2Wrapper', None), ('one:recordLoadError', None), ('one:searchContentPlugin', None), ('one:sessionManager', None), ('one:stageLeft', None), ('one:storagePrime', None), ('one:storagePrimeNative', None), ('one:storagePrimePerf', None), ('one:switchIdentityDialog', None), ('one:systemMessage', None), ('one:tempDepend', None), ('one:template', None), ('one:themeImageCrop', None), ('one:themeImageUpload', None), ('one:themeList', None), ('one:themeManager', None), ('one:themeSetup', None), ('one:trialExperience', None), ('one:trialHeader', None), ('one:trialWelcomeMat', None), ('one:twoColumnLayout', None), ('one:uncacheableContentPlugin', None), ('one:unsavedChangesAPILoader', None), ('one:unsupported', None), ('one:unsupportedContainer', None), ('one:unsupportedDetectorIpad', None), ('one:unsupportedDetectorUiWebView', None), ('one:unsupportedHome', None), ('one:unsupportedMessage', None), ('one:userProfileCard', None), ('one:userProfileCardData', None), ('one:userProfileCardTrigger', None), ('one:userSwitcher', None), ('one:userSwitcherIdentity', None), ('one:utilPanelManager', None), ('one:utilityBar', None), ('one:utilityBarAPILoader', None), ('one:utilityBarContainer', None), ('one:utilityBarContent', None), ('one:utilityBarItem', None), ('one:utilityBarPanel', None), ('one:utilityBarPopoutWrapper', None), ('one:utilityBarTemplateDesktop', None), ('one:utilityBarTestComponent', None), ('one:visualforceOverride', None), ('one:webTab', None), ('one:webtemplate', None), ('one:workspace', None), ('one:workspaceAPILoader', None), ('one:workspaceCollection', None), ('one:workspaceTabWrapper', None), ('onesetup:addUserModal', None), ('onesetup:addUsers', None), ('onesetup:allHome', None), ('onesetup:baseHomePage', None), ('onesetup:breadcrumb', None), ('onesetup:breadcrumbs', None), ('onesetup:chatRuleModal', None), ('onesetup:chatRuleModalFooter', None), ('onesetup:createMenu', None), ('onesetup:helpBanner', None), ('onesetup:helpTile', None), ('onesetup:homeCreateMenu', None), ('onesetup:lexEnableUsersStep', None), ('onesetup:lexEnablementFlow', None), ('onesetup:lexMultiAdd', None), ('onesetup:lexMultiAddTable', None), ('onesetup:lexSearchDataProvider', None), ('onesetup:lexSuccessStep', None), ('onesetup:lexUsersDataProvider', None), ('onesetup:liveAgentSettings', None), ('onesetup:liveAgentSettingsBasic', None), ('onesetup:liveAgentSettingsContainer', None), ('onesetup:liveAgentSettingsErrorPage', None), ('onesetup:liveAgentSettingsQueueing', None), ('onesetup:liveAgentSettingsSecurity', None), ('onesetup:liveAgentSettingsTimeouts', None), ('onesetup:module', None), ('onesetup:mruLink', None), ('onesetup:navTree', None), ('onesetup:navTreeFilter', None), ('onesetup:navTreeKeyboardNavigator', None), ('onesetup:navTreeNode', None), ('onesetup:outOfLicensesModal', None), ('onesetup:pageNotFound', None), ('onesetup:progressBar', None), ('onesetup:recentItems', None), ('onesetup:setupAlohaPage', None), ('onesetup:setupAssistantTile', None), ('onesetup:setupCarouselPage', None), ('onesetup:setupComponent', None), ('onesetup:setupFlow', None), ('onesetup:setupFlowAbstractEditableStep', None), ('onesetup:setupFlowAbstractStep', None), ('onesetup:setupFlowConfirmDialog', None), ('onesetup:setupFlowConfirmMessage', None), ('onesetup:setupFlowEditor', None), ('onesetup:setupFlowEditorFooter', None), ('onesetup:setupFlowEndStep', None), ('onesetup:setupFlowFooter', None), ('onesetup:setupFlowIterator', None), ('onesetup:setupFlowProgress', None), ('onesetup:setupFlowTab', None), ('onesetup:setupFlowTabset', None), ('onesetup:setupHeader', None), ('onesetup:setupLink', None), ('onesetup:setupMenuItem', None), ('onesetup:setupNavTree', None), ('onesetup:setupNavTreeAppManager', None), ('onesetup:setupPageLink', None), ('onesetup:setupSearchInputDataProvider', None), ('onesetup:setupSearchInputDesktop', None), ('onesetup:unsupported', None), ('onesetup:usersContainer', None), ('onesetup:usersResources', None), ('onesetup:virtualGridSetupPageLink', None), ('opencti:clickToDialApiHandler', None), ('opencti:openCtiApiHandler', None), ('opencti:outputPhone', None), ('opencti:softPhone', None), ('opencti:testCrossCuttingOutputPhoneOverride', None), ('packagingSetupUI:deleteModeConfirmationDialog', None), ('packagingSetupUI:iframe', None), ('packagingSetupUI:inputCheckbox', None), ('packagingSetupUI:installKeyDialog', None), ('packagingSetupUI:ipErrorCmp', None), ('packagingSetupUI:ipLandingCmp', None), ('packagingSetupUI:ipSuccessCmp', None), ('packagingSetupUI:ipTemplate', None), ('packagingSetupUI:ipTooLongCmp', None), ('packagingSetupUI:profileMapping', None), ('packagingSetupUI:rssDialog', None), ('packagingSetupUI:rssDialogFooter', None), ('packagingSetupUI:subscriberQueryRequests', None), ('packagingSetupUI:template', None), ('platformencryption:advancedsettingsPage', None), ('platformencryption:advancedsettingsPageWrapper', None), ('platformencryption:esfPage', None), ('process_home:processHome', None), ('process_home:processHomeCard', None), ('process_home:processHomeChart', None), ('process_home:processHomeCreateMenu', None), ('processui:header', None), ('processui:layout', None), ('processui:template', None), ('processuiappr:helloWorld', None), ('processuicommon:actionPanel', None), ('processuicommon:actionTypeApex', None), ('processuicommon:actionTypeBase', None), ('processuicommon:actionTypeChatterPost', None), ('processuicommon:actionTypeCustomNotification', None), ('processuicommon:actionTypeEmailAlert', None), ('processuicommon:actionTypeFlow', None), ('processuicommon:actionTypeLiveMessageNotification', None), ('processuicommon:actionTypeQuickAction', None), ('processuicommon:actionTypeQuip', None), ('processuicommon:actionTypeRecordCreate', None), ('processuicommon:actionTypeRecordUpdate', None), ('processuicommon:actionTypeSubmit', None), ('processuicommon:actionTypeThunder', None), ('processuicommon:actionTypes', None), ('processuicommon:advancedSection', None), ('processuicommon:apexFields', None), ('processuicommon:apexFieldsDataProvider', None), ('processuicommon:apexParameterList', None), ('processuicommon:apexParameterListRow', None), ('processuicommon:apexTypes', None), ('processuicommon:apexTypesDataProvider', None), ('processuicommon:arrow', None), ('processuicommon:autocomplete', None), ('processuicommon:baseItemListRow', None), ('processuicommon:canvasAddElement', None), ('processuicommon:canvasEditableElement', None), ('processuicommon:canvasElement', None), ('processuicommon:chatterActionTopics', None), ('processuicommon:chatterInput', None), ('processuicommon:chatterMentionsDataProvider', None), ('processuicommon:chatterTopicsDataProvider', None), ('processuicommon:conditionList', None), ('processuicommon:conditionListRow', None), ('processuicommon:conditionLogicTypes', None), ('processuicommon:confirmationModalBody', None), ('processuicommon:confirmationModalFooter', None), ('processuicommon:createableFieldDataProvider', None), ('processuicommon:createableFields', None), ('processuicommon:createableObjectTypes', None), ('processuicommon:createableObjectTypesDataProvider', None), ('processuicommon:customEventTypes', None), ('processuicommon:customEventTypesDataProvider', None), ('processuicommon:customLabel', None), ('processuicommon:customNotificationTypes', None), ('processuicommon:decisionArrow', None), ('processuicommon:dialog', None), ('processuicommon:duelingList', None), ('processuicommon:duelingListItem', None), ('processuicommon:duelingListS1', None), ('processuicommon:duelingListsS1', None), ('processuicommon:emailAlertObjectTypes', None), ('processuicommon:emailAlertObjectTypesDataProvider', None), ('processuicommon:entityFieldDataProvider', None), ('processuicommon:entityFieldDialog', None), ('processuicommon:entityFieldsByTypeDataProvider', None), ('processuicommon:entityReferenceDialog', None), ('processuicommon:flowFields', None), ('processuicommon:flowFieldsDataProvider', None), ('processuicommon:flowParameterList', None), ('processuicommon:flowParameterListRow', None), ('processuicommon:flowTypes', None), ('processuicommon:flowTypesDataProvider', None), ('processuicommon:formulaBuilder', None), ('processuicommon:formulaFunctionDataProvider', None), ('processuicommon:formulaFunctionDialog', None), ('processuicommon:formulaGlobalVariableDataProvider', None), ('processuicommon:formulaGlobalVariableDialog', None), ('processuicommon:formulaOperator', None), ('processuicommon:help', None), ('processuicommon:helpPanelBody', None), ('processuicommon:inlineFormulaBuilder', None), ('processuicommon:input', None), ('processuicommon:inputBoolean', None), ('processuicommon:inputCheckbox', None), ('processuicommon:inputCurrency', None), ('processuicommon:inputDate', None), ('processuicommon:inputDateTime', None), ('processuicommon:inputError', None), ('processuicommon:inputEventParameter', None), ('processuicommon:inputFormula', None), ('processuicommon:inputGlobalConstant', None), ('processuicommon:inputJson', None), ('processuicommon:inputNumber', None), ('processuicommon:inputNumberHack', None), ('processuicommon:inputProcessValue', None), ('processuicommon:inputSelect', None), ('processuicommon:inputSourceTypes', None), ('processuicommon:inputString', None), ('processuicommon:inputSystemVariable', None), ('processuicommon:inputText', None), ('processuicommon:inputTextArea', None), ('processuicommon:inputTraverser', None), ('processuicommon:instructions', None), ('processuicommon:liveMessageNotificationChannel', None), ('processuicommon:liveMessageNotificationChannelDataProvider', None), ('processuicommon:liveMessageNotificationRecipientFieldsDataProvider', None), ('processuicommon:liveMessageNotificationRecipientReferenceDialog', None), ('processuicommon:liveMessageNotificationTargetTypes', None), ('processuicommon:liveMessageNotificationTemplate', None), ('processuicommon:liveMessageNotificationTemplateDataProvider', None), ('processuicommon:messageModalFooter', None), ('processuicommon:messagingEndUserFieldsDataProvider', None), ('processuicommon:messagingEndUserReferenceDialog', None), ('processuicommon:multiPicklistButton', None), ('processuicommon:multiPicklistModalBody', None), ('processuicommon:multiPicklistModalFooter', None), ('processuicommon:notificationRecipientCategories', None), ('processuicommon:notificationRecipientTypes', None), ('processuicommon:notificationTargetInput', None), ('processuicommon:notificationTextInput', None), ('processuicommon:operatorTypes', None), ('processuicommon:outcomeGoToNext', None), ('processuicommon:outcomeGoToNextOptions', None), ('processuicommon:outcomeGoToNextPanel', None), ('processuicommon:outcomePanel', None), ('processuicommon:outcomeTypes', None), ('processuicommon:outcomeUpdateOnce', None), ('processuicommon:outputText', None), ('processuicommon:panel', None), ('processuicommon:parameterList', None), ('processuicommon:parameterListRow', None), ('processuicommon:phoneFieldsDataProvider', None), ('processuicommon:phoneReferenceDialog', None), ('processuicommon:picklistField', None), ('processuicommon:postTargetTypes', None), ('processuicommon:postTargetUserTypes', None), ('processuicommon:postTargetsPerType', None), ('processuicommon:processPerTriggerObjectType', None), ('processuicommon:queryableFields', None), ('processuicommon:queryableFieldsDataProvider', None), ('processuicommon:queueOrGroupList', None), ('processuicommon:queueOrGroupListDataProvider', None), ('processuicommon:quickActionActionTypes', None), ('processuicommon:quickActionActions', None), ('processuicommon:quickActionActionsDataProvider', None), ('processuicommon:quickActionActionsOption', None), ('processuicommon:quickActionFields', None), ('processuicommon:quickActionFieldsDataProvider', None), ('processuicommon:quickActionFilterTypes', None), ('processuicommon:quickActionObjectTypes', None), ('processuicommon:quickActionObjectTypesDataProvider', None), ('processuicommon:quickActionParameterList', None), ('processuicommon:quickActionParameterListRow', None), ('processuicommon:quipAddDocumentToFolderAction', None), ('processuicommon:quipAddMessageToChatAction', None), ('processuicommon:quipAddMessageToDocumentAction', None), ('processuicommon:quipAddUsersToThreadAction', None), ('processuicommon:quipAttachDocumentToRecordAction', None), ('processuicommon:quipBaseSubActionType', None), ('processuicommon:quipCopyDocumentAction', None), ('processuicommon:quipCreateChatAction', None), ('processuicommon:quipCreateDocumentAction', None), ('processuicommon:quipCreateFolderAction', None), ('processuicommon:quipEditDocumentAction', None), ('processuicommon:quipInputParameter', None), ('processuicommon:quipPicklist', None), ('processuicommon:radioButtons', None), ('processuicommon:recordCreateParameterList', None), ('processuicommon:recordCreateParameterListRow', None), ('processuicommon:recordFilterList', None), ('processuicommon:recordFilterListRow', None), ('processuicommon:recordUpdateEvaluationTypes', None), ('processuicommon:recordUpdateParameterList', None), ('processuicommon:recordUpdateParameterListRow', None), ('processuicommon:relationshipFieldDataProvider', None), ('processuicommon:relationshipFieldDialog', None), ('processuicommon:spinner', None), ('processuicommon:startOrStop', None), ('processuicommon:submitActionApprovals', None), ('processuicommon:submitActionApprovalsDataProvider', None), ('processuicommon:submitActionSelectionTypes', None), ('processuicommon:submitActionSubmitterTypes', None), ('processuicommon:summaryRenderer', None), ('processuicommon:textPostRecipients', None), ('processuicommon:toolbar', None), ('processuicommon:traverser', None), ('processuicommon:traverserModalBody', None), ('processuicommon:traverserModalFooter', None), ('processuicommon:traverserNode', None), ('processuicommon:traverserNodeAutocomplete', None), ('processuicommon:traverserNodeChild', None), ('processuicommon:traverserNodeDataProvider', None), ('processuicommon:triggerEnableRecursion', None), ('processuicommon:triggerObjectDataProvider', None), ('processuicommon:triggerObjectTypes', None), ('processuicommon:triggerPanel', None), ('processuicommon:triggerTypes', None), ('processuicommon:typedEntityFieldDataProvider', None), ('processuicommon:typedEntityFieldDialog', None), ('processuicommon:typedFieldOption', None), ('processuicommon:updateableFields', None), ('processuicommon:updateableFieldsDataProvider', None), ('processuicommon:userAndGroupAutocompleteOption', None), ('processuicommon:userFieldsDataProvider', None), ('processuicommon:userList', None), ('processuicommon:userListDataProvider', None), ('processuicommon:userReferenceDialog', None), ('processuicommon:valueTypes', None), ('processuicommon:waitEventDate', None), ('processuicommon:waitEventDateDataProvider', None), ('processuicommon:waitEventOperatorTypes', None), ('processuicommon:waitEventPanel', None), ('processuicommon:waitEventPanelRadio', None), ('processuicommon:waitEventTimeUnitTypes', None), ('processuimgnt:console', None), ('processuimgnt:consoleListRow', None), ('processuimgnt:consoleToolbar', None), ('processuimgnt:landingPage', None), ('processuimgnt:versionListRow', None), ('processuimgnt:versionTable', None), ('processuirule:actionAddElement', None), ('processuirule:actionContainer', None), ('processuirule:actionContainerGroup', None), ('processuirule:actionElement', None), ('processuirule:canvasToolbar', None), ('processuirule:eventTypeTrigger', None), ('processuirule:invocableSettings', None), ('processuirule:modalManager', None), ('processuirule:outcomeAddElement', None), ('processuirule:outcomeAddGroup', None), ('processuirule:outcomeElement', None), ('processuirule:outcomeGroup', None), ('processuirule:panelManager', None), ('processuirule:processPropertiesModalBody', None), ('processuirule:processPropertiesModalFooter', None), ('processuirule:ruleCanvas', None), ('processuirule:triggerAddElement', None), ('processuirule:triggerElement', None), ('processuirule:triggerSourceTypes', None), ('processuirule:waitEventActionContainer', None), ('processuirule:waitEventAddElement', None), ('processuirule:waitEventElement', None), ('processuirule:workflowTypeTrigger', None), ('processuitest:actionContainer_wrapper', None), ('processuitest:actionPanelApex_wrapper', None), ('processuitest:actionPanelChatterPost_wrapper', None), ('processuitest:actionPanelCustomNotification_wrapper', None), ('processuitest:actionPanelEmail_wrapper', None), ('processuitest:actionPanelFlow_wrapper', None), ('processuitest:actionPanelQuickAction_wrapper', None), ('processuitest:actionPanelRecordCreate_wrapper', None), ('processuitest:actionPanelRecordUpdate_wrapper', None), ('processuitest:actionPanelSubmit_wrapper', None), ('processuitest:actionPanelThunder_wrapper', None), ('processuitest:actionPanel_wrapper', None), ('processuitest:actionTypeApex_wrapper', None), ('processuitest:actionTypeChatterPost_wrapper', None), ('processuitest:actionTypeCustomNotification_wrapper', None), ('processuitest:actionTypeEmailAlert_wrapper', None), ('processuitest:actionTypeFlow_wrapper', None), ('processuitest:actionTypeQuickAction_wrapper', None), ('processuitest:actionTypeRecordCreate_wrapper', None), ('processuitest:actionTypeRecordUpdate_wrapper', None), ('processuitest:actionTypeSubmit_wrapper', None), ('processuitest:autocomplete_wrapper', None), ('processuitest:canvasToolbar_wrapper', None), ('processuitest:conditionListSingleRow_wrapper', None), ('processuitest:conditionList_wrapper', None), ('processuitest:entityFieldDialog_wrapper', None), ('processuitest:eventTypeTrigger_wrapper', None), ('processuitest:flowParameterList_wrapper', None), ('processuitest:help_wrapper', None), ('processuitest:inputSelect_wrapper', None), ('processuitest:input_wrapper', None), ('processuitest:invocableSettings_wrapper', None), ('processuitest:layout_wrapper', None), ('processuitest:outcomePanel_wrapper', None), ('processuitest:panelManager_wrapper', None), ('processuitest:panel_wrapper', None), ('processuitest:processPropertiesModalBody_wrapper', None), ('processuitest:quickActionParameterList_wrapper', None), ('processuitest:recordCreateParameterList_wrapper', None), ('processuitest:recordUpdateParameterListSingleRow_wrapper', None), ('processuitest:recordUpdateParameterList_wrapper', None), ('processuitest:relationshipFieldDialog_wrapper', None), ('processuitest:stubDataProvider', None), ('processuitest:testAutoCompleteOption', None), ('processuitest:toolbar_wrapper', None), ('processuitest:traverserSummaryRenderer_wrapper', None), ('processuitest:workflowTypeTrigger_wrapper', None), ('reports:buttonGroup', None), ('reports:dataGrid', None), ('reports:eclairChart', None), ('reports:eclairConfigurer', None), ('reports:eclairPaletteSelector', None), ('reports:eclairReportChart', None), ('reports:errorPanel', None), ('reports:exportDialog', None), ('reports:exportDialogFooter', None), ('reports:exportVisualPickerOption', None), ('reports:feedPanel', None), ('reports:filterBooleanWidget', None), ('reports:filterCard', None), ('reports:filterCardCommon', None), ('reports:filterCardStandardDate', None), ('reports:filterDateWidget', None), ('reports:filterMultiSelectPicklistWidget', None), ('reports:filterNumberWidget', None), ('reports:filterPanel', None), ('reports:filterPanelFooter', None), ('reports:filterPanelTest', None), ('reports:filterRoleHierarchyCard', None), ('reports:filterRoleHierarchyWidget', None), ('reports:filterSelection', None), ('reports:filterSingleSelectPicklistWidget', None), ('reports:filterStandardDateWidget', None), ('reports:filterStringWidget', None), ('reports:filterWidget', None), ('reports:folderDialog', None), ('reports:folderDialogFooter', None), ('reports:highlight', None), ('reports:instancePoller', None), ('reports:lightningReportsChartingTest', None), ('reports:lockedFilterCard', None), ('reports:metricsHeader', None), ('reports:multiSelectDropDownMenu', None), ('reports:passiveFilterGroup', None), ('reports:reportBase', None), ('reports:reportBaseAura', None), ('reports:reportBuilder', None), ('reports:reportFilterPanel', None), ('reports:reportInstancePage', None), ('reports:reportPage', None), ('reports:reportSidebar', None), ('reports:roleHierarchyTree', None), ('reports:roleHierarchyTreeBaseButton', None), ('reports:roleHierarchyTreeLeaf', None), ('reports:roleHierarchyTreeLoadButton', None), ('reports:roleHierarchyTreeNode', None), ('reports:settingsPanel', None), ('reports:stopTrendingDialogFooter', None), ('reports:subscriptionUserLookupDataProvider', None), ('reports:tempDepend', None), ('reports:trendDialog', None), ('reports:trendDialogFooter', None), ('reports:trendReportDetailsDialog', None), ('reports:trendReportDetailsDialogFooter', None), ('reports:trendScheduleSelector', None), ('reports:warningPanel', None), ('reports:webtemplate', None), ('runtime_all_walkthroughs:orchestrationPlayerPrompt', None), ('runtime_all_walkthroughs:player', None), ('runtime_all_walkthroughs:playerCallout', None), ('runtime_all_walkthroughs:playerDynamic', None), ('runtime_all_walkthroughsTest:customAction', None), ('runtime_all_walkthroughsTest:locatorizedSubComponent', None), ('runtime_all_walkthroughsTest:playerEnvironment', None), ('runtime_all_walkthroughsinternal:autoCapture', None), ('runtime_all_walkthroughsinternal:captureSuccessToast', None), ('runtime_all_walkthroughsinternal:jsonEditor', None), ('runtime_all_walkthroughsinternal:router', None), ('runtime_all_walkthroughsinternal:targetEditor', None), ('runtime_all_walkthroughsinternal:walkthroughEditor', None), ('runtime_all_walkthroughsinternal:walkthroughEditorLauncher', None), ('runtime_all_walkthroughsinternal:walkthroughStep', None), ('runtime_all_walkthroughsinternal:walkthroughsView', None), ('runtime_all_walkthroughsinternalTest:walkthroughToolEnvironment', None), ('runtime_appointmentbooking:appointmentCardExpandedPanel', None), ('runtime_appointmentbooking:appointmentCollapsedCard', None), ('runtime_appointmentbooking:appointmentsBookedCard', None), ('runtime_appointmentbooking:appointmentsBookedCardDesign', None), ('runtime_appointmentbooking:cancelApp', None), ('runtime_appointmentbooking:createOperatingHours', None), ('runtime_appointmentbooking:eventManagementSetup', None), ('runtime_appointmentbooking:flowApptType', None), ('runtime_appointmentbooking:flowCandidate', None), ('runtime_appointmentbooking:flowConfirm', None), ('runtime_appointmentbooking:flowLocation', None), ('runtime_appointmentbooking:flowReview', None), ('runtime_appointmentbooking:flowReviewTester', None), ('runtime_appointmentbooking:flowTimeslot', None), ('runtime_appointmentbooking:flowTimeslotTester', None), ('runtime_appointmentbooking:flowTriage', None), ('runtime_appointmentbooking:flowWorkType', None), ('runtime_appointmentbooking:massAssignmentDateTime', None), ('runtime_appointmentbooking:modalFooter', None), ('runtime_appointmentbooking:operatingHours', None), ('runtime_appointmentbooking:operatingHoursDesign', None), ('runtime_appointmentbooking:resourceList', None), ('runtime_appointmentbooking:resourceSlot', None), ('runtime_appointmentbooking:suggestedResources', None), ('runtime_appointmentbooking:timeSlotsCalendar', None), ('runtime_appointmentbooking:userCard', None), ('runtime_appointmentbooking:visualPicker', None), ('runtime_appointmentbooking:visualPickerCard', None), ('runtime_approval_process:action', None), ('runtime_approval_process:actionContent', None), ('runtime_approval_process:basePanel', None), ('runtime_approval_process:commentsCard', None), ('runtime_approval_process:navigateToPendingApprovalList', None), ('runtime_approval_process:outputLookup', None), ('runtime_approval_process:outputName', None), ('runtime_approval_process:outputNameAndStatus', None), ('runtime_approval_process:outputStatus', None), ('runtime_approval_process:pendingApprovalCard', None), ('runtime_approval_process:pendingApprovalCardRow', None), ('runtime_approval_process:viewComments', None), ('runtime_commerce_oms:changeSummary', None), ('runtime_commerce_oms:changeSummaryRow', None), ('runtime_commerce_oms:deliveryGroup', None), ('runtime_commerce_oms:noDataMessage', None), ('runtime_commerce_oms:orderItemSummaryImage', None), ('runtime_commerce_oms:orderManagementSetup', None), ('runtime_commerce_oms:orderSummary', None), ('runtime_commerce_oms:orderSummaryListView', None), ('runtime_commerce_oms:productChanges', None), ('runtime_commerce_oms:productReasonSelection', None), ('runtime_commerce_oms:productReasonSelectionList', None), ('runtime_commerce_oms:productSelection', None), ('runtime_commerce_store:createCommerceStore', None), ('runtime_commerce_store:createStoreAndNetwork', None), ('runtime_commerce_store:setupStorePage', None), ('runtime_commerce_store:storeDetail', None), ('runtime_commerce_store:storeList', None), ('runtime_commerce_store:webstoresInAlohaRouter', None), ('runtime_communities_nba:builderNbaWidget', None), ('runtime_communities_nba:flowScreenNbaWidget', None), ('runtime_communities_nba:nbaCard', None), ('runtime_communities_nba:nbaWidget', None), ('runtime_communities_nba:propositionActionReferenceEdit', None), ('runtime_communities_nba:propositionActionReferenceView', None), ('runtime_communities_nba:propositionImage', None), ('runtime_communities_nba:propositionImageEdit', None), ('runtime_communities_nba:propositionImageView', None), ('runtime_communities_nba:setupStrategy', None), ('runtime_einstein_discovery:einsteinDiscoveryPanel', None), ('runtime_essential_checkout:addOnAddUnits', None), ('runtime_essential_checkout:addOnChooseLicenses', None), ('runtime_essential_checkout:addOnConfirmOrder', None), ('runtime_essential_checkout:addOnDescription', None), ('runtime_essential_checkout:addOnFlow', None), ('runtime_essential_checkout:addOnLoading', None), ('runtime_essential_checkout:cancellationFlow', None), ('runtime_essential_checkout:cancellationInfo', None), ('runtime_essential_checkout:cancellationSuccess', None), ('runtime_essential_checkout:checkoutBillingInfo', None), ('runtime_essential_checkout:checkoutConfirmOrder', None), ('runtime_essential_checkout:checkoutEnterBilling', None), ('runtime_essential_checkout:checkoutEnterUsers', None), ('runtime_essential_checkout:checkoutError', None), ('runtime_essential_checkout:checkoutFlow', None), ('runtime_essential_checkout:checkoutLoading', None), ('runtime_essential_checkout:checkoutSelectPlan', None), ('runtime_essential_checkout:checkoutSubscription', None), ('runtime_essential_checkout:checkoutSuccess', None), ('runtime_essential_checkout:classicCheckoutPage', None), ('runtime_essential_checkout:creditCard', None), ('runtime_essential_checkout:cybersource', None), ('runtime_essential_checkout:holdStatusPrompt', None), ('runtime_essential_checkout:inAppCheckoutPage', None), ('runtime_essential_checkout:inputNumber', None), ('runtime_essential_checkout:manageLicensesConfirmOrder', None), ('runtime_essential_checkout:manageLicensesDeactivateUsers', None), ('runtime_essential_checkout:manageLicensesEnterUsers', None), ('runtime_essential_checkout:manageLicensesFlow', None), ('runtime_essential_checkout:manageLicensesLoading', None), ('runtime_essential_checkout:manageSubscriptionError', None), ('runtime_essential_checkout:manageSubscriptionPage', None), ('runtime_essential_checkout:modifyAddOnConfirmOrder', None), ('runtime_essential_checkout:modifyAddOnFlow', None), ('runtime_essential_checkout:modifyAddOnLoading', None), ('runtime_essential_checkout:modifyAddOnUnits', None), ('runtime_essential_checkout:subscriptionDetail', None), ('runtime_essential_checkout:updatePaymentInfo', None), ('runtime_essential_checkout:updatePaymentInfoFlow', None), ('runtime_essential_checkout:updatePaymentInfoLoading', None), ('runtime_industries_actionplan:actionPlanPanel', None), ('runtime_industries_actionplan:addTaskModal', None), ('runtime_industries_actionplan:highlightsPanel', None), ('runtime_industries_actionplan:highlightsPanelDesign', None), ('runtime_industries_actionplan:itemListCard', None), ('runtime_industries_actionplan:itemListCardDesign', None), ('runtime_industries_actionplan:itemListCardRecord', None), ('runtime_industries_actionplan:listCard', None), ('runtime_industries_actionplan:listCardDesign', None), ('runtime_industries_actionplan:listCardRecord', None), ('runtime_industries_actionplan:taskList', None), ('runtime_industries_actionplan:taskManager', None), ('runtime_industries_actionplan:taskManagerDesign', None), ('runtime_industries_actionplan:versionDataManager', None), ('runtime_industries_healthcare:associationCard', None), ('runtime_industries_healthcare:associationCardGrid', None), ('runtime_industries_healthcare:associationCardTask', None), ('runtime_industries_healthcare:associationList', None), ('runtime_industries_healthcare:associationRelatedRecords', None), ('runtime_industries_healthcare:careProgramGrid', None), ('runtime_industries_healthcare:createAndViewTasks', None), ('runtime_industries_healthcare:createAssociation', None), ('runtime_industries_healthcare:entityLookup', None), ('runtime_industries_healthcare:programCard', None), ('runtime_industries_healthcare:selectAssociation', None), ('runtime_industries_insurance:emptyState', None), ('runtime_industries_insurance:genericOutputField', None), ('runtime_industries_insurance:hoverListPanel', None), ('runtime_industries_insurance:keyMetric', None), ('runtime_industries_insurance:lifeEvent', None), ('runtime_industries_insurance:lifeEventsDesignInfo', None), ('runtime_industries_insurance:message', None), ('runtime_industries_insurance:performanceCharts', None), ('runtime_industries_insurance:policies', None), ('runtime_industries_insurance:policiesKPI', None), ('runtime_industries_insurance:policiesKPIElement', None), ('runtime_industries_insurance:popover', None), ('runtime_industries_lending:flowCard', None), ('runtime_industries_lending:flowChoices', None), ('runtime_industries_lending:flowLiability', None), ('runtime_industries_lending:flowPill', None), ('runtime_industries_lending:flowSummary', None), ('runtime_industries_lending:flowUpload', None), ('runtime_industries_retailexecution:retailExecutionContainer', None), ('runtime_industries_retailexecution:retailExecutionSettings', None), ('runtime_industries_utilizationmanagement:careRequestDetailPanelWrapper', None), ('runtime_industries_utilizationmanagement:careRequestFormSection', None), ('runtime_industries_utilizationmanagement:createCareRequestForm', None), ('runtime_ladybug:ladybug', None), ('runtime_ladybug:ladybugContent', None), ('runtime_ladybug:ladybugContentTrigger', None), ('runtime_marketing_btobma:addToSegment', None), ('runtime_marketing_btobma:b2bma_container', None), ('runtime_marketing_btobma:b2bma_home', None), ('runtime_marketing_btobma:embeddedCampaignDashboard', None), ('runtime_marketing_btobma:engagementProgramView', None), ('runtime_marketing_btobma:engagementProgramViewSubstitute', None), ('runtime_marketing_btobma:iframe', None), ('runtime_marketing_btobma:nav', None), ('runtime_marketing_btobma:navItem', None), ('runtime_marketing_btobma:objectHome', None), ('runtime_marketing_btobma:piFrame', None), ('runtime_platform_actions:actionListEditor', None), ('runtime_platform_actions:actionListEditorItemEditor', None), ('runtime_platform_sfdx:linkNamespace', None), ('runtime_platform_sfdx:modalPanel', None), ('runtime_platform_testhistory:apexTestExecutionPage', None), ('runtime_platform_testhistory:fieldGrouper', None), ('runtime_platform_testhistory:outputDuration', None), ('runtime_platform_testhistory:selectApexJob', None), ('runtime_platformservices_condBuilder:conditionList', None), ('runtime_platformservices_condBuilder:conditionListRow', None), ('runtime_platformservices_condBuilder:inputOperator', None), ('runtime_platformservices_condBuilder:inputValue', None), ('runtime_platformservices_transactionSecurity:alohaRouter', None), ('runtime_platformservices_transactionSecurity:conditionLogicInput', None), ('runtime_platformservices_transactionSecurity:enableTransactionSecurity', None), ('runtime_platformservices_transactionSecurity:home', None), ('runtime_platformservices_transactionSecurity:homeContainer', None), ('runtime_platformservices_transactionSecurity:policyApexSetupFlowEditor', None), ('runtime_platformservices_transactionSecurity:policyConditionBuilderSetupFlowEditor', None), ('runtime_platformservices_transactionSecurity:policyDetail', None), ('runtime_platformservices_transactionSecurity:policyDetailCard', None), ('runtime_platformservices_transactionSecurity:policyEventNameInput', None), ('runtime_platformservices_transactionSecurity:policyFlowActionNamingStep', None), ('runtime_platformservices_transactionSecurity:policyFlowEventApexChooserStep', None), ('runtime_platformservices_transactionSecurity:policyFlowEventNameConditionBuilderStep', None), ('runtime_platformservices_transactionSecurity:policyLegacyAndRealTimeEventsSetupFlow', None), ('runtime_platformservices_transactionSecurity:policyLegacySetupFlow', None), ('runtime_platformservices_transactionSecurity:policyList', None), ('runtime_platformservices_transactionSecurity:policyNameDescriptionInput', None), ('runtime_platformservices_transactionSecurity:policyTypeChooserStep', None), ('runtime_platformservices_transactionSecurity:policyTypeOption', None), ('runtime_platformservices_transactionSecurity:preferencePage', None), ('runtime_platformservices_transactionSecurity:transactionSecurityModal', None), ('runtime_quip:quipNotifications', None), ('runtime_retail_runtime:createRecordButton', None), ('runtime_retail_runtime:customerProfileActionMenu', None), ('runtime_retail_runtime:customerProfileSearch', None), ('runtime_retail_runtime:customerSearchResults', None), ('runtime_retail_runtime:emptyState', None), ('runtime_retail_runtime:retailBasket', None), ('runtime_retail_runtime:retailCscFrame', None), ('runtime_retail_runtime:retailCustomerProfile', None), ('runtime_retail_runtime:retailOrderList', None), ('runtime_retail_runtime:retailOrderListLVMDataManager', None), ('runtime_retail_runtime:retailOrderListLink', None), ('runtime_retail_runtime:siteOrderSearch', None), ('runtime_retail_runtime:template', None), ('runtime_rtc:actions', None), ('runtime_rtc:googleSetupPage', None), ('runtime_rtc:googleSheetsUserSettings', None), ('runtime_rtc:googleSheetsUserSettingsPage', None), ('runtime_rtc:launchRtc', None), ('runtime_rtc:mobilePresence', None), ('runtime_rtc:mobileRtcContainer', None), ('runtime_rtc:oauthRedirect', None), ('runtime_rtc:presenceStatus', None), ('runtime_rtc:recordChatRoomCreate', None), ('runtime_rtc:rtcConversation', None), ('runtime_rtc:rtcDiscoveryBanner', None), ('runtime_rtc:rtcGlobalSignIn', None), ('runtime_rtc:rtcPreferenceCommon', None), ('runtime_rtc:rtcPreferenceSetup', None), ('runtime_rtc:rtcPresenceBase', None), ('runtime_rtc:rtcPresenceDesignInfo', None), ('runtime_rtc:rtcPresenceDesignSubstitute', None), ('runtime_rtc:rtcUserSettingsPage', None), ('runtime_rtc:signin', None), ('runtime_rtc:signout', None), ('runtime_rtc_spark:recentConversation', None), ('runtime_rtc_spark:signin', None), ('runtime_rtc_spark:signout', None), ('runtime_rtc_spark:spaceRow', None), ('runtime_rtc_spark:spaceStation', None), ('runtime_rtc_spark:spacesAutocompleteDataProvider', None), ('runtime_rtc_spark:sparkConversation', None), ('runtime_rtc_spark:sparkConversationSetup', None), ('runtime_rtc_spark:sparkDiscoveryBanner', None), ('runtime_rtc_spark:sparkForSalesforce', None), ('runtime_rtc_spark:sparkGlobalSignIn', None), ('runtime_rtc_spark:sparkPresence', None), ('runtime_rtc_spark:sparkPresenceDesignInfo', None), ('runtime_rtc_spark:sparkPresenceDesignSubstitute', None), ('runtime_rtc_spark:sparkRoom', None), ('runtime_rtc_spark:sparkSetupPage', None), ('runtime_rtc_spark:sparkSpaces', None), ('runtime_rtc_spark:sparkSpacesDesignSubstitute', None), ('runtime_rtc_spark:sparkUserSettings', None), ('runtime_rtc_spark:webExMeetingView', None), ('runtime_rtc_spark:webexComposer', None), ('runtime_rtc_spark:webexComposerDesignSubstitute', None), ('runtime_rtc_spark:webexDesignInfo', None), ('runtime_sales_activities:activityHistoryMenuItem', None), ('runtime_sales_activities:activityPanel', None), ('runtime_sales_activities:activityPanelDesignInfo', None), ('runtime_sales_activities:activityRecommendedConnections', None), ('runtime_sales_activities:activityRecommendedConnectionsDesignSubstitute', None), ('runtime_sales_activities:activityRecommendedConnectionsEntry', None), ('runtime_sales_activities:activityRecommendedConnectionsListCard', None), ('runtime_sales_activities:activityRecommendedConnectionsListView', None), ('runtime_sales_activities:activityRecommendedConnectionsWidget', None), ('runtime_sales_activities:activityRecurrenceDayOfWeek', None), ('runtime_sales_activities:activityRecurrenceDayOfYear', None), ('runtime_sales_activities:activityRecurrenceDaysMonthlyMenu', None), ('runtime_sales_activities:activityRecurrenceIntervalMenu', None), ('runtime_sales_activities:activityRelatedListRow', None), ('runtime_sales_activities:activityRelatedListStencil', None), ('runtime_sales_activities:activityReminderSettings', None), ('runtime_sales_activities:activitySubject', None), ('runtime_sales_activities:activitySubjectListView', None), ('runtime_sales_activities:activityTime', None), ('runtime_sales_activities:activityTimeline2EmailStreamDetail', None), ('runtime_sales_activities:activityTimeline2FilterMenu', None), ('runtime_sales_activities:activityTimeline2InsightPopover', None), ('runtime_sales_activities:activityTimelineBaseRow', None), ('runtime_sales_activities:activityTimelineEACPopover', None), ('runtime_sales_activities:activityTimelineEmailTracking', None), ('runtime_sales_activities:activityTimelineEventStreamAttendees', None), ('runtime_sales_activities:activityTimelineEventStreamDetail', None), ('runtime_sales_activities:activityTimelineEventStreamDetailStencil', None), ('runtime_sales_activities:activityTimelineEventStreamTime', None), ('runtime_sales_activities:activityTimelineFixedLayout', None), ('runtime_sales_activities:activityTimelineFixedLayoutExpandedSiqEmail', None), ('runtime_sales_activities:activityTimelineFixedLayoutExpandedSiqEvent', None), ('runtime_sales_activities:activityTimelineFixedLayoutExpandedTaskEventStencil', None), ('runtime_sales_activities:activityTimelineFixedStencil', None), ('runtime_sales_activities:activityTimelineInsightLabel', None), ('runtime_sales_activities:activityTimelineInsights', None), ('runtime_sales_activities:activityTimelineLabel', None), ('runtime_sales_activities:activityTimelineRowExpand', None), ('runtime_sales_activities:activityViewAllContainer', None), ('runtime_sales_activities:activityViewAllError', None), ('runtime_sales_activities:activityViewAllList', None), ('runtime_sales_activities:activityViewAllTemplate', None), ('runtime_sales_activities:baseActivityRecurringCreate', None), ('runtime_sales_activities:baseActivityReminderView', None), ('runtime_sales_activities:composerPageBlockSectionEdit', None), ('runtime_sales_activities:emailStreamDetailInsights', None), ('runtime_sales_activities:emailStreamReplyActions', None), ('runtime_sales_activities:eventRecurrenceDayOfWeek', None), ('runtime_sales_activities:eventRecurrenceDayOfYear', None), ('runtime_sales_activities:eventRecurrenceDaysMonthlyMenu', None), ('runtime_sales_activities:eventRecurrenceIntervalMenu', None), ('runtime_sales_activities:eventRecurrenceStartEnd', None), ('runtime_sales_activities:eventRecurring2PatternEdit', None), ('runtime_sales_activities:eventRecurring2PatternView', None), ('runtime_sales_activities:eventRecurringLegacyPatternView', None), ('runtime_sales_activities:eventRecurringPatternEdit', None), ('runtime_sales_activities:eventRecurringPatternView', None), ('runtime_sales_activities:eventReminderCreate', None), ('runtime_sales_activities:eventReminderView', None), ('runtime_sales_activities:followUpHandler', None), ('runtime_sales_activities:manyWhoInputLookup', None), ('runtime_sales_activities:manyWhoName', None), ('runtime_sales_activities:manyWhoNameCompact', None), ('runtime_sales_activities:multipleOwners', None), ('runtime_sales_activities:outputActivityDateTime', None), ('runtime_sales_activities:outputLookupWithAlternateDetailId', None), ('runtime_sales_activities:requestAccessSIQ', None), ('runtime_sales_activities:requestAccessSIQFixedLayout', None), ('runtime_sales_activities:siqCherrypickingLink', None), ('runtime_sales_activities:siqCherrypickingSettings', None), ('runtime_sales_activities:siqCherrypickingSettingsConfirmationBody', None), ('runtime_sales_activities:siqCherrypickingSettingsConfirmationFooter', None), ('runtime_sales_activities:statelessTaskStatus', None), ('runtime_sales_activities:taskActivityDateOverride', None), ('runtime_sales_activities:taskActivityDateOverrideMobile', None), ('runtime_sales_activities:taskBorderLayout', None), ('runtime_sales_activities:taskCommon', None), ('runtime_sales_activities:taskCompactStencil', None), ('runtime_sales_activities:taskContent', None), ('runtime_sales_activities:taskContentFields', None), ('runtime_sales_activities:taskContentInner', None), ('runtime_sales_activities:taskDetailPanelWrapper', None), ('runtime_sales_activities:taskDetails', None), ('runtime_sales_activities:taskDueDate', None), ('runtime_sales_activities:taskFilterMenuDesktop', None), ('runtime_sales_activities:taskHighlights', None), ('runtime_sales_activities:taskListDataManager', None), ('runtime_sales_activities:taskListHeader', None), ('runtime_sales_activities:taskListHeaderBase', None), ('runtime_sales_activities:taskListHeaderPhone', None), ('runtime_sales_activities:taskListViewsPopover', None), ('runtime_sales_activities:taskNewButton', None), ('runtime_sales_activities:taskOverdue', None), ('runtime_sales_activities:taskQuickCreateManager', None), ('runtime_sales_activities:taskRecurrenceDayOfWeek', None), ('runtime_sales_activities:taskRecurrenceDayOfYear', None), ('runtime_sales_activities:taskRecurrenceDaysMonthlyMenu', None), ('runtime_sales_activities:taskRecurrenceIntervalMenu', None), ('runtime_sales_activities:taskRecurrenceStartEnd', None), ('runtime_sales_activities:taskRecurringCreate', None), ('runtime_sales_activities:taskRecurringCreateLatestEndDateCalculator', None), ('runtime_sales_activities:taskRecurringView', None), ('runtime_sales_activities:taskReminderCreate', None), ('runtime_sales_activities:taskReminderView', None), ('runtime_sales_activities:taskRow', None), ('runtime_sales_activities:taskSplitList', None), ('runtime_sales_activities:taskSplitViewListRecord', None), ('runtime_sales_activities:taskStatus', None), ('runtime_sales_activities:taskStatusBroker', None), ('runtime_sales_activities:taskStatusButton', None), ('runtime_sales_activities:taskStatusModal', None), ('runtime_sales_activities:tempDepend', None), ('runtime_sales_activities:todayTaskContainer', None), ('runtime_sales_activities:todayTasksCardDataManager', None), ('runtime_sales_activities:todayTasksCardDataProvider', None), ('runtime_sales_activities:todayTasksFilter', None), ('runtime_sales_activities:todayTasksList', None), ('runtime_sales_ade:acceptSuggestion', None), ('runtime_sales_ade:rejectSuggestion', None), ('runtime_sales_ade:reviewSuggestion', None), ('runtime_sales_cadence:addToCadence', None), ('runtime_sales_cadence:cadenceStepsCard', None), ('runtime_sales_cadence:cadenceStepsCardStepList', None), ('runtime_sales_cadence:cadenceStepsCardStepListItem', None), ('runtime_sales_cadence:createCadence', None), ('runtime_sales_cadence:deleteCadence', None), ('runtime_sales_cadence:openCadenceBuilder', None), ('runtime_sales_cadence:removeAllTargetsFromCadence', None), ('runtime_sales_cadence:removeFromCadence', None), ('runtime_sales_cadencebuilder:cadenceBuilder', None), ('runtime_sales_cadencebuilder:cadenceBuilderContainer', None), ('runtime_sales_campaign:addMember', None), ('runtime_sales_campaign:addMemberStatus', None), ('runtime_sales_campaign:changeDefaultStatus', None), ('runtime_sales_campaign:influenceRelatedList', None), ('runtime_sales_campaign:massAddMember', None), ('runtime_sales_campaign:massRemoveMembers', None), ('runtime_sales_campaign:massUpdateMemberStatus', None), ('runtime_sales_campaign:memberRecordType', None), ('runtime_sales_campaign:memberRelatedList', None), ('runtime_sales_campaign:memberStatus', None), ('runtime_sales_campaign:metricsPanel', None), ('runtime_sales_campaign:percentageMetricsCard', None), ('runtime_sales_campaign:rawNumMetricsCard', None), ('runtime_sales_campaign:relatedAddMember', None), ('runtime_sales_commerce:activateDeactivateTerminateCommerceEntities', None), ('runtime_sales_commerce:activateOrderEntity', None), ('runtime_sales_dedupe:bulkDedupeJobLink', None), ('runtime_sales_dedupe:bulkDedupeJobList', None), ('runtime_sales_dedupe:bulkDedupeJobListDataProvider', None), ('runtime_sales_dedupe:bulkDedupeJobListView', None), ('runtime_sales_dedupe:bulkDedupeJobResult', None), ('runtime_sales_dedupe:bulkDedupeJobRunnable', None), ('runtime_sales_dedupe:drsParentLink', None), ('runtime_sales_dedupe:initiateBulkJobPanel', None), ('runtime_sales_dedupe:initiateBulkJobSection', None), ('runtime_sales_dedupe:matchedLead', None), ('runtime_sales_dedupe:matchedLeadField', None), ('runtime_sales_dedupe:matchedLeadsDesignInfo', None), ('runtime_sales_dedupe:matchedLeadsDesignSubstitute', None), ('runtime_sales_dedupe:matchedLeadsList', None), ('runtime_sales_dedupe:matchedLeadsPanel', None), ('runtime_sales_dedupe:matchedLeadsWrapper', None), ('runtime_sales_emailtemplateui:basePublisher', None), ('runtime_sales_emailtemplateui:emailTemplateListDataManager', None), ('runtime_sales_emailtemplateui:emailTemplateMergeFieldModal', None), ('runtime_sales_emailtemplateui:emailTemplateObjectHome', None), ('runtime_sales_emailtemplateui:emailToolbar', None), ('runtime_sales_emailtemplateui:enhancedEmailTemplateListDataManager', None), ('runtime_sales_emailtemplateui:enhancedEmailTemplateMergeFieldModal', None), ('runtime_sales_emailtemplateui:enhancedEmailTemplateObjectHome', None), ('runtime_sales_emailtemplateui:enhancedMergeFieldRowTemplate', None), ('runtime_sales_emailtemplateui:inputEmailTemplateBody', None), ('runtime_sales_emailtemplateui:inputEnhancedEmailTemplateBody', None), ('runtime_sales_emailtemplateui:insertEmailTemplateFieldsDialog', None), ('runtime_sales_emailtemplateui:insertEmailTemplateFieldsRecordHomeDialog', None), ('runtime_sales_emailtemplateui:insertEnhancedEmailTemplateFieldsDialog', None), ('runtime_sales_emailtemplateui:mergeFieldModal', None), ('runtime_sales_emailtemplateui:mergeFieldRowTemplate', None), ('runtime_sales_emailtemplateui:mergeableEntityTemplate', None), ('runtime_sales_emailtemplateui:outputEmailTemplateBody', None), ('runtime_sales_emailtemplateui:outputEnhancedEmailTemplateBody', None), ('runtime_sales_emailtemplateui:publisherMergeField', None), ('runtime_sales_emailtemplateui:publisherTemplateInsertDialog', None), ('runtime_sales_emailtemplateui:publisherTemplateQuickLink', None), ('runtime_sales_emailtemplateui:publisherTemplateSaveDialog', None), ('runtime_sales_emailtemplateui:publisherTemplateUpdateDialog', None), ('runtime_sales_emailtemplateui:recordHomeFolder', None), ('runtime_sales_emailtemplateui:recordHomeFolderPicklist', None), ('runtime_sales_emailtemplateui:recordHomeRelatedEntityPicklist', None), ('runtime_sales_emailtemplateui:templateDataProvider', None), ('runtime_sales_emailtemplateui:templateErrors', None), ('runtime_sales_emailtemplateui:templateInsertDialog', None), ('runtime_sales_emailtemplateui:templateInsertDialogFooter', None), ('runtime_sales_emailtemplateui:templateItem', None), ('runtime_sales_emailtemplateui:templateSaveDialog', None), ('runtime_sales_emailtemplateui:templateSaveDialogFooter', None), ('runtime_sales_emailtemplateui:templateSaveDialogHeader', None), ('runtime_sales_emailtemplateui:templateSetup', None), ('runtime_sales_emailtemplateui:templateWarningBanner', None), ('runtime_sales_forecasting:forecastingAdjustmentDialog', None), ('runtime_sales_forecasting:forecastingAdjustmentErrorDialog', None), ('runtime_sales_forecasting:forecastingAdjustmentPopup', None), ('runtime_sales_forecasting:forecastingBellCurve', None), ('runtime_sales_forecasting:forecastingCellCurrency', None), ('runtime_sales_forecasting:forecastingCellNumber', None), ('runtime_sales_forecasting:forecastingCellPredictionCurrency', None), ('runtime_sales_forecasting:forecastingCellQuotaCurrency', None), ('runtime_sales_forecasting:forecastingCellQuotaNumber', None), ('runtime_sales_forecasting:forecastingCellText', None), ('runtime_sales_forecasting:forecastingCurrencyRecordCollection', None), ('runtime_sales_forecasting:forecastingCustomColumnHeader', None), ('runtime_sales_forecasting:forecastingDisplayAsMenu', None), ('runtime_sales_forecasting:forecastingDisplayedFamilyRecordCollection', None), ('runtime_sales_forecasting:forecastingDropdownMenu', None), ('runtime_sales_forecasting:forecastingGenericFeedback', None), ('runtime_sales_forecasting:forecastingGraphPopup', None), ('runtime_sales_forecasting:forecastingGraphView', None), ('runtime_sales_forecasting:forecastingHeader', None), ('runtime_sales_forecasting:forecastingHeroShotChart', None), ('runtime_sales_forecasting:forecastingHeroShotChartGraph', None), ('runtime_sales_forecasting:forecastingHeroShotChartHeader', None), ('runtime_sales_forecasting:forecastingHeroShotChartKPIs', None), ('runtime_sales_forecasting:forecastingHierarchyBreadcrumb', None), ('runtime_sales_forecasting:forecastingHierarchyBreadcrumbNode', None), ('runtime_sales_forecasting:forecastingHierarchyBreadcrumbOverflowNode', None), ('runtime_sales_forecasting:forecastingJumpToListProvider', None), ('runtime_sales_forecasting:forecastingListView', None), ('runtime_sales_forecasting:forecastingListViewProvider', None), ('runtime_sales_forecasting:forecastingMassEditQuotaPanel', None), ('runtime_sales_forecasting:forecastingMyTerritoriesOrForecasts', None), ('runtime_sales_forecasting:forecastingNoAccessSplashMessage', None), ('runtime_sales_forecasting:forecastingNoTerritoryFoundSplashMessage', None), ('runtime_sales_forecasting:forecastingNotEnabledSplashMessage', None), ('runtime_sales_forecasting:forecastingOppLVMDataManager', None), ('runtime_sales_forecasting:forecastingOppListContainer', None), ('runtime_sales_forecasting:forecastingOppListSummary', None), ('runtime_sales_forecasting:forecastingOppListViewManager', None), ('runtime_sales_forecasting:forecastingOrgShapeSplashPage', None), ('runtime_sales_forecasting:forecastingPeriodRange', None), ('runtime_sales_forecasting:forecastingPeriodRecord', None), ('runtime_sales_forecasting:forecastingPredictionColumnHeader', None), ('runtime_sales_forecasting:forecastingPredictionPanel', None), ('runtime_sales_forecasting:forecastingRecordCollection', None), ('runtime_sales_forecasting:forecastingSettingsMenu', None), ('runtime_sales_forecasting:forecastingSharePanel', None), ('runtime_sales_forecasting:forecastingSharePanelSharedGrid', None), ('runtime_sales_forecasting:forecastingTab', None), ('runtime_sales_forecasting:forecastingTreeView', None), ('runtime_sales_forecasting:forecastingTreeViewDataManager', None), ('runtime_sales_forecasting:forecastingTypeRecordCollection', None), ('runtime_sales_forecasting:forecastingTypesNotActiveQuotaSettingsSplashMessage', None), ('runtime_sales_forecasting:forecastingUserRecord', None), ('runtime_sales_forecasting:forecastingUserRoleOrTerritoryRecord', None), ('runtime_sales_forecasting:forecastingUserRolePermNotEnabledMessage', None), ('runtime_sales_hvs:baseHvsListGroupData', None), ('runtime_sales_hvs:createMyList', None), ('runtime_sales_hvs:highVelocitySalesExpandedSetup', None), ('runtime_sales_hvs:highVelocitySalesSetup', None), ('runtime_sales_hvs:highVelocitySalesSetupPreferenceToggleRow', None), ('runtime_sales_hvs:highVelocitySalesSetupRow', None), ('runtime_sales_hvs:hvsLearningPath', None), ('runtime_sales_hvs:hvsLearningPathSection', None), ('runtime_sales_hvs:hvsLearningPathStep', None), ('runtime_sales_hvs:hvsOnboardingStepTopic', None), ('runtime_sales_hvs:hvsWelcomeMat', None), ('runtime_sales_hvs:hvsWelcomeMatHeader', None), ('runtime_sales_hvs:hvsWelcomeMatPrompt', None), ('runtime_sales_hvs:hvsWelcomeMatTile', None), ('runtime_sales_hvs:myListGroupsContainer', None), ('runtime_sales_hvs:viewDetailsDockedPanel', None), ('runtime_sales_hvs:workQueueActionsContainer', None), ('runtime_sales_hvs:workQueueContainer', None), ('runtime_sales_hvs:workQueueFilterContainer', None), ('runtime_sales_hvs:workQueueFilterMenu', None), ('runtime_sales_hvs:workQueueList', None), ('runtime_sales_hvs:workQueueListGroupsContainer', None), ('runtime_sales_insights:accountInsightsContainer', None), ('runtime_sales_insights:accountInsightsDataProvider', None), ('runtime_sales_insights:accountRationaleContainer', None), ('runtime_sales_insights:accountRationaleNewsArticle', None), ('runtime_sales_insights:alohaInsightsContainer', None), ('runtime_sales_insights:beginFreemiumButton', None), ('runtime_sales_insights:campaignInsightsContainer', None), ('runtime_sales_insights:campaignInsightsContainerInfo', None), ('runtime_sales_insights:campaignInsightsRationale', None), ('runtime_sales_insights:contactInsightsContainer', None), ('runtime_sales_insights:contactInsightsContainerInfo', None), ('runtime_sales_insights:contactSuggestionRationaleContainer', None), ('runtime_sales_insights:einsteinHeader', None), ('runtime_sales_insights:einsteinIcon', None), ('runtime_sales_insights:freemiumAdoptionBanner', None), ('runtime_sales_insights:freemiumAdoptionBannerAlohaWrapper', None), ('runtime_sales_insights:freemiumOptInOutPanel', None), ('runtime_sales_insights:genericInsightsDataProvider', None), ('runtime_sales_insights:highlightsPanelScoreRenderer', None), ('runtime_sales_insights:insightActionBeforeExecution', None), ('runtime_sales_insights:insightActivityDetails', None), ('runtime_sales_insights:insightActivityRequestAccess', None), ('runtime_sales_insights:insightsActionButton', None), ('runtime_sales_insights:insightsActionButtonBase', None), ('runtime_sales_insights:insightsActionManager', None), ('runtime_sales_insights:insightsActions', None), ('runtime_sales_insights:insightsBucket', None), ('runtime_sales_insights:insightsCard', None), ('runtime_sales_insights:insightsCardHeader', None), ('runtime_sales_insights:insightsCardHeaderTrigger', None), ('runtime_sales_insights:insightsCards', None), ('runtime_sales_insights:insightsCardsDataProvider', None), ('runtime_sales_insights:insightsContainer', None), ('runtime_sales_insights:insightsContainerInfo', None), ('runtime_sales_insights:insightsDataProvider', None), ('runtime_sales_insights:insightsDetailWrapper', None), ('runtime_sales_insights:insightsEllieButton', None), ('runtime_sales_insights:insightsEllieIcon', None), ('runtime_sales_insights:insightsEmailCard', None), ('runtime_sales_insights:insightsFeedbackDropdown', None), ('runtime_sales_insights:insightsGenericFeedback', None), ('runtime_sales_insights:insightsMessage', None), ('runtime_sales_insights:insightsNewsChatterShare', None), ('runtime_sales_insights:insightsPanelBody', None), ('runtime_sales_insights:insightsPlatformActionSmall', None), ('runtime_sales_insights:insightsRationaleContainer', None), ('runtime_sales_insights:insightsRelevantLatestActivity', None), ('runtime_sales_insights:insightsSFDCEventCard', None), ('runtime_sales_insights:insightsSIQEventCard', None), ('runtime_sales_insights:insightsTaskCard', None), ('runtime_sales_insights:insightsTitleContainer', None), ('runtime_sales_insights:insightsTrendingIcon', None), ('runtime_sales_insights:insightsVoiceCard', None), ('runtime_sales_insights:listViewBehaviorInsightsContainer', None), ('runtime_sales_insights:listViewBehaviorScoreRenderer', None), ('runtime_sales_insights:listViewInsightsContainer', None), ('runtime_sales_insights:listViewScoreRenderer', None), ('runtime_sales_insights:opportunityIQInsightsDataProvider', None), ('runtime_sales_insights:scoreDial', None), ('runtime_sales_insights:topInsight', None), ('runtime_sales_lead:accept', None), ('runtime_sales_lead:convert', None), ('runtime_sales_lead:convertAccountSearchDataProvider', None), ('runtime_sales_lead:convertCreatePanelDesktop', None), ('runtime_sales_lead:convertDesktop', None), ('runtime_sales_lead:convertDesktopConsole', None), ('runtime_sales_lead:convertDupePanelDesktop', None), ('runtime_sales_lead:convertMatchPanelDesktop', None), ('runtime_sales_lead:convertMatchPanelDesktopSearchDataProvider', None), ('runtime_sales_lead:convertModal', None), ('runtime_sales_lead:convertModalFooter', None), ('runtime_sales_lead:convertOpportunityCheckBox', None), ('runtime_sales_lead:convertSectionDesktop', None), ('runtime_sales_lead:convertedCardStencilDesktop', None), ('runtime_sales_lead:convertedConfirmation', None), ('runtime_sales_lead:convertedConfirmationDesktop', None), ('runtime_sales_lead:convertedConfirmationFooter', None), ('runtime_sales_lead:convertedConfirmationFooterDesktop', None), ('runtime_sales_lead:dupePanelCardStencil', None), ('runtime_sales_lead:dupePanelCardStencilTester', None), ('runtime_sales_lead:leadConvertSettingsLoadingError', None), ('runtime_sales_lead:leadConvertSettingsPanel', None), ('runtime_sales_lead:linkedInLeadGen', None), ('runtime_sales_lead:linkedInLeadGenAdAccounts', None), ('runtime_sales_lead:linkedInLeadGenFieldMapping', None), ('runtime_sales_lead:linkedInLeadGenFieldMappingAutocomplete', None), ('runtime_sales_lead:linkedInLeadGenFieldMappingBasic', None), ('runtime_sales_lead:linkedInLeadGenFieldMappingDataProvider', None), ('runtime_sales_lead:linkedInLeadGenMapping', None), ('runtime_sales_lead:linkedInLeadGenMappingSection', None), ('runtime_sales_lead:linkedInLeadGenSetup', None), ('runtime_sales_lead:notConvertedToastMessage', None), ('runtime_sales_lead:pathAssistant', None), ('runtime_sales_lead:pillContainerAutoComplete', None), ('runtime_sales_lead:recordTypeOutputText', None), ('runtime_sales_leadiq:alohaInsightsContainer', None), ('runtime_sales_leadiq:engagementScoreDataProvider', None), ('runtime_sales_leadiq:leadInsights', None), ('runtime_sales_leadiq:leadInsightsAccordionItem', None), ('runtime_sales_leadiq:leadInsightsDataProvider', None), ('runtime_sales_leadiq:leadScoreDial', None), ('runtime_sales_leadiq:leadScoreInfo', None), ('runtime_sales_leadiq:listViewInsightsContainer', None), ('runtime_sales_leadiq:listViewScoreRenderer', None), ('runtime_sales_leadiq:recordHomeInsightsContainer', None), ('runtime_sales_leadiq:recordHomeInsightsContainerInfo', None), ('runtime_sales_merge:findDup', None), ('runtime_sales_merge:manualMergeFlow', None), ('runtime_sales_merge:manualMergeFlowLauncher', None), ('runtime_sales_merge:massManualMergeFlow', None), ('runtime_sales_merge:massManualMergeFlowLauncher', None), ('runtime_sales_merge:mergeCandidatesACRelErrorPage', None), ('runtime_sales_merge:mergeCandidatesList', None), ('runtime_sales_merge:mergeCandidatesListDataProvider', None), ('runtime_sales_merge:mergeCandidatesListPanel', None), ('runtime_sales_merge:mergeCandidatesListSection', None), ('runtime_sales_merge:mergeCandidatesPreviewCard', None), ('runtime_sales_merge:mergeCandidatesPreviewCardDesignInfo', None), ('runtime_sales_merge:mergeCandidatesPreviewCardSubstitute', None), ('runtime_sales_merge:mergeComparison', None), ('runtime_sales_merge:mergeConfirm', None), ('runtime_sales_merge:mergeDesktopConsole', None), ('runtime_sales_merge:mergeFlow', None), ('runtime_sales_merge:mergeFlowBroker', None), ('runtime_sales_merge:mergePanel', None), ('runtime_sales_merge:mergeSearch', None), ('runtime_sales_merge:mergeSearchFlow', None), ('runtime_sales_merge:mergeSearchLauncher', None), ('runtime_sales_merge:multiAddCandidates', None), ('runtime_sales_pathassistant:collapsibleDrawer', None), ('runtime_sales_pathassistant:daysInStage', None), ('runtime_sales_pathassistant:defaultTabHover', None), ('runtime_sales_pathassistant:desktopScroller', None), ('runtime_sales_pathassistant:pathAssistant', None), ('runtime_sales_pathassistant:pathAssistantBody', None), ('runtime_sales_pathassistant:pathAssistantCard', None), ('runtime_sales_pathassistant:pathAssistantCardDesktop', None), ('runtime_sales_pathassistant:pathAssistantCardMobile', None), ('runtime_sales_pathassistant:pathAssistantContainer', None), ('runtime_sales_pathassistant:pathAssistantDesignInfo', None), ('runtime_sales_pathassistant:pathAssistantDesignInfoDialogContent', None), ('runtime_sales_pathassistant:pathAssistantDesignSubstitute', None), ('runtime_sales_pathassistant:pathAssistantErrorOnLoad', None), ('runtime_sales_pathassistant:pathAssistantFields', None), ('runtime_sales_pathassistant:pathAssistantHeader', None), ('runtime_sales_pathassistant:pathAssistantInfo', None), ('runtime_sales_pathassistant:pathAssistantStepClosed', None), ('runtime_sales_pathassistant:pathAssistantTab', None), ('runtime_sales_pathassistant:pathAssistantTabSet', None), ('runtime_sales_pathassistant:tempDepend', None), ('runtime_sales_pathassistant:uiTabBar', None), ('runtime_sales_pathassistant:uiTabItem', None), ('runtime_sales_pipelineboard:genericPipelineDataProvider', None), ('runtime_sales_pipelineboard:pipelineColumnDataProvider', None), ('runtime_sales_pipelineboard:pipelineDataProvider', None), ('runtime_sales_pipelineboard:pipelineView', None), ('runtime_sales_pipelineboard:pipelineViewActionsList', None), ('runtime_sales_pipelineboard:pipelineViewAlertModal', None), ('runtime_sales_pipelineboard:pipelineViewCardItemStencil', None), ('runtime_sales_pipelineboard:pipelineViewCardItemStencilOutputText', None), ('runtime_sales_pipelineboard:pipelineViewCardItemStencilOutputTextArea', None), ('runtime_sales_pipelineboard:pipelineViewCardStencil', None), ('runtime_sales_pipelineboard:pipelineViewCloseConfirmModal', None), ('runtime_sales_pipelineboard:pipelineViewCloseLostTarget', None), ('runtime_sales_pipelineboard:pipelineViewColumn', None), ('runtime_sales_pipelineboard:pipelineViewColumnHeader', None), ('runtime_sales_pipelineboard:pipelineViewColumnModal', None), ('runtime_sales_pipelineboard:pipelineViewConfigurationModal', None), ('runtime_sales_pipelineboard:pipelineViewMultipleRecordTypeTabSet', None), ('runtime_sales_pipelineboard:tempDepend', None), ('runtime_sales_quotes:createPDF', None), ('runtime_sales_quotes:createQuote', None), ('runtime_sales_quotes:quotePDFPreview', None), ('runtime_sales_quotes:quotePDFViewer', None), ('runtime_sales_quotes:quotesSetup', None), ('runtime_sales_quotes:quotesSetupPage', None), ('runtime_sales_quotes:syncQuote', None), ('runtime_sales_quotes:templatePicker', None), ('runtime_sales_skype:frameParent', None), ('runtime_sales_skype:signin', None), ('runtime_sales_skype:signout', None), ('runtime_sales_skype:skypeConversation', None), ('runtime_sales_skype:skypeForSalesforce', None), ('runtime_sales_skype:skypeGlobalSignIn', None), ('runtime_sales_skype:skypePresence', None), ('runtime_sales_skype:skypePresenceDesignInfo', None), ('runtime_sales_skype:skypePresenceDesignSubstitute', None), ('runtime_sales_skype:skypeSetup', None), ('runtime_sales_skype:skypeSetupPage', None), ('runtime_sales_skype:skypeUserSettings', None), ('runtime_sales_skype:skypeUserSettingsPage', None), ('runtime_sales_social:socialActionsMenu', None), ('runtime_sales_social:socialConnections', None), ('runtime_sales_social:socialConnectionsList', None), ('runtime_sales_social:socialConnectionsListProvider', None), ('runtime_sales_social:socialFeedItem', None), ('runtime_sales_social:socialList', None), ('runtime_sales_social:socialLoggingManager', None), ('runtime_sales_social:socialPanel', None), ('runtime_sales_social:socialPanelCard', None), ('runtime_sales_social:socialProfilePanel', None), ('runtime_sales_social:socialSearchButtonCard', None), ('runtime_sales_social:socialSearchPanel', None), ('runtime_sales_social:socialSearchPanelProvider', None), ('runtime_sales_social:socialSignInPanel', None), ('runtime_sales_social:tempDepend', None), ('runtime_sales_templatebuilder:breadcrumb', None), ('runtime_sales_templatebuilder:builderAppLaunch', None), ('runtime_sales_templatebuilder:buttonCmp', None), ('runtime_sales_templatebuilder:colSetCmp', None), ('runtime_sales_templatebuilder:colTab', None), ('runtime_sales_templatebuilder:defaultEmailTemplatePageTemplate', None), ('runtime_sales_templatebuilder:editor', None), ('runtime_sales_templatebuilder:emailComponent', None), ('runtime_sales_templatebuilder:emailRegion', None), ('runtime_sales_templatebuilder:emailTemplate', None), ('runtime_sales_templatebuilder:emailTemplateBuilder', None), ('runtime_sales_templatebuilder:emailTemplateCanvasConfig', None), ('runtime_sales_templatebuilder:header', None), ('runtime_sales_templatebuilder:htmlCmp', None), ('runtime_sales_templatebuilder:imageEditor', None), ('runtime_sales_templatebuilder:imgNoTextCmp', None), ('runtime_sales_templatebuilder:leftPanel', None), ('runtime_sales_templatebuilder:middlePanel', None), ('runtime_sales_templatebuilder:richCmp', None), ('runtime_sales_templatebuilder:richTextCkEditor', None), ('runtime_sales_templatebuilder:rightPanel', None), ('runtime_sales_templatebuilder:surfaceTemplate', None), ('runtime_sales_templatebuilder:tabset1ColCmp', None), ('runtime_sales_templatebuilder:tabset2ColCmp', None), ('runtime_sales_templatebuilder:tabset3ColCmp', None), ('runtime_sales_templatebuilder:tabset4ColCmp', None), ('runtime_sales_templatebuilder:topToolbar', None), ('runtime_sales_xclean:advancedSearchLauncher', None), ('runtime_sales_xclean:advancedSearchModal', None), ('runtime_sales_xclean:advancedSearchRow', None), ('runtime_sales_xclean:dataAssessment', None), ('runtime_sales_xclean:dataAssessmentConfig', None), ('runtime_sales_xclean:dataAssessmentConfigListView', None), ('runtime_sales_xclean:dataAssessmentConfigProvider', None), ('runtime_sales_xclean:dataAssessmentCustomerSegmentation', None), ('runtime_sales_xclean:dataAssessmentDataQuality', None), ('runtime_sales_xclean:dataAssessmentHealthOverview', None), ('runtime_sales_xclean:dataAssessmentMatchAnalysis', None), ('runtime_sales_xclean:dataAssessmentPrompt', None), ('runtime_sales_xclean:dataAssessmentUpgradePanel', None), ('runtime_sales_xclean:dataPreviewDashboard', None), ('runtime_sales_xclean:dataPreviewImproveMatchRate', None), ('runtime_sales_xclean:dataPreviewQuality', None), ('runtime_sales_xclean:dataPreviewReport', None), ('runtime_sales_xclean:dataPreviewReportTest', None), ('runtime_sales_xclean:discoveryAccountsTabHome', None), ('runtime_sales_xclean:discoveryUserLicenseSetup', None), ('runtime_sales_xclean:dummyListDataProvider', None), ('runtime_sales_xclean:dummyRangeFacets', None), ('runtime_sales_xclean:externalRecordsListDataProvider', None), ('runtime_sales_xclean:externalRecordsRangeFacets', None), ('runtime_sales_xclean:externalRecordsTab', None), ('runtime_sales_xclean:fieldMappingError', None), ('runtime_sales_xclean:fieldMappingPanel', None), ('runtime_sales_xclean:fieldMappingPanelTest', None), ('runtime_sales_xclean:fieldMappingRadioColumn', None), ('runtime_sales_xclean:fieldMappingTabs', None), ('runtime_sales_xclean:recommendationsFacetsPlaceholder', None), ('runtime_sales_xclean:recommendationsListDataProvider', None), ('runtime_sales_xclean:recommendationsRangeFacets', None), ('runtime_sales_xclean:search', None), ('runtime_sales_xclean:searchAccountsPlugin', None), ('runtime_sales_xclean:searchBar', None), ('runtime_sales_xclean:searchCommaSeparatedCell', None), ('runtime_sales_xclean:searchConcatenatedCell', None), ('runtime_sales_xclean:searchContactsPlugin', None), ('runtime_sales_xclean:searchContainer', None), ('runtime_sales_xclean:searchContractExpirationDate', None), ('runtime_sales_xclean:searchCreditMetrics', None), ('runtime_sales_xclean:searchCreditMetricsInvalidPackage', None), ('runtime_sales_xclean:searchCreditMetricsKnownError', None), ('runtime_sales_xclean:searchCreditMetricsTile', None), ('runtime_sales_xclean:searchCreditsAvailable', None), ('runtime_sales_xclean:searchFacetsPanel', None), ('runtime_sales_xclean:searchFilterPanel', None), ('runtime_sales_xclean:searchList', None), ('runtime_sales_xclean:searchListDataProvider', None), ('runtime_sales_xclean:searchPlugin', None), ('runtime_sales_xclean:searchPreviewCompanyPanel', None), ('runtime_sales_xclean:searchPreviewContainer', None), ('runtime_sales_xclean:searchPreviewableCell', None), ('runtime_sales_xclean:searchRangeFacets', None), ('runtime_sales_xclean:searchRemainingCredits', None), ('runtime_sales_xclean:searchSelectForImportCell', None), ('runtime_sales_xclean:searchStatusCell', None), ('runtime_sales_xclean:searchTotalCredits', None), ('runtime_sales_xclean:searchUserLicenseDataSource', None), ('runtime_sales_xclean:searchUserLicenseIsActive', None), ('runtime_sales_xclean:searchUserLicensesUsageLimit', None), ('runtime_sales_xclean:selectMatch', None), ('runtime_sales_xclean:selectMatchContainer', None), ('runtime_sales_xclean:selectMatchDetailPane', None), ('runtime_sales_xclean:selectMatchDetailPart', None), ('runtime_sales_xclean:selectMatchHighLightsStencil', None), ('runtime_sales_xclean:selectionContainer', None), ('runtime_sales_xclean:singleLineAddress', None), ('runtime_sales_xclean:stareAndCompare', None), ('runtime_sales_xclean:stareAndCompareComparison', None), ('runtime_sales_xclean:stareAndCompareHeader', None), ('runtime_sales_xclean:swiftFacet', None), ('runtime_sales_xclean:xCleanMetrics', None), ('runtime_sales_xclean:xCleanMetricsGenericError', None), ('runtime_sales_xclean:xCleanMetricsHeader', None), ('runtime_sales_xclean:xCleanMetricsItem', None), ('runtime_sales_xclean:xCleanRecordsComparison', None), ('runtime_sales_xclean:xCleanSimpleCompoundField', None), ('runtime_sales_xclean:xCleanStareAndCompareModal', None), ('runtime_sales_xclean:xCleanThisRecordModal', None), ('runtime_sales_xclean:xcleanHighlights', None), ('runtime_search_federated:externalOutputUrl', None), ('runtime_search_federated:externalResultsGridView', None), ('runtime_search_federated:externalScopes', None), ('runtime_search_federated:externalScopesList', None), ('runtime_search_federated:externalScopesListDataProvider', None), ('runtime_service_fieldservice:createServiceReportPDF', None), ('runtime_service_fieldservice:generateWorkOrders', None), ('runtime_service_fieldservice:languagePicker', None), ('runtime_service_fieldservice:objectHierarchy', None), ('runtime_service_fieldservice:objectHierarchyMessage', None), ('runtime_service_fieldservice:serviceReportPdfViewer', None), ('runtime_service_fieldservice:serviceReportTemplatePicker', None), ('runtime_service_liveagent:attachmentChatMessage', None), ('runtime_service_liveagent:baseChat', None), ('runtime_service_liveagent:baseNotification', None), ('runtime_service_liveagent:basePanelFooter', None), ('runtime_service_liveagent:baseToolbar', None), ('runtime_service_liveagent:blockVisitorFooter', None), ('runtime_service_liveagent:blockVisitorPanel', None), ('runtime_service_liveagent:chat', None), ('runtime_service_liveagent:chatApi', None), ('runtime_service_liveagent:chatBody', None), ('runtime_service_liveagent:chatEndNotification', None), ('runtime_service_liveagent:chatInput', None), ('runtime_service_liveagent:chatMessage', None), ('runtime_service_liveagent:chatMessenger', None), ('runtime_service_liveagent:chatNotification', None), ('runtime_service_liveagent:chatSlice', None), ('runtime_service_liveagent:chatSneakPeekIndicator', None), ('runtime_service_liveagent:chatStartNotification', None), ('runtime_service_liveagent:chatUnavailableMessage', None), ('runtime_service_liveagent:conferenceButton', None), ('runtime_service_liveagent:conferenceFooter', None), ('runtime_service_liveagent:conferencePanel', None), ('runtime_service_liveagent:conversationData', None), ('runtime_service_liveagent:conversationLog', None), ('runtime_service_liveagent:conversationToolkitAPI', None), ('runtime_service_liveagent:embeddedAlohaPage', None), ('runtime_service_liveagent:embeddedLiveChatButton', None), ('runtime_service_liveagent:embeddedLiveChatDeployment', None), ('runtime_service_liveagent:embeddedLiveChatSkill', None), ('runtime_service_liveagent:endChatFooter', None), ('runtime_service_liveagent:endChatPanel', None), ('runtime_service_liveagent:engagedChat', None), ('runtime_service_liveagent:fileTransferButton', None), ('runtime_service_liveagent:fileTransferFooter', None), ('runtime_service_liveagent:fileTransferPanel', None), ('runtime_service_liveagent:liveChatTranscriptHighlightsStencil', None), ('runtime_service_liveagent:liveagentToolbar', None), ('runtime_service_liveagent:lowerFlagFooter', None), ('runtime_service_liveagent:lowerFlagPanel', None), ('runtime_service_liveagent:panelCloseButton', None), ('runtime_service_liveagent:pastChats', None), ('runtime_service_liveagent:pastChatsDesignInfo', None), ('runtime_service_liveagent:raiseFlagFooter', None), ('runtime_service_liveagent:raiseFlagPanel', None), ('runtime_service_liveagent:scopedNotification', None), ('runtime_service_liveagent:toolkitMessenger', None), ('runtime_service_liveagent:transferButton', None), ('runtime_service_liveagent:transferFooter', None), ('runtime_service_liveagent:transferPanel', None), ('runtime_service_livemessage:appleBusinessChatInfoCard', None), ('runtime_service_livemessage:chatBody', None), ('runtime_service_livemessage:chatFileCard', None), ('runtime_service_livemessage:chatHover', None), ('runtime_service_livemessage:conversationLog', None), ('runtime_service_livemessage:linkObject', None), ('runtime_service_livemessage:linkObjectsNotification', None), ('runtime_service_livemessage:livemessageChat', None), ('runtime_service_livemessage:livemessageInput', None), ('runtime_service_livemessage:livemessageToolbar', None), ('runtime_service_livemessage:messagingSessionHighlightsStencil', None), ('runtime_service_livemessage:messagingSessionLinkedRecords', None), ('runtime_service_livemessage:relatedRecords', None), ('runtime_service_livemessage:selectFileButton', None), ('runtime_service_livemessage:startOutboundConversationAction', None), ('runtime_service_omnichannel:abstractPushedRequest', None), ('runtime_service_omnichannel:currentWork', None), ('runtime_service_omnichannel:currentWorkList', None), ('runtime_service_omnichannel:currentWorkTransfer', None), ('runtime_service_omnichannel:message', None), ('runtime_service_omnichannel:omniAPILoader', None), ('runtime_service_omnichannel:omniAPITester', None), ('runtime_service_omnichannel:omniWidget', None), ('runtime_service_omnichannel:omniWidgetPublicEventsTester', None), ('runtime_service_omnichannel:pushedEntityRequest', None), ('runtime_service_omnichannel:pushedEntityRequestTester', None), ('runtime_service_omnichannel:pushedEntityRequestTesterData', None), ('runtime_service_omnichannel:status', None), ('runtime_service_omnichannel:statusTester', None), ('runtime_service_omnichannel:statusTesterData', None), ('runtime_service_omnichannel:toolkitTester', None), ('runtime_service_predictions:einsteinArticleSuggestion', None), ('runtime_service_predictions:einsteinArticleSuggestionsCard', None), ('runtime_service_predictions:einsteinItemWrapper', None), ('runtime_service_predictions:einsteinSuggestedResponse', None), ('runtime_service_predictions:einsteinSuggestionsCard', None), ('runtime_service_predictions:einsteinSuggestionsCardContainer', None), ('runtime_service_predictions:fieldPredictionsLauncher', None), ('runtime_service_predictions:pilotRecommendationsManager', None), ('runtime_service_predictions:predictionInputCheckbox', None), ('runtime_service_predictions:predictionInputPicklist', None), ('runtime_service_predictions:predictionsEllieIcon', None), ('runtime_service_predictions:predictionsManager', None), ('runtime_service_predictions:predictionsStrengthIcon', None), ('runtime_service_predictions:recommendationInputLookup', None), ('runtime_service_predictions:recommendationInputLookupDataProvider', None), ('runtime_service_predictions:recommendationInputLookupDesktop', None), ('runtime_service_predictions:recommendationLookupOption', None), ('runtime_service_predictions:standalonePredictionsManager', None), ('runtime_service_predictions:standaloneRecordRecommendations', None), ('runtime_service_scs:attachments', None), ('runtime_service_scs:conversationCaseDetail', None), ('runtime_service_scs:conversationCaseDetailTester', None), ('runtime_service_scs:conversationCaseList', None), ('runtime_service_scs:conversationSocialPostDetail', None), ('runtime_service_scs:conversationSocialPostDetailFooter', None), ('runtime_service_scs:conversationSocialPostDetailTester', None), ('runtime_service_scs:conversationSocialPostList', None), ('runtime_service_scs:conversations', None), ('runtime_service_scs:conversationsPersona', None), ('runtime_service_scs:conversationsPersonaTester', None), ('runtime_service_scs:inputSocialPostAccount', None), ('runtime_service_scs:inputSocialPostContent', None), ('runtime_service_scs:inputSocialPostMessageType', None), ('runtime_service_scs:inputSocialPostProvider', None), ('runtime_service_scs:inputSocialPostReplyTo', None), ('runtime_service_scs:link', None), ('runtime_service_scs:publisherQuickSocialPost', None), ('runtime_service_scs:sfxCreateCase', None), ('runtime_service_scs:sfxIgnore', None), ('runtime_service_scs:sfxMassApproveSocialPosts', None), ('runtime_service_scs:sfxMassCreateCase', None), ('runtime_service_scs:sfxMassIgnore', None), ('runtime_service_scs:sfxMassRejectSocialPosts', None), ('runtime_service_scs:socialOutputLookup', None), ('runtime_service_scs:socialPersona', None), ('runtime_service_scs:socialPostContent', None), ('runtime_service_scs:socialPostContentLink', None), ('runtime_service_scs:socialPostContentListView', None), ('runtime_service_scs:socialPostFeedItem', None), ('runtime_service_scs:socialPostMessage', None), ('runtime_service_scs:socialPostPreamble', None), ('runtime_service_scs:socialPostProvider', None), ('runtime_service_scs:socialPostQuickAction', None), ('runtime_service_scs:socialPostYouTubeLinkPreview', None), ('runtime_service_scs:truncatedText', None), ('runtime_service_trials:expandedWelcomeMat', None), ('runtime_service_trials:expandedWelcomeMatPrompt', None), ('runtime_service_trials:miniSetup', None), ('runtime_service_trials:momentOfCelebration', None), ('runtime_service_trials:setupSocialFlow', None), ('runtime_service_trials:setupSocialSelectProvider', None), ('runtime_service_trials:surveyUserInterestInfo', None), ('runtime_service_trials:surveyUserInterestInfoPrompt', None), ('runtime_service_trials:welcomeMatTile', None), ('s1wizard:actionCard', None), ('s1wizard:actionListPicker', None), ('s1wizard:actions', None), ('s1wizard:actionsPreview', None), ('s1wizard:arrangeActions', None), ('s1wizard:comicText', None), ('s1wizard:compactLayout', None), ('s1wizard:compactLayoutPreview', None), ('s1wizard:createContactLayout', None), ('s1wizard:createGlobalAction', None), ('s1wizard:dndDragSource', None), ('s1wizard:dndDropTarget', None), ('s1wizard:duelingList', None), ('s1wizard:duelingListItem', None), ('s1wizard:duelingLists', None), ('s1wizard:iPhone', None), ('s1wizard:navMenuPreview', None), ('s1wizard:navigation', None), ('s1wizard:preview', None), ('s1wizard:review', None), ('s1wizard:share', None), ('s1wizard:shareDataProvider', None), ('s1wizard:shareFeedback', None), ('s1wizard:shareListOption', None), ('s1wizard:shareSelectedOption', None), ('s1wizard:template', None), ('s1wizard:welcome', None), ('salesforceIdentity:accountSettings', None), ('salesforceIdentity:appLauncher', None), ('salesforceIdentity:appLauncherDesktop', None), ('salesforceIdentity:appLauncherDesktopContainer', None), ('salesforceIdentity:appLauncherDesktopInternal', None), ('salesforceIdentity:appLauncherDesktopInternalTester', None), ('salesforceIdentity:appLauncherDesktopTester', None), ('salesforceIdentity:appLauncherHeader', None), ('salesforceIdentity:appLauncherManager', None), ('salesforceIdentity:appLauncherModal', None), ('salesforceIdentity:appLauncherSetupDesktop', None), ('salesforceIdentity:appLauncherSetupReorderer', None), ('salesforceIdentity:appLauncherSetupTile', None), ('salesforceIdentity:appLauncherTile', None), ('salesforceIdentity:changePassword', None), ('salesforceIdentity:changePassword2', None), ('salesforceIdentity:communityLogo', None), ('salesforceIdentity:communityLogo2', None), ('salesforceIdentity:employeeLoginLink', None), ('salesforceIdentity:employeeLoginLink2', None), ('salesforceIdentity:forgotPassword', None), ('salesforceIdentity:forgotPassword2', None), ('salesforceIdentity:identityBody', None), ('salesforceIdentity:identityCustomHomeLayout', None), ('salesforceIdentity:identityHeader', None), ('salesforceIdentity:identityTemplate', None), ('salesforceIdentity:identityVerification', None), ('salesforceIdentity:lightningLoginFlow', None), ('salesforceIdentity:loginBody', None), ('salesforceIdentity:loginBody2', None), ('salesforceIdentity:loginForm', None), ('salesforceIdentity:loginForm2', None), ('salesforceIdentity:loginTemplate', None), ('salesforceIdentity:loginTemplate2', None), ('salesforceIdentity:searchInput', None), ('salesforceIdentity:selfRegister', None), ('salesforceIdentity:selfRegister2', None), ('salesforceIdentity:sessionTimeoutWarn', None), ('salesforceIdentity:sessionTimeoutWatcher', None), ('salesforceIdentity:socialLogin', None), ('salesforceIdentity:socialLogin2', None), ('salesforceIdentity:tempDepend', None), ('securityHealth:alohaContainer', None), ('securityHealth:alohaMessage', None), ('securityHealth:fixItConfirmModal', None), ('securityHealth:fixItModal', None), ('securityHealth:fixItModalFooter', None), ('securityHealth:fixItRiskComponent', None), ('securityHealth:fixItSearch', None), ('securityHealth:genericRiskComponent', None), ('securityHealth:importBaselineModal', None), ('securityHealth:missingSettings', None), ('securityHealth:relatedListCard', None), ('securityHealth:securityHealthSetupComponent', None), ('securityHealth:urlSwitcher', None), ('securityHub:dashboard', None), ('securityHub:header', None), ('securityHub:healthCheck', None), ('securityHub:orgManagement', None), ('securityHub:securityHubHome', None), ('securitycentral:appsList', None), ('securitycentral:module', None), ('securitycentral:scList', None), ('securitycentral:tabs', None), ('securitycentral:terminateSessionAction', None), ('selfService:articleHeaderDetail', None), ('selfService:articleLayout', None), ('selfService:articleList', None), ('selfService:articleListDataProvider', None), ('selfService:articleListItem', None), ('selfService:articleReCaptchaFlipView', None), ('selfService:articleTopicList', None), ('selfService:articleTypeDataProvider', None), ('selfService:articleTypeFilter', None), ('selfService:articleView', None), ('selfService:articleVoting', None), ('selfService:articleVotingIcon', None), ('selfService:autoSuggest', None), ('selfService:autoSuggestDataProvider', None), ('selfService:autoSuggestOption', None), ('selfService:backButton', None), ('selfService:baseArticleList', None), ('selfService:baseCaseCreation', None), ('selfService:baseNavItem', None), ('selfService:baseNavList', None), ('selfService:baseNavigation', None), ('selfService:baseSimpleItem', None), ('selfService:baseSimpleItems', None), ('selfService:breadCrumb', None), ('selfService:breadCrumbBase', None), ('selfService:breadCrumbItem', None), ('selfService:breadCrumbProvider', None), ('selfService:caseArticleDeflection', None), ('selfService:caseArticleDeflectionItem', None), ('selfService:caseArticleDeflectionProvider', None), ('selfService:caseAttachment', None), ('selfService:caseAttachments', None), ('selfService:caseAttachmentsDataProvider', None), ('selfService:caseComment', None), ('selfService:caseComments', None), ('selfService:caseCommentsDataProvider', None), ('selfService:caseConfirmation', None), ('selfService:caseCreate', None), ('selfService:caseCreateAttachments', None), ('selfService:caseDescription', None), ('selfService:caseDetails', None), ('selfService:caseHighlights', None), ('selfService:caseListView', None), ('selfService:casePublisher', None), ('selfService:casePublisherFileInput', None), ('selfService:caseStatusButton', None), ('selfService:caseSubject', None), ('selfService:caseVirtualGrid', None), ('selfService:categoryFilter', None), ('selfService:categoryNavigation', None), ('selfService:categoryProvider', None), ('selfService:contactSupport', None), ('selfService:expandedCategoryNav', None), ('selfService:expandedCategoryNavItem', None), ('selfService:expandedTrendingArticleItem', None), ('selfService:expandedTrendingArticleSection', None), ('selfService:expandedTrendingArticleSectionProvider', None), ('selfService:expandedTrendingArticles', None), ('selfService:expandedTrendingArticlesProvider', None), ('selfService:featuredDataCategories', None), ('selfService:featuredDataCategoryProvider', None), ('selfService:featuredItem', None), ('selfService:featuredItemList', None), ('selfService:featuredSearch', None), ('selfService:filter', None), ('selfService:filterItem', None), ('selfService:inputEmail', None), ('selfService:inputText', None), ('selfService:inputTextArea', None), ('selfService:koaHeaderCompanyName', None), ('selfService:loadingSpinner', None), ('selfService:logout', None), ('selfService:miniSearch', None), ('selfService:myCaseList', None), ('selfService:outputRichTextWithSmartLinks', None), ('selfService:pageWrapper', None), ('selfService:postToCase', None), ('selfService:profileHome', None), ('selfService:profileMenu', None), ('selfService:profileMenuAPI', None), ('selfService:profileMenuTrigger', None), ('selfService:profileNavigation', None), ('selfService:profilePanel', None), ('selfService:reCaptchaCarouselView', None), ('selfService:searchWrapper', None), ('selfService:similarArticleItem', None), ('selfService:similarArticles', None), ('selfService:similarArticles42', None), ('selfService:similarArticles42DesignSubstitute', None), ('selfService:similarArticlesDataProvider', None), ('selfService:similarArticlesDesignSubstitute', None), ('selfService:similarFeedItem', None), ('selfService:similarItemWithViewCount', None), ('selfService:similarQuestions', None), ('selfService:similarQuestionsDataProvider', None), ('selfService:simpleArticleItem', None), ('selfService:singleArticleView', None), ('selfService:subCategoryItem', None), ('selfService:supportQuickActionField', None), ('selfService:supportQuickActionLayout', None), ('selfService:tempDepend', None), ('selfService:template', None), ('selfService:toggleButton', None), ('selfService:topicArticleList', None), ('selfService:topicArticleListDataProvider', None), ('selfService:topicBreadCrumb', None), ('selfService:topicBreadCrumbDataProvider', None), ('selfService:topicRelatedArticle', None), ('selfService:topicTrendingArticles', None), ('selfService:topicTrendingArticles42', None), ('selfService:topicTrendingArticles42DesignSubstitute', None), ('selfService:topicTrendingArticlesDataProvider', None), ('selfService:topicTrendingArticlesDesignInfo', None), ('selfService:topicTrendingArticlesDesignSubstitute', None), ('selfService:trendingArticles', None), ('selfService:trendingArticlesDataProvider', None), ('selfService:twoColumnFilterLayout', None), ('selfService:unsupported', None), ('selfService:userProfileMenu', None), ('serviceCommunity:askWidget', None), ('serviceCommunity:deflectionActions', None), ('serviceCommunity:searchAskWidgetMain', None), ('serviceCommunity:searchBox', None), ('serviceCommunity:searchDeflection', None), ('serviceCommunity:searchResult', None), ('serviceCommunity:searchResultsList', None), ('serviceCommunity:signInBox', None), ('serviceCommunity:zonedropdownoption', None), ('serviceCommunity:zoneswitcher', None), ('setup:assistantActionButtonLink', None), ('setup:assistantActionLSF', None), ('setup:assistantActionRPC', None), ('setup:assistantActionStep', None), ('setup:assistantActionToggle', None), ('setup:assistantActionVideoLink', None), ('setup:assistantDiscoverStepAlign', None), ('setup:assistantDiscoverStepEvaluate', None), ('setup:assistantDiscoverStepLearn', None), ('setup:assistantDiscoverStepPlan', None), ('setup:assistantModelService', None), ('setup:assistantNonTrackableSubStep', None), ('setup:assistantOptimizeStepIterate', None), ('setup:assistantOptimizeStepMeasure', None), ('setup:assistantOptimizeStepMotivate', None), ('setup:assistantOptimizeStepTurnOff', None), ('setup:assistantPage', None), ('setup:assistantPageDiscover', None), ('setup:assistantPageOptimize', None), ('setup:assistantPageOverview', None), ('setup:assistantPageRollout', None), ('setup:assistantRolloutStepAdapt', None), ('setup:assistantRolloutStepImplement', None), ('setup:assistantRolloutStepLaunch', None), ('setup:assistantRolloutStepPlan', None), ('setup:assistantStep', None), ('setup:assistantSubStep', None), ('setup:assistantSummaryCard', None), ('setup:autoTransitionOptOutAgreement', None), ('setup:autoTransitionOptOutConfirmation', None), ('setup:autoTransitionOptOutErrorPage', None), ('setup:autoTransitionOptOutLanding', None), ('setup:enableAdvancedMetadataCache', None), ('setup:enableAdvancedMetadataCacheSetupComponent', None), ('setup:enableConsentManagement', None), ('setup:enableEinsteinDataDiscovery', None), ('setup:enableLightningExperience', None), ('setup:enableLightningExperienceSetupComponent', None), ('setup:enableLightningExperienceTab', None), ('setup:enableLightningExperienceToggle', None), ('setup:enableLightningExperienceWrapper', None), ('setup:enableLightningModalBody', None), ('setup:enablePowerInsights', None), ('setup:eventMonitoring', None), ('setup:fieldService', None), ('setup:fieldServiceSetup', None), ('setup:flexList', None), ('setup:gear', None), ('setup:hoverHelp', None), ('setup:placeholder', None), ('setup:s1SetupHomePage', None), ('setup:s1SetupSection', None), ('setup:s1SetupSectionItem', None), ('setup:sfxSearchResultsGrid', None), ('setup:ssDataProvider', None), ('setup:ssResultsFilters', None), ('setup:ssResultsPage', None), ('setup:ssResultsTable', None), ('setup:walkthroughs', None), ('setup:wtSetupPage', None), ('setupAssistant:setupAssistantProgress', None), ('setupAssistant:setupAssistantProgressComponent', None), ('setupAssistant:setupAssistantWelcomeMat', None), ('setupAssistant:setupAssistantWelcomeMatModal', None), ('setupAssistant:sfxWelcomeMat', None), ('setup_einstein_assistant:agendaScreen', None), ('setup_einstein_assistant:assistantSetup', None), ('setup_einstein_assistant:auraWrapperForRaptor', None), ('setup_einstein_assistant:fieldUpdateScreen', None), ('setup_einstein_assistant:filterScreen', None), ('setup_einstein_assistant:objectSearch', None), ('setup_einstein_assistant:objectSearchCombinedScreen', None), ('setup_einstein_assistant:personObjectSelect', None), ('setup_einstein_assistant:setupTemplateFlow', None), ('setup_einstein_assistant:startScreen', None), ('setup_einstein_assistant:summaryScreen', None), ('setup_einstein_assistant:targetObjectSearch', None), ('setup_einstein_assistant:templateSettings', None), ('setup_einstein_assistant:templateSettingsGrid', None), ('setup_einstein_assistant:topicSelectionComponent', None), ('setup_einstein_assistant:topicsSelectionScreen', None), ('setup_einstein_assistant:welcomeScreen', None), ('setup_einstein_shared:assessorItem', None), ('setup_einstein_shared:fieldsTable', None), ('setup_einstein_shared:guidePanel', None), ('setup_einstein_shared:ignoredfields', None), ('setup_einstein_shared:info', None), ('setup_einstein_shared:inputRadio', None), ('setup_einstein_shared:layoutSplit', None), ('setup_einstein_shared:stepLayoutEinstein', None), ('setup_einstein_shared:stepLayoutOneColumn', None), ('setup_einstein_shared:stepLayoutSplit', None), ('setup_industries_insurance:iconEdit', None), ('setup_industries_insurance:iconList', None), ('setup_industries_insurance:iconManager', None), ('setup_industries_insurance:insuranceSettings', None), ('setup_industries_objectdetection:datasetTrainAction', None), ('setup_industries_objectdetection:datasetTrainModal', None), ('setup_industries_objectdetection:modelRetrainAction', None), ('setup_industries_objectdetection:objectDetectionHome', None), ('setup_industries_objectdetection:setupReviewTerms', None), ('setup_industries_objectdetection:setupReviewTermsFlow', None), ('setup_industries_referralscoring:referralScoringConfirmSettings', None), ('setup_industries_referralscoring:referralScoringHome', None), ('setup_industries_referralscoring:referralScoringModelFlow', None), ('setup_industries_referralscoring:referralScoringModels', None), ('setup_industries_referralscoring:referralScoringSegmentationScreen', None), ('setup_industries_referralscoring:setupReviewTerms', None), ('setup_industries_referralscoring:setupReviewTermsFlow', None), ('setup_lightning_visualforce:apexPageList', None), ('setup_lightning_visualforce:vfEditPage', None), ('setup_mobile_appclone:addDistributionAccountModal', None), ('setup_mobile_appclone:androidFeatureGraphicSection', None), ('setup_mobile_appclone:androidIconsSection', None), ('setup_mobile_appclone:androidMetadataDraft', None), ('setup_mobile_appclone:androidMetadataReadOnly', None), ('setup_mobile_appclone:androidPlayStoreSection', None), ('setup_mobile_appclone:androidPromoVideoSection', None), ('setup_mobile_appclone:androidPushSection', None), ('setup_mobile_appclone:androidScreenshotsSection', None), ('setup_mobile_appclone:appAvailabilityDataProvider', None), ('setup_mobile_appclone:appAvailabilityModal', None), ('setup_mobile_appclone:appAvailabilitySection', None), ('setup_mobile_appclone:appAvailabilitySelection', None), ('setup_mobile_appclone:appAvailabilitySelectionColumnCountry', None), ('setup_mobile_appclone:appAvailabilitySelectionColumnSelect', None), ('setup_mobile_appclone:appCloneCreationModal', None), ('setup_mobile_appclone:appCloneEmptyState', None), ('setup_mobile_appclone:appCloneResourceCard', None), ('setup_mobile_appclone:appCloneTableView', None), ('setup_mobile_appclone:appCloneVideo', None), ('setup_mobile_appclone:appDistributionDelegateConfigStep', None), ('setup_mobile_appclone:appDistributionEditFlow', None), ('setup_mobile_appclone:appDistributionSection', None), ('setup_mobile_appclone:appDistributionSelectionStep', None), ('setup_mobile_appclone:appTemplatePickerModal', None), ('setup_mobile_appclone:approveAppConfirmationFlowStep', None), ('setup_mobile_appclone:approveAppFlow', None), ('setup_mobile_appclone:approveAppFlowStep', None), ('setup_mobile_appclone:approveRejectStep', None), ('setup_mobile_appclone:asset', None), ('setup_mobile_appclone:assetMetadataSection', None), ('setup_mobile_appclone:assetUploader', None), ('setup_mobile_appclone:assetViewer', None), ('setup_mobile_appclone:authorizedDomainRow', None), ('setup_mobile_appclone:authorizedDomainsSection', None), ('setup_mobile_appclone:baseMetadataDraft', None), ('setup_mobile_appclone:baseMetadataReadOnly', None), ('setup_mobile_appclone:betaTesterSection', None), ('setup_mobile_appclone:collapsibleSection', None), ('setup_mobile_appclone:combobox', None), ('setup_mobile_appclone:communitySection', None), ('setup_mobile_appclone:confirmationModal', None), ('setup_mobile_appclone:connectedAppSection', None), ('setup_mobile_appclone:delegateAccountSection', None), ('setup_mobile_appclone:delegatedConfigurationSection', None), ('setup_mobile_appclone:disableIconSetConfirmationModal', None), ('setup_mobile_appclone:fileUploader', None), ('setup_mobile_appclone:fixedBanner', None), ('setup_mobile_appclone:generalMessaging', None), ('setup_mobile_appclone:headerColorSection', None), ('setup_mobile_appclone:iconSet', None), ('setup_mobile_appclone:inputFile', None), ('setup_mobile_appclone:installPackageModalPanel', None), ('setup_mobile_appclone:installPackageStep', None), ('setup_mobile_appclone:iosAppStoreSection', None), ('setup_mobile_appclone:iosIconsSection', None), ('setup_mobile_appclone:iosMetadataDraft', None), ('setup_mobile_appclone:iosMetadataReadOnly', None), ('setup_mobile_appclone:iosScreenshotsSection', None), ('setup_mobile_appclone:languageList', None), ('setup_mobile_appclone:lifecycle', None), ('setup_mobile_appclone:lifecycleStep', None), ('setup_mobile_appclone:lifecycle_TestLifecycle_General', None), ('setup_mobile_appclone:loadingScreenSection', None), ('setup_mobile_appclone:makeChangesModalFooter', None), ('setup_mobile_appclone:metadataAttribute', None), ('setup_mobile_appclone:metadataHeader', None), ('setup_mobile_appclone:metadataSection', None), ('setup_mobile_appclone:myS1Home', None), ('setup_mobile_appclone:myS1MetadataDetail', None), ('setup_mobile_appclone:myS1WarningModal', None), ('setup_mobile_appclone:mys1Lifecycle', None), ('setup_mobile_appclone:mys1LifecycleModalFooter', None), ('setup_mobile_appclone:mys1LifecycleStep', None), ('setup_mobile_appclone:mys1ModalPanel', None), ('setup_mobile_appclone:noAccess', None), ('setup_mobile_appclone:popover', None), ('setup_mobile_appclone:privateDistributionSection', None), ('setup_mobile_appclone:requestActionStep', None), ('setup_mobile_appclone:requestBetaModalPanel', None), ('setup_mobile_appclone:requestPackagePanel', None), ('setup_mobile_appclone:screenshotSet', None), ('setup_mobile_appclone:screenshotsSection', None), ('setup_mobile_appclone:setupTile', None), ('setup_mobile_appclone:stateMapRefreshModal', None), ('setup_mobile_appclone:submitConfirmationModal', None), ('setup_mobile_appclone:tmpLifecycleTriggers', None), ('setup_mobile_appclone:translationStateMapSection', None), ('setup_mobile_appclone:updatePackagePanel', None), ('setup_mobile_appclone:verticalImagePanel', None), ('setup_platformServices_eventManager:alohaRouter', None), ('setup_platformServices_eventManager:eventManagerDetail', None), ('setup_platformServices_eventManager:eventManagerHome', None), ('setup_platformServices_eventManager:eventManagerList', None), ('setup_platform_a2:lexEndUsersNoSwitchSetup', None), ('setup_platform_a2:scheduledSwitcherSetup', None), ('setup_platform_api_wsdl:webservicesSetupPage', None), ('setup_platform_cdc:availableCdcEntitiesProvider', None), ('setup_platform_cdc:cdcObjectEnablement', None), ('setup_platform_integration:dataloaderIoSetup', None), ('setup_platform_ltngbolt:abstractBoltTile', None), ('setup_platform_ltngbolt:boltDetail', None), ('setup_platform_ltngbolt:boltDetailAccordion', None), ('setup_platform_ltngbolt:boltDetailHome', None), ('setup_platform_ltngbolt:boltFeature', None), ('setup_platform_ltngbolt:boltGetStarted', None), ('setup_platform_ltngbolt:boltHomeBodyCard', None), ('setup_platform_ltngbolt:boltItemList', None), ('setup_platform_ltngbolt:boltSearchDataProvider', None), ('setup_platform_ltngbolt:boltTableDataProvider', None), ('setup_platform_ltngbolt:boltTile', None), ('setup_platform_ltngbolt:boltTiles', None), ('setup_platform_ltngbolt:createBoltButton', None), ('setup_platform_ltngbolt:errorBoltTile', None), ('setup_platform_ltngbolt:flowCategoryDetail', None), ('setup_platform_ltngbolt:flowCategoryInAlohaRouter', None), ('setup_platform_ltngbolt:flowCategorySetupHome', None), ('setup_platform_ltngbolt:flowDataProvider', None), ('setup_platform_ltngbolt:lightningBoltHome', None), ('setup_platform_ltngbolt:lightningBoltSetupHome', None), ('setup_platform_ltngbolt:lsfMilestoneCreate', None), ('setup_platform_ltngbolt:lsfMilestoneFlowCategory', None), ('setup_platform_ltngbolt:lsfMilestoneItems', None), ('setup_platform_ltngbolt:lsfMilestoneSummary', None), ('setup_platform_ltngbolt:lsfNewBolt', None), ('setup_platform_ltngbolt:lsfNewFlowCategory', None), ('setup_platform_notifications:customNotificationTypeActionMenu', None), ('setup_platform_notifications:customNotificationTypeEdit', None), ('setup_platform_notifications:customNotificationTypeList', None), ('setup_platform_notifications:customNotificationTypes', None), ('setup_platform_notifications:customNotificationTypesDataProvider', None), ('setup_platform_notifications:notificationTypesManager', None), ('setup_platform_perms:permissionSetGroupsBaseSetupPage', None), ('setup_platform_perms:permissionSetGroupsDetailPage', None), ('setup_platform_perms:permissionSetGroupsSetup', None), ('setup_platform_perms:permissionSetGroupsSetupPage', None), ('setup_platform_perms:permissionSetGroupsWelcomeScreen', None), ('setup_platform_perms:userManagementSettings', None), ('setup_platform_sfdx:cannotExpire', None), ('setup_platform_sfdx:cannotExpireWrapper', None), ('setup_platform_sfdx:einsteinReviewTerms', None), ('setup_platform_sfdx:einsteinReviewTermsFlow', None), ('setup_platform_sfdx:einsteinTermsSetup', None), ('setup_platform_sfdx:expireOrganization', None), ('setup_platform_sfdx:expireOrganizationWrapper', None), ('setup_platform_sfdx:shapeSetupPage', None), ('setup_platform_sfdx:shapeSubscriberSetup', None), ('setup_platform_sfdx:somaPreferenceSetup', None), ('setup_platform_sfdx:somaSetupPage', None), ('setup_platform_sfdx:test', None), ('setup_platform_sfdx:unexpireOrganization', None), ('setup_platform_sfdx:unexpireOrganizationWrapper', None), ('setup_platformservices_customplatform:schemaSettingsPage', None), ('setup_platformservices_customplatform:test', None), ('setup_sales_einsteinForecasting:tuner', None), ('setup_sales_einsteinForecasting:tunerFieldExclusionChoice', None), ('setup_sales_einsteinForecasting:tunerFieldFiltersSelection', None), ('setup_sales_einsteinForecasting:tunerSegmentationChoice', None), ('setup_sales_einsteinForecasting:tunerSegmentationDefinition', None), ('setup_sales_einsteinForecasting:tunerSegmentationDefinitionRow', None), ('setup_sales_einsteinForecasting:tunerSetupFlow', None), ('setup_sales_einsteinForecasting:tunerSetupFlowComplete', None), ('setup_sales_einsteinForecasting:tunerWelcomeMat', None), ('setup_sales_forecasting:forecastingPredictionEnablement', None), ('setup_sales_forecasting:forecastingPredictionSetup', None), ('setup_sales_forecasting:forecastingPredictionSetupStatus', None), ('setup_sales_forecasting:forecastingPredictionSetupStatusContainer', None), ('setup_sales_forecasting:forecastingPredictionVerifyHomepage', None), ('setup_sales_forecasting:forecastingQuotaSettings', None), ('setup_sales_insights:accountIqSetup', None), ('setup_sales_insights:autoDataEntrySetup', None), ('setup_sales_insights:campaignInsightsSetup', None), ('setup_sales_insights:engagementScoreSetup', None), ('setup_sales_insights:freemiumActionsAlohaWrapper', None), ('setup_sales_insights:freemiumModalFooter', None), ('setup_sales_insights:freemiumOptOutSetupStep', None), ('setup_sales_insights:freemiumSetupStepIcon', None), ('setup_sales_insights:insightsFreemiumSetupAssistantStep', None), ('setup_sales_insights:insightsSetupCustomizeBox', None), ('setup_sales_insights:insightsSetupStatus', None), ('setup_sales_insights:opportunityIqSetup', None), ('setup_sales_insights:opportunityScoreSetup', None), ('setup_sales_insights:readinessCheck', None), ('setup_sales_insights:readinessCheckFilesDataProvider', None), ('setup_sales_insights:readinessCheckFilesList', None), ('setup_sales_insights:readinessCheckFrame', None), ('setup_sales_insights:readinessCheckPardot', None), ('setup_sales_leadiq:assessor', None), ('setup_sales_leadiq:confirmationModal', None), ('setup_sales_leadiq:fieldFilter', None), ('setup_sales_leadiq:filterList', None), ('setup_sales_leadiq:filterOption', None), ('setup_sales_leadiq:filterRow', None), ('setup_sales_leadiq:filterRowValue', None), ('setup_sales_leadiq:leadScoreSetupFlow', None), ('setup_sales_leadiq:leadiqsettingpage2', None), ('setup_sales_leadiq:leadiqsetup', None), ('setup_sales_leadiq:leadiqsetupconfigs', None), ('setup_sales_leadiq:leadiqsetupdeploymentstatus', None), ('setup_sales_leadiq:milestone', None), ('setup_sales_leadiq:quickAssessment', None), ('setup_sales_leadiq:rowFilter', None), ('setup_sales_leadiq:rowFilterBoolean', None), ('setup_sales_leadiq:rowFilterPicklist', None), ('setup_sales_leadiq:settingsModal', None), ('setup_sales_leadiq:welcomeMat', None), ('setup_sales_pardot:einsteinAnalyticsSetup', None), ('setup_sales_pardot:enablePanel', None), ('setup_sales_pardot:enablePardotTabs', None), ('setup_sales_pardot:engagementHistorySetup', None), ('setup_sales_pardot:engagementHistorySetupCustomStep', None), ('setup_sales_pardot:engagementHistorySetupStepLink', None), ('setup_sales_pardot:engagementHistorySetupSummaryBlock', None), ('setup_sales_pardot:pardotAccountSetup', None), ('setup_sales_pardot:pardotTenantRow', None), ('setup_sales_pardot:pardotTenantSetup', None), ('setup_sales_pardot:searchableCombobox', None), ('setup_sales_pathassistant:paSetupDuelingListsDialog', None), ('setup_sales_pathassistant:paSetupHome', None), ('setup_sales_pathassistant:paSetupInputRichText', None), ('setup_sales_pathassistant:paSetupPAStep', None), ('setup_sales_pathassistant:paSetupStep1Definition', None), ('setup_sales_pathassistant:paSetupStep2Configure', None), ('setup_sales_pathassistant:paSetupStep3Finish', None), ('setup_sales_pathassistant:paSetupWizardTemplate', None), ('setup_sales_spark:chooseYourTrialModal', None), ('setup_sales_spark:customFieldCheckbox', None), ('setup_sales_spark:customFieldCurrency', None), ('setup_sales_spark:customFieldDate', None), ('setup_sales_spark:customFieldDateTime', None), ('setup_sales_spark:customFieldEmail', None), ('setup_sales_spark:customFieldEntityStep', None), ('setup_sales_spark:customFieldForm', None), ('setup_sales_spark:customFieldFormStep', None), ('setup_sales_spark:customFieldLongTextArea', None), ('setup_sales_spark:customFieldNumber', None), ('setup_sales_spark:customFieldPercent', None), ('setup_sales_spark:customFieldPhone', None), ('setup_sales_spark:customFieldPreviewStep', None), ('setup_sales_spark:customFieldSetupFlow', None), ('setup_sales_spark:customFieldText', None), ('setup_sales_spark:customFieldUrl', None), ('setup_sales_spark:eacAgreeToTerms', None), ('setup_sales_spark:eacLSF', None), ('setup_sales_spark:eacLSFPrompt', None), ('setup_sales_spark:eacLandingStep', None), ('setup_sales_spark:eacReviewTermsAndConnectEmailStep', None), ('setup_sales_spark:eacSendEmailStep', None), ('setup_sales_spark:essentialsAssistantPage', None), ('setup_sales_spark:essentialsSetupHome', None), ('setup_sales_spark:essentialsSetupHomeCarousel', None), ('setup_sales_spark:finishEacStep', None), ('setup_sales_spark:leadStatusesCustomizeRow', None), ('setup_sales_spark:opportunityStagesCustomizeRow', None), ('setup_sales_spark:opportunityStagesCustomizeStep', None), ('setup_sales_spark:opportunityStagesInfoStep', None), ('setup_sales_spark:opportunityStagesSetupFlow', None), ('setup_sales_spark:opportunityStagesTemplateStep', None), ('setup_sales_spark:setupAppExchangeTile', None), ('setup_sales_spark:setupLifetimePerformance', None), ('setup_sales_spark:setupOnboardingAssistant', None), ('setup_sales_spark:setupWeeklyPerformance', None), ('setup_sales_spark:sparkOnboarding', None), ('setup_service:allTiles', None), ('setup_service:commBranding', None), ('setup_service:commConfigTopic', None), ('setup_service:commContactForm', None), ('setup_service:commDomainName', None), ('setup_service:commExtension', None), ('setup_service:commExtensionWaiting', None), ('setup_service:commSetupFlow', None), ('setup_service:commStart', None), ('setup_service:commSuccess', None), ('setup_service:commUploader', None), ('setup_service:ctiActionItems', None), ('setup_service:ctiAddUsers', None), ('setup_service:ctiInstallingDependencies', None), ('setup_service:ctiProviderAdditionalDetails', None), ('setup_service:ctiProviderInfo', None), ('setup_service:ctiProviderPicklist', None), ('setup_service:ctiSelectProvider', None), ('setup_service:ctiSetupFlow', None), ('setup_service:ctiSetupSuccess', None), ('setup_service:ctiStart', None), ('setup_service:ctiTermsModal', None), ('setup_service:deleteSampleData', None), ('setup_service:deleteSampleDataLoading', None), ('setup_service:deleteSampleDataSetupFlow', None), ('setup_service:deleteSampleDataSuccessful', None), ('setup_service:e2cConfigForward', None), ('setup_service:e2cEmailName', None), ('setup_service:e2cGmailAddForwardingAddress', None), ('setup_service:e2cGmailForwardingConfirmation', None), ('setup_service:e2cGmailForwardingLinkLoader', None), ('setup_service:e2cGmailSave', None), ('setup_service:e2cGmailSetupFlow', None), ('setup_service:e2cRoundtripVerification', None), ('setup_service:e2cSelectProvider', None), ('setup_service:e2cSetupFlow', None), ('setup_service:e2cStart', None), ('setup_service:e2cSuccess', None), ('setup_service:e2cVerifyRoutingAddress', None), ('setup_service:facebookSetupFlow', None), ('setup_service:inlineEditPopover', None), ('setup_service:kbAuthors', None), ('setup_service:kbDataCategoryGroup', None), ('setup_service:kbSetupFlow', None), ('setup_service:kbStart', None), ('setup_service:kbSuccess', None), ('setup_service:liveAgentCodeSnippet', None), ('setup_service:liveAgentDeployWaiting', None), ('setup_service:liveAgentEndpoints', None), ('setup_service:liveAgentOfflineSupport', None), ('setup_service:liveAgentOfflineSupportConfig', None), ('setup_service:liveAgentPrechat', None), ('setup_service:liveAgentQueueCreation', None), ('setup_service:liveAgentSetupFlow', None), ('setup_service:liveAgentStart', None), ('setup_service:liveAgentSuccess', None), ('setup_service:liveMessageAppleBusinessChat', None), ('setup_service:liveMessageAuth', None), ('setup_service:liveMessageBestPractice', None), ('setup_service:liveMessageDeployWaiting', None), ('setup_service:liveMessageProceedOmni', None), ('setup_service:liveMessageSelectChannel', None), ('setup_service:liveMessageSelectFacebookPage', None), ('setup_service:liveMessageSetupFlow', None), ('setup_service:liveMessageSms', None), ('setup_service:liveMessageStart', None), ('setup_service:liveMessageSuccess', None), ('setup_service:liveMessageWeChat', None), ('setup_service:liveMessageWeChatDetails', None), ('setup_service:liveMessageWhatsApp', None), ('setup_service:lsfConnect', None), ('setup_service:lsfContent', None), ('setup_service:lsfEndStep', None), ('setup_service:lsfStart', None), ('setup_service:lsfSuccess', None), ('setup_service:lshLifetimePerformanceCharts', None), ('setup_service:lshQueueCreation', None), ('setup_service:lshRecommendedTopCards', None), ('setup_service:lshTileServices', None), ('setup_service:lshTodaysPerformanceCharts', None), ('setup_service:multiAddWithFooter', None), ('setup_service:omniDeployWaiting', None), ('setup_service:omniError', None), ('setup_service:omniQueueCreation', None), ('setup_service:omniRoutingConfig', None), ('setup_service:omniRoutingConfigTableRow', None), ('setup_service:omniSetupFlow', None), ('setup_service:omniStart', None), ('setup_service:omniSuccess', None), ('setup_service:omniWorkLoad', None), ('setup_service:orgShape', None), ('setup_service:packageInstaller', None), ('setup_service:queueRoutingConfigTableRow', None), ('setup_service:quickActionCustomizeFields', None), ('setup_service:quickActionCustomizeFieldsAddFieldPopover', None), ('setup_service:quickActionCustomizeFieldsRow', None), ('setup_service:quickActionCustomizeFieldsRowIconButton', None), ('setup_service:serviceCaseStatus', None), ('setup_service:serviceCaseStatusAddTemplate', None), ('setup_service:serviceSetupHome', None), ('setup_service:setupCaseStatusFlow', None), ('setup_service:setupFlowError', None), ('setup_service:setupMatTile', None), ('setup_service:socialAuth', None), ('setup_service:socialEnablePages', None), ('setup_service:socialStart', None), ('setup_service:socialSuccess', None), ('setup_service:socialTeamAccess', None), ('setup_service:socialWaiting', None), ('setup_service:treeGridSelectionTriggerCell', None), ('setup_service:twitterSetupFlow', None), ('setup_service_entityarchiving:entityArchivingSetup', None), ('setup_service_entityarchiving:entityArchivingSetupView', None), ('setup_service_fieldservice:baseTemplateAssignment', None), ('setup_service_fieldservice:emptyState', None), ('setup_service_fieldservice:fieldServiceSettings', None), ('setup_service_fieldservice:setupEntityList', None), ('setup_service_fieldservice:timeSheetTemplate', None), ('setup_service_fieldservice:timeSheetTemplateAssignment', None), ('setup_service_fieldservice:timeSheetTemplateWizard', None), ('setup_service_fieldservice:timeSheetTemplateWizardDetailsStep', None), ('setup_service_fieldservice:timeSheetTemplateWizardFlow', None), ('setup_service_fieldservice:updateTemplateAssignmentModal', None), ('setup_service_fieldservice:visionPrediction', None), ('setup_service_intents:createDomainModal', None), ('setup_service_intents:createIntentModal', None), ('setup_service_intents:domainList', None), ('setup_service_intents:domainListCard', None), ('setup_service_intents:domainQuickViewModal', None), ('setup_service_intents:globalIntentPicker', None), ('setup_service_intents:intentListCard', None), ('setup_service_intents:intentRecord', None), ('setup_service_intents:intentSetRecord', None), ('setup_service_intents:intentSetup', None), ('setup_service_intents:slotClassListCard', None), ('setup_service_intents:slotClassRecord', None), ('setup_service_livemessage:channelsContainer', None), ('setup_service_livemessage:channelsGrid', None), ('setup_service_livemessage:errorType', None), ('setup_service_livemessage:messageType', None), ('setup_service_livemessage:messagingChannelEditAction', None), ('setup_service_livemessage:messagingChannelEditModal', None), ('setup_service_livemessage:messagingDeliveryErrorLogContainer', None), ('setup_service_livemessage:messagingDeliveryErrorMassDelete', None), ('setup_service_livemessage:messagingDeliveryErrorViewAction', None), ('setup_service_livemessage:messagingDeliveryErrorViewModal', None), ('setup_service_livemessage:messagingSensitiveDataRuleEditAction', None), ('setup_service_livemessage:messagingSensitiveDataRuleEditModal', None), ('setup_service_livemessage:messagingSensitiveDataRules', None), ('setup_service_livemessage:messagingTemplateDeveloperNameField', None), ('setup_service_livemessage:messagingTemplateMasterLabelField', None), ('setup_service_livemessage:messagingTemplateMessageField', None), ('setup_service_livemessage:messagingTemplateSettingsContainer', None), ('setup_service_livemessage:saveButton', None), ('setup_service_livemessage:sensitiveDataRuleActionTypeListField', None), ('setup_service_livemessage:sensitiveDataRuleEnforceOnListField', None), ('setup_service_livemessage:sensitiveDataRulePatternListField', None), ('setup_service_livemessage:settingsContainer', None), ('setup_service_omnichannel:attributeBasedRoutingCombobox', None), ('setup_service_omnichannel:attributeBasedRoutingSelectAttributeList', None), ('setup_service_omnichannel:attributeBasedRoutingSelectAttributeRow', None), ('setup_service_omnichannel:attributeBasedRoutingSetup', None), ('setup_service_omnichannel:attributeBasedRoutingSetupFooter', None), ('setup_service_omnichannel:attributeBasedRoutingSetupHeader', None), ('setup_service_omnichannel:attributeBasedRoutingSetupModal', None), ('setup_service_omnichannel:attributeBasedRoutingSetupSelectAttributes', None), ('setup_service_omnichannel:attributeBasedRoutingSetupSelectEntity', None), ('setup_service_omnichannel:attributeBasedRoutingSetupSelectFields', None), ('setup_service_omnichannel:attributeBasedSaveModalFooter', None), ('setup_service_omnichannel:errorPopover', None), ('setup_service_predictions:einsteinCaseClassificationDataSegmentation', None), ('setup_service_predictions:einsteinCaseClassificationReviewBasics', None), ('setup_service_predictions:einsteinCaseClassificationReviewFields', None), ('setup_service_predictions:einsteinCaseClassificationSetup', None), ('setup_service_predictions:einsteinCaseClassificationSetupAddFields', None), ('setup_service_predictions:einsteinCaseClassificationSetupConfirmationModal', None), ('setup_service_predictions:einsteinCaseClassificationSetupDataSegmentation', None), ('setup_service_predictions:einsteinCaseClassificationSetupFieldList', None), ('setup_service_predictions:einsteinCaseClassificationSetupFieldListItem', None), ('setup_service_predictions:einsteinCaseClassificationSetupHomePage', None), ('setup_service_predictions:einsteinCaseClassificationSetupModal', None), ('setup_service_predictions:einsteinCaseClassificationSetupProgressBar', None), ('setup_service_predictions:einsteinCaseClassificationSetupReviewFields', None), ('setup_service_predictions:einsteinCaseClassificationThresholdPicker', None), ('setup_service_predictions:reviewTerms', None), ('setup_service_predictions:reviewTermsFlow', None), ('setup_service_scs:caseRulesTab', None), ('setup_service_scs:inboundSettingsTab', None), ('setup_service_scs:scopedNotification', None), ('setup_service_scs:socialBusinessRulesCaseSubject', None), ('setup_service_scs:socialBusinessRulesCaseSubjectAddField', None), ('setup_service_scs:socialBusinessRulesCaseSubjectCustomSubject', None), ('setup_service_scs:socialBusinessRulesContainer', None), ('setup_service_scs:socialBusinessRulesFooter', None), ('setup_service_scs:socialBusinessRulesTabs', None), ('setup_service_smb:audioUploader', None), ('setup_service_smb:createAgentQueue', None), ('setup_service_smb:hcCreateTopics', None), ('setup_service_smb:hcCreateTopicsRow', None), ('setup_service_smb:hcSetupFlow', None), ('setup_service_smb:hcStart', None), ('setup_service_smb:hcSuccess', None), ('setup_service_smb:helpCenterSetupPage', None), ('setup_service_smb:lsfGenericStep', None), ('setup_service_smb:lsfQueueCreation', None), ('setup_service_smb:voiceChannelBusinessHours', None), ('setup_service_smb:voiceChannelMessageUploader', None), ('setup_service_smb:voiceChannelName', None), ('setup_service_smb:voiceChannelSelectNumber', None), ('setup_service_smb:voiceChannelSetupFlow', None), ('setup_service_smb:voiceChannelStart', None), ('setup_service_smb:voiceChannelSuccess', None), ('setup_service_smb:voiceRouting', None), ('setup_service_smb:voiceRoutingSetupFlow', None), ('setup_service_smb:voiceSelectPhone', None), ('setupnav:appImageUpload', None), ('setupnav:appLauncherPreview', None), ('setupnav:appManager', None), ('setupnav:availableProfilesDataProvider', None), ('setupnav:formFactorsCellRenderer', None), ('setupnav:iconPicker', None), ('setupnav:iconPickerListItem', None), ('setupnav:iconPickerModal', None), ('setupnav:infiniteDuelingListTestHarness', None), ('setupnav:lsfEditFlow', None), ('setupnav:lsfMilestone', None), ('setupnav:lsfMilestoneAppNavigation', None), ('setupnav:lsfMilestoneCreate', None), ('setupnav:lsfMilestoneItems', None), ('setupnav:lsfMilestoneNavigationRules', None), ('setupnav:lsfMilestoneProfiles', None), ('setupnav:lsfMilestoneUtilityBar', None), ('setupnav:lsfNewFlow', None), ('setupnav:uitypeCellRenderer', None), ('setupnav:upgradeCustomApp', None), ('setupnav:utilityBarItemIconPicker', None), ('setupnav:utilityBarSetup', None), ('setupnav:utilityBarSetupPropertyEditor', None), ('setupnav:utilityBarSetupTab', None), ('setupnav:utilityBarSetupTabset', None), ('setupnav:utilityBarSetupVisualEditorPalette', None), ('setupwizard:alertBox', None), ('setupwizard:footer', None), ('setupwizard:header', None), ('setupwizard:milestoneMarker', None), ('setupwizard:milestoneTracker', None), ('setupwizard:overlay', None), ('setupwizard:stdMilestone', None), ('setupwizard:stdOverlay', None), ('setupwizard:stdSubstep', None), ('setupwizard:stepLevelMessage', None), ('setupwizard:testMilestone', None), ('setupwizard:wizard', None), ('sfa:accountLookupCard', None), ('sfa:addAccTeamOnOpp', None), ('sfa:addCustomPriceOnPricebook', None), ('sfa:addCustomPriceOnProduct', None), ('sfa:addCustomPriceOnProductFooter', None), ('sfa:addDefaultTeam', None), ('sfa:analyticsHome', None), ('sfa:analyticsHomeLegacy', None), ('sfa:caseLookupCard', None), ('sfa:checkboxButton', None), ('sfa:checkboxToggle', None), ('sfa:choosePricebook', None), ('sfa:choosePricebookFooter', None), ('sfa:choosePricebookPostSaveRunnable', None), ('sfa:closableMessage', None), ('sfa:contactLookupCard', None), ('sfa:createPartnerContainer', None), ('sfa:datePicker', None), ('sfa:datePickerItem', None), ('sfa:datePickerScroller', None), ('sfa:datePickerWeek', None), ('sfa:deleteAllTeams', None), ('sfa:detailPanelWrapper', None), ('sfa:dialog', None), ('sfa:duelingListBoxes', None), ('sfa:eventActivityDate', None), ('sfa:eventActivityDateTime', None), ('sfa:eventDateTime', None), ('sfa:eventDurationInMinutes', None), ('sfa:eventIsAllDayEvent', None), ('sfa:eventOwnerPreventEntityChange', None), ('sfa:filterMenu', None), ('sfa:folderHome', None), ('sfa:forecasting', None), ('sfa:hierarchyDataManager', None), ('sfa:hierarchyFullView', None), ('sfa:hierarchyListViewAction', None), ('sfa:hierarchyListViewCard', None), ('sfa:hierarchyListViewDetails', None), ('sfa:hierarchyPrompt', None), ('sfa:hierarchyTriggerCell', None), ('sfa:importButton', None), ('sfa:importContact', None), ('sfa:launchPhone', None), ('sfa:lightningConversionWelcomeMat', None), ('sfa:linkedInSalesNavigatorPage', None), ('sfa:navigateToHierarchyButton', None), ('sfa:objTerrAssociationCreate', None), ('sfa:objTerrAssociationCreateFooter', None), ('sfa:ocrMultiEdit', None), ('sfa:ocrRelatedListPrimaryField', None), ('sfa:opportunityContactRoleIsPrimary', None), ('sfa:opportunityFieldOverride', None), ('sfa:opportunityLineItemFieldOverride', None), ('sfa:opportunityLineItemMultiEdit', None), ('sfa:opportunityLineItemScheduleMultiEdit', None), ('sfa:opportunityLineItemScheduleSubtotalsFooter', None), ('sfa:opportunityLookupCard', None), ('sfa:opportunitySplitMultiEdit', None), ('sfa:opportunitySplitSubtotalsFooter', None), ('sfa:opportunitySplitUser', None), ('sfa:outputCompoundPhotoUserName', None), ('sfa:outputLookupForContactPoint', None), ('sfa:outputLookupNoNavigation', None), ('sfa:outputLookupWithHierarchyIcon', None), ('sfa:outputNameWithHierarchyIcon', None), ('sfa:outputYearQuarter', None), ('sfa:placeholder', None), ('sfa:productNameOutputLookup', None), ('sfa:productScheduleDeleteAll', None), ('sfa:productScheduleEstablish', None), ('sfa:productScheduleEstablishInputFields', None), ('sfa:saveAndNewEventEntity', None), ('sfa:saveEventEntityAction', None), ('sfa:sfdcEventList', None), ('sfa:sfdcEventListDataManager', None), ('sfa:sfdcEventListStencil', None), ('sfa:stageNameService', None), ('sfa:stageNameServiceForMDP', None), ('sfa:stageNameServiceForecastCategoryWrapper', None), ('sfa:stageNameServiceProbabilityWrapper', None), ('sfa:taskList', None), ('sfa:teamAccessLevel', None), ('sfa:teamDetailPanel', None), ('sfa:teamDetailPanelInfoMessage', None), ('sfa:teamMiniRelatedStencil', None), ('sfa:teamMiniRelatedStencilMobile', None), ('sfa:tempDepend', None), ('sfa:useStandardPrice', None), ('sfa:useStandardPriceUnitPriceWrapper', None), ('siteforce:baseInvalidComponent', None), ('siteforce:baseScopedSldsTemplate', None), ('siteforce:baseSldsTemplate', None), ('siteforce:baseTemplate', None), ('siteforce:cmsConnectManager', None), ('siteforce:cmsConnectProvider', None), ('siteforce:communityTemplate', None), ('siteforce:conditional', None), ('siteforce:contentArea', None), ('siteforce:cptBody', None), ('siteforce:cptThemeCss', None), ('siteforce:designTimeCmpLoader', None), ('siteforce:designTimeCmpLoaderWrapper', None), ('siteforce:designTimeComponent', None), ('siteforce:designTimeEmptyRegion', None), ('siteforce:designTimeLabelLoader', None), ('siteforce:designTimeMode', None), ('siteforce:designTimeModeLoader', None), ('siteforce:designTimeRegion', None), ('siteforce:dialogMessage', None), ('siteforce:dialogModal', None), ('siteforce:dialogOfflineMessage', None), ('siteforce:dialogPanel', None), ('siteforce:dialogService', None), ('siteforce:fontContainer', None), ('siteforce:fontStyle', None), ('siteforce:helpCenterBody', None), ('siteforce:hiddenRegion', None), ('siteforce:hybridAppManager', None), ('siteforce:integrationServiceAppTemplate', None), ('siteforce:koaBody', None), ('siteforce:koaTemplate', None), ('siteforce:kokuaBody', None), ('siteforce:kokuaTemplate', None), ('siteforce:loadingBalls', None), ('siteforce:napiliBody', None), ('siteforce:napiliFooter', None), ('siteforce:napiliFooterDesignInfo', None), ('siteforce:napiliStyle', None), ('siteforce:napiliTemplate', None), ('siteforce:navigationProvider', None), ('siteforce:networkTracking', None), ('siteforce:oneColumnLayout', None), ('siteforce:pageLoader', None), ('siteforce:panelManager', None), ('siteforce:panelsContainer', None), ('siteforce:placeholderComponent', None), ('siteforce:prmBody', None), ('siteforce:prmThemeCss', None), ('siteforce:publiclyCacheableComponentLoader', None), ('siteforce:qb', None), ('siteforce:quarterback', None), ('siteforce:recordServiceComponent', None), ('siteforce:regionLoader', None), ('siteforce:regionLoaderWrapper', None), ('siteforce:routerInitializer', None), ('siteforce:runtimeComponent', None), ('siteforce:runtimeMode', None), ('siteforce:runtimeRegion', None), ('siteforce:serviceBody', None), ('siteforce:serviceThemeCss', None), ('siteforce:sfdcPage', None), ('siteforce:sldsOneColLayout', None), ('siteforce:sldsThreeCol336Layout', None), ('siteforce:sldsThreeCol363Layout', None), ('siteforce:sldsThreeCol444Layout', None), ('siteforce:sldsThreeCol633Layout', None), ('siteforce:sldsTwoCol48Layout', None), ('siteforce:sldsTwoCol66Layout', None), ('siteforce:sldsTwoCol84Layout', None), ('siteforce:sldsTwoCol84SidebarFeaturedLayout', None), ('siteforce:spinnerManager', None), ('siteforce:starterBody', None), ('siteforce:style', None), ('siteforce:themeLayoutStarter', None), ('siteforce:toast', None), ('siteforce:twoCol74Layout', None), ('siteforce:twoColumnLayout', None), ('siteforce:warningComponent', None), ('siteforce:warningComponentNoData', None), ('siteforceBuilder:cmcHubMenuWrapper', None), ('siteforceBuilder:communityBuilderComponentPalettePanel', None), ('siteforceBuilder:communityBuilderComponentPropertyPanel', None), ('siteforceBuilder:communityBuilderLibraryLoader', None), ('siteforceBuilder:communityBuilderPanelManager', None), ('siteforceBuilder:communityBuilderTemplate', None), ('siteforceBuilder:dropdown', None), ('siteforceBuilder:dropdownTrigger', None), ('siteforceBuilder:headerDropdownTrigger', None), ('siteforceBuilder:outerLayoutEditor', None), ('siteforceBuilder:paletteSectionDisabledMessage', None), ('siteforceBuilder:setupFlowLibraryWrapper', None), ('siteforceBuilder:siteLinkDropdown', None), ('support:caseCommentIsNotificationSelectedField', None), ('support:caseCommentIsPublishedField', None), ('support:caseCommentOutputText', None), ('support:caseHighlightsPreviewStencil', None), ('support:caseHoverDescription', None), ('support:caseTeamActions', None), ('support:compactClumpItem', None), ('support:compactClumpItemForPreview', None), ('support:compactFeedItem', None), ('support:compactFeedItemArticleContent', None), ('support:compactFeedItemCaseCommentContent', None), ('support:compactFeedItemChatTranscriptContent', None), ('support:compactFeedItemContent', None), ('support:compactFeedItemDefaultContent', None), ('support:compactFeedItemEmailMessageContent', None), ('support:compactFeedItemFieldChangeContent', None), ('support:compactFeedItemForPreview', None), ('support:compactFeedItemHeader', None), ('support:compactFeedItemLogCallContent', None), ('support:compactFeedItemRecordSummaryContent', None), ('support:compactFeedItemSocialPostContent', None), ('support:compactFeedOverflowActionMenu', None), ('support:compactRecordFeedContainerDesktop', None), ('support:contactRequestButton', None), ('support:contactRequestButtonDesignInfo', None), ('support:contactRequestFlow', None), ('support:contactRequestFlowAvailableChannelsDataProvider', None), ('support:contactRequestFlowAvailableReasonsDataProvider', None), ('support:contactRequestFlowChannelSelection', None), ('support:contactRequestFlowDetails', None), ('support:contactRequestFlowError', None), ('support:contactRequestFlowOwnerSelection', None), ('support:contactRequestFlowReasonSelection', None), ('support:contactRequestFlowSuccess', None), ('support:contactRequestFlowsListView', None), ('support:contactRequestFlowsSetup', None), ('support:contactRequestWhatIdLookup', None), ('support:contactRequestWhoIdLookup', None), ('support:crossFrameApiManager', None), ('support:draftOverwriteWarningModal', None), ('support:emailAddress', None), ('support:emailAddresses', None), ('support:emailApproval', None), ('support:emailApprovalNotification', None), ('support:emailAutosaver', None), ('support:emailBody', None), ('support:emailHeader', None), ('support:emailMessageDropdown', None), ('support:emailMessageDropdownButton', None), ('support:emailMessageMergeFieldOverride', None), ('support:emailMessageSubjectFieldLinkOverride', None), ('support:emailReplyActionLink', None), ('support:enhancedOutputURL', None), ('support:feedContainerForPreview', None), ('support:feedFilters', None), ('support:feedItemAction', None), ('support:inputEmailAttachmentIds', None), ('support:inputEmailRecipients', None), ('support:inputFolderField', None), ('support:inputTextArea', None), ('support:label', None), ('support:lightningQuickTextSetup', None), ('support:likeAction', None), ('support:milestoneItem', None), ('support:milestoneTimer', None), ('support:milestones', None), ('support:milestonesDesignInfo', None), ('support:milestonesList', None), ('support:outputFolderField', None), ('support:outputPhoneManager', None), ('support:outputTextArea', None), ('support:ownerAssignmentForContactRequest', None), ('support:progressRing', None), ('support:publisherQuickSendEmail', None), ('support:quickActionLink', None), ('support:quickActionLinkManager', None), ('support:quickActionRunnable', None), ('support:quickText', None), ('support:quickTextBrowserContainer', None), ('support:quickTextChannelField', None), ('support:quickTextFloater', None), ('support:quickTextMessageField', None), ('support:quickTextPreview', None), ('support:quickTextToolbarButton', None), ('support:sendEmailQuickAction', None), ('support:toInputEmailRecipients', None), ('support:toggleObjectHomeView', None), ('support:urlImageSelector', None), ('survey:analytics', None), ('survey:analyticsPublished', None), ('survey:analyticsUnpublished', None), ('survey:answerCsat', None), ('survey:answerDateNew', None), ('survey:answerInputTemplate', None), ('survey:answerMultiChoice', None), ('survey:answerPicklist', None), ('survey:answerRadio', None), ('survey:answerRating', None), ('survey:answerRuntimeBase', None), ('survey:answerSlider', None), ('survey:answerStackRank', None), ('survey:answerStackRankItem', None), ('survey:answerStackRankWeight', None), ('survey:answerTextarea', None), ('survey:baseTemplate', None), ('survey:build', None), ('survey:builder', None), ('survey:builderAddImage', None), ('survey:builderLeftPanel', None), ('survey:builderLeftPanelSurveyItem', None), ('survey:builderRichText', None), ('survey:builderStylePanel', None), ('survey:builderToolbar', None), ('survey:cloneNewSurveyModal', None), ('survey:colorPicker', None), ('survey:confirmActiveOverrideModal', None), ('survey:createInvitationAction', None), ('survey:emailPreviewModal', None), ('survey:emailPreviewPublisher', None), ('survey:expireInvitation', None), ('survey:fileSelector', None), ('survey:getSharableLinkModal', None), ('survey:header', None), ('survey:logicConditionInput', None), ('survey:logicConditionItem', None), ('survey:logicCreateRule', None), ('survey:logicLabel', None), ('survey:logicModal', None), ('survey:logicOperator', None), ('survey:logicRuleList', None), ('survey:logicRuleListItem', None), ('survey:logicRuleListItemDetail', None), ('survey:modal', None), ('survey:newSurveyVersionModal', None), ('survey:notDeleteableSurveyItemModal', None), ('survey:pageHeader', None), ('survey:picklistDataProvider', None), ('survey:questionCreatorPanel', None), ('survey:questionEditor', None), ('survey:questionList', None), ('survey:questionOptions', None), ('survey:questionTypePanelItem', None), ('survey:runtimeActionBar', None), ('survey:runtimeAnswerTextarea', None), ('survey:runtimeBaseAnswer', None), ('survey:runtimeCsat', None), ('survey:runtimeDate', None), ('survey:runtimeMultiChoice', None), ('survey:runtimeOutputText', None), ('survey:runtimePicklist', None), ('survey:runtimeQuestionDescription', None), ('survey:runtimeQuestionImage', None), ('survey:runtimeQuestionLabel', None), ('survey:runtimeRadioButton', None), ('survey:runtimeRating', None), ('survey:runtimeScreen', None), ('survey:runtimeScreenActionButtons', None), ('survey:runtimeSlider', None), ('survey:runtimeStackRank', None), ('survey:runtimeSurvey', None), ('survey:runtimeThankYou', None), ('survey:runtimeWelcome', None), ('survey:saveAsModal', None), ('survey:send', None), ('survey:sendPublished', None), ('survey:sendUnpublished', None), ('survey:slider', None), ('survey:survey', None), ('survey:surveyActivationModal', None), ('survey:surveyCustomSvgIcons', None), ('survey:surveyDesignInfo', None), ('survey:surveyDesignSubstitute', None), ('survey:surveyDetailsLocalization', None), ('survey:surveyEmailBranding', None), ('survey:surveyEmailEditor', None), ('survey:surveyEmailSummary', None), ('survey:surveyEmailWizard', None), ('survey:surveyEmailWizardFooter', None), ('survey:surveyFreeTextDateResponse', None), ('survey:surveyLocalization', None), ('survey:surveyLocalizationEditor', None), ('survey:surveyLocalizationWizard', None), ('survey:surveyPageLocalization', None), ('survey:surveyQuestionLabelLocalization', None), ('survey:surveyQuestionResponse', None), ('survey:surveyQuestionResponseCharts', None), ('survey:surveyResponseStatusCharts', None), ('survey:tester_builderLeftPanel', None), ('survey:visualPickerInput', None), ('templatesetup:deployPage', None), ('templatesetup:deploymentNotification', None), ('templatesetup:historyPage', None), ('templatesetup:notificationToast', None), ('templatesetup:openNewBrowserTabLink', None), ('templatesetup:pageTitle', None), ('templatesetup:svgIcon', None), ('templatesetup:template', None), ('templatesetup:templateDesc', None), ('templatesetup:templateHistoryItems', None), ('templatesetup:templateIntro', None), ('templatesetup:templateItem', None), ('templatesetup:templateListPage', None), ('templatesetup:templatePrerequisites', None), ('templatesetup:templatePromptedValue', None), ('templatesetup:templatePromptedValues', None), ('templatesetup:templateSearch', None), ('templatesetup:templateSearchDataProvider', None), ('templatesetup:templateUninstallLink', None), ('templatesetup:templatesDataProvider', None), ('today:acceptanceStatusIcon', None), ('today:agendaCard', None), ('today:agendaRow', None), ('today:bridgeWrapper', None), ('today:calendar', None), ('today:card', None), ('today:cardLoader', None), ('today:cardLoaderFeeder', None), ('today:cardLoadingUI', None), ('today:clientSideDataProvider', None), ('today:conferenceCall', None), ('today:dashboardCardContainer', None), ('today:debugBox', None), ('today:deviceFeature', None), ('today:deviceManager', None), ('today:eventCard', None), ('today:eventContainer', None), ('today:eventDetailContainer', None), ('today:eventDetailSlide', None), ('today:eventNotesCard', None), ('today:eventRecordHome', None), ('today:eventRecordHomeContainer', None), ('today:eventsManager', None), ('today:geolocation', None), ('today:heroCardItemStencil', None), ('today:inviteeList', None), ('today:inviteeListCard', None), ('today:inviteeListDataProvider', None), ('today:inviteeListRow', None), ('today:inviteeListRowStencil', None), ('today:inviteeRecordHome', None), ('today:landingNew', None), ('today:newsContainer', None), ('today:pageActionManager', None), ('today:perfTools', None), ('today:quickMessage', None), ('today:recentRecordContainer', None), ('today:recentRecordList', None), ('today:recentsCard', None), ('today:recentsCardContainer', None), ('today:relatedRecordList', None), ('today:relatedRecordListAbstract', None), ('today:relatedRecordListCard', None), ('today:relatedRecordListCardStencil', None), ('today:relatedRecordListContainer', None), ('today:settings', None), ('today:settingsButton', None), ('today:settingsHeader', None), ('today:smartStore', None), ('today:taskContainer', None), ('today:tasksCard', None), ('today:tempDepend', None), ('today:template', None), ('today:timeContainer', None), ('ui:abstractDataGrid', None), ('ui:abstractList', None), ('ui:action', None), ('ui:actionButton', None), ('ui:actionCheckbox', None), ('ui:actionDelegate', None), ('ui:actionMenuItem', None), ('ui:asyncComponentManager', None), ('ui:asyncImage', None), ('ui:autocomplete', None), ('ui:autocompleteList', None), ('ui:autocompleteOption', None), ('ui:autocompletePanel', None), ('ui:block', None), ('ui:button', None), ('ui:calendar', None), ('ui:carousel', None), ('ui:carouselDeprecated', None), ('ui:carouselIndicator', None), ('ui:carouselPage', None), ('ui:carouselPageDeprecated', None), ('ui:carouselPageIndicator', None), ('ui:carouselPageIndicatorItem', None), ('ui:checkboxMenuItem', None), ('ui:containerManager', None), ('ui:dataGrid', None), ('ui:dataGridActionColumn', None), ('ui:dataGridColumn', None), ('ui:dataGridSelectionColumn', None), ('ui:dataGridSummaryCell', None), ('ui:dataProvider', None), ('ui:dataTable', None), ('ui:dataTableColumn', None), ('ui:dataTableHeader', None), ('ui:dataTableRow', None), ('ui:dataWriter', None), ('ui:datePicker', None), ('ui:datePickerGrid', None), ('ui:datePickerManager', None), ('ui:dayInMonthCell', None), ('ui:dialog', None), ('ui:dialogButtons', None), ('ui:dialogManager', None), ('ui:dragAndDropAccessibility', None), ('ui:dragAndDropAccessibilityMenu', None), ('ui:draggable', None), ('ui:dropzone', None), ('ui:fieldLabel', None), ('ui:format', None), ('ui:image', None), ('ui:infiniteList', None), ('ui:infiniteListRow', None), ('ui:inlineEditPanelBody', None), ('ui:inlinePanel', None), ('ui:input', None), ('ui:inputCheckbox', None), ('ui:inputCurrency', None), ('ui:inputDate', None), ('ui:inputDateHtml', None), ('ui:inputDateRange', None), ('ui:inputDateTime', None), ('ui:inputDateTimeHtml', None), ('ui:inputDateTrigger', None), ('ui:inputDefaultError', None), ('ui:inputEmail', None), ('ui:inputFile', None), ('ui:inputFileDroppableZone', None), ('ui:inputFileFilesList', None), ('ui:inputFileOpenBrowse', None), ('ui:inputNumber', None), ('ui:inputPercent', None), ('ui:inputPhone', None), ('ui:inputRadio', None), ('ui:inputRange', None), ('ui:inputRichText', None), ('ui:inputSearch', None), ('ui:inputSecret', None), ('ui:inputSelect', None), ('ui:inputSelectOption', None), ('ui:inputSelectOptionGroup', None), ('ui:inputSmartNumber', None), ('ui:inputText', None), ('ui:inputTextArea', None), ('ui:inputTextAreaForAutocomplete', None), ('ui:inputTextForAutocomplete', None), ('ui:inputTimePicker', None), ('ui:inputURL', None), ('ui:interactive', None), ('ui:label', None), ('ui:legend', None), ('ui:list', None), ('ui:listSorter', None), ('ui:manifest', None), ('ui:menu', None), ('ui:menuItem', None), ('ui:menuItemSeparator', None), ('ui:menuList', None), ('ui:menuTrigger', None), ('ui:menuTriggerLink', None), ('ui:message', None), ('ui:modal', None), ('ui:output', None), ('ui:outputCheckbox', None), ('ui:outputCurrency', None), ('ui:outputDate', None), ('ui:outputDateTime', None), ('ui:outputEmail', None), ('ui:outputLabel', None), ('ui:outputMultiSelect', None), ('ui:outputNumber', None), ('ui:outputPercent', None), ('ui:outputPhone', None), ('ui:outputRichText', None), ('ui:outputSelect', None), ('ui:outputText', None), ('ui:outputTextArea', None), ('ui:outputURL', None), ('ui:pager', None), ('ui:pagerJumpToPage', None), ('ui:pagerNextPrevious', None), ('ui:pagerPageInfo', None), ('ui:pagerPageSize', None), ('ui:panel', None), ('ui:panelManager2', None), ('ui:picklistLabel', None), ('ui:pill', None), ('ui:pillContainer', None), ('ui:pillContainerAutoComplete', None), ('ui:pillContainerAutoCompleteOption', None), ('ui:popup', None), ('ui:popupTarget', None), ('ui:popupTrigger', None), ('ui:radioMenuItem', None), ('ui:radioToggleMenuItem', None), ('ui:resizeObserver', None), ('ui:scroller', None), ('ui:scrollerDeprecated', None), ('ui:scrollerWrapper', None), ('ui:spinner', None), ('ui:stamp', None), ('ui:tab', None), ('ui:tabBar', None), ('ui:tabItem', None), ('ui:tabOverflowMenuItem', None), ('ui:tabset', None), ('ui:timePicker', None), ('ui:toolbar', None), ('ui:tooltip', None), ('ui:tooltipAdvanced', None), ('ui:tree', None), ('ui:treeNode', None), ('ui:vbox', None), ('ui:virtualDataGrid', None), ('ui:virtualDataTable', None), ('ui:virtualList', None), ('ui:virtualMenuWrapper', None), ('uiExamples:autocompleteDataProvider', None), ('uiExamples:autocompleteExample', None), ('uiExamples:autocompleteOptionExample', None), ('uiExamples:autocompleteOptionExampleExtended', None), ('uiExamples:buttonExample', None), ('uiExamples:carouselExample', None), ('uiExamples:checkbox', None), ('uiExamples:columnResizing', None), ('uiExamples:currency', None), ('uiExamples:dataGridDynamicColumns', None), ('uiExamples:dataGridKitchenSink', None), ('uiExamples:dataGridKitchenSinkDataProvider', None), ('uiExamples:dataProviderExample', None), ('uiExamples:date', None), ('uiExamples:datePicker', None), ('uiExamples:datetime', None), ('uiExamples:detailPopover', None), ('uiExamples:dragAndDropExample', None), ('uiExamples:dragAndDropProvider', None), ('uiExamples:email', None), ('uiExamples:gridActionCell', None), ('uiExamples:headerGridActionCell', None), ('uiExamples:iconCmp', None), ('uiExamples:infiniteDataProvider', None), ('uiExamples:infiniteList', None), ('uiExamples:infiniteListDataProvider', None), ('uiExamples:infiniteListRow', None), ('uiExamples:inputExample', None), ('uiExamples:inputNumberExample', None), ('uiExamples:inputTextExample', None), ('uiExamples:iterationExample', None), ('uiExamples:libraryExample', None), ('uiExamples:mobileViewport', None), ('uiExamples:modalContent', None), ('uiExamples:outputExample', None), ('uiExamples:panelContent', None), ('uiExamples:panelFooter', None), ('uiExamples:panelHeader', None), ('uiExamples:panelPositioningExample', None), ('uiExamples:phone', None), ('uiExamples:popupExample', None), ('uiExamples:radio', None), ('uiExamples:registerCustomPanel', None), ('uiExamples:renderIfExample', None), ('uiExamples:secret', None), ('uiExamples:tabsetExample', None), ('uiExamples:text', None), ('uiExamples:textarea', None), ('uiExamples:tooltipExample', None), ('uiExamples:url', None), ('uiExamples:virtualDataGridKitchenSink', None), ('uiExamples:virtualDataTable', None), ('uiExamples:virtualListExample', None), ('uns:activitiesCard', None), ('uns:activitiesManager', None), ('uns:cardQueue', None), ('uns:defaultNotificationManager', None), ('uns:eventsCard', None), ('uns:eventsManager', None), ('uns:notificationCardFrame', None), ('uns:notificationDefaultCard', None), ('uns:notifications', None), ('uns:notificationsCounter', None), ('uns:notificationsDataProvider', None), ('uns:notificationsListRow', None), ('uns:notificationsPanel', None), ('uns:notificationsVirtualList', None), ('uns:tasksCard', None), ('uns:tasksManager', None), ('userProvisioningUI:analyze', None), ('userProvisioningUI:approval', None), ('userProvisioningUI:break', None), ('userProvisioningUI:collect', None), ('userProvisioningUI:commit', None), ('userProvisioningUI:connector', None), ('userProvisioningUI:errorMessage', None), ('userProvisioningUI:linking', None), ('userProvisioningUI:operation', None), ('userProvisioningUI:summary', None), ('userProvisioningUI:welcome', None), ('visualEditor:accordionSectionsEditor', None), ('visualEditor:appBuilderProvider', None), ('visualEditor:assignmentTable', None), ('visualEditor:attributeDataProvider', None), ('visualEditor:baseBuilder', None), ('visualEditor:baseEditor', None), ('visualEditor:baseEditorPanel', None), ('visualEditor:booleanEditor', None), ('visualEditor:booleanEditorDataProvider', None), ('visualEditor:booleanPicklistEditor', None), ('visualEditor:clientAttributeTypeProvider', None), ('visualEditor:colorEditor', None), ('visualEditor:componentPropertiesEditor', None), ('visualEditor:componentPropertiesEditorSection', None), ('visualEditor:containerComponentEditorItem', None), ('visualEditor:containerComponentEditorItemAttributesEditor', None), ('visualEditor:containerComponentEditorItemEditor', None), ('visualEditor:criteriaEditor', None), ('visualEditor:criteriaEditorPanelBody', None), ('visualEditor:dateTimeEditor', None), ('visualEditor:dialogErrors', None), ('visualEditor:doubleEditor', None), ('visualEditor:draggable', None), ('visualEditor:droppable', None), ('visualEditor:duelingList', None), ('visualEditor:duelingListItem', None), ('visualEditor:entityNameEditor', None), ('visualEditor:facetEditor', None), ('visualEditor:fieldEditor', None), ('visualEditor:fieldTraverser', None), ('visualEditor:flowArgumentsEditor', None), ('visualEditor:flowArgumentsRecordIdInput', None), ('visualEditor:focusablePanel', None), ('visualEditor:highlightsPanelDesignInfo', None), ('visualEditor:highlightsPanelDesignInfoDialogContent', None), ('visualEditor:inboxTabsetEditor', None), ('visualEditor:infoComponent', None), ('visualEditor:infoHeader', None), ('visualEditor:infoList', None), ('visualEditor:integerEditor', None), ('visualEditor:itemList', None), ('visualEditor:itemListRow', None), ('visualEditor:jQueryUIInteraction', None), ('visualEditor:labelEditor', None), ('visualEditor:labelEditorDeprecated', None), ('visualEditor:modal', None), ('visualEditor:modelData', None), ('visualEditor:modelHost', None), ('visualEditor:modelRemoteData', None), ('visualEditor:modelRemoteHost', None), ('visualEditor:motifPicker', None), ('visualEditor:motifPickerItem', None), ('visualEditor:motifPickerList', None), ('visualEditor:multiLineTextEditor', None), ('visualEditor:multiselectEditor', None), ('visualEditor:multiselectPicklistEditor', None), ('visualEditor:pageAssignmentBaseDataProvider', None), ('visualEditor:pageAssignmentBaseStep', None), ('visualEditor:pageAssignmentProfilePickerStepDataProvider', None), ('visualEditor:pageAssignmentWizard', None), ('visualEditor:pageAssignmentWizardFooter', None), ('visualEditor:palette', None), ('visualEditor:paletteItem', None), ('visualEditor:paletteItemRow', None), ('visualEditor:paletteSection', None), ('visualEditor:picklistAutocomplete', None), ('visualEditor:picklistAutocompleteOption', None), ('visualEditor:picklistAutocompleteSpecialOption', None), ('visualEditor:picklistEditor', None), ('visualEditor:picklistEditorDataProvider', None), ('visualEditor:postmessageManager', None), ('visualEditor:propertyEditor', None), ('visualEditor:propertyEditorItem', None), ('visualEditor:readOnlyEditor', None), ('visualEditor:recordHomeTabsDesignInfo', None), ('visualEditor:relatedFieldSummary', None), ('visualEditor:relatedFieldTraversalDialog', None), ('visualEditor:resizable', None), ('visualEditor:richTextCkEditor', None), ('visualEditor:richTextQuillEditor', None), ('visualEditor:ruleEditor', None), ('visualEditor:ruleInfo', None), ('visualEditor:ruleList', None), ('visualEditor:selectableTable', None), ('visualEditor:serverPaletteItemsProvider', None), ('visualEditor:serverPropertyEditorProvider', None), ('visualEditor:sortable', None), ('visualEditor:sortableList', None), ('visualEditor:sortableListItem', None), ('visualEditor:stringEditor', None), ('visualEditor:style', None), ('visualEditor:tableActionCell', None), ('visualEditor:tabsetEditor', None), ('visualEditor:template', None), ('voice:baseCallHandlerContainer', None), ('voice:baseCallHandlerInConsole', None), ('voice:callAudioLevel', None), ('voice:callDisposition', None), ('voice:callDispositionList', None), ('voice:callDispositionListContainer', None), ('voice:callDispositionListItem', None), ('voice:callFeedback', None), ('voice:callHandlerContainer', None), ('voice:callHandlerInConsole', None), ('voice:callHistoryItem', None), ('voice:callHistoryList', None), ('voice:callListContainer', None), ('voice:callListItem', None), ('voice:callPanel', None), ('voice:callSavePanel', None), ('voice:callTemplatePanel', None), ('voice:coachingListContainer', None), ('voice:coachingListItem', None), ('voice:coachingPanel', None), ('voice:coachingRecord', None), ('voice:coachingTraineeListContainer', None), ('voice:compactRecord', None), ('voice:connectedPanel', None), ('voice:createCallList', None), ('voice:dialPad', None), ('voice:durationRenderer', None), ('voice:feedbackPanel', None), ('voice:getVendorLine', None), ('voice:incomingPanel', None), ('voice:keyPad', None), ('voice:launchSms', None), ('voice:manageLogACall', None), ('voice:networkConnectivity', None), ('voice:numberManagement', None), ('voice:outputDuration', None), ('voice:outputPhone', None), ('voice:phoneNumberPanel', None), ('voice:phoneRenderer', None), ('voice:phoneRowEntry', None), ('voice:phoneSettings', None), ('voice:powerDialer', None), ('voice:quickSetupButton', None), ('voice:recordingDurationRenderer', None), ('voice:recordingManagement', None), ('voice:recordingMassDelete', None), ('voice:recordingSettings', None), ('voice:releaseNumber', None), ('voice:replaceRecording', None), ('voice:replaceRecordingSetup', None), ('voice:selectPhone', None), ('voice:simpleActivityTimeline', None), ('voice:sliderCheckBox', None), ('voice:softphone', None), ('voice:talkChannelConfigSetup', None), ('voice:talkEditUsers', None), ('voice:talkEnabledSuccessModal', None), ('voice:talkNumberSetup', None), ('voice:talkSetupErrorHeader', None), ('voice:talkSetupErrorMessage', None), ('voice:talkSetupLogicDiagramPanel', None), ('voice:talkSetupPage', None), ('voice:trialTerms', None), ('voice:unknownContact', None), ('voice:usageRenderer', None), ('voice:usageReport', None), ('voice:voiceAudioPlayer', None), ('voice:voiceLocalPresencePage', None), ('voice:voiceMailItem', None), ('voice:voiceMailList', None), ('voice:voiceMailRecorder', None), ('voice:voiceMailSettings', None), ('voice:voiceSetupPage', None), ('voice:voicemailMessageListContainer', None), ('voice:voicemailMessageListItem', None), ('wave:annotationFeedControl', None), ('wave:annotationPanel', None), ('wave:annotationPublisher', None), ('wave:annotationPublisherControl', None), ('wave:appNameRenderer', None), ('wave:asset', None), ('wave:feedItemFullView', None), ('wave:filterEditor', None), ('wave:sdk', None), ('wave:tempDepend', None), ('wave:waveAssetRecordHome', None), ('wave:waveDashboard', None), ('wave:waveHelpTrayWrapper', None), ('wave:waveHomeEacFreeTab', None), ('wave:waveHomeTab', None), ('wave:waveTemplate', None), ('waveapps:clientSegmentation', None), ('waveapps:demoLearningAdventure', None), ('waveapps:demoSalesAnalytics', None), ('wits:execsTeamMember', None), ('wits:feedbackButton', None), ('wits:news', None), ('wits:newsActionsMenu', None), ('wits:newsArticleImage', None), ('wits:newsCardsContainer', None), ('wits:newsCarouselItem', None), ('wits:newsCategoryList', None), ('wits:newsItem', None), ('wits:newsLanding', None), ('wits:newsList', None), ('wits:newsListItem', None), ('wits:newsPanel', None), ('wits:newsReportDialog', None), ('wits:newsTeaserCard', None), ('wits:newsTweetCarouselItem', None), ('wits:newsTweetItem', None), ('wits:newsTweetListItem', None), ('wits:suggestedNameField', None), ('wits:suggestionsController', None), ('wits:suggestionsDataProvider', None), ('wits:suggestionsMatchProvider', None), ('wits:tempDepend', None), ('work:coachedByField', None), ('work:customMetricDueDateField', None), ('work:customMetricProgressField', None), ('work:goalImage', None), ('work:metricNameField', None), ('work:metricProgress', None), ('work:relatedMetricV2ListRecord', None), ('work:relatedWorkBadgeListRecord', None), ('workAloha:editMetricWeights', None), ('workAloha:metricWeightItem', None)], blank=True, null=True)
    hover_text = models.CharField(max_length=255, blank=True, null=True)
    header_text = models.CharField(max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChatterExtension'
        verbose_name = 'Chatter Extension'
        verbose_name_plural = 'Chatter Extensions'
        # keyPrefix = '0MY'



class ChatterExtensionConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='chatterextensionconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='chatterextensionconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    chatter_extension = models.ForeignKey(ChatterExtension, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    can_create = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    can_read = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    position = models.IntegerField(default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ChatterExtensionConfig'
        verbose_name = 'Chatter Extension Configuration'
        verbose_name_plural = 'Chatter Extension Configurations'
        # keyPrefix = '0Ob'



class ClassAttendanceChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classattendancechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classattendancechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Present', 'Present'), ('Late', 'Late'), ('Excused', 'Excused'), ('Absent', 'Absent'), ('Signed-up', 'Signed-up')], blank=True, null=True)
    class_meeting = models.ForeignKey('ClassMeeting', models.DO_NOTHING, db_column='Class_Meeting__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class_meeting_date = models.DateField(custom=True, db_column='Class_Meeting_Date__c', verbose_name='Class Meeting Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    assessment_score = models.DecimalField(custom=True, db_column='Assessment_Score__c', max_digits=1, decimal_places=0, verbose_name='Assessment Score', sf_read_only=models.READ_ONLY, blank=True, null=True)
    teacher_s_notes = models.TextField(custom=True, db_column='Teacher_s_Notes__c', verbose_name="Teacher's Notes", sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Attendance__ChangeEvent'
        verbose_name = 'Change Event: Class Attendance'
        verbose_name_plural = 'Change Event: Class Attendance'
        # keyPrefix = 'None'



class ClassAttendance(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Class Attendance #', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classattendance_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classattendance_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    status = models.CharField(custom=True, max_length=255, choices=[('Present', 'Present'), ('Late', 'Late'), ('Excused', 'Excused'), ('Absent', 'Absent'), ('Signed-up', 'Signed-up')], blank=True, null=True)
    class_meeting = models.ForeignKey('ClassMeeting', models.DO_NOTHING, db_column='Class_Meeting__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 1
    class_meeting_date = models.DateField(custom=True, db_column='Class_Meeting_Date__c', verbose_name='Class Meeting Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    assessment_score = models.DecimalField(custom=True, db_column='Assessment_Score__c', max_digits=1, decimal_places=0, verbose_name='Assessment Score', blank=True, null=True)
    teacher_s_notes = models.TextField(custom=True, db_column='Teacher_s_Notes__c', verbose_name="Teacher's Notes", blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Attendance__c'
        verbose_name = 'Class Attendance'
        verbose_name_plural = 'Class Attendance'
        # keyPrefix = 'a0k'



class ClassEnrollmentChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classenrollmentchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classenrollmentchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, related_name='classenrollmentchangeevent_contact_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    role = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Student', 'Student'), ('TA', 'TA'), ('Volunteer', 'Volunteer')], blank=True, null=True)
    class_offering = models.ForeignKey('ClassOffering', models.DO_NOTHING, db_column='Class_Offering__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Applied', 'Applied'), ('Waitlisted', 'Waitlisted'), ('Enrolled', 'Enrolled'), ('Completed-Course', 'Completed-Course'), ('Withdrew-Application', 'Withdrew-Application'), ('Rejected', 'Rejected'), ('Dropped', 'Dropped')], blank=True, null=True)
    in_current_semester = models.BooleanField(custom=True, db_column='In_current_semester__c', verbose_name='In current semester?', sf_read_only=models.READ_ONLY, default=False)
    attended_family_orientation = models.BooleanField(custom=True, db_column='Attended_Family_Orientation__c', verbose_name='Attended Family Orientation', sf_read_only=models.READ_ONLY, default=False)
    withdrew_application_detail = models.CharField(custom=True, db_column='Withdrew_Application_Detail__c', max_length=255, verbose_name='Withdrew-Application Detail', sf_read_only=models.READ_ONLY, help_text='"Dropped in first 2 weeks" means that they showed up for class but decided to drop within the first 2 weeks.', choices=[("Didn't show up for interview", "Didn't show up for interview"), ('Acceptance-offer-rejected', 'Acceptance-offer-rejected'), ('Didn’t show up for class', 'Didn’t show up for class'), ('Dropped in first 2 weeks', 'Dropped in first 2 weeks'), ('Withdrew before interview', 'Withdrew before interview'), ('Class Cancelled', 'Class Cancelled')], blank=True, null=True)
    contact_race = models.CharField(custom=True, db_column='Contact_Race__c', max_length=100, verbose_name='Contact - Race', sf_read_only=models.READ_ONLY, help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    contact_gender = models.CharField(custom=True, db_column='Contact_Gender__c', max_length=30, verbose_name='Contact - Gender', sf_read_only=models.READ_ONLY, help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    parent_contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='Parent_Contact__c', custom=True, related_name='classenrollmentchangeevent_parentcontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    attended_interview = models.BooleanField(custom=True, db_column='Attended_Interview__c', verbose_name='Attended Interview', sf_read_only=models.READ_ONLY, default=False, help_text='Check if the student attended the default student admissions interview event. Note: Do not check this field if the student attended a makeup interview.')
    attended_makeup_interview = models.BooleanField(custom=True, db_column='Attended_Makeup_Interview__c', verbose_name='Attended Makeup Interview', sf_read_only=models.READ_ONLY, default=False, help_text='Check if the student did not attend the default interview date, but attended a makeup session.')
    cultural_affiliation_or_nationality = models.CharField(custom=True, db_column='Cultural_Affiliation_or_Nationality__c', max_length=100, verbose_name='Cultural Affiliation or Nationality', sf_read_only=models.READ_ONLY, help_text='(optional)', blank=True, null=True)
    sex_at_birth = models.CharField(custom=True, db_column='Sex_at_birth__c', max_length=255, verbose_name='What was your sex at birth?', sf_read_only=models.READ_ONLY, help_text='(Check one)', choices=[('Female', 'Female'), ('Male', 'Male'), ('Decline to answer', 'Decline to answer')], blank=True, null=True)
    sexual_orientation = models.CharField(custom=True, db_column='Sexual_orientation__c', max_length=255, verbose_name='Sexual orientation or sexual identity', sf_read_only=models.READ_ONLY, help_text='How do you describe your sexual orientation or sexual identity?', choices=[('Bisexual', 'Bisexual'), ('Gay / Lesbian / Same-Gender Loving', 'Gay / Lesbian / Same-Gender Loving'), ('Questioning / Unsure', 'Questioning / Unsure'), ('Straight / Heterosexual', 'Straight / Heterosexual'), ('Not Listed.', 'Not Listed.'), ('Decline to answer', 'Decline to answer')], blank=True, null=True)
    other_sexual_orientation = models.CharField(custom=True, db_column='Other_sexual_orientation__c', max_length=30, verbose_name='Other sexual orientation', sf_read_only=models.READ_ONLY, blank=True, null=True)
    household_type = models.CharField(custom=True, db_column='Household_type__c', max_length=255, verbose_name='Which best describes your family?', sf_read_only=models.READ_ONLY, help_text='Which best describes your family? (Check one)\r\nFamily includes, but is not limited to the following—regardless of actual or perceived sexual orientation, gender identity, or marital status—a single person or a group of persons residing together.', choices=[('Single Female Headed Family', 'Single Female Headed Family'), ('Single Male Headed Family', 'Single Male Headed Family'), ('Dual Headed Family', 'Dual Headed Family')], blank=True, null=True)
    income_certification = models.CharField(custom=True, db_column='Income_Certification__c', max_length=4099, verbose_name='Income Certification', sf_read_only=models.READ_ONLY, help_text='**current-within 2 months', choices=[('CalWorks', 'CalWorks'), ('Food Stamps', 'Food Stamps'), ('Medi-CAL', 'Medi-CAL'), ('Tax Return (most recent)', 'Tax Return (most recent)'), ('Unemployment (check stub)', 'Unemployment (check stub)'), ('SSI**', 'SSI**'), ('Payroll Stub**', 'Payroll Stub**'), ('Other (i.e. public housing/foster care)**', 'Other (i.e. public housing/foster care)**'), ('Self-certified', 'Self-certified')], blank=True, null=True)
    estimated_income = models.DecimalField(custom=True, db_column='Estimated_income__c', max_digits=18, decimal_places=2, verbose_name='Estimated income', sf_read_only=models.READ_ONLY, help_text='Total estimated income for next 12 months for all adult members.', blank=True, null=True)
    family_size = models.CharField(custom=True, db_column='Family_size__c', max_length=255, verbose_name='Family size', sf_read_only=models.READ_ONLY, help_text='Number of persons living in your family (including yourself):', choices=[('1 person', '1 person'), ('2 persons', '2 persons'), ('3 persons', '3 persons'), ('4 persons', '4 persons'), ('5 persons', '5 persons'), ('6 persons', '6 persons'), ('7 persons', '7 persons'), ('8 persons', '8 persons'), ('9+ persons', '9+ persons')], blank=True, null=True)
    current_income_information = models.CharField(custom=True, db_column='Current_Income_Information__c', max_length=255, verbose_name='Current Income Information', sf_read_only=models.READ_ONLY, choices=[('Extremely Low Income $0 - 27,650 (1 person)', 'Extremely Low Income $0 - 27,650 (1 person)'), ('Low Income $27,651 - 46,100 (1 person)', 'Low Income $27,651 - 46,100 (1 person)'), ('Moderate Income $46,101 - 73,750 (1 person)', 'Moderate Income $46,101 - 73,750 (1 person)'), ('Above Moderate Income $73,751 or greater (1 person)', 'Above Moderate Income $73,751 or greater (1 person)'), ('Extremely Low Income $0 - 31,600 (2 persons)', 'Extremely Low Income $0 - 31,600 (2 persons)'), ('Low Income $31,601 - 52,650 (2 persons)', 'Low Income $31,601 - 52,650 (2 persons)'), ('Moderate Income $52,651 - 84,300 (2 persons)', 'Moderate Income $52,651 - 84,300 (2 persons)'), ('Above Moderate Income $84,301 or greater (2 persons)', 'Above Moderate Income $84,301 or greater (2 persons)'), ('Extremely Low Income $0 - 35,550 (3 persons)', 'Extremely Low Income $0 - 35,550 (3 persons)'), ('Low Income $35,551 - 59,250 (3 persons)', 'Low Income $35,551 - 59,250 (3 persons)'), ('Moderate Income $59,251 - 94,850 (3 persons)', 'Moderate Income $59,251 - 94,850 (3 persons)'), ('Above Moderate Income $94,851 or greater (3 persons)', 'Above Moderate Income $94,851 or greater (3 persons)'), ('Extremely Low Income $0 - 39,500 (4 persons)', 'Extremely Low Income $0 - 39,500 (4 persons)'), ('Low Income $39,501 - 65,800 (4 persons)', 'Low Income $39,501 - 65,800 (4 persons)'), ('Moderate Income $65,801 - 105,350 (4 persons)', 'Moderate Income $65,801 - 105,350 (4 persons)'), ('Above Moderate Income $105,351 or greater (4 persons)', 'Above Moderate Income $105,351 or greater (4 persons)'), ('Extremely Low Income $0 - 42,700 (5 persons)', 'Extremely Low Income $0 - 42,700 (5 persons)'), ('Low Income $42,701 - 71,100 (5 persons)', 'Low Income $42,701 - 71,100 (5 persons)'), ('Moderate Income $71,101 - 113,800 (5 persons)', 'Moderate Income $71,101 - 113,800 (5 persons)'), ('Above Moderate Income $113,801 or greater (5 persons)', 'Above Moderate Income $113,801 or greater (5 persons)'), ('Extremely Low Income $0 - 45,850 (6 persons)', 'Extremely Low Income $0 - 45,850 (6 persons)'), ('Low Income $45,851 - 76,350 (6 persons)', 'Low Income $45,851 - 76,350 (6 persons)'), ('Moderate Income $76,351 - 122,250 (6 persons)', 'Moderate Income $76,351 - 122,250 (6 persons)'), ('Above Moderate Income $122,251 or greater (6 persons)', 'Above Moderate Income $122,251 or greater (6 persons)'), ('Extremely Low Income $0 - 49,000 (7 persons)', 'Extremely Low Income $0 - 49,000 (7 persons)'), ('Low Income $49,001 - 81,600 (7 persons)', 'Low Income $49,001 - 81,600 (7 persons)'), ('Moderate Income $81,601 - 130,650 (7 persons)', 'Moderate Income $81,601 - 130,650 (7 persons)'), ('Above Moderate Income $130,651 or greater (7 persons)', 'Above Moderate Income $130,651 or greater (7 persons)'), ('Extremely Low Income $0 - 52,150 (8 persons)', 'Extremely Low Income $0 - 52,150 (8 persons)'), ('Low Income $52,151 - 86,900 (8 persons)', 'Low Income $52,151 - 86,900 (8 persons)'), ('Moderate Income $86,901 - 139,100 (8 persons)', 'Moderate Income $86,901 - 139,100 (8 persons)'), ('Above Moderate Income $139,101 or greater (8 persons)', 'Above Moderate Income $139,101 or greater (8 persons)')], blank=True, null=True)
    if_self_certified_please_explain = models.TextField(custom=True, db_column='If_self_certified_please_explain__c', verbose_name='If self-certified, please explain:', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact_ethnicity = models.CharField(custom=True, db_column='Contact_Ethnicity__c', max_length=100, verbose_name='Contact - Ethnicity', sf_read_only=models.READ_ONLY, help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    notes = models.TextField(custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_date = models.DateTimeField(custom=True, db_column='Interview_Date__c', verbose_name='Interview Date', sf_read_only=models.READ_ONLY, help_text="This is the interview date and time that the student signed up for. Empty means that the student did not sign up for an interview. Having an interview date does not mean that the student showed up for the interview, only that they RSVP'ed.", blank=True, null=True)
    returner = models.BooleanField(custom=True, verbose_name='Returner?', sf_read_only=models.READ_ONLY, default=False)
    temp_returner = models.BooleanField(custom=True, db_column='Temp_Returner__c', verbose_name='Returner? (temp)', sf_read_only=models.READ_ONLY, default=False, help_text='This is a temporary field that determines if a student is a returner based on their response to this question on the application. Once we complete migrating all of our past data into Salesforce, this field will be deleted.')
    origin_school = models.CharField(custom=True, db_column='Origin_School__c', verbose_name='School attended by this student', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_phone = models.CharField(custom=True, db_column='Parent_Phone__c', verbose_name='Parent Phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_email = models.CharField(custom=True, db_column='Parent_Email__c', verbose_name='Parent Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Enrollment__ChangeEvent'
        verbose_name = 'Change Event: Class Enrollment'
        verbose_name_plural = 'Change Event: Class Enrollment'
        # keyPrefix = 'None'



class ClassEnrollmentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('ClassEnrollment', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Attended_Family_Orientation__c', 'Attended Family Orientation'), ('Attended_Interview__c', 'Attended Interview'), ('Attended_Makeup_Interview__c', 'Attended Makeup Interview'), ('Name', 'Class Enrollment #'), ('Class_Offering__c', 'Class Offering'), ('Contact__c', 'Contact'), ('Contact_Ethnicity__c', 'Contact - Ethnicity'), ('Contact_Gender__c', 'Contact - Gender'), ('Contact_Race__c', 'Contact - Race'), ('created', 'Created.'), ('Cultural_Affiliation_or_Nationality__c', 'Cultural Affiliation or Nationality'), ('Current_Income_Information__c', 'Current Income Information'), ('Estimated_income__c', 'Estimated income'), ('Family_size__c', 'Family size'), ('feedEvent', 'Feed event'), ('If_self_certified_please_explain__c', 'If self-certified, please explain:'), ('Income_Certification__c', 'Income Certification'), ('individualMerged', 'Individual Merged'), ('Interview_Date__c', 'Interview Date'), ('Notes__c', 'Notes'), ('Other_sexual_orientation__c', 'Other sexual orientation'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent_Contact__c', 'Parent Contact'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Temp_Returner__c', 'Returner? (temp)'), ('Role__c', 'Role'), ('Sexual_orientation__c', 'Sexual orientation or sexual identity'), ('Status__c', 'Status'), ('Sex_at_birth__c', 'What was your sex at birth?'), ('Household_type__c', 'Which best describes your family?'), ('Withdrew_Application_Detail__c', 'Withdrew-Application Detail')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Enrollment__History'
        verbose_name = 'History: Class Enrollment'
        verbose_name_plural = 'History: Class Enrollment'
        # keyPrefix = 'None'



class ClassEnrollment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Class Enrollment #', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classenrollment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classenrollment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, related_name='classenrollment_contact_set')  # Master Detail Relationship 0
    role = models.CharField(custom=True, max_length=255, choices=[('Student', 'Student'), ('TA', 'TA'), ('Volunteer', 'Volunteer')], blank=True, null=True)
    class_offering = models.ForeignKey('ClassOffering', models.DO_NOTHING, db_column='Class_Offering__c', custom=True)  # Master Detail Relationship 1
    status = models.CharField(custom=True, max_length=255, choices=[('Applied', 'Applied'), ('Waitlisted', 'Waitlisted'), ('Enrolled', 'Enrolled'), ('Completed-Course', 'Completed-Course'), ('Withdrew-Application', 'Withdrew-Application'), ('Rejected', 'Rejected'), ('Dropped', 'Dropped')], blank=True, null=True)
    in_current_semester = models.BooleanField(custom=True, db_column='In_current_semester__c', verbose_name='In current semester?', sf_read_only=models.READ_ONLY)
    attended_family_orientation = models.BooleanField(custom=True, db_column='Attended_Family_Orientation__c', verbose_name='Attended Family Orientation', default=models.DEFAULTED_ON_CREATE)
    withdrew_application_detail = models.CharField(custom=True, db_column='Withdrew_Application_Detail__c', max_length=255, verbose_name='Withdrew-Application Detail', help_text='"Dropped in first 2 weeks" means that they showed up for class but decided to drop within the first 2 weeks.', choices=[("Didn't show up for interview", "Didn't show up for interview"), ('Acceptance-offer-rejected', 'Acceptance-offer-rejected'), ('Didn’t show up for class', 'Didn’t show up for class'), ('Dropped in first 2 weeks', 'Dropped in first 2 weeks'), ('Withdrew before interview', 'Withdrew before interview'), ('Class Cancelled', 'Class Cancelled')], blank=True, null=True)
    contact_race = models.CharField(custom=True, db_column='Contact_Race__c', max_length=100, verbose_name='Contact - Race', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    contact_gender = models.CharField(custom=True, db_column='Contact_Gender__c', max_length=30, verbose_name='Contact - Gender', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    parent_contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='Parent_Contact__c', custom=True, related_name='classenrollment_parentcontact_set', blank=True, null=True)
    attended_interview = models.BooleanField(custom=True, db_column='Attended_Interview__c', verbose_name='Attended Interview', default=models.DEFAULTED_ON_CREATE, help_text='Check if the student attended the default student admissions interview event. Note: Do not check this field if the student attended a makeup interview.')
    attended_makeup_interview = models.BooleanField(custom=True, db_column='Attended_Makeup_Interview__c', verbose_name='Attended Makeup Interview', default=models.DEFAULTED_ON_CREATE, help_text='Check if the student did not attend the default interview date, but attended a makeup session.')
    cultural_affiliation_or_nationality = models.CharField(custom=True, db_column='Cultural_Affiliation_or_Nationality__c', max_length=100, verbose_name='Cultural Affiliation or Nationality', help_text='(optional)', blank=True, null=True)
    sex_at_birth = models.CharField(custom=True, db_column='Sex_at_birth__c', max_length=255, verbose_name='What was your sex at birth?', help_text='(Check one)', choices=[('Female', 'Female'), ('Male', 'Male'), ('Decline to answer', 'Decline to answer')], blank=True, null=True)
    sexual_orientation = models.CharField(custom=True, db_column='Sexual_orientation__c', max_length=255, verbose_name='Sexual orientation or sexual identity', help_text='How do you describe your sexual orientation or sexual identity?', choices=[('Bisexual', 'Bisexual'), ('Gay / Lesbian / Same-Gender Loving', 'Gay / Lesbian / Same-Gender Loving'), ('Questioning / Unsure', 'Questioning / Unsure'), ('Straight / Heterosexual', 'Straight / Heterosexual'), ('Not Listed.', 'Not Listed.'), ('Decline to answer', 'Decline to answer')], blank=True, null=True)
    other_sexual_orientation = models.CharField(custom=True, db_column='Other_sexual_orientation__c', max_length=30, verbose_name='Other sexual orientation', blank=True, null=True)
    household_type = models.CharField(custom=True, db_column='Household_type__c', max_length=255, verbose_name='Which best describes your family?', help_text='Which best describes your family? (Check one)\r\nFamily includes, but is not limited to the following—regardless of actual or perceived sexual orientation, gender identity, or marital status—a single person or a group of persons residing together.', choices=[('Single Female Headed Family', 'Single Female Headed Family'), ('Single Male Headed Family', 'Single Male Headed Family'), ('Dual Headed Family', 'Dual Headed Family')], blank=True, null=True)
    income_certification = models.CharField(custom=True, db_column='Income_Certification__c', max_length=4099, verbose_name='Income Certification', help_text='**current-within 2 months', choices=[('CalWorks', 'CalWorks'), ('Food Stamps', 'Food Stamps'), ('Medi-CAL', 'Medi-CAL'), ('Tax Return (most recent)', 'Tax Return (most recent)'), ('Unemployment (check stub)', 'Unemployment (check stub)'), ('SSI**', 'SSI**'), ('Payroll Stub**', 'Payroll Stub**'), ('Other (i.e. public housing/foster care)**', 'Other (i.e. public housing/foster care)**'), ('Self-certified', 'Self-certified')], blank=True, null=True)
    estimated_income = models.DecimalField(custom=True, db_column='Estimated_income__c', max_digits=18, decimal_places=2, verbose_name='Estimated income', help_text='Total estimated income for next 12 months for all adult members.', blank=True, null=True)
    family_size = models.CharField(custom=True, db_column='Family_size__c', max_length=255, verbose_name='Family size', help_text='Number of persons living in your family (including yourself):', choices=[('1 person', '1 person'), ('2 persons', '2 persons'), ('3 persons', '3 persons'), ('4 persons', '4 persons'), ('5 persons', '5 persons'), ('6 persons', '6 persons'), ('7 persons', '7 persons'), ('8 persons', '8 persons'), ('9+ persons', '9+ persons')], blank=True, null=True)
    current_income_information = models.CharField(custom=True, db_column='Current_Income_Information__c', max_length=255, verbose_name='Current Income Information', choices=[('Extremely Low Income $0 - 27,650 (1 person)', 'Extremely Low Income $0 - 27,650 (1 person)'), ('Low Income $27,651 - 46,100 (1 person)', 'Low Income $27,651 - 46,100 (1 person)'), ('Moderate Income $46,101 - 73,750 (1 person)', 'Moderate Income $46,101 - 73,750 (1 person)'), ('Above Moderate Income $73,751 or greater (1 person)', 'Above Moderate Income $73,751 or greater (1 person)'), ('Extremely Low Income $0 - 31,600 (2 persons)', 'Extremely Low Income $0 - 31,600 (2 persons)'), ('Low Income $31,601 - 52,650 (2 persons)', 'Low Income $31,601 - 52,650 (2 persons)'), ('Moderate Income $52,651 - 84,300 (2 persons)', 'Moderate Income $52,651 - 84,300 (2 persons)'), ('Above Moderate Income $84,301 or greater (2 persons)', 'Above Moderate Income $84,301 or greater (2 persons)'), ('Extremely Low Income $0 - 35,550 (3 persons)', 'Extremely Low Income $0 - 35,550 (3 persons)'), ('Low Income $35,551 - 59,250 (3 persons)', 'Low Income $35,551 - 59,250 (3 persons)'), ('Moderate Income $59,251 - 94,850 (3 persons)', 'Moderate Income $59,251 - 94,850 (3 persons)'), ('Above Moderate Income $94,851 or greater (3 persons)', 'Above Moderate Income $94,851 or greater (3 persons)'), ('Extremely Low Income $0 - 39,500 (4 persons)', 'Extremely Low Income $0 - 39,500 (4 persons)'), ('Low Income $39,501 - 65,800 (4 persons)', 'Low Income $39,501 - 65,800 (4 persons)'), ('Moderate Income $65,801 - 105,350 (4 persons)', 'Moderate Income $65,801 - 105,350 (4 persons)'), ('Above Moderate Income $105,351 or greater (4 persons)', 'Above Moderate Income $105,351 or greater (4 persons)'), ('Extremely Low Income $0 - 42,700 (5 persons)', 'Extremely Low Income $0 - 42,700 (5 persons)'), ('Low Income $42,701 - 71,100 (5 persons)', 'Low Income $42,701 - 71,100 (5 persons)'), ('Moderate Income $71,101 - 113,800 (5 persons)', 'Moderate Income $71,101 - 113,800 (5 persons)'), ('Above Moderate Income $113,801 or greater (5 persons)', 'Above Moderate Income $113,801 or greater (5 persons)'), ('Extremely Low Income $0 - 45,850 (6 persons)', 'Extremely Low Income $0 - 45,850 (6 persons)'), ('Low Income $45,851 - 76,350 (6 persons)', 'Low Income $45,851 - 76,350 (6 persons)'), ('Moderate Income $76,351 - 122,250 (6 persons)', 'Moderate Income $76,351 - 122,250 (6 persons)'), ('Above Moderate Income $122,251 or greater (6 persons)', 'Above Moderate Income $122,251 or greater (6 persons)'), ('Extremely Low Income $0 - 49,000 (7 persons)', 'Extremely Low Income $0 - 49,000 (7 persons)'), ('Low Income $49,001 - 81,600 (7 persons)', 'Low Income $49,001 - 81,600 (7 persons)'), ('Moderate Income $81,601 - 130,650 (7 persons)', 'Moderate Income $81,601 - 130,650 (7 persons)'), ('Above Moderate Income $130,651 or greater (7 persons)', 'Above Moderate Income $130,651 or greater (7 persons)'), ('Extremely Low Income $0 - 52,150 (8 persons)', 'Extremely Low Income $0 - 52,150 (8 persons)'), ('Low Income $52,151 - 86,900 (8 persons)', 'Low Income $52,151 - 86,900 (8 persons)'), ('Moderate Income $86,901 - 139,100 (8 persons)', 'Moderate Income $86,901 - 139,100 (8 persons)'), ('Above Moderate Income $139,101 or greater (8 persons)', 'Above Moderate Income $139,101 or greater (8 persons)')], blank=True, null=True)
    if_self_certified_please_explain = models.TextField(custom=True, db_column='If_self_certified_please_explain__c', verbose_name='If self-certified, please explain:', blank=True, null=True)
    contact_ethnicity = models.CharField(custom=True, db_column='Contact_Ethnicity__c', max_length=100, verbose_name='Contact - Ethnicity', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    notes = models.TextField(custom=True, blank=True, null=True)
    interview_date = models.DateTimeField(custom=True, db_column='Interview_Date__c', verbose_name='Interview Date', help_text="This is the interview date and time that the student signed up for. Empty means that the student did not sign up for an interview. Having an interview date does not mean that the student showed up for the interview, only that they RSVP'ed.", blank=True, null=True)
    returner = models.BooleanField(custom=True, verbose_name='Returner?', sf_read_only=models.READ_ONLY)
    temp_returner = models.BooleanField(custom=True, db_column='Temp_Returner__c', verbose_name='Returner? (temp)', default=models.DEFAULTED_ON_CREATE, help_text='This is a temporary field that determines if a student is a returner based on their response to this question on the application. Once we complete migrating all of our past data into Salesforce, this field will be deleted.')
    origin_school = models.CharField(custom=True, db_column='Origin_School__c', max_length=1300, verbose_name='School attended by this student', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_phone = models.CharField(custom=True, db_column='Parent_Phone__c', max_length=1300, verbose_name='Parent Phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_email = models.CharField(custom=True, db_column='Parent_Email__c', max_length=1300, verbose_name='Parent Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Enrollment__c'
        verbose_name = 'Class Enrollment'
        verbose_name_plural = 'Class Enrollments'
        # keyPrefix = 'a0i'



class ClassMeetingChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classmeetingchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classmeetingchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    date = models.DateField(custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class_offering = models.ForeignKey('ClassOffering', models.DO_NOTHING, db_column='Class_Offering__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_time = models.TimeField(custom=True, db_column='Start_Time__c', verbose_name='Start Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_time = models.TimeField(custom=True, db_column='End_Time__c', verbose_name='End Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    duration_hours = models.DecimalField(custom=True, db_column='Duration_hours__c', max_digits=2, decimal_places=0, verbose_name='Duration (hours)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Meeting__ChangeEvent'
        verbose_name = 'Change Event: Class Meeting'
        verbose_name_plural = 'Change Event: Class Meeting'
        # keyPrefix = 'None'



class ClassMeetingHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('ClassMeeting', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Name', 'Class Meeting Name'), ('Class_Offering__c', 'Class Offering'), ('created', 'Created.'), ('Date__c', 'Date'), ('Duration_hours__c', 'Duration (hours)'), ('End_Time__c', 'End Time'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Start_Time__c', 'Start Time')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Meeting__History'
        verbose_name = 'History: Class Meeting'
        verbose_name_plural = 'History: Class Meeting'
        # keyPrefix = 'None'



class ClassMeeting(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Class Meeting Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classmeeting_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classmeeting_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    date = models.DateField(custom=True, blank=True, null=True)
    class_offering = models.ForeignKey('ClassOffering', models.DO_NOTHING, db_column='Class_Offering__c', custom=True)  # Master Detail Relationship 0
    start_time = models.TimeField(custom=True, db_column='Start_Time__c', verbose_name='Start Time', blank=True, null=True)
    end_time = models.TimeField(custom=True, db_column='End_Time__c', verbose_name='End Time', blank=True, null=True)
    duration_hours = models.DecimalField(custom=True, db_column='Duration_hours__c', max_digits=2, decimal_places=0, verbose_name='Duration (hours)', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Meeting__c'
        verbose_name = 'Class Meeting'
        verbose_name_plural = 'Class Meetings'
        # keyPrefix = 'a0j'



class ClassOfferingChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classofferingchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classofferingchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date = models.DateField(custom=True, db_column='Start_Date__c', verbose_name='Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(custom=True, db_column='End_Date__c', verbose_name='End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.ForeignKey(Account, models.DO_NOTHING, custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    course = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Android Game Design', 'Android Game Design'), ('Intro to Web Programming', 'Intro to Web Programming'), ('Field Trips', 'Field Trips'), ('Intro to Game Design with Unity', 'Intro to Game Design with Unity'), ('Web Design 101', 'Web Design 101'), ('Mobile App Dev with Ionic', 'Mobile App Dev with Ionic'), ('MB Internship', 'MB Internship'), ('Structured Study Program', 'Structured Study Program')], blank=True, null=True)
    instructor = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    academic_semester = models.CharField(custom=True, db_column='Academic_semester__c', verbose_name='Academic semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    meeting_days = models.CharField(custom=True, db_column='Meeting_Days__c', max_length=255, verbose_name='Meeting Days', sf_read_only=models.READ_ONLY, choices=[('M/W', 'M/W'), ('T/R', 'T/R'), ('M-F', 'M-F')], blank=True, null=True)
    course_short_name = models.CharField(custom=True, db_column='Course_short_name__c', verbose_name='Course short name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    count_total_female_students = models.DecimalField(custom=True, db_column='Count_total_female_students__c', max_digits=18, decimal_places=0, verbose_name='Count - Total Female Students', sf_read_only=models.READ_ONLY, blank=True, null=True)
    count_total_latino_african_american = models.DecimalField(custom=True, db_column='Count_total_latino_african_american__c', max_digits=18, decimal_places=0, verbose_name='Count - Total African American', sf_read_only=models.READ_ONLY, blank=True, null=True)
    count_total_latino_students = models.DecimalField(custom=True, db_column='Count_Total_Latino_Students__c', max_digits=18, decimal_places=0, verbose_name='Count - Total Latino Students', sf_read_only=models.READ_ONLY, blank=True, null=True)
    female = models.DecimalField(custom=True, max_digits=18, decimal_places=1, verbose_name='% Female', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latino_african_american = models.DecimalField(custom=True, db_column='Latino_African_American__c', max_digits=18, decimal_places=1, verbose_name='% Latino/African American', sf_read_only=models.READ_ONLY, blank=True, null=True)
    current_academic_semester = models.CharField(custom=True, db_column='Current_academic_semester__c', verbose_name='Current academic semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    in_current_semester = models.BooleanField(custom=True, db_column='In_current_semester__c', verbose_name='In current semester?', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Class_Offering__ChangeEvent'
        verbose_name = 'Change Event: Class Offering'
        verbose_name_plural = 'Change Event: Class Offering'
        # keyPrefix = 'None'



class ClassOfferingHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('ClassOffering', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Name', 'Class Offering Name'), ('Course__c', 'Course'), ('created', 'Created.'), ('Description__c', 'Description'), ('End_Date__c', 'End Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Instructor__c', 'Instructor'), ('Location__c', 'Location'), ('Meeting_Days__c', 'Meeting Days'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Start_Date__c', 'Start Date')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Offering__History'
        verbose_name = 'History: Class Offering'
        verbose_name_plural = 'History: Class Offering'
        # keyPrefix = 'None'



class ClassOffering(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Class Offering Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classoffering_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classoffering_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date = models.DateField(custom=True, db_column='Start_Date__c', verbose_name='Start Date', blank=True, null=True)
    end_date = models.DateField(custom=True, db_column='End_Date__c', verbose_name='End Date', blank=True, null=True)
    description = models.TextField(custom=True, blank=True, null=True)
    location = models.ForeignKey(Account, models.DO_NOTHING, custom=True, blank=True, null=True)
    course = models.CharField(custom=True, max_length=255, choices=[('Android Game Design', 'Android Game Design'), ('Intro to Web Programming', 'Intro to Web Programming'), ('Field Trips', 'Field Trips'), ('Intro to Game Design with Unity', 'Intro to Game Design with Unity'), ('Web Design 101', 'Web Design 101'), ('Mobile App Dev with Ionic', 'Mobile App Dev with Ionic'), ('MB Internship', 'MB Internship'), ('Structured Study Program', 'Structured Study Program')], blank=True, null=True)
    instructor = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, blank=True, null=True)
    academic_semester = models.CharField(custom=True, db_column='Academic_semester__c', max_length=1300, verbose_name='Academic semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    meeting_days = models.CharField(custom=True, db_column='Meeting_Days__c', max_length=255, verbose_name='Meeting Days', choices=[('M/W', 'M/W'), ('T/R', 'T/R'), ('M-F', 'M-F')], blank=True, null=True)
    course_short_name = models.CharField(custom=True, db_column='Course_short_name__c', max_length=1300, verbose_name='Course short name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    count_total_female_students = models.DecimalField(custom=True, db_column='Count_total_female_students__c', max_digits=18, decimal_places=0, verbose_name='Count - Total Female Students', sf_read_only=models.READ_ONLY, blank=True, null=True)
    count_total_latino_african_american = models.DecimalField(custom=True, db_column='Count_total_latino_african_american__c', max_digits=18, decimal_places=0, verbose_name='Count - Total African American', sf_read_only=models.READ_ONLY, blank=True, null=True)
    count_total_latino_students = models.DecimalField(custom=True, db_column='Count_Total_Latino_Students__c', max_digits=18, decimal_places=0, verbose_name='Count - Total Latino Students', sf_read_only=models.READ_ONLY, blank=True, null=True)
    female = models.DecimalField(custom=True, max_digits=18, decimal_places=1, verbose_name='% Female', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latino_african_american = models.DecimalField(custom=True, db_column='Latino_African_American__c', max_digits=18, decimal_places=1, verbose_name='% Latino/African American', sf_read_only=models.READ_ONLY, blank=True, null=True)
    current_academic_semester = models.CharField(custom=True, db_column='Current_academic_semester__c', max_length=1300, verbose_name='Current academic semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    in_current_semester = models.BooleanField(custom=True, db_column='In_current_semester__c', verbose_name='In current semester?', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Class_Offering__c'
        verbose_name = 'Class Offering'
        verbose_name_plural = 'Class Offerings'
        # keyPrefix = 'a0h'



class ClientBrowser(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    full_user_agent = models.CharField(max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    proxy_info = models.CharField(max_length=1024, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_update = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ClientBrowser'
        verbose_name = 'Client Browser'
        verbose_name_plural = 'Client Browser'
        # keyPrefix = '713'



class CollaborationGroup(models.Model):
    name = models.CharField(max_length=40)
    member_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_owner_set')
    collaboration_type = models.CharField(max_length=40, verbose_name='Access Type', choices=[('Public', 'Public'), ('Private', 'Private')])
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroup_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    full_photo_url = models.URLField(verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_feed_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    information_title = models.CharField(max_length=30, blank=True, null=True)
    information_body = models.TextField(verbose_name='Information', blank=True, null=True)
    has_private_fields_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    can_have_guests = models.BooleanField(verbose_name='Allow customers', default=models.DEFAULTED_ON_CREATE)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_archived = models.BooleanField(verbose_name='Archive', default=models.DEFAULTED_ON_CREATE)
    is_auto_archive_disabled = models.BooleanField(verbose_name='Disable automatic archiving', default=models.DEFAULTED_ON_CREATE)
    announcement = models.ForeignKey(Announcement, models.DO_NOTHING, blank=True, null=True)
    group_email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_broadcast = models.BooleanField(verbose_name='Broadcast Only', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroup'
        verbose_name = 'Group'
        verbose_name_plural = 'Groups'
        # keyPrefix = '0F9'



class CollaborationGroupFeed(models.Model):
    parent = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupFeed'
        verbose_name = 'Group Feed'
        verbose_name_plural = 'Group Feed'
        # keyPrefix = 'None'



class CollaborationGroupMember(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    member = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_member_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    collaboration_role = models.CharField(max_length=40, verbose_name='Group Member Role', choices=[('Admin', 'Manager'), ('Standard', 'Member')], blank=True, null=True)
    notification_frequency = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_feed_access_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Members'
        # keyPrefix = '0FB'



class CollaborationGroupMemberRequest(models.Model):
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    requester = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_requester_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    response_message = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Pending', None), ('Accepted', None), ('Declined', None)])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgroupmemberrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupMemberRequest'
        verbose_name = 'Group Member Request'
        verbose_name_plural = 'Group Member Requests'
        # keyPrefix = '0I5'



class CollaborationGroupRecord(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgrouprecord_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationgrouprecord_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    collaboration_group = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, Opportunity, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CollaborationGroupRecord'
        verbose_name = 'Group Record'
        verbose_name_plural = 'Group Records'
        # keyPrefix = '0Aa'



class CollaborationInvitation(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shared_entity = models.ForeignKey(CollaborationGroup, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [CollaborationGroup, User] Master Detail Relationship *
    inviter = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_inviter_set', sf_read_only=models.READ_ONLY)
    invited_user_email = models.CharField(max_length=240, verbose_name='Invited Email', sf_read_only=models.NOT_UPDATEABLE)
    invited_user_email_normalized = models.EmailField(verbose_name='Invited Email (Normalized)', sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=40, verbose_name='Invitation Status', sf_read_only=models.READ_ONLY, choices=[('Sent', None), ('Accepted', None), ('Canceled', None)])
    optional_message = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='collaborationinvitation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CollaborationInvitation'
        verbose_name = 'Chatter Invitation'
        verbose_name_plural = 'Chatter Invitations'
        # keyPrefix = '0H1'



class ColorDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Color Definition Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tab_definition_id = models.CharField(max_length=512, verbose_name='Tab Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    theme = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    context = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ColorDefinition'
        verbose_name = 'Color Definition'
        verbose_name_plural = 'Color Definitions'
        # keyPrefix = '05k'



class CombinedAttachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, ListEmail, Opportunity, Order, OrderItem, Organization, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    record_type = models.CharField(max_length=30, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='combinedattachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='combinedattachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.READ_ONLY, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CombinedAttachment'
        verbose_name = 'Note, Attachment, Google Doc And File'
        verbose_name_plural = 'Notes, Attachments, Google Docs And Files'
        # keyPrefix = 'None'



class Community(models.Model):
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='community_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='community_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    is_published = models.BooleanField(verbose_name='Show In Portal', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Community'
        verbose_name = 'Zone'
        verbose_name_plural = 'Zones'
        # keyPrefix = '09a'



class ConnectedApplication(models.Model):
    name = models.CharField(max_length=80, verbose_name='Connected App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='connectedapplication_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='connectedapplication_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    options_allow_admin_approved_users_only = models.BooleanField(verbose_name='AllowAdminApprovedUsersOnly', sf_read_only=models.READ_ONLY)
    options_refresh_token_validity_metric = models.BooleanField(verbose_name='RefreshTokenValidityMetric', sf_read_only=models.READ_ONLY)
    options_has_session_level_policy = models.BooleanField(verbose_name='HasSessionLevelPolicy', sf_read_only=models.READ_ONLY)
    options_is_internal = models.BooleanField(verbose_name='isInternal', sf_read_only=models.READ_ONLY)
    options_full_content_push_notifications = models.BooleanField(verbose_name='FullContentPushNotifications', sf_read_only=models.READ_ONLY)
    mobile_session_timeout = models.CharField(max_length=40, verbose_name='Require PIN after:', sf_read_only=models.READ_ONLY, default='10', choices=[('1', '1 minute'), ('5', '5 minutes'), ('10', '10 minutes'), ('30', '30 minutes'), ('60', '60 minutes'), ('120', '120 minutes'), ('180', '180 minutes'), ('240', '240 minutes')], blank=True, null=True)
    pin_length = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], blank=True, null=True)
    start_url = models.URLField(verbose_name='Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(verbose_name='Mobile Start URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    refresh_token_validity_period = models.IntegerField(verbose_name='Refresh Token Policy:', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ConnectedApplication'
        verbose_name = 'Connected App'
        verbose_name_plural = 'Connected Apps'
        # keyPrefix = '0H4'



class Contact(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='contact_account_set', blank=True, null=True)  # Master Detail Relationship *
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, blank=True, null=True)
    suffix = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    other_street = models.TextField(blank=True, null=True)
    other_city = models.CharField(max_length=40, blank=True, null=True)
    other_state = models.CharField(max_length=80, verbose_name='Other State/Province', blank=True, null=True)
    other_postal_code = models.CharField(max_length=20, verbose_name='Other Zip/Postal Code', blank=True, null=True)
    other_country = models.CharField(max_length=80, blank=True, null=True)
    other_state_code = models.CharField(max_length=10, verbose_name='Other State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    other_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    other_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    other_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    mailing_street = models.TextField(blank=True, null=True)
    mailing_city = models.CharField(max_length=40, blank=True, null=True)
    mailing_state = models.CharField(max_length=80, verbose_name='Mailing State/Province', blank=True, null=True)
    mailing_postal_code = models.CharField(max_length=20, verbose_name='Mailing Zip/Postal Code', blank=True, null=True)
    mailing_country = models.CharField(max_length=80, blank=True, null=True)
    mailing_state_code = models.CharField(max_length=10, verbose_name='Mailing State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    mailing_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    mailing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Business Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Business Fax', blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, blank=True, null=True)
    home_phone = models.CharField(max_length=40, blank=True, null=True)
    other_phone = models.CharField(max_length=40, blank=True, null=True)
    reports_to = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_reportsto_set', blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    title = models.CharField(max_length=128, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    birthdate = models.DateField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_curequest_date = models.DateTimeField(db_column='LastCURequestDate', verbose_name='Last Stay-in-Touch Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_cuupdate_date = models.DateTimeField(db_column='LastCUUpdateDate', verbose_name='Last Stay-in-Touch Save Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, blank=True, null=True)
    email_bounced_date = models.DateTimeField(blank=True, null=True)
    is_email_bounced = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    individual = models.ForeignKey('Individual', models.DO_NOTHING, blank=True, null=True)
    npe01_alternate_email = models.EmailField(db_column='npe01__AlternateEmail__c', custom=True, verbose_name='Alternate Email', help_text='Alternate Email is an optional fourth email: Not personal, preferred, or work email.', blank=True, null=True) 
    npe01_home_email = models.EmailField(db_column='npe01__HomeEmail__c', custom=True, verbose_name='Personal Email', help_text='See Preferred Email field.', blank=True, null=True) 
    npe01_home_address = models.CharField(db_column='npe01__Home_Address__c', custom=True, max_length=1300, verbose_name='Home Address', sf_read_only=models.READ_ONLY, help_text='Formula: Uses primary address type field to determine Home Address from Mailing or Other address.', blank=True, null=True) 
    npe01_organization_type = models.CharField(db_column='npe01__Organization_Type__c', custom=True, max_length=1300, verbose_name='Organization Type', sf_read_only=models.READ_ONLY, help_text='Formula: In order of preference, the SYSTEM_AccountType field, the Account Type field, and "Organization".', blank=True, null=True) 
    npe01_other_address = models.CharField(db_column='npe01__Other_Address__c', custom=True, max_length=1300, verbose_name='Other Address', sf_read_only=models.READ_ONLY, help_text='Formula: If the Primary Address Type is Other, the Mailing Address.  If the Secondary Address Type is Other, the Other Address.', blank=True, null=True) 
    npe01_preferred_phone = models.CharField(db_column='npe01__PreferredPhone__c', custom=True, max_length=255, verbose_name='Preferred Phone', default=models.DEFAULTED_ON_CREATE, help_text='Which phone number should be used for most communications involving this Contact?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npe01_preferred_email = models.CharField(db_column='npe01__Preferred_Email__c', custom=True, max_length=255, verbose_name='Preferred Email', default=models.DEFAULTED_ON_CREATE, help_text='Which email should be used for most communications involving this Contact?', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npe01_primary_address_type = models.CharField(db_column='npe01__Primary_Address_Type__c', custom=True, max_length=255, verbose_name='Primary Address Type', help_text='Which type of address is the mailing address?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Other', 'Other')], blank=True, null=True) 
    npe01_private = models.BooleanField(db_column='npe01__Private__c', custom=True, verbose_name='Private', default=models.DEFAULTED_ON_CREATE, help_text='Excludes this Contact from One to One or Bucket account processing.') 
    npe01_secondary_address_type = models.CharField(db_column='npe01__Secondary_Address_Type__c', custom=True, max_length=255, verbose_name='Secondary Address Type', help_text='What type of address is the other address?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Other', 'Other')], blank=True, null=True) 
    npe01_system_account_processor = models.CharField(db_column='npe01__SystemAccountProcessor__c', custom=True, max_length=255, verbose_name='DEPRECATED - _SYSTEM: ACCOUNT PROCESSOR', default=models.DEFAULTED_ON_CREATE, help_text='NO LONGER USED - Indicates which model drives Account relationship behavior: Individual (Bucket) or One-to-One', choices=[('One-to-One', 'One-to-One'), ('Individual', 'Individual')], blank=True, null=True) 
    npe01_type_of_account = models.CharField(db_column='npe01__Type_of_Account__c', custom=True, max_length=1300, verbose_name='Type of Account', sf_read_only=models.READ_ONLY, help_text='Formula: "Individual" or "Organization" depending on Account setting.', blank=True, null=True) 
    npe01_work_email = models.EmailField(db_column='npe01__WorkEmail__c', custom=True, verbose_name='Work Email', help_text='See Preferred Email field.', blank=True, null=True) 
    npe01_work_phone = models.CharField(db_column='npe01__WorkPhone__c', custom=True, max_length=40, verbose_name='Work Phone', help_text="See 'Preferred Phone' field.", blank=True, null=True) 
    npe01_work_address = models.CharField(db_column='npe01__Work_Address__c', custom=True, max_length=1300, verbose_name='Work Address', sf_read_only=models.READ_ONLY, help_text='Formula: If the Primary Address Type is Work, the Mailing Address.  If the Secondary Address Type is Work, the Other Address.', blank=True, null=True) 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', help_text='The average amount of all won Opportunities related to this Contact by a primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', help_text='The sum of won Opportunity amounts in the Best Gift Year.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', help_text='The year of the largest total amount of won Opportunities related to this Contact by primary Contact Role.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', help_text='The oldest Close Date of a won Opportunity with amount greater than zero related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_formula_household_mailing_address = models.CharField(db_column='npo02__Formula_HouseholdMailingAddress__c', custom=True, max_length=1300, verbose_name='Household Mailing Address', sf_read_only=models.READ_ONLY, help_text='Formula: Clone of the Household Mailing address (also a Formula)', blank=True, null=True) 
    npo02_formula_household_phone = models.CharField(db_column='npo02__Formula_HouseholdPhone__c', custom=True, max_length=1300, verbose_name='Household Phone', sf_read_only=models.READ_ONLY, help_text='Formula: Simple formula of Household Phone field.', blank=True, null=True) 
    npo02_household_naming_order = models.DecimalField(db_column='npo02__Household_Naming_Order__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Household Naming Order', help_text='Determines the order in which Contact names are used to generate Household name.', blank=True, null=True) 
    npo02_household = models.ForeignKey('Npo02Household', models.DO_NOTHING, db_column='npo02__Household__c', custom=True, blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', help_text='The largest amount of a won Opportunity related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_close_date_hh = models.DateField(db_column='npo02__LastCloseDateHH__c', custom=True, verbose_name='Last Household Gift Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', help_text='The close date of the most recent won Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', help_text='The amount of the most recent (by Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', help_text='The most recent Close Date of a won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', help_text='The level of the most recent (by Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', help_text='The origin (new, renewal, reacquire...) of the most recent (Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', help_text='The amount of the most recent won Opportunity by Close Date related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', help_text='The Membership End Date of the most recent (Close Date) Membership Opportunity (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', help_text='The Join Date of the oldest (Close Date) Membership Opportunity (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_naming_exclusions = models.CharField(db_column='npo02__Naming_Exclusions__c', custom=True, max_length=4099, verbose_name='Naming Exclusions', help_text="Select to exclude this Contact's name from various generated Household names.", choices=[('Household__c.Name', 'Household__c.Name'), ('Household__c.Formal_Greeting__c', 'Household__c.Formal_Greeting__c'), ('Household__c.Informal_Greeting__c', 'Household__c.Informal_Greeting__c')], blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', help_text='The number of won Membership Opportunities (Record Type) related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed two years ago.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_year_hh = models.DecimalField(db_column='npo02__OppAmountLastYearHH__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts Last Year on related Household.', blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_this_year_hh = models.DecimalField(db_column='npo02__OppAmountThisYearHH__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts This Year', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts This Year on related Household.', blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed this year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed two years ago.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed this year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', help_text='The smallest amount of a won Opportunity related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_soft_credit_last_year = models.DecimalField(db_column='npo02__Soft_Credit_Last_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Last Year', help_text='The sum of soft credit Opportunity amounts last year determined by Opportunity Contact Role and filtered by Roles in Household Settings.', blank=True, null=True) 
    npo02_soft_credit_this_year = models.DecimalField(db_column='npo02__Soft_Credit_This_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit This Year', help_text='Total soft credit amount this year', blank=True, null=True) 
    npo02_soft_credit_total = models.DecimalField(db_column='npo02__Soft_Credit_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Total', help_text="Total amount in soft credits for this Contact's lifetime. Defined in the Household Settings tab.", blank=True, null=True) 
    npo02_soft_credit_two_years_ago = models.DecimalField(db_column='npo02__Soft_Credit_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Two Years Ago', help_text='The sum of soft credit Opportunity amounts two years ago determined by Opportunity Contact Role and filtered by Roles in Household Settings.', blank=True, null=True) 
    npo02_system_household_processor = models.CharField(db_column='npo02__SystemHouseholdProcessor__c', custom=True, max_length=255, verbose_name='_SYSTEM: HOUSEHOLD PROCESSOR-DEPRECATED', choices=[('All Individual Contacts', 'All Individual Contacts'), ('All New or Edited Contacts', 'All New or Edited Contacts'), ('No Contacts', 'No Contacts')], blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', help_text='The total amount of won Membership Opportunities (Record Type) related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', help_text='The sum of won Opportunity Amounts related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_household_gifts = models.DecimalField(db_column='npo02__Total_Household_Gifts__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts on related Household.', blank=True, null=True) 
    npsp_address_verification_status = models.CharField(db_column='npsp__Address_Verification_Status__c', custom=True, max_length=1300, verbose_name='Address Verification Status', sf_read_only=models.READ_ONLY, help_text='If this address requires verification, click the Verify Address button at the top of the Address page. Consult the Help documentation in the Power of Us Hub for more information.', blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, blank=True, null=True) 
    npsp_current_address = models.ForeignKey('NpspAddress', models.DO_NOTHING, db_column='npsp__Current_Address__c', custom=True, blank=True, null=True) 
    npsp_deceased = models.BooleanField(db_column='npsp__Deceased__c', custom=True, verbose_name='Deceased', default=models.DEFAULTED_ON_CREATE, help_text='When selected, this option marks the contact as deceased, and excludes them from household naming, emails, and phone calls.') 
    npsp_do_not_contact = models.BooleanField(db_column='npsp__Do_Not_Contact__c', custom=True, verbose_name='Do Not Contact', default=models.DEFAULTED_ON_CREATE, help_text='When selected, this option excludes the contact from emails and phone calls.') 
    npsp_exclude_from_household_formal_greeting = models.BooleanField(db_column='npsp__Exclude_from_Household_Formal_Greeting__c', custom=True, verbose_name='Exclude from Household Formal Greeting', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will exclude this contact from the Household Formal Greeting.') 
    npsp_exclude_from_household_informal_greeting = models.BooleanField(db_column='npsp__Exclude_from_Household_Informal_Greeting__c', custom=True, verbose_name='Exclude from Household Informal Greeting', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will exclude this contact from the Household Informal Greeting.') 
    npsp_exclude_from_household_name = models.BooleanField(db_column='npsp__Exclude_from_Household_Name__c', custom=True, verbose_name='Exclude from Household Name', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will exclude this contact from the Household Name.') 
    npsp_first_soft_credit_amount = models.DecimalField(db_column='npsp__First_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='First Soft Credit Amount', help_text='The amount of the earliest soft credit.', blank=True, null=True) 
    npsp_first_soft_credit_date = models.DateField(db_column='npsp__First_Soft_Credit_Date__c', custom=True, verbose_name='First Soft Credit Date', help_text='The date of the earliest soft credit.', blank=True, null=True) 
    npsp_hhid = models.CharField(db_column='npsp__HHId__c', custom=True, max_length=1300, verbose_name='HHId', sf_read_only=models.READ_ONLY, help_text='holds the ID of the current household, whether it is a Household Account, or a Household Object.', blank=True, null=True) 
    npsp_largest_soft_credit_amount = models.DecimalField(db_column='npsp__Largest_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Largest Soft Credit Amount', help_text='The amount of the largest soft credit.', blank=True, null=True) 
    npsp_largest_soft_credit_date = models.DateField(db_column='npsp__Largest_Soft_Credit_Date__c', custom=True, verbose_name='Largest Soft Credit Date', help_text='The date of the largest soft credit.', blank=True, null=True) 
    npsp_last_soft_credit_amount = models.DecimalField(db_column='npsp__Last_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Last Soft Credit Amount', help_text='The amount of the most recent soft credit.', blank=True, null=True) 
    npsp_last_soft_credit_date = models.DateField(db_column='npsp__Last_Soft_Credit_Date__c', custom=True, verbose_name='Last Soft Credit Date', help_text='The date of the most recent soft credit.', blank=True, null=True) 
    npsp_number_of_soft_credits_last_n_days = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Last_N_Days__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Last N Days', help_text='Total amount for all soft credits that closed in the last N days. The value of N is defined in the NPSP Settings tab.', blank=True, null=True) 
    npsp_number_of_soft_credits_last_year = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Last_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Last Year', help_text='The number of soft credits last year.', blank=True, null=True) 
    npsp_number_of_soft_credits_this_year = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_This_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits This Year', help_text='The number of soft credits this year.', blank=True, null=True) 
    npsp_number_of_soft_credits_two_years_ago = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Two Years Ago', help_text='The number of soft credits 2 years ago.', blank=True, null=True) 
    npsp_number_of_soft_credits = models.DecimalField(db_column='npsp__Number_of_Soft_Credits__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits', help_text='The number of soft credits.', blank=True, null=True) 
    npsp_primary_affiliation = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Primary_Affiliation__c', custom=True, related_name='contact_npspprimaryaffiliation_set', blank=True, null=True) 
    npsp_primary_contact = models.BooleanField(db_column='npsp__Primary_Contact__c', custom=True, verbose_name='Primary Contact', sf_read_only=models.READ_ONLY, help_text='This is is checked if the user is the Primary Contact on their Account.  The Primary Contact can be edited on the Account.') 
    npsp_soft_credit_last_n_days = models.DecimalField(db_column='npsp__Soft_Credit_Last_N_Days__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Soft Credit Last N Days', help_text='The total amount of Soft Credit, closed in the last number of days defined in NPSP Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_is_address_override = models.BooleanField(db_column='npsp__is_Address_Override__c', custom=True, verbose_name='Address Override', default=models.DEFAULTED_ON_CREATE, help_text="If checked, the Contact's Current Address lookup overrides the Household's default Address or seasonal Address.") 
    how_did_you_hear_about_us = models.CharField(custom=True, db_column='How_did_you_hear_about_us__c', max_length=255, verbose_name='How did you hear about us?', choices=[('Mission Bit Website', 'Mission Bit Website'), ('Family / Friend', 'Family / Friend'), ('School / Teacher', 'School / Teacher'), ('Flyer', 'Flyer'), ('Event / Convention', 'Event / Convention'), ('Other', 'Other')], blank=True, null=True)
    parent_guardian_first_name = models.CharField(custom=True, db_column='Parent_Guardian_first_name__c', max_length=100, verbose_name='Parent/Guardian first name', blank=True, null=True)
    parent_guardian_last_name = models.CharField(custom=True, db_column='Parent_Guardian_last_name__c', max_length=100, verbose_name='Parent/Guardian last name', blank=True, null=True)
    parent_guardian_phone = models.CharField(custom=True, db_column='Parent_Guardian_phone__c', max_length=40, verbose_name='Parent/Guardian phone', blank=True, null=True)
    parent_guardian_email = models.EmailField(custom=True, db_column='Parent_Guardian_email__c', verbose_name='Parent/Guardian email', blank=True, null=True)
    dm_current_grade = models.CharField(custom=True, db_column='DM_Current_grade__c', max_length=255, verbose_name='DM - Current grade', help_text='Need this for data migration to calculate Expected Graduation Year?  If not, delete this field.', choices=[('Graduating 8th', 'Graduating 8th'), ('Freshman, 9th', 'Freshman, 9th'), ('Sophomore, 10th', 'Sophomore, 10th'), ('Junior, 11th', 'Junior, 11th'), ('Senior, 12th', 'Senior, 12th')], blank=True, null=True)
    race = models.CharField(custom=True, max_length=255, verbose_name='Which best describes your race?', choices=[('American Indian/Alaskan Native', 'American Indian/Alaskan Native'), ('Asian', 'Asian'), ('Black/African American', 'Black/African American'), ('Native Hawaiian/Other Pacific Islander', 'Native Hawaiian/Other Pacific Islander'), ('White', 'White'), ('American Indian/Alaskan Native AND Black/African American', 'American Indian/Alaskan Native AND Black/African American'), ('American Indian/Alaskan Native AND White', 'American Indian/Alaskan Native AND White'), ('Asian AND White', 'Asian AND White'), ('Black/African American AND White', 'Black/African American AND White'), ('Other/Multiracial', 'Other/Multiracial')], blank=True, null=True)
    gender = models.CharField(custom=True, max_length=255, choices=[('Female', 'Female'), ('Male', 'Male'), ('Genderqueer/Gender Non-binary', 'Genderqueer/Gender Non-binary'), ('Trans Female', 'Trans Female'), ('Trans Male', 'Trans Male'), ('Other', 'Not Listed')], blank=True, null=True)
    use_a_computer_at_home = models.CharField(custom=True, db_column='Use_a_computer_at_home__c', max_length=255, verbose_name='Use a computer at home?', choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    have_reliable_internet_access_at_home = models.CharField(custom=True, db_column='Have_reliable_internet_access_at_home__c', max_length=255, verbose_name='Have reliable internet access at home?', choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    coding_classes_taken_before = models.TextField(custom=True, db_column='Coding_classes_taken_before__c', verbose_name='Coding classes taken before', blank=True, null=True)
    why_select_this_particular_class = models.CharField(custom=True, db_column='Why_select_this_particular_class__c', max_length=255, verbose_name='Why select this particular class?', choices=[('The day + time of the class works with my schedule.', 'The day + time of the class works with my schedule.'), ('The location of the class is convenient for me.', 'The location of the class is convenient for me.'), ('It sounds cool!', 'It sounds cool!'), ('Other', 'Other')], blank=True, null=True)
    of_class_enrollments_completed = models.DecimalField(custom=True, db_column='of_Class_Enrollments_Completed__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments - Completed', sf_read_only=models.READ_ONLY, help_text='The number of Class Enrollemnts that the student has completed.  If more than 0, then the Student is considered an Alumni', blank=True, null=True)
    alumni = models.BooleanField(custom=True, verbose_name='Alumni?', sf_read_only=models.READ_ONLY)
    student_status = models.CharField(custom=True, db_column='Student_Status__c', max_length=1300, verbose_name='Student Status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_class_enrollments_any_status = models.DecimalField(custom=True, db_column='of_Class_Enrollments_Any_status__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments - Any status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_class_enrollments_app_this_semester = models.DecimalField(custom=True, db_column='of_Class_Enrollments_App_this_semester__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments-App this semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_enrollments_waitlist_this_semester = models.DecimalField(custom=True, db_column='of_enrollments_Waitlist_this_semester__c', max_digits=18, decimal_places=0, verbose_name='# of enrollments-Waitlist this semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    date_orientation_session = models.DateField(custom=True, db_column='Date_Orientation_session__c', verbose_name='Date - Orientation session', blank=True, null=True)
    date_orientation_completed = models.BooleanField(custom=True, db_column='Date_Orientation_completed__c', verbose_name='Date – Orientation completed', default=models.DEFAULTED_ON_CREATE)
    areas_of_expertise = models.CharField(custom=True, db_column='Areas_of_Expertise__c', max_length=4099, verbose_name='Areas of Expertise', choices=[('HTML / CSS', 'HTML / CSS'), ('Python', 'Python'), ('Java / Android', 'Java / Android'), ('Objective-C / Swift / iOS', 'Objective-C / Swift / iOS'), ('Java Script', 'Java Script'), ('Ruby / Ruby on Rails', 'Ruby / Ruby on Rails'), ('Unity', 'Unity'), ('C / C++', 'C / C++'), ('C# / .Net', 'C# / .Net'), ('Other', 'Other')], blank=True, null=True)
    areas_of_expertise_other = models.TextField(custom=True, db_column='Areas_of_Expertise_Other__c', verbose_name='Areas of Expertise (Other)', blank=True, null=True)
    date_tb_test_result = models.DateField(custom=True, db_column='Date_TB_Test_result__c', verbose_name='Date – TB Test result', blank=True, null=True)
    date_background_check_approved = models.DateField(custom=True, db_column='Date_Background_check_approved__c', verbose_name='Date – Background check approved', blank=True, null=True)
    expected_graduation_year = models.CharField(custom=True, db_column='Expected_graduation_year__c', max_length=4, verbose_name='Expected graduation year', help_text='Enter the year this contact is expected to graduate.  For example, 2020', blank=True, null=True)
    current_grade_level = models.CharField(custom=True, db_column='Current_grade_level__c', max_length=1300, verbose_name='Current grade level', sf_read_only=models.READ_ONLY, blank=True, null=True)
    volunteer_area_s_of_interest = models.CharField(custom=True, db_column='Volunteer_area_s_of_interest__c', max_length=4099, verbose_name='Volunteer area(s) of interest', choices=[('Classroom', 'Classroom'), ('Event', 'Event'), ('Other', 'Other')], blank=True, null=True)
    enrollments_this_semester_applied = models.DecimalField(custom=True, db_column='enrollments_this_semester_Applied__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Applied', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_waitlisted = models.DecimalField(custom=True, db_column='enrollments_this_semester_Waitlisted__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Waitlisted', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_rejected = models.DecimalField(custom=True, db_column='enrollments_this_semester_Rejected__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Rejected', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_drop_out = models.DecimalField(custom=True, db_column='enrollments_this_semester_Drop_out__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Drop out', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    race_other = models.CharField(custom=True, db_column='Race_Other__c', max_length=100, verbose_name='Which best describes your race? (Other)', blank=True, null=True)
    gender_other = models.CharField(custom=True, db_column='Gender_Other__c', max_length=50, verbose_name='Gender (Other)', blank=True, null=True)
    why_select_this_particular_class_other = models.CharField(custom=True, db_column='Why_select_this_particular_class_Other__c', max_length=255, verbose_name='Why select this particular class (Other)', blank=True, null=True)
    how_did_you_hear_about_us_other = models.CharField(custom=True, db_column='How_did_you_hear_about_us_other__c', max_length=255, verbose_name='How did you hear about us (Other)', blank=True, null=True)
    age = models.DecimalField(custom=True, max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, help_text='Formula field calculated based on birthdate.', blank=True, null=True)
    which_best_describes_your_ethnicity = models.CharField(custom=True, db_column='Which_best_describes_your_ethnicity__c', max_length=255, verbose_name='Which best describes your ethnicity?', choices=[('Hispanic/Latinx', 'Hispanic/Latinx'), ('Not Hispanic/Latinx', 'Not Hispanic/Latinx')], blank=True, null=True)
    client_id = models.CharField(custom=True, db_column='Client_ID__c', max_length=14, verbose_name='Client ID', help_text='3 first letters of first name, 3 first letters of last name, and birthdate "AAABBB00000000" (Only used for students and parents). This field is auto-populated by FormAssembly.', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contact'
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'
        # keyPrefix = '003'



class ContactChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='contactchangeevent_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    salutation = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_state = models.CharField(max_length=80, verbose_name='Other State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_postal_code = models.CharField(max_length=20, verbose_name='Other Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_state_code = models.CharField(max_length=10, verbose_name='Other State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    other_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    other_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    other_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    mailing_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_state = models.CharField(max_length=80, verbose_name='Mailing State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_postal_code = models.CharField(max_length=20, verbose_name='Mailing Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_state_code = models.CharField(max_length=10, verbose_name='Mailing State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    mailing_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    mailing_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Business Phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Business Fax', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    home_phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    other_phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reports_to = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    department = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    birthdate = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contactchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_curequest_date = models.DateTimeField(db_column='LastCURequestDate', verbose_name='Last Stay-in-Touch Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_cuupdate_date = models.DateTimeField(db_column='LastCUUpdateDate', verbose_name='Last Stay-in-Touch Save Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    individual = models.ForeignKey('Individual', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_alternate_email = models.EmailField(db_column='npe01__AlternateEmail__c', custom=True, verbose_name='Alternate Email', sf_read_only=models.READ_ONLY, help_text='Alternate Email is an optional fourth email: Not personal, preferred, or work email.', blank=True, null=True) 
    npe01_home_email = models.EmailField(db_column='npe01__HomeEmail__c', custom=True, verbose_name='Personal Email', sf_read_only=models.READ_ONLY, help_text='See Preferred Email field.', blank=True, null=True) 
    npe01_home_address = models.CharField(db_column='npe01__Home_Address__c', custom=True, max_length=3900, verbose_name='Home Address', sf_read_only=models.READ_ONLY, help_text='Formula: Uses primary address type field to determine Home Address from Mailing or Other address.', blank=True, null=True) 
    npe01_organization_type = models.CharField(db_column='npe01__Organization_Type__c', custom=True, max_length=3900, verbose_name='Organization Type', sf_read_only=models.READ_ONLY, help_text='Formula: In order of preference, the SYSTEM_AccountType field, the Account Type field, and "Organization".', blank=True, null=True) 
    npe01_other_address = models.CharField(db_column='npe01__Other_Address__c', custom=True, max_length=3900, verbose_name='Other Address', sf_read_only=models.READ_ONLY, help_text='Formula: If the Primary Address Type is Other, the Mailing Address.  If the Secondary Address Type is Other, the Other Address.', blank=True, null=True) 
    npe01_preferred_phone = models.CharField(db_column='npe01__PreferredPhone__c', custom=True, max_length=255, verbose_name='Preferred Phone', sf_read_only=models.READ_ONLY, default='Home', help_text='Which phone number should be used for most communications involving this Contact?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npe01_preferred_email = models.CharField(db_column='npe01__Preferred_Email__c', custom=True, max_length=255, verbose_name='Preferred Email', sf_read_only=models.READ_ONLY, default='Personal', help_text='Which email should be used for most communications involving this Contact?', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npe01_primary_address_type = models.CharField(db_column='npe01__Primary_Address_Type__c', custom=True, max_length=255, verbose_name='Primary Address Type', sf_read_only=models.READ_ONLY, help_text='Which type of address is the mailing address?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Other', 'Other')], blank=True, null=True) 
    npe01_private = models.BooleanField(db_column='npe01__Private__c', custom=True, verbose_name='Private', sf_read_only=models.READ_ONLY, default=False, help_text='Excludes this Contact from One to One or Bucket account processing.') 
    npe01_secondary_address_type = models.CharField(db_column='npe01__Secondary_Address_Type__c', custom=True, max_length=255, verbose_name='Secondary Address Type', sf_read_only=models.READ_ONLY, help_text='What type of address is the other address?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Other', 'Other')], blank=True, null=True) 
    npe01_system_account_processor = models.CharField(db_column='npe01__SystemAccountProcessor__c', custom=True, max_length=255, verbose_name='DEPRECATED - _SYSTEM: ACCOUNT PROCESSOR', sf_read_only=models.READ_ONLY, default='One-to-One', help_text='NO LONGER USED - Indicates which model drives Account relationship behavior: Individual (Bucket) or One-to-One', choices=[('One-to-One', 'One-to-One'), ('Individual', 'Individual')], blank=True, null=True) 
    npe01_type_of_account = models.CharField(db_column='npe01__Type_of_Account__c', custom=True, max_length=3900, verbose_name='Type of Account', sf_read_only=models.READ_ONLY, help_text='Formula: "Individual" or "Organization" depending on Account setting.', blank=True, null=True) 
    npe01_work_email = models.EmailField(db_column='npe01__WorkEmail__c', custom=True, verbose_name='Work Email', sf_read_only=models.READ_ONLY, help_text='See Preferred Email field.', blank=True, null=True) 
    npe01_work_phone = models.CharField(db_column='npe01__WorkPhone__c', custom=True, max_length=40, verbose_name='Work Phone', sf_read_only=models.READ_ONLY, help_text="See 'Preferred Phone' field.", blank=True, null=True) 
    npe01_work_address = models.CharField(db_column='npe01__Work_Address__c', custom=True, max_length=3900, verbose_name='Work Address', sf_read_only=models.READ_ONLY, help_text='Formula: If the Primary Address Type is Work, the Mailing Address.  If the Secondary Address Type is Work, the Other Address.', blank=True, null=True) 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', sf_read_only=models.READ_ONLY, help_text='The average amount of all won Opportunities related to this Contact by a primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', sf_read_only=models.READ_ONLY, help_text='The sum of won Opportunity amounts in the Best Gift Year.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', sf_read_only=models.READ_ONLY, help_text='The year of the largest total amount of won Opportunities related to this Contact by primary Contact Role.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', sf_read_only=models.READ_ONLY, help_text='The oldest Close Date of a won Opportunity with amount greater than zero related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_formula_household_mailing_address = models.CharField(db_column='npo02__Formula_HouseholdMailingAddress__c', custom=True, max_length=3900, verbose_name='Household Mailing Address', sf_read_only=models.READ_ONLY, help_text='Formula: Clone of the Household Mailing address (also a Formula)', blank=True, null=True) 
    npo02_formula_household_phone = models.CharField(db_column='npo02__Formula_HouseholdPhone__c', custom=True, max_length=3900, verbose_name='Household Phone', sf_read_only=models.READ_ONLY, help_text='Formula: Simple formula of Household Phone field.', blank=True, null=True) 
    npo02_household_naming_order = models.DecimalField(db_column='npo02__Household_Naming_Order__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Household Naming Order', sf_read_only=models.READ_ONLY, help_text='Determines the order in which Contact names are used to generate Household name.', blank=True, null=True) 
    npo02_household = models.ForeignKey('Npo02Household', models.DO_NOTHING, db_column='npo02__Household__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', sf_read_only=models.READ_ONLY, help_text='The largest amount of a won Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_close_date_hh = models.DateField(db_column='npo02__LastCloseDateHH__c', custom=True, verbose_name='Last Household Gift Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', sf_read_only=models.READ_ONLY, help_text='The close date of the most recent won Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', sf_read_only=models.READ_ONLY, help_text='The amount of the most recent (by Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', sf_read_only=models.READ_ONLY, help_text='The most recent Close Date of a won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', sf_read_only=models.READ_ONLY, help_text='The level of the most recent (by Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', sf_read_only=models.READ_ONLY, help_text='The origin (new, renewal, reacquire...) of the most recent (Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', sf_read_only=models.READ_ONLY, help_text='The amount of the most recent won Opportunity by Close Date related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', sf_read_only=models.READ_ONLY, help_text='The Membership End Date of the most recent (Close Date) Membership Opportunity (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', sf_read_only=models.READ_ONLY, help_text='The Join Date of the oldest (Close Date) Membership Opportunity (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_naming_exclusions = models.CharField(db_column='npo02__Naming_Exclusions__c', custom=True, max_length=4099, verbose_name='Naming Exclusions', sf_read_only=models.READ_ONLY, help_text="Select to exclude this Contact's name from various generated Household names.", choices=[('Household__c.Name', 'Household__c.Name'), ('Household__c.Formal_Greeting__c', 'Household__c.Formal_Greeting__c'), ('Household__c.Informal_Greeting__c', 'Household__c.Informal_Greeting__c')], blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', sf_read_only=models.READ_ONLY, help_text='The number of won Membership Opportunities (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed two years ago.', blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed in the last number of days defined in Household Settings.', blank=True, null=True) 
    npo02_opp_amount_last_year_hh = models.DecimalField(db_column='npo02__OppAmountLastYearHH__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts Last Year on related Household.', blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed last year.', blank=True, null=True) 
    npo02_opp_amount_this_year_hh = models.DecimalField(db_column='npo02__OppAmountThisYearHH__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts This Year', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts This Year on related Household.', blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed this year.', blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed two years ago.', blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed in the last number of days defined in Household Settings.', blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed last year.', blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', sf_read_only=models.READ_ONLY, help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed this year.', blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', sf_read_only=models.READ_ONLY, help_text='The smallest amount of a won Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_soft_credit_last_year = models.DecimalField(db_column='npo02__Soft_Credit_Last_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Last Year', sf_read_only=models.READ_ONLY, help_text='The sum of soft credit Opportunity amounts last year determined by Opportunity Contact Role and filtered by Roles in Household Settings.', blank=True, null=True) 
    npo02_soft_credit_this_year = models.DecimalField(db_column='npo02__Soft_Credit_This_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit This Year', sf_read_only=models.READ_ONLY, help_text='Total soft credit amount this year', blank=True, null=True) 
    npo02_soft_credit_total = models.DecimalField(db_column='npo02__Soft_Credit_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Total', sf_read_only=models.READ_ONLY, help_text="Total amount in soft credits for this Contact's lifetime. Defined in the Household Settings tab.", blank=True, null=True) 
    npo02_soft_credit_two_years_ago = models.DecimalField(db_column='npo02__Soft_Credit_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Two Years Ago', sf_read_only=models.READ_ONLY, help_text='The sum of soft credit Opportunity amounts two years ago determined by Opportunity Contact Role and filtered by Roles in Household Settings.', blank=True, null=True) 
    npo02_system_household_processor = models.CharField(db_column='npo02__SystemHouseholdProcessor__c', custom=True, max_length=255, verbose_name='_SYSTEM: HOUSEHOLD PROCESSOR-DEPRECATED', sf_read_only=models.READ_ONLY, choices=[('All Individual Contacts', 'All Individual Contacts'), ('All New or Edited Contacts', 'All New or Edited Contacts'), ('No Contacts', 'No Contacts')], blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', sf_read_only=models.READ_ONLY, help_text='The total amount of won Membership Opportunities (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', sf_read_only=models.READ_ONLY, help_text='The sum of won Opportunity Amounts related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_total_household_gifts = models.DecimalField(db_column='npo02__Total_Household_Gifts__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts on related Household.', blank=True, null=True) 
    npsp_address_verification_status = models.CharField(db_column='npsp__Address_Verification_Status__c', custom=True, max_length=3900, verbose_name='Address Verification Status', sf_read_only=models.READ_ONLY, help_text='If this address requires verification, click the Verify Address button at the top of the Address page. Consult the Help documentation in the Power of Us Hub for more information.', blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_current_address = models.ForeignKey('NpspAddress', models.DO_NOTHING, db_column='npsp__Current_Address__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_deceased = models.BooleanField(db_column='npsp__Deceased__c', custom=True, verbose_name='Deceased', sf_read_only=models.READ_ONLY, default=False, help_text='When selected, this option marks the contact as deceased, and excludes them from household naming, emails, and phone calls.') 
    npsp_do_not_contact = models.BooleanField(db_column='npsp__Do_Not_Contact__c', custom=True, verbose_name='Do Not Contact', sf_read_only=models.READ_ONLY, default=False, help_text='When selected, this option excludes the contact from emails and phone calls.') 
    npsp_exclude_from_household_formal_greeting = models.BooleanField(db_column='npsp__Exclude_from_Household_Formal_Greeting__c', custom=True, verbose_name='Exclude from Household Formal Greeting', sf_read_only=models.READ_ONLY, default=False, help_text='Checking this box will exclude this contact from the Household Formal Greeting.') 
    npsp_exclude_from_household_informal_greeting = models.BooleanField(db_column='npsp__Exclude_from_Household_Informal_Greeting__c', custom=True, verbose_name='Exclude from Household Informal Greeting', sf_read_only=models.READ_ONLY, default=False, help_text='Checking this box will exclude this contact from the Household Informal Greeting.') 
    npsp_exclude_from_household_name = models.BooleanField(db_column='npsp__Exclude_from_Household_Name__c', custom=True, verbose_name='Exclude from Household Name', sf_read_only=models.READ_ONLY, default=False, help_text='Checking this box will exclude this contact from the Household Name.') 
    npsp_first_soft_credit_amount = models.DecimalField(db_column='npsp__First_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='First Soft Credit Amount', sf_read_only=models.READ_ONLY, help_text='The amount of the earliest soft credit.', blank=True, null=True) 
    npsp_first_soft_credit_date = models.DateField(db_column='npsp__First_Soft_Credit_Date__c', custom=True, verbose_name='First Soft Credit Date', sf_read_only=models.READ_ONLY, help_text='The date of the earliest soft credit.', blank=True, null=True) 
    npsp_hhid = models.CharField(db_column='npsp__HHId__c', custom=True, max_length=3900, verbose_name='HHId', sf_read_only=models.READ_ONLY, help_text='holds the ID of the current household, whether it is a Household Account, or a Household Object.', blank=True, null=True) 
    npsp_largest_soft_credit_amount = models.DecimalField(db_column='npsp__Largest_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Largest Soft Credit Amount', sf_read_only=models.READ_ONLY, help_text='The amount of the largest soft credit.', blank=True, null=True) 
    npsp_largest_soft_credit_date = models.DateField(db_column='npsp__Largest_Soft_Credit_Date__c', custom=True, verbose_name='Largest Soft Credit Date', sf_read_only=models.READ_ONLY, help_text='The date of the largest soft credit.', blank=True, null=True) 
    npsp_last_soft_credit_amount = models.DecimalField(db_column='npsp__Last_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Last Soft Credit Amount', sf_read_only=models.READ_ONLY, help_text='The amount of the most recent soft credit.', blank=True, null=True) 
    npsp_last_soft_credit_date = models.DateField(db_column='npsp__Last_Soft_Credit_Date__c', custom=True, verbose_name='Last Soft Credit Date', sf_read_only=models.READ_ONLY, help_text='The date of the most recent soft credit.', blank=True, null=True) 
    npsp_number_of_soft_credits_last_n_days = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Last_N_Days__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Last N Days', sf_read_only=models.READ_ONLY, help_text='Total amount for all soft credits that closed in the last N days. The value of N is defined in the NPSP Settings tab.', blank=True, null=True) 
    npsp_number_of_soft_credits_last_year = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Last_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Last Year', sf_read_only=models.READ_ONLY, help_text='The number of soft credits last year.', blank=True, null=True) 
    npsp_number_of_soft_credits_this_year = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_This_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits This Year', sf_read_only=models.READ_ONLY, help_text='The number of soft credits this year.', blank=True, null=True) 
    npsp_number_of_soft_credits_two_years_ago = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Two Years Ago', sf_read_only=models.READ_ONLY, help_text='The number of soft credits 2 years ago.', blank=True, null=True) 
    npsp_number_of_soft_credits = models.DecimalField(db_column='npsp__Number_of_Soft_Credits__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits', sf_read_only=models.READ_ONLY, help_text='The number of soft credits.', blank=True, null=True) 
    npsp_primary_affiliation = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Primary_Affiliation__c', custom=True, related_name='contactchangeevent_npspprimaryaffiliation_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_primary_contact = models.BooleanField(db_column='npsp__Primary_Contact__c', custom=True, verbose_name='Primary Contact', sf_read_only=models.READ_ONLY, default=False, help_text='This is is checked if the user is the Primary Contact on their Account.  The Primary Contact can be edited on the Account.') 
    npsp_soft_credit_last_n_days = models.DecimalField(db_column='npsp__Soft_Credit_Last_N_Days__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Soft Credit Last N Days', sf_read_only=models.READ_ONLY, help_text='The total amount of Soft Credit, closed in the last number of days defined in NPSP Settings.', blank=True, null=True) 
    npsp_is_address_override = models.BooleanField(db_column='npsp__is_Address_Override__c', custom=True, verbose_name='Address Override', sf_read_only=models.READ_ONLY, default=False, help_text="If checked, the Contact's Current Address lookup overrides the Household's default Address or seasonal Address.") 
    how_did_you_hear_about_us = models.CharField(custom=True, db_column='How_did_you_hear_about_us__c', max_length=255, verbose_name='How did you hear about us?', sf_read_only=models.READ_ONLY, choices=[('Mission Bit Website', 'Mission Bit Website'), ('Family / Friend', 'Family / Friend'), ('School / Teacher', 'School / Teacher'), ('Flyer', 'Flyer'), ('Event / Convention', 'Event / Convention'), ('Other', 'Other')], blank=True, null=True)
    parent_guardian_first_name = models.CharField(custom=True, db_column='Parent_Guardian_first_name__c', max_length=100, verbose_name='Parent/Guardian first name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_guardian_last_name = models.CharField(custom=True, db_column='Parent_Guardian_last_name__c', max_length=100, verbose_name='Parent/Guardian last name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_guardian_phone = models.CharField(custom=True, db_column='Parent_Guardian_phone__c', max_length=40, verbose_name='Parent/Guardian phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_guardian_email = models.EmailField(custom=True, db_column='Parent_Guardian_email__c', verbose_name='Parent/Guardian email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dm_current_grade = models.CharField(custom=True, db_column='DM_Current_grade__c', max_length=255, verbose_name='DM - Current grade', sf_read_only=models.READ_ONLY, help_text='Need this for data migration to calculate Expected Graduation Year?  If not, delete this field.', choices=[('Graduating 8th', 'Graduating 8th'), ('Freshman, 9th', 'Freshman, 9th'), ('Sophomore, 10th', 'Sophomore, 10th'), ('Junior, 11th', 'Junior, 11th'), ('Senior, 12th', 'Senior, 12th')], blank=True, null=True)
    race = models.CharField(custom=True, max_length=255, verbose_name='Which best describes your race?', sf_read_only=models.READ_ONLY, choices=[('American Indian/Alaskan Native', 'American Indian/Alaskan Native'), ('Asian', 'Asian'), ('Black/African American', 'Black/African American'), ('Native Hawaiian/Other Pacific Islander', 'Native Hawaiian/Other Pacific Islander'), ('White', 'White'), ('American Indian/Alaskan Native AND Black/African American', 'American Indian/Alaskan Native AND Black/African American'), ('American Indian/Alaskan Native AND White', 'American Indian/Alaskan Native AND White'), ('Asian AND White', 'Asian AND White'), ('Black/African American AND White', 'Black/African American AND White'), ('Other/Multiracial', 'Other/Multiracial')], blank=True, null=True)
    gender = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Female', 'Female'), ('Male', 'Male'), ('Genderqueer/Gender Non-binary', 'Genderqueer/Gender Non-binary'), ('Trans Female', 'Trans Female'), ('Trans Male', 'Trans Male'), ('Other', 'Not Listed')], blank=True, null=True)
    use_a_computer_at_home = models.CharField(custom=True, db_column='Use_a_computer_at_home__c', max_length=255, verbose_name='Use a computer at home?', sf_read_only=models.READ_ONLY, choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    have_reliable_internet_access_at_home = models.CharField(custom=True, db_column='Have_reliable_internet_access_at_home__c', max_length=255, verbose_name='Have reliable internet access at home?', sf_read_only=models.READ_ONLY, choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    coding_classes_taken_before = models.TextField(custom=True, db_column='Coding_classes_taken_before__c', verbose_name='Coding classes taken before', sf_read_only=models.READ_ONLY, blank=True, null=True)
    why_select_this_particular_class = models.CharField(custom=True, db_column='Why_select_this_particular_class__c', max_length=255, verbose_name='Why select this particular class?', sf_read_only=models.READ_ONLY, choices=[('The day + time of the class works with my schedule.', 'The day + time of the class works with my schedule.'), ('The location of the class is convenient for me.', 'The location of the class is convenient for me.'), ('It sounds cool!', 'It sounds cool!'), ('Other', 'Other')], blank=True, null=True)
    of_class_enrollments_completed = models.DecimalField(custom=True, db_column='of_Class_Enrollments_Completed__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments - Completed', sf_read_only=models.READ_ONLY, help_text='The number of Class Enrollemnts that the student has completed.  If more than 0, then the Student is considered an Alumni', blank=True, null=True)
    alumni = models.BooleanField(custom=True, verbose_name='Alumni?', sf_read_only=models.READ_ONLY, default=False)
    student_status = models.CharField(custom=True, db_column='Student_Status__c', verbose_name='Student Status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_class_enrollments_any_status = models.DecimalField(custom=True, db_column='of_Class_Enrollments_Any_status__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments - Any status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_class_enrollments_app_this_semester = models.DecimalField(custom=True, db_column='of_Class_Enrollments_App_this_semester__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments-App this semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_enrollments_waitlist_this_semester = models.DecimalField(custom=True, db_column='of_enrollments_Waitlist_this_semester__c', max_digits=18, decimal_places=0, verbose_name='# of enrollments-Waitlist this semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    date_orientation_session = models.DateField(custom=True, db_column='Date_Orientation_session__c', verbose_name='Date - Orientation session', sf_read_only=models.READ_ONLY, blank=True, null=True)
    date_orientation_completed = models.BooleanField(custom=True, db_column='Date_Orientation_completed__c', verbose_name='Date – Orientation completed', sf_read_only=models.READ_ONLY, default=False)
    areas_of_expertise = models.CharField(custom=True, db_column='Areas_of_Expertise__c', max_length=4099, verbose_name='Areas of Expertise', sf_read_only=models.READ_ONLY, choices=[('HTML / CSS', 'HTML / CSS'), ('Python', 'Python'), ('Java / Android', 'Java / Android'), ('Objective-C / Swift / iOS', 'Objective-C / Swift / iOS'), ('Java Script', 'Java Script'), ('Ruby / Ruby on Rails', 'Ruby / Ruby on Rails'), ('Unity', 'Unity'), ('C / C++', 'C / C++'), ('C# / .Net', 'C# / .Net'), ('Other', 'Other')], blank=True, null=True)
    areas_of_expertise_other = models.TextField(custom=True, db_column='Areas_of_Expertise_Other__c', verbose_name='Areas of Expertise (Other)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    date_tb_test_result = models.DateField(custom=True, db_column='Date_TB_Test_result__c', verbose_name='Date – TB Test result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    date_background_check_approved = models.DateField(custom=True, db_column='Date_Background_check_approved__c', verbose_name='Date – Background check approved', sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_graduation_year = models.CharField(custom=True, db_column='Expected_graduation_year__c', max_length=4, verbose_name='Expected graduation year', sf_read_only=models.READ_ONLY, help_text='Enter the year this contact is expected to graduate.  For example, 2020', blank=True, null=True)
    current_grade_level = models.CharField(custom=True, db_column='Current_grade_level__c', verbose_name='Current grade level', sf_read_only=models.READ_ONLY, blank=True, null=True)
    volunteer_area_s_of_interest = models.CharField(custom=True, db_column='Volunteer_area_s_of_interest__c', max_length=4099, verbose_name='Volunteer area(s) of interest', sf_read_only=models.READ_ONLY, choices=[('Classroom', 'Classroom'), ('Event', 'Event'), ('Other', 'Other')], blank=True, null=True)
    enrollments_this_semester_applied = models.DecimalField(custom=True, db_column='enrollments_this_semester_Applied__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Applied', sf_read_only=models.READ_ONLY, help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_waitlisted = models.DecimalField(custom=True, db_column='enrollments_this_semester_Waitlisted__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Waitlisted', sf_read_only=models.READ_ONLY, help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_rejected = models.DecimalField(custom=True, db_column='enrollments_this_semester_Rejected__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Rejected', sf_read_only=models.READ_ONLY, help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_drop_out = models.DecimalField(custom=True, db_column='enrollments_this_semester_Drop_out__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Drop out', sf_read_only=models.READ_ONLY, help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    race_other = models.CharField(custom=True, db_column='Race_Other__c', max_length=100, verbose_name='Which best describes your race? (Other)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    gender_other = models.CharField(custom=True, db_column='Gender_Other__c', max_length=50, verbose_name='Gender (Other)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    why_select_this_particular_class_other = models.CharField(custom=True, db_column='Why_select_this_particular_class_Other__c', max_length=255, verbose_name='Why select this particular class (Other)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    how_did_you_hear_about_us_other = models.CharField(custom=True, db_column='How_did_you_hear_about_us_other__c', max_length=255, verbose_name='How did you hear about us (Other)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    age = models.DecimalField(custom=True, max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, help_text='Formula field calculated based on birthdate.', blank=True, null=True)
    which_best_describes_your_ethnicity = models.CharField(custom=True, db_column='Which_best_describes_your_ethnicity__c', max_length=255, verbose_name='Which best describes your ethnicity?', sf_read_only=models.READ_ONLY, choices=[('Hispanic/Latinx', 'Hispanic/Latinx'), ('Not Hispanic/Latinx', 'Not Hispanic/Latinx')], blank=True, null=True)
    client_id = models.CharField(custom=True, db_column='Client_ID__c', max_length=14, verbose_name='Client ID', sf_read_only=models.READ_ONLY, help_text='3 first letters of first name, 3 first letters of last name, and birthdate "AAABBB00000000" (Only used for students and parents). This field is auto-populated by FormAssembly.', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactChangeEvent'
        verbose_name = 'Contact Change Event'
        verbose_name_plural = 'Contact Change Event'
        # keyPrefix = 'None'



class ContactFeed(models.Model):
    parent = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactFeed'
        verbose_name = 'Contact Feed'
        verbose_name_plural = 'Contact Feed'
        # keyPrefix = 'None'



class ContactHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npo02__SystemHouseholdProcessor__c', '_SYSTEM: HOUSEHOLD PROCESSOR-DEPRECATED'), ('enrollments_this_semester_Applied__c', '# enrollments this semester - Applied'), ('enrollments_this_semester_Drop_out__c', '# enrollments this semester - Drop out'), ('enrollments_this_semester_Rejected__c', '# enrollments this semester - Rejected'), ('enrollments_this_semester_Waitlisted__c', '# enrollments this semester - Waitlisted'), ('Account', 'Account Name'), ('npsp__is_Address_Override__c', 'Address Override'), ('npe01__AlternateEmail__c', 'Alternate Email'), ('Areas_of_Expertise__c', 'Areas of Expertise'), ('Areas_of_Expertise_Other__c', 'Areas of Expertise (Other)'), ('AssistantName', 'Assistant'), ('AssistantPhone', 'Asst. Phone'), ('npo02__AverageAmount__c', 'Average Gift'), ('npsp__Batch__c', 'Batch'), ('npo02__Best_Gift_Year__c', 'Best Gift Year'), ('npo02__Best_Gift_Year_Total__c', 'Best Gift Year Total'), ('Birthdate', 'Birthdate'), ('Client_ID__c', 'Client ID'), ('Coding_classes_taken_before__c', 'Coding classes taken before'), ('contactMerged', 'Contact Merged'), ('Owner', 'Contact Owner'), ('RecordType', 'Contact Record Type'), ('created', 'Created.'), ('contactCreatedFromLead', 'Created by lead convert'), ('npsp__Current_Address__c', 'Current Address'), ('Jigsaw', 'Data.com Key'), ('Date_Background_check_approved__c', 'Date – Background check approved'), ('Date_Orientation_completed__c', 'Date – Orientation completed'), ('Date_Orientation_session__c', 'Date - Orientation session'), ('Date_TB_Test_result__c', 'Date – TB Test result'), ('npsp__Deceased__c', 'Deceased'), ('Department', 'Department'), ('npe01__SystemAccountProcessor__c', 'DEPRECATED - _SYSTEM: ACCOUNT PROCESSOR'), ('Description', 'Description'), ('DM_Current_grade__c', 'DM - Current grade'), ('DoNotCall', 'Do Not Call'), ('npsp__Do_Not_Contact__c', 'Do Not Contact'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('npsp__Exclude_from_Household_Formal_Greeting__c', 'Exclude from Household Formal Greeting'), ('npsp__Exclude_from_Household_Informal_Greeting__c', 'Exclude from Household Informal Greeting'), ('npsp__Exclude_from_Household_Name__c', 'Exclude from Household Name'), ('Expected_graduation_year__c', 'Expected graduation year'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('npo02__FirstCloseDate__c', 'First Gift Date'), ('FirstName', 'First Name'), ('npsp__First_Soft_Credit_Amount__c', 'First Soft Credit Amount'), ('npsp__First_Soft_Credit_Date__c', 'First Soft Credit Date'), ('Gender__c', 'Gender'), ('Gender_Other__c', 'Gender (Other)'), ('Have_reliable_internet_access_at_home__c', 'Have reliable internet access at home?'), ('HomePhone', 'Home Phone'), ('npo02__Household__c', 'Household'), ('npo02__Household_Naming_Order__c', 'Household Naming Order'), ('How_did_you_hear_about_us__c', 'How did you hear about us?'), ('How_did_you_hear_about_us_other__c', 'How did you hear about us (Other)'), ('Individual', 'Individual'), ('individualMerged', 'Individual Merged'), ('npo02__LargestAmount__c', 'Largest Gift'), ('npsp__Largest_Soft_Credit_Amount__c', 'Largest Soft Credit Amount'), ('npsp__Largest_Soft_Credit_Date__c', 'Largest Soft Credit Date'), ('npo02__LastOppAmount__c', 'Last Gift Amount'), ('npo02__LastCloseDate__c', 'Last Gift Date'), ('npo02__LastMembershipAmount__c', 'Last Membership Amount'), ('npo02__LastMembershipDate__c', 'Last Membership Date'), ('npo02__LastMembershipLevel__c', 'Last Membership Level'), ('npo02__LastMembershipOrigin__c', 'Last Membership Origin'), ('LastName', 'Last Name'), ('npsp__Last_Soft_Credit_Amount__c', 'Last Soft Credit Amount'), ('npsp__Last_Soft_Credit_Date__c', 'Last Soft Credit Date'), ('contactUpdatedByLead', 'Lead converted to Contact'), ('LeadSource', 'Lead Source'), ('MailingAddress', 'Mailing Address'), ('MailingCity', 'Mailing City'), ('MailingCountry', 'Mailing Country'), ('MailingCountryCode', 'Mailing Country Code'), ('MailingGeocodeAccuracy', 'Mailing Geocode Accuracy'), ('MailingLatitude', 'Mailing Latitude'), ('MailingLongitude', 'Mailing Longitude'), ('MailingState', 'Mailing State/Province'), ('MailingStateCode', 'Mailing State/Province Code'), ('MailingStreet', 'Mailing Street'), ('MailingPostalCode', 'Mailing Zip/Postal Code'), ('npo02__MembershipEndDate__c', 'Membership End Date'), ('npo02__MembershipJoinDate__c', 'Membership Join Date'), ('MiddleName', 'Middle Name'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('npo02__Naming_Exclusions__c', 'Naming Exclusions'), ('npo02__OppsClosedLastNDays__c', 'Number of Gifts Last N Days'), ('npo02__OppsClosedLastYear__c', 'Number of Gifts Last Year'), ('npo02__OppsClosedThisYear__c', 'Number of Gifts This Year'), ('npo02__OppsClosed2YearsAgo__c', 'Number of Gifts Two Years Ago'), ('npo02__NumberOfMembershipOpps__c', 'Number of Memberships'), ('npsp__Number_of_Soft_Credits__c', 'Number of Soft Credits'), ('npsp__Number_of_Soft_Credits_Last_N_Days__c', 'Number of Soft Credits Last N Days'), ('npsp__Number_of_Soft_Credits_Last_Year__c', 'Number of Soft Credits Last Year'), ('npsp__Number_of_Soft_Credits_This_Year__c', 'Number of Soft Credits This Year'), ('npsp__Number_of_Soft_Credits_Two_Years_Ago__c', 'Number of Soft Credits Two Years Ago'), ('OtherAddress', 'Other Address'), ('OtherCity', 'Other City'), ('OtherCountry', 'Other Country'), ('OtherCountryCode', 'Other Country Code'), ('OtherGeocodeAccuracy', 'Other Geocode Accuracy'), ('OtherLatitude', 'Other Latitude'), ('OtherLongitude', 'Other Longitude'), ('OtherPhone', 'Other Phone'), ('OtherState', 'Other State/Province'), ('OtherStateCode', 'Other State/Province Code'), ('OtherStreet', 'Other Street'), ('OtherPostalCode', 'Other Zip/Postal Code'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent_Guardian_email__c', 'Parent/Guardian email'), ('Parent_Guardian_first_name__c', 'Parent/Guardian first name'), ('Parent_Guardian_last_name__c', 'Parent/Guardian last name'), ('Parent_Guardian_phone__c', 'Parent/Guardian phone'), ('npe01__HomeEmail__c', 'Personal Email'), ('Phone', 'Phone'), ('npe01__Preferred_Email__c', 'Preferred Email'), ('npe01__PreferredPhone__c', 'Preferred Phone'), ('npe01__Primary_Address_Type__c', 'Primary Address Type'), ('npsp__Primary_Affiliation__c', 'Primary Affiliation'), ('npe01__Private__c', 'Private'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ReportsTo', 'Reports To'), ('Salutation', 'Salutation'), ('npe01__Secondary_Address_Type__c', 'Secondary Address Type'), ('npo02__SmallestAmount__c', 'Smallest Gift'), ('npsp__Soft_Credit_Last_N_Days__c', 'Soft Credit Last N Days'), ('npo02__Soft_Credit_Last_Year__c', 'Soft Credit Last Year'), ('npo02__Soft_Credit_This_Year__c', 'Soft Credit This Year'), ('npo02__Soft_Credit_Total__c', 'Soft Credit Total'), ('npo02__Soft_Credit_Two_Years_Ago__c', 'Soft Credit Two Years Ago'), ('Suffix', 'Suffix'), ('Title', 'Title'), ('npo02__TotalOppAmount__c', 'Total Gifts'), ('npo02__OppAmountLastNDays__c', 'Total Gifts Last N Days'), ('npo02__OppAmountLastYear__c', 'Total Gifts Last Year'), ('npo02__OppAmountThisYear__c', 'Total Gifts This Year'), ('npo02__OppAmount2YearsAgo__c', 'Total Gifts Two Years Ago'), ('npo02__TotalMembershipOppAmount__c', 'Total Membership Amount'), ('npo02__NumberOfClosedOpps__c', 'Total Number of Gifts'), ('Use_a_computer_at_home__c', 'Use a computer at home?'), ('Volunteer_area_s_of_interest__c', 'Volunteer area(s) of interest'), ('Which_best_describes_your_ethnicity__c', 'Which best describes your ethnicity?'), ('Race__c', 'Which best describes your race?'), ('Race_Other__c', 'Which best describes your race? (Other)'), ('Why_select_this_particular_class__c', 'Why select this particular class?'), ('Why_select_this_particular_class_Other__c', 'Why select this particular class (Other)'), ('npe01__WorkEmail__c', 'Work Email'), ('npe01__WorkPhone__c', 'Work Phone')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactHistory'
        verbose_name = 'Contact History'
        verbose_name_plural = 'Contact History'
        # keyPrefix = 'None'



class ContactPointTypeConsent(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactpointtypeconsent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactpointtypeconsent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    party = models.ForeignKey('Individual', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact_point_type = models.CharField(max_length=255, verbose_name='Contact Point Type ID', default=models.DEFAULTED_ON_CREATE, choices=[('Email', 'Email'), ('Phone', 'Phone'), ('Web', 'Web'), ('Social', 'Social'), ('MailingAddress', 'Mailing Address')])
    data_use_purpose = models.ForeignKey('DataUsePurpose', models.DO_NOTHING, blank=True, null=True)
    privacy_consent_status = models.CharField(max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('NotSeen', 'Not Seen'), ('Seen', 'Seen'), ('OptIn', 'Opt In'), ('OptOut', 'Opt Out')])
    effective_from = models.DateTimeField(blank=True, null=True)
    effective_to = models.DateTimeField(verbose_name='Effective To ', blank=True, null=True)
    capture_date = models.DateTimeField()
    capture_contact_point_type = models.CharField(max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('Email', 'Email'), ('Phone', 'Phone'), ('Web', 'Web'), ('Social', 'Social'), ('MailingAddress', 'Mailing Address')])
    capture_source = models.CharField(max_length=255)
    double_consent_capture_date = models.DateTimeField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactPointTypeConsent'
        verbose_name = 'Contact Point Type Consent'
        verbose_name_plural = 'Contact Point Type Consent'
        # keyPrefix = '0ZY'



class ContactPointTypeConsentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contact_point_type_consent = models.ForeignKey(ContactPointTypeConsent, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('CaptureContactPointType', 'Capture Contact Point Type'), ('CaptureDate', 'Capture Date'), ('CaptureSource', 'Capture Source'), ('ContactPointType', 'Contact Point Type'), ('created', 'Created.'), ('DataUsePurpose', 'Data Use Purpose'), ('DoubleConsentCaptureDate', 'Double Consent Capture Date'), ('EffectiveFrom', 'Effective From'), ('EffectiveTo', 'Effective To '), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Party', 'Party'), ('PrivacyConsentStatus', 'Privacy Consent Status'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactPointTypeConsentHistory'
        verbose_name = 'Contact Point Type Consent History'
        verbose_name_plural = 'Contact Point Type Consent History'
        # keyPrefix = 'None'



class ContactRequest(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Contact Request Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contactrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    what = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Account, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Equipment_Assignment__c, Equipment__c, Incident__c, Opportunity, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    who = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead, User]
    preferred_phone = models.CharField(max_length=40, verbose_name='Preferred Phone Number', blank=True, null=True)
    preferred_channel = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Phone', 'Phone')])
    status = models.CharField(max_length=40, verbose_name='Request Status', default=models.DEFAULTED_ON_CREATE, choices=[('New', 'New'), ('Attempted', 'Attempted'), ('Contacted', 'Contacted'), ('Abandoned', 'Abandoned')])
    request_reason = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Account', 'Account'), ('Billing', 'Billing'), ('Case', 'Case'), ('General', 'General'), ('Order', 'Order'), ('Product', 'Product'), ('Other', 'Other')], blank=True, null=True)
    request_description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContactRequest'
        verbose_name = 'Contact Request'
        verbose_name_plural = 'Contact Requests'
        # keyPrefix = '0Tz'



class ContactRequestShare(models.Model):
    parent = models.ForeignKey(ContactRequest, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContactRequestShare'
        verbose_name = 'Contact Request Share'
        verbose_name_plural = 'Contact Request Share'
        # keyPrefix = 'None'



class ContactShare(models.Model):
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    contact_access_level = models.CharField(max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContactShare'
        verbose_name = 'Contact Share'
        verbose_name_plural = 'Contact Share'
        # keyPrefix = '03s'



class ContentAsset(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentasset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentasset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, related_name='contentasset_contentdocument_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible_by_external_users = models.BooleanField(verbose_name='Let unauthenticated users see this asset file', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ContentAsset'
        verbose_name = 'Asset File'
        verbose_name_plural = 'Asset Files'
        # keyPrefix = '03S'



class ContentBody(models.Model):
    class Meta(models.Model.Meta):
        db_table = 'ContentBody'
        verbose_name = 'Content Body'
        verbose_name_plural = 'Content Bodies'
        # keyPrefix = '05T'



class ContentDistribution(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_createdby_set', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_owner_set')  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdistribution_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=100, verbose_name='Content Delivery Name')
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey('ContentDocument', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_record = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Account, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, EmailMessage, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, ListEmail, Opportunity, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    preferences_allow_pdfdownload = models.BooleanField(db_column='PreferencesAllowPDFDownload', verbose_name='Allow Download as PDF')
    preferences_allow_original_download = models.BooleanField(verbose_name='Allow Download in Original Format')
    preferences_password_required = models.BooleanField(verbose_name='Require Password to Access Content')
    preferences_notify_on_visit = models.BooleanField(verbose_name='Notify Me of First View or Download')
    preferences_link_latest_version = models.BooleanField(verbose_name='Content Delivery Opens Latest Version')
    preferences_allow_view_in_browser = models.BooleanField(verbose_name='Allow View in the Browser')
    preferences_expires = models.BooleanField(verbose_name='Content Delivery Expires')
    preferences_notify_rndtn_complete = models.BooleanField(verbose_name='Email when Preview Images are Ready')
    expiry_date = models.DateTimeField(verbose_name='Expiration Date', blank=True, null=True)
    password = models.CharField(max_length=36, sf_read_only=models.READ_ONLY, blank=True, null=True)
    view_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_view_date = models.DateTimeField(verbose_name='First Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_view_date = models.DateTimeField(verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    distribution_public_url = models.CharField(max_length=256, verbose_name='External Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_download_url = models.CharField(max_length=256, verbose_name='File Download Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pdf_download_url = models.CharField(max_length=256, verbose_name='PDF Download Link', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistribution'
        verbose_name = 'Content Delivery'
        verbose_name_plural = 'Content Deliveries'
        # keyPrefix = '05D'



class ContentDistributionView(models.Model):
    distribution = models.ForeignKey(ContentDistribution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    parent_view = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='View Date', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_internal = models.BooleanField(verbose_name='Internal View', sf_read_only=models.READ_ONLY, default=False)
    is_download = models.BooleanField(verbose_name='File Downloaded', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentDistributionView'
        verbose_name = 'Content Delivery View'
        verbose_name_plural = 'Content Delivery Views'
        # keyPrefix = '05H'



class ContentDocument(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    archived_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_archivedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    archived_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocument_owner_set', sf_read_only=models.NOT_CREATEABLE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE)
    publish_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    latest_published_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, related_name='contentdocument_latestpublishedversion_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)  # Master Detail Relationship *
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', sf_read_only=models.NOT_CREATEABLE, default='A', choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')], blank=True, null=True)
    sharing_privacy = models.CharField(max_length=40, verbose_name='File Privacy on Records', sf_read_only=models.NOT_CREATEABLE, default='N', choices=[('N', 'Visible to Anyone With Record Access'), ('P', 'Private on Records')], blank=True, null=True)
    content_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_asset = models.ForeignKey(ContentAsset, models.DO_NOTHING, related_name='contentdocument_contentasset_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocument'
        verbose_name = 'Content Document'
        verbose_name_plural = 'Content Documents'
        # keyPrefix = '069'



class ContentDocumentFeed(models.Model):
    parent = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocumentfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentdocumentfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentFeed'
        verbose_name = 'ContentDocument Feed'
        verbose_name_plural = 'ContentDocument Feed'
        # keyPrefix = 'None'



class ContentDocumentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ArchivedBy', 'Archived By'), ('ArchivedDate', 'Archived Date'), ('ContentAsset', 'Asset File Details'), ('created', 'Created.'), ('DeletedBy', 'Deleted By'), ('DeletedDate', 'Deleted Date'), ('contentDocPublished', 'Document Added To Library'), ('contentDocFeatured', 'Document Featured'), ('contentDocRepublished', 'Document Re-added To Library'), ('contentDocUnpublished', 'Document Removed From Library'), ('contentDocSubscribed', 'Document Subscribed to'), ('contentDocUnsubscribed', 'Document Unsubscribed to'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('IsArchived', 'Is Archived'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('PublishStatus', 'Publish Status'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentHistory'
        verbose_name = 'Content Document History'
        verbose_name_plural = 'Content Document History'
        # keyPrefix = 'None'



class ContentDocumentLink(models.Model):
    linked_entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, ListEmail, Opportunity, Order, OrderItem, Organization, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    share_type = models.CharField(max_length=40, choices=[('V', 'Viewer'), ('C', 'Collaborator'), ('I', 'Inferred')], blank=True, null=True)
    visibility = models.CharField(max_length=40, choices=[('AllUsers', 'All Users'), ('InternalUsers', 'Standard Users'), ('SharedUsers', 'Shared Users')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentLink'
        verbose_name = 'Content Document Link'
        verbose_name_plural = 'Content Document Link'
        # keyPrefix = '06A'



class ContentDocumentSubscription(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_comment_sub = models.BooleanField(verbose_name='Is Comment Subscription', sf_read_only=models.READ_ONLY, default=False)
    is_document_sub = models.BooleanField(verbose_name='Is Document Subscription', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentDocumentSubscription'
        verbose_name = 'Content Document Subscription'
        verbose_name_plural = 'Content Document Subscriptions'
        # keyPrefix = '057'



class ContentFolder(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolder_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolder_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentFolder'
        verbose_name = 'Content Folder'
        verbose_name_plural = 'Content Folders'
        # keyPrefix = '07H'



class ContentFolderItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_folder = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolderitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfolderitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderItem'
        verbose_name = 'Content Folder Item'
        verbose_name_plural = 'Content Folder Items'
        # keyPrefix = 'None'



class ContentFolderLink(models.Model):
    parent_entity = models.ForeignKey('ContentWorkspace', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    enable_folder_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('S', 'Started'), ('C', 'Completed'), ('F', 'Failed')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderLink'
        verbose_name = 'Content Folder Link'
        verbose_name_plural = 'Content Folder Links'
        # keyPrefix = '07v'



class ContentFolderMember(models.Model):
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE)
    child_record = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfoldermember_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentfoldermember_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentFolderMember'
        verbose_name = 'Content Folder Member'
        verbose_name_plural = 'Content Folder Members'
        # keyPrefix = '07I'



class ContentHubItem(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_hub_repository = models.ForeignKey('ContentHubRepository', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_id = models.CharField(max_length=255, verbose_name='Parent ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Content size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(verbose_name='Created date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_document_url = models.URLField(verbose_name='External document URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_content_url = models.URLField(verbose_name='External content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_folder = models.BooleanField(verbose_name='Folder', sf_read_only=models.READ_ONLY, default=False)
    file_type = models.CharField(max_length=255, verbose_name='File type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mime_type = models.CharField(max_length=255, verbose_name='Mime type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(verbose_name='Last modified date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_modified_date = models.DateTimeField(verbose_name='Modified date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    updated_by = models.CharField(max_length=255, verbose_name='Updated by', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=500, sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, verbose_name='File extension', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentHubItem'
        verbose_name = 'Files Connect item'
        verbose_name_plural = 'Files Connect items'
        # keyPrefix = '0CH'



class ContentHubRepository(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contenthubrepository_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contenthubrepository_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Repository name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=80, verbose_name='Repository label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=80, verbose_name='Repository type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentHubRepository'
        verbose_name = 'Files Connect repository'
        verbose_name_plural = 'Files Connect repositories'
        # keyPrefix = '0XC'



class ContentNote(models.Model):
    title = models.CharField(max_length=255)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentnote_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentnote_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    text_preview = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    file_extension = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latest_published_version = models.ForeignKey('ContentVersion', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentnote_owner_set', sf_read_only=models.NOT_UPDATEABLE)
    content = models.TextField(blank=True, null=True)
    is_read_only = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    sharing_privacy = models.CharField(max_length=40, verbose_name='Note Privacy on Records', default=models.DEFAULTED_ON_CREATE, choices=[('N', 'Visible to Anyone With Record Access'), ('P', 'Private on Records')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentNote'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '069'



class ContentNotification(models.Model):
    nature = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    entity_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_identifier = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentDocument, ContentVersion, ContentWorkspace, ContentWorkspacePermission, User]
    subject = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    text = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentNotification'
        verbose_name = 'Content Notification'
        verbose_name_plural = 'Content Notifications'
        # keyPrefix = '05V'



class ContentTagSubscription(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentTagSubscription'
        verbose_name = 'Content Tag Subscription'
        verbose_name_plural = 'Content Tag Subscriptions'
        # keyPrefix = '05Q'



class ContentUserSubscription(models.Model):
    subscriber_user = models.ForeignKey('User', models.DO_NOTHING, related_name='contentusersubscription_subscriberuser_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    subscribed_to_user = models.ForeignKey('User', models.DO_NOTHING, related_name='contentusersubscription_subscribedtouser_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentUserSubscription'
        verbose_name = 'Content User Subscription'
        verbose_name_plural = 'Content User Subscriptions'
        # keyPrefix = '05S'



class ContentVersion(models.Model):
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_latest = models.BooleanField(sf_read_only=models.READ_ONLY)
    content_url = models.URLField(verbose_name='Content URL', blank=True, null=True)
    content_body = models.ForeignKey(ContentBody, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    version_number = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    reason_for_change = models.CharField(max_length=1000, blank=True, null=True)
    sharing_option = models.CharField(max_length=40, verbose_name='Prevent others from sharing and unsharing', default=models.DEFAULTED_ON_CREATE, choices=[('A', 'Freeze Sharing Off'), ('R', 'Freeze Sharing On')])
    sharing_privacy = models.CharField(max_length=40, verbose_name='File Privacy on Records', default=models.DEFAULTED_ON_CREATE, choices=[('N', 'Visible to Anyone With Record Access'), ('P', 'Private on Records')])
    path_on_client = models.CharField(max_length=500, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    content_modified_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    content_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_contentmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    positive_rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    negative_rating_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_boost = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    featured_content_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_owner_set')
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentversion_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    tag_csv = models.TextField(verbose_name='Tags', blank=True, null=True)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY)
    publish_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Private Library')])
    version_data = models.TextField(blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_publish_location = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentWorkspace, Contract, Dashboard, DashboardComponent, EmailMessage, EmailTemplate, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, ListEmail, Opportunity, Order, OrderItem, Organization, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    origin = models.CharField(max_length=40, verbose_name='Content Origin', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('C', 'Content'), ('H', 'Chatter')])
    content_location = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('S', 'Salesforce'), ('E', 'External'), ('L', 'Social Customer Service')])
    text_preview = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_document_info1 = models.CharField(max_length=1000, blank=True, null=True)
    external_document_info2 = models.CharField(max_length=1000, blank=True, null=True)
    external_data_source = models.ForeignKey('ExternalDataSource', models.DO_NOTHING, blank=True, null=True)
    checksum = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_major_version = models.BooleanField(verbose_name='Major Version', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_asset_enabled = models.BooleanField(verbose_name='Asset File Enabled', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersion'
        verbose_name = 'Content Version'
        verbose_name_plural = 'Content Versions'
        # keyPrefix = '068'



class ContentVersionComment(models.Model):
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_comment = models.TextField(verbose_name='Version Comment', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionComment'
        verbose_name = 'Content Version Comment'
        verbose_name_plural = 'Content Version Comments'
        # keyPrefix = '05C'



class ContentVersionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ContentUrl', 'Content URL'), ('created', 'Created.'), ('Description', 'Description'), ('ExternalDataSource', 'External Data Source'), ('ExternalDocumentInfo1', 'External Document Info1'), ('ExternalDocumentInfo2', 'External Document Info2'), ('feedEvent', 'Feed event'), ('SharingPrivacy', 'File Privacy on Records'), ('individualMerged', 'Individual Merged'), ('Language', 'Language'), ('IsMajorVersion', 'Major Version'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('SharingOption', 'Prevent others from sharing and unsharing'), ('ReasonForChange', 'Reason For Change'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', 'Title'), ('contentVersionCommented', 'Version Commented'), ('contentVersionCreated', 'Version Created'), ('contentVersionDataReplaced', 'Version Data Replaced'), ('contentVersionDeleted', 'Version Deleted'), ('contentVersionDownloaded', 'Version Downloaded'), ('contentVersionRated', 'Version Rated'), ('contentVersionUpdated', 'Version Updated'), ('contentVersionViewed', 'Version Viewed')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionHistory'
        verbose_name = 'Content Version History'
        verbose_name_plural = 'Content Version History'
        # keyPrefix = 'None'



class ContentVersionRating(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_version = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    rating = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_comment = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentVersionRating'
        verbose_name = 'Content Version Rating'
        verbose_name_plural = 'Content Version Ratings'
        # keyPrefix = '05J'



class ContentWorkspace(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    tag_model = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='U', choices=[('U', 'Unrestricted'), ('G', 'Guided'), ('R', 'Restricted')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspace_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspace_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    default_record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_restrict_content_types = models.BooleanField(verbose_name='Restrict Record Types', sf_read_only=models.READ_ONLY, default=False)
    is_restrict_linked_content_types = models.BooleanField(verbose_name='Restrict Linked Record Types', sf_read_only=models.READ_ONLY, default=False)
    workspace_type = models.CharField(max_length=40, verbose_name='Library Type', sf_read_only=models.READ_ONLY, default='R', choices=[('R', 'Regular'), ('B', 'Asset System')], blank=True, null=True)
    should_add_creator_membership = models.BooleanField(verbose_name='Add Creator Membership', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    last_workspace_activity_date = models.DateTimeField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    root_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', blank=True, null=True)
    workspace_image = models.ForeignKey(ContentAsset, models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspace'
        verbose_name = 'Library'
        verbose_name_plural = 'Libraries'
        # keyPrefix = '058'



class ContentWorkspaceDoc(models.Model):
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_owner = models.BooleanField(verbose_name='Is Owning Library', sf_read_only=models.READ_ONLY, default=False)
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceDoc'
        verbose_name = 'Library Document'
        verbose_name_plural = 'Library Documents'
        # keyPrefix = '059'



class ContentWorkspaceMember(models.Model):
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_workspace_permission = models.ForeignKey('ContentWorkspacePermission', models.DO_NOTHING, blank=True, null=True)
    member = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    member_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('U', 'User'), ('G', 'Group')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceMember'
        verbose_name = 'Library Member'
        verbose_name_plural = 'Library Members'
        # keyPrefix = '05A'



class ContentWorkspacePermission(models.Model):
    name = models.CharField(max_length=255)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Custom', choices=[('Admin', 'Library Administrator'), ('Author', 'Author'), ('Viewer', 'Viewer'), ('Custom', 'Custom')], blank=True, null=True)
    permissions_manage_workspace = models.BooleanField(verbose_name='Manage Library')
    permissions_add_content = models.BooleanField(verbose_name='Add Content')
    permissions_add_content_obo = models.BooleanField(db_column='PermissionsAddContentOBO', verbose_name='Add Content on Behalf of Others')
    permissions_archive_content = models.BooleanField(verbose_name='Archive Content')
    permissions_delete_content = models.BooleanField(verbose_name='Delete Content')
    permissions_feature_content = models.BooleanField(verbose_name='Feature Content')
    permissions_view_comments = models.BooleanField(verbose_name='View Comment')
    permissions_add_comment = models.BooleanField(verbose_name='Add Comment')
    permissions_modify_comments = models.BooleanField(verbose_name='Modify Comments')
    permissions_tag_content = models.BooleanField(verbose_name='Tag Content')
    permissions_deliver_content = models.BooleanField(verbose_name='Deliver Content')
    permissions_chatter_sharing = models.BooleanField(verbose_name='Attach or Share Content')
    permissions_organize_file_and_folder = models.BooleanField(verbose_name='Organize File and Content Folder')
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspacepermission_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contentworkspacepermission_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspacePermission'
        verbose_name = 'Library Permission'
        verbose_name_plural = 'Library Permissions'
        # keyPrefix = '05P'



class ContentWorkspaceSubscription(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_workspace = models.ForeignKey(ContentWorkspace, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ContentWorkspaceSubscription'
        verbose_name = 'Content Workspace Subscription'
        verbose_name_plural = 'Content Workspace Subscriptions'
        # keyPrefix = '05R'



class Contract(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING)  # Master Detail Relationship *
    owner_expiration_notice = models.CharField(max_length=40, choices=[('15', '15 Days'), ('30', '30 Days'), ('45', '45 Days'), ('60', '60 Days'), ('90', '90 Days'), ('120', '120 Days')], blank=True, null=True)
    start_date = models.DateField(verbose_name='Contract Start Date', blank=True, null=True)
    end_date = models.DateField(verbose_name='Contract End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, verbose_name='Billing State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, verbose_name='Shipping State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    contract_term = models.IntegerField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_owner_set')
    status = models.CharField(max_length=40, choices=[('In Approval Process', 'In Approval Process'), ('Activated', 'Activated'), ('Draft', 'Draft')], default=models.DEFAULTED_ON_CREATE)
    company_signed = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_companysigned_set', blank=True, null=True)
    company_signed_date = models.DateField(blank=True, null=True)
    customer_signed = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    customer_signed_title = models.CharField(max_length=40, blank=True, null=True)
    customer_signed_date = models.DateField(blank=True, null=True)
    special_terms = models.TextField(blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_activatedby_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')])
    description = models.TextField(blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    last_approved_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contract_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contract'
        verbose_name = 'Contract'
        verbose_name_plural = 'Contracts'
        # keyPrefix = '800'



class ContractContactRole(models.Model):
    contract = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractcontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractcontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ContractContactRole'
        verbose_name = 'Contract Contact Role'
        verbose_name_plural = 'Contract Contact Role'
        # keyPrefix = '02a'



class ContractFeed(models.Model):
    parent = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractFeed'
        verbose_name = 'Contract Feed'
        verbose_name_plural = 'Contract Feed'
        # keyPrefix = 'None'



class ContractHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingCountryCode', 'Billing Country Code'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStateCode', 'Billing State/Province Code'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('CompanySigned', 'Company Signed By'), ('CompanySignedDate', 'Company Signed Date'), ('contractActivation', 'Contract Activated.'), ('contractConversion', 'Contract Converted.'), ('contractDraft', 'Contract Draft.'), ('EndDate', 'Contract End Date'), ('contractExpiration', 'Contract Expired.'), ('contractApproval', 'Contract in Approval.'), ('Name', 'Contract Name'), ('Owner', 'Contract Owner'), ('StartDate', 'Contract Start Date'), ('ContractTerm', 'Contract Term (months)'), ('contractTermination', 'Contract Terminated.'), ('created', 'Created.'), ('CustomerSigned', 'Customer Signed By'), ('CustomerSignedDate', 'Customer Signed Date'), ('CustomerSignedTitle', 'Customer Signed Title'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('OwnerExpirationNotice', 'Owner Expiration Notice'), ('Pricebook2', 'Price Book'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingCountryCode', 'Shipping Country Code'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStateCode', 'Shipping State/Province Code'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('SpecialTerms', 'Special Terms'), ('Status', 'Status')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ContractHistory'
        verbose_name = 'Contract History'
        verbose_name_plural = 'Contract History'
        # keyPrefix = 'None'



class ContractStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contractstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ContractStatus'
        verbose_name = 'Contract Status Value'
        verbose_name_plural = 'Contract Status Value'
        # keyPrefix = 'None'



class CorsWhitelistEntry(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='corswhitelistentry_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='corswhitelistentry_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    url_pattern = models.CharField(max_length=255, verbose_name='Origin URL Pattern')
    class Meta(models.Model.Meta):
        db_table = 'CorsWhitelistEntry'
        verbose_name = 'CORS Whitelist Origin'
        verbose_name_plural = 'CORS Whitelist Origins'
        # keyPrefix = '074'



class CronJobDetail(models.Model):
    name = models.CharField(max_length=255, verbose_name='Job Name', sf_read_only=models.READ_ONLY)
    job_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('1', 'Data Export'), ('3', 'Dashboard Refresh'), ('4', 'Reporting Snapshot'), ('7', 'Scheduled Apex'), ('8', 'Report Run'), ('9', 'Batch Job'), ('A', 'Reporting Notification')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CronJobDetail'
        verbose_name = 'Cron Job'
        verbose_name_plural = 'Cron Job'
        # keyPrefix = '08a'



class CronTrigger(models.Model):
    cron_job_detail = models.ForeignKey(CronJobDetail, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    next_fire_time = models.DateTimeField(verbose_name='Next Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    previous_fire_time = models.DateTimeField(verbose_name='Previous Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=16, verbose_name='Job State', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_time = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_time = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    cron_expression = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Java Time Zone Id', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='crontrigger_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    times_triggered = models.IntegerField(verbose_name='Job Fired Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CronTrigger'
        verbose_name = 'Scheduled Jobs'
        verbose_name_plural = 'Scheduled Jobs'
        # keyPrefix = '08e'



class CspTrustedSite(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Trusted Site Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='csptrustedsite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='csptrustedsite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    endpoint_url = models.CharField(max_length=255, verbose_name='Trusted Site URL')
    description = models.TextField(blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    context = models.CharField(max_length=255, choices=[('All', 'All'), ('LEX', 'LEX'), ('Communities', 'Communities')])
    class Meta(models.Model.Meta):
        db_table = 'CspTrustedSite'
        verbose_name = 'Content Security Policy Trusted Site'
        verbose_name_plural = 'Content Security Policy Trusted Sites'
        # keyPrefix = '08y'



class CustomBrand(models.Model):
    parent = models.ForeignKey('Organization', models.DO_NOTHING)  # Reference to tables [Organization, Stamp, Topic] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrand_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrand_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrand'
        verbose_name = 'Custom Brand'
        verbose_name_plural = 'Custom Brand'
        # keyPrefix = '07W'



class CustomBrandAsset(models.Model):
    custom_brand = models.ForeignKey(CustomBrand, models.DO_NOTHING)  # Master Detail Relationship *
    asset_category = models.CharField(max_length=40, choices=[('MotifZeronaryColor', 'Zeronary motif color'), ('MotifPrimaryColor', 'Primary motif color'), ('MotifSecondaryColor', 'Secondary motif color'), ('MotifTertiaryColor', 'Tertiary motif color'), ('MotifQuaternaryColor', 'Quaternary motif color'), ('MotifZeronaryComplementColor', 'Zeronary motif colors compelement color'), ('MotifPrimaryComplementColor', 'Primary motif colors compelement color'), ('MotifTertiaryComplementColor', 'Tertiary motif colors compelement color'), ('MotifQuaternaryComplementColor', 'Quaternary motif colors complement color'), ('PageHeader', 'Page Header'), ('PageFooter', 'Page Footer'), ('LoginFooterText', 'Footer text displayed on the login page'), ('LoginLogoImageId', 'Logo image displayed on the login page'), ('LargeLogoImageId', 'Large logo image'), ('MediumLogoImageId', 'Medium logo image'), ('SmallLogoImageId', 'Small logo image'), ('StaticLogoImageUrl', 'Static logo image url'), ('LoginQuaternaryColor', 'Login background color'), ('LoginRightFrameUrl', 'Login right frame url'), ('LogoAssetId', 'Logo asset image'), ('LoginPrimaryColor', 'Login primary color'), ('LoginBackgroundImageUrl', 'Background image url')])
    text_asset = models.CharField(max_length=333, blank=True, null=True)
    asset_source = models.ForeignKey(ContentAsset, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [ContentAsset, Document]
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrandasset_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custombrandasset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomBrandAsset'
        verbose_name = 'Custom Brand Asset'
        verbose_name_plural = 'Custom Brand Asset'
        # keyPrefix = '07X'



class CustomHelpMenuItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customhelpmenuitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customhelpmenuitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('CustomHelpMenuSection', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    master_label = models.CharField(max_length=100, verbose_name='Item Label')
    link_url = models.URLField()
    sort_order = models.IntegerField()
    class Meta(models.Model.Meta):
        db_table = 'CustomHelpMenuItem'
        verbose_name = 'Custom Help Menu Item'
        verbose_name_plural = 'Custom Help Menu Items'
        # keyPrefix = '2Ca'



class CustomHelpMenuSection(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Section Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customhelpmenusection_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customhelpmenusection_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'CustomHelpMenuSection'
        verbose_name = 'Custom Help Menu Section'
        verbose_name_plural = 'Custom Help Menu Sections'
        # keyPrefix = '2Cx'



class CustomHttpHeader(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customhttpheader_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='customhttpheader_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('ExternalDataSource', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [ExternalDataSource, NamedCredential] Master Detail Relationship *
    header_field_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    header_field_value = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomHttpHeader'
        verbose_name = 'Custom HTTP Header'
        verbose_name_plural = 'Custom HTTP Headers'
        # keyPrefix = '0XH'



class CustomObjectUserLicenseMetrics(models.Model):
    metrics_date = models.DateField(sf_read_only=models.READ_ONLY)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_object_id = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    custom_object_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Enterprise', 'Enterprise'), ('Light', 'Light')], blank=True, null=True)
    custom_object_name = models.CharField(max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    object_count = models.IntegerField(verbose_name='Count of Objects assigned', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomObjectUserLicenseMetrics'
        verbose_name = 'Custom Object Usage By User License Metric'
        verbose_name_plural = 'Custom Object Usage By User License Metrics'
        # keyPrefix = '3NA'



class CustomPermission(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_protected = models.BooleanField(verbose_name='Protected Component', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermission_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermission_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'CustomPermission'
        verbose_name = 'Custom Permission'
        verbose_name_plural = 'Custom Permissions'
        # keyPrefix = '0CP'



class CustomPermissionDependency(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermissiondependency_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='custompermissiondependency_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, related_name='custompermissiondependency_custompermission_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    required_custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, related_name='custompermissiondependency_requiredcustompermission_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'CustomPermissionDependency'
        verbose_name = 'Custom Permission Dependency'
        verbose_name_plural = 'Custom Permission Dependencies'
        # keyPrefix = '0PD'



class Dashboard(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    folder = models.ForeignKey('Folder', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, User]
    folder_name = models.CharField(max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Dashboard Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    left_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    middle_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')], blank=True, null=True)
    right_size = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    running_user = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboard_runninguser_set', sf_read_only=models.READ_ONLY)
    title_color = models.IntegerField(sf_read_only=models.READ_ONLY)
    title_size = models.IntegerField(sf_read_only=models.READ_ONLY)
    text_color = models.IntegerField(sf_read_only=models.READ_ONLY)
    background_start = models.IntegerField(verbose_name='Starting Color', sf_read_only=models.READ_ONLY)
    background_end = models.IntegerField(verbose_name='Ending Color', sf_read_only=models.READ_ONLY)
    background_direction = models.CharField(max_length=40, verbose_name='Background Fade Direction', sf_read_only=models.READ_ONLY, default='Diagonal', choices=[('TopToBottom', 'Top to Bottom'), ('LeftToRight', 'Left to Right'), ('Diagonal', 'Diagonal')])
    type = models.CharField(max_length=40, verbose_name='Dashboard Running User', sf_read_only=models.READ_ONLY, default='SpecifiedUser', choices=[('SpecifiedUser', 'Run as specified user'), ('LoggedInUser', 'Run as logged-in user'), ('MyTeamUser', 'Let authorized users change running user')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_refreshed_date = models.CharField(max_length=256, verbose_name='Last refreshed for this user', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard_result_running_user = models.CharField(max_length=256, verbose_name='Running as', sf_read_only=models.READ_ONLY, blank=True, null=True)
    color_palette = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Default', 'Default Palette'), ('gray', 'Gray Palette'), ('colorSafe', 'Color Safe Palette'), ('unity', 'Aurora Palette'), ('justice', 'Wildflowers Palette'), ('nightfall', 'Nightfall Palette'), ('sunrise', 'Sunrise Palette'), ('bluegrass', 'Bluegrass Palette'), ('tropic', 'Ocean Palette'), ('heat', 'Heat Palette'), ('dusk', 'Dusk Palette'), ('pond', 'Pond Palette'), ('watermelon', 'Watermelon Palette'), ('fire', 'Fire Palette'), ('water', 'Water Palette'), ('earth', 'Lake Palette'), ('accessible', 'Mineral(Accessible) Palette')], blank=True, null=True)
    chart_theme = models.CharField(max_length=40, verbose_name='Chart Background', sf_read_only=models.READ_ONLY, choices=[('light', 'Light Background'), ('dark', 'Dark Background')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Dashboard'
        verbose_name = 'Dashboard'
        verbose_name_plural = 'Dashboards'
        # keyPrefix = '01Z'



class DashboardComponent(models.Model):
    name = models.CharField(max_length=80, verbose_name='Dashboard Component Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dashboard = models.ForeignKey(Dashboard, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    custom_report = models.ForeignKey('Report', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponent'
        verbose_name = 'Dashboard Component'
        verbose_name_plural = 'Dashboard Components'
        # keyPrefix = '01a'



class DashboardComponentFeed(models.Model):
    parent = models.ForeignKey(DashboardComponent, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardcomponentfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardcomponentfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardComponentFeed'
        verbose_name = 'Dashboard Component Feed'
        verbose_name_plural = 'Dashboard Component Feed'
        # keyPrefix = 'None'



class DashboardFeed(models.Model):
    parent = models.ForeignKey(Dashboard, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dashboardfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DashboardFeed'
        verbose_name = 'Dashboard Feed'
        verbose_name_plural = 'Dashboard Feed'
        # keyPrefix = 'None'



class DataAssessmentFieldMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Field Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentfieldmetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentfieldmetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data_assessment_metric = models.ForeignKey('DataAssessmentMetric', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_in_sync = models.IntegerField(verbose_name='Number of Matched Records that have the same value for this field as Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(verbose_name='Number of Matched Records that have different value for this field than Data.com', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_blanks = models.IntegerField(verbose_name='Number of Matched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched_blanks = models.IntegerField(verbose_name='Number of Unmatched Records that have blanks for this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentFieldMetric'
        verbose_name = 'Data Assessment Field Metric'
        verbose_name_plural = 'Data Assessment Field Metrics'
        # keyPrefix = '03Q'



class DataAssessmentMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentmetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentmetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    num_total = models.IntegerField(verbose_name='Total Number of Records to access', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_processed = models.IntegerField(verbose_name='Number of Processed Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched = models.IntegerField(verbose_name='Number of Matched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_matched_different = models.IntegerField(verbose_name='Number of Matched Records with different field values', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_unmatched = models.IntegerField(verbose_name='Number of Unmatched Records', sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_duplicates = models.IntegerField(verbose_name='Number of Duplicates', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentMetric'
        verbose_name = 'Data Assessment Metric'
        verbose_name_plural = 'Data Assessment Metrics'
        # keyPrefix = '03P'



class DataAssessmentValueMetric(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Data Assessment Field Value Metric', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentvaluemetric_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataassessmentvaluemetric_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data_assessment_field_metric = models.ForeignKey(DataAssessmentFieldMetric, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    field_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_count = models.IntegerField(verbose_name='Number of times this value appears in this field', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataAssessmentValueMetric'
        verbose_name = 'Data Assessment Field Value Metric'
        verbose_name_plural = 'Data Assessment Field Value Metrics'
        # keyPrefix = '03R'



class DataIntegrationRecordPurchasePermission(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataintegrationrecordpurchasepermission_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='dataintegrationrecordpurchasepermission_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='dataintegrationrecordpurchasepermission_user_set')  # Master Detail Relationship *
    external_object = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', choices=[('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Incident__c', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Filter_Group__mdt', None), ('npsp__Filter_Rule__mdt', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Rollup__mdt', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('Survey__c', None)], blank=True, null=True)
    user_record_purchase_limit = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataIntegrationRecordPurchasePermission'
        verbose_name = 'DataIntegrationRecordPurchasePermission'
        verbose_name_plural = 'DataIntegrationRecordPurchasePermissions'
        # keyPrefix = '0Gy'



class DataStatistics(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='ExternalId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stat_type = models.CharField(max_length=255, verbose_name='StatType', sf_read_only=models.READ_ONLY, choices=[('RecordCount', 'RecordCount'), ('UserAccessRecordCount', 'UserAccessRecordCount'), ('DeletedCount', 'DeletedCount')], blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('AacObjectSetting', None), ('AcceptedEventRelation', None), ('AcceptedRecommendation', None), ('Account', None), ('AccountContactRole', None), ('AccountPartner', None), ('ActionApex', None), ('ActionAssignEscalate', None), ('ActionAssignTeam', None), ('ActionChatterPost', None), ('ActionChatterPostRecipient', None), ('ActionEmail', None), ('ActionEmailRecipient', None), ('ActionFieldUpdate', None), ('ActionFlow', None), ('ActionFlowParam', None), ('ActionLink', None), ('ActionLinkGroup', None), ('ActionLinkGroupAssoc', None), ('ActionLinkGroupTemplate', None), ('ActionLinkTemplate', None), ('ActionLinkTemplateBinding', None), ('ActionLinkUserState', None), ('ActionOutboundMessage', None), ('ActionOverride', None), ('ActionOverrideMetrics', None), ('ActionQuickCreate', None), ('ActionResponse', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('ActivityEngagementRollup', None), ('ActivityHistory', None), ('ActivityMetricRollupBase', None), ('ActivityRecurrence2', None), ('ActivityRecurrence2Exception', None), ('ActivityRelation', None), ('AdditionalNumber', None), ('AddressableEventInterface', None), ('AddressCountry', None), ('AddressState', None), ('AdminUser', None), ('AEJobTracker', None), ('AggregateResult', None), ('AllInstalledPackageVersion', None), ('AllManagedClassRelationship', None), ('AllManagedMemberOption', None), ('AllManagedPackageMember', None), ('AllOrganization', None), ('AllOrganizationValue', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllPackageVersionLm', None), ('AllUsersBasic', None), ('AnalyticAction', None), ('AnalyticActionConfiguration', None), ('AnalyticCondition', None), ('AnalyticNotification', None), ('AnalyticNotificationTracker', None), ('AnalyticRecordUserAccess', None), ('AnalyticThreshold', None), ('AndroidPushApplicationSetup', None), ('AnimationRule', None), ('Announcement', None), ('ApexClass', None), ('ApexClassIdentifier', None), ('ApexClassIdentifierRelationship', None), ('ApexClassMember', None), ('ApexCodeCoverage', None), ('ApexCodeCoverageAggregate', None), ('ApexComponent', None), ('ApexComponentAttribute', None), ('ApexComponentMember', None), ('ApexDebuggerBreakpoint', None), ('ApexDebuggerEvent', None), ('ApexDebuggerRequest', None), ('ApexDebuggerSession', None), ('ApexEmailNotification', None), ('ApexExecutionOverlayAction', None), ('ApexExecutionOverlayResult', None), ('ApexLog', None), ('ApexOrgWideCoverage', None), ('ApexPackage', None), ('ApexPackageIdentifier', None), ('ApexPage', None), ('ApexPageInfo', None), ('ApexPageMember', None), ('ApexTestQueueItem', None), ('ApexTestResult', None), ('ApexTestResultLimits', None), ('ApexTestRunResult', None), ('ApexTestRunResultMetrics', None), ('ApexTestSuite', None), ('ApexTrigger', None), ('ApexTriggerMember', None), ('ApiCapture', None), ('ApiLoginKey', None), ('ApiUsage', None), ('AppAnalyticsQueryRequest', None), ('AppBrand', None), ('AppDefinition', None), ('AppIpRange', None), ('ApplePushApplicationSetup', None), ('Application', None), ('ApplicationDependency', None), ('AppManifest', None), ('AppManifestVersion', None), ('AppMenuItem', None), ('AppNotificationType', None), ('AppNotifTypeOrgSetting', None), ('AppNotifTypeUserSetting', None), ('Approval', None), ('AppTabMember', None), ('AqtAwrData', None), ('AqtCompoundRecommendedIndex', None), ('AqtCreatedIndex', None), ('AqtImportRequest', None), ('AqtImportRequestIndex', None), ('AqtIncidentDetection', None), ('AqtLongRunningRequestData', None), ('AqtRecommendedIndex', None), ('AqtRIRequestMap', None), ('AQTWorkloadData', None), ('Asset', None), ('AssetRelationship', None), ('AssetTokenEvent', None), ('AssignmentRule', None), ('AssistantInteraction', None), ('AssistantProgress', None), ('AssistantRecommendation', None), ('AssistantRecommendationType', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiBatchOptions', None), ('AsyncApiChunkResults', None), ('AsyncApiJob', None), ('AsyncApiJobOptions', None), ('AsyncApiQueryResult', None), ('AsyncApiTransformationSpec', None), ('AsyncOperationEvent', None), ('AsyncOperationStatus', None), ('AsyncRequest', None), ('AsyncRequestFFX', None), ('AsyncRequestFFXResult', None), ('AttachedContentDocument', None), ('AttachedContentNote', None), ('Attachment', None), ('AudienceMembership', None), ('Auditable', None), ('AuraDefinition', None), ('AuraDefinitionBundle', None), ('AuraDefinitionBundleInfo', None), ('AuraDefinitionChange', None), ('AuraDefinitionInfo', None), ('AuraResource', None), ('AuthConfig', None), ('AuthConfigProviders', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('AuthProvider', None), ('AuthSecurityLevel', None), ('AuthSession', None), ('AutoActivityCaptureMetrics', None), ('AutoResponseRule', None), ('AvroSchema', None), ('B2BCommercePackageMetrics', None), ('B2BCommercePkgOrdersUE', None), ('B2BCommercePkgProductMetrics', None), ('BackgroundOperation', None), ('BaseEventInterface', None), ('BaseEventPackageInterface', None), ('BaseSessionInterface', None), ('BatchApexErrorEvent', None), ('BatchApexRelationship', None), ('BigObjectCounter', None), ('BigObjectsRecordMetrics', None), ('BlacklistedConsumer', None), ('BotSessionsMetrics', None), ('Branch', None), ('BranchMerge', None), ('BrandingSet', None), ('BrandingSetProperty', None), ('BrandingValue', None), ('BrandTemplate', None), ('BuffaloMigrationEvent', None), ('BuffaloMigrationManagement', None), ('BuffaloOrgEstimate', None), ('BuffaloStep', None), ('BusinessHours', None), ('BusinessProcess', None), ('BusinessProcessPicklist', None), ('C2CPermissionBinding', None), ('Calendar', None), ('Calendar2', None), ('Calendar2Definition', None), ('CalendarShare', None), ('CalendarSharing', None), ('CallCenter', None), ('Campaign', None), ('CampaignInfluenceAdjustment', None), ('CampaignInfluenceModel', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Canvas', None), ('CanvasFeedItem', None), ('CaptchaKey', None), ('Case', None), ('CaseContactRole', None), ('CaseEscalation', None), ('CaseHistory2', None), ('CaseSolution', None), ('CaseStatus', None), ('CaseSubjectParticle', None), ('CategoryAccess', None), ('CategoryData', None), ('CategoryJobTask', None), ('CategoryNode', None), ('Certificate', None), ('CertificateIp', None), ('ChangeList', None), ('ChangeListBranch', None), ('ChangeSetDeployHistory', None), ('ChangeSetDeployMessage', None), ('ChangeSetUploadHistory', None), ('ChatSession', None), ('ChatSessionMembers', None), ('ChatterActivity', None), ('ChatterActivityDailyMetrics', None), ('ChatterConversation', None), ('ChatterConversationMember', None), ('ChatterExtension', None), ('ChatterExtensionConfig', None), ('ChatterExtensionInstance', None), ('ChatterGroupConMetrics', None), ('ChatterMessage', None), ('ChatterMessageThread', None), ('ChatterMetrics', None), ('ChatterNowUserFavorites', None), ('ChatterNowUserSettings', None), ('ChatterOrgWideMetrics', None), ('ChatterUniqueContributorDailyMetrics', None), ('ChatterUserNetworkMetrics', None), ('ChunkableEntityChunk', None), ('ChunkableEntityChunk2', None), ('ChunkableEntityTally', None), ('ChunkableEntityTally2', None), ('ChunkableTask', None), ('ChunkableTask2', None), ('CleanActivityLog', None), ('CleanDataService', None), ('CleanEntityError', None), ('CleanInfo', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupMemberRequest', None), ('CollaborationGroupRank', None), ('CollaborationGroupRecord', None), ('CollaborationInvitation', None), ('CollaborativeFilteringItem_to_Item', None), ('CollaborativeFilteringItem2Item', None), ('ColorDefinition', None), ('CombinedAttachment', None), ('CommChannelLayout', None), ('CommChannelLayoutItem', None), ('CommChannelLayoutMapping', None), ('Community', None), ('CompactLayout', None), ('CompactLayoutInfo', None), ('CompactLayoutItem', None), ('CompactLayoutItemInfo', None), ('CompactLayoutMapping', None), ('ComponentAppVersion', None), ('ComponentFeatureDependency', None), ('ComponentInstance', None), ('ComponentInstanceProperty', None), ('ComponentInstancePropListItem', None), ('ComponentObjectDependency', None), ('ComponentResourceLink', None), ('ComponentResponseCache', None), ('ConnectedApplication', None), ('ConnectedApplication2', None), ('ConnectedAppOauthPolicy', None), ('ConnectedAppPlugin', None), ('ConnectedAppSessionPolicy', None), ('ConnectivityAttributes', None), ('ConnectivityDevConfig', None), ('ConsoleConfig', None), ('ConsoleConfigItem', None), ('ConsolePersonalization', None), ('ConsoleSidebarContainer', None), ('Contact', None), ('ContactPointEntityAssocSnapshotLocator', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContainerAsyncRequest', None), ('ContentAsset', None), ('ContentBody', None), ('ContentDispositionAssignment', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentDocumentListViewMapping', None), ('ContentDocumentSubscription', None), ('ContentExternalStorage', None), ('ContentFolder', None), ('ContentFolderDistribution', None), ('ContentFolderItem', None), ('ContentFolderLink', None), ('ContentFolderMember', None), ('ContentHubItem', None), ('ContentHubRepository', None), ('ContentLogMetricsByFileType', None), ('ContentLogMetricsByOrg', None), ('ContentMetrics', None), ('ContentNote', None), ('ContentNotification', None), ('ContentNotificationParam', None), ('ContentOrgMetrics', None), ('ContentReference', None), ('ContentRenditionPolicy', None), ('ContentTagName', None), ('ContentTagSubscription', None), ('ContentUserSubscription', None), ('ContentVersion', None), ('ContentVersionComment', None), ('ContentVersioningPolicy', None), ('ContentVersionMap', None), ('ContentVersionRating', None), ('ContentVersionRenditionContent', None), ('ContentVersionTagName', None), ('ContentWorkspace', None), ('ContentWorkspaceAllowedRecType', None), ('ContentWorkspaceDoc', None), ('ContentWorkspaceMember', None), ('ContentWorkspacePermission', None), ('ContentWorkspaceRecentEvent', None), ('ContentWorkspaceSubscription', None), ('ContextFieldAttributes', None), ('Contract', None), ('ContractContactRole', None), ('ContractStatus', None), ('CooperSettingsMetrics', None), ('CopyEntityTally', None), ('CopyEntityTally2', None), ('CopyExport', None), ('CopyExportChunk', None), ('CopyExportChunk2', None), ('CopyExportObserverInfo', None), ('CopyImport', None), ('CopyImportChunk', None), ('CopyImportChunk2', None), ('CopySuspension', None), ('CorsWhitelistEntry', None), ('CronFiredTrigger', None), ('CronJobDetail', None), ('CronTrigger', None), ('CrtColumn', None), ('CrtLayoutSection', None), ('CrtObject', None), ('CsnDomain', None), ('CspFrameAncestor', None), ('CspTrustedSite', None), ('CustomAppMetrics', None), ('CustomBrand', None), ('CustomBrandAsset', None), ('CustomConsoleComponent', None), ('CustomDataType', None), ('CustomDataTypeComponent', None), ('CustomEntityDefinition', None), ('CustomEntityTranslation', None), ('CustomEntityTruncateInfo', None), ('CustomFieldDataColumn', None), ('CustomFieldDefinition', None), ('CustomFieldMap', None), ('CustomFieldMember', None), ('CustomHelpMenuItem', None), ('CustomHelpMenuSection', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomIndexDefinition', None), ('CustomIndexFieldDefinition', None), ('CustomIndexUsage', None), ('CustomNotificationType', None), ('CustomObjectUsageMetrics', None), ('CustomObjectUserLicenseMetrics', None), ('CustomObjTeamMemberMetric', None), ('CustomPage', None), ('CustomPageItem', None), ('CustomPageProfile', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('CustomSettingNameIndex', None), ('CustomSetup', None), ('CustomSetupDefinition', None), ('CustomShareRowCause', None), ('CustomTabDefinition', None), ('Dashboard', None), ('DashboardCompColResult', None), ('DashboardComponent', None), ('DashboardComponentColumn', None), ('DashboardComponentResult', None), ('DashboardComponentSort', None), ('DashboardFilter', None), ('DashboardFilterItem', None), ('DashboardFilterRepCol', None), ('DashboardGridComponent', None), ('DashboardGridLayout', None), ('DashboardStickyFilter', None), ('DataAssessmentBIMetrics', None), ('DataAssessmentConfigItem', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentRecord', None), ('DataAssessmentValueMetric', None), ('DataCategory', None), ('DataCategoryGroup', None), ('DatacloudAddress', None), ('DatacloudIndustry', None), ('DatacloudIndustryChapter', None), ('DatacloudIndustryCode', None), ('DatacloudIndustryContent', None), ('DatacloudIndustrySubChapter', None), ('DataDotComListPoolMetrics', None), ('DataExportEventInterface', None), ('Dataflow', None), ('DataflowGroupDependency', None), ('DataflowGroupMember', None), ('DataflowGroupTrigger', None), ('DataflowInstance', None), ('DataflowNode', None), ('DataflowNotification', None), ('DataflowRequest', None), ('DataflowTrigger', None), ('DataflowTriggerSource', None), ('DataflowVersion', None), ('DataIntegrationPurchasedRecord', None), ('DataIntegrationRecordPurchasePermission', None), ('DatasetAccess', None), ('DatasetFetch', None), ('DatasetRegister', None), ('DataStatistics', None), ('DataType', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('DBCThumbnail', None), ('DBCThumbnailFilter', None), ('DbLockUsage', None), ('DebugLevel', None), ('DeclarativePlatformMetrics', None), ('DeclinedEventRelation', None), ('DelegateGroup', None), ('DelegateGroupGrant', None), ('DelegateGroupMember', None), ('DependentPicklist', None), ('DeployDirection', None), ('DeployMessage', None), ('DeployRequest', None), ('DeployTestResult', None), ('DevelopmentPackageVersion', None), ('DialerMinutesMetrics', None), ('DirectGroupMember', None), ('DirectMessage', None), ('DirectMessageMember', None), ('DirectMessageMemberActivity', None), ('DivTransferEvent', None), ('Document', None), ('DocumentAttachmentMap', None), ('Domain', None), ('DomainCookieStore', None), ('DomainProvision', None), ('DomainSite', None), ('DoradoRequest', None), ('DoradoRequestEvent', None), ('DrDbHammerRequest', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('DuplicateRuleFilter', None), ('DuplicateRuleFilterItem', None), ('DuplicateRuleMatchRule', None), ('EaasEvent', None), ('EclairNgMap', None), ('EclairNgMapGeoJson', None), ('EltWorkflow', None), ('EmailBrand', None), ('EmailCapture', None), ('EmailConfigEntitySetting', None), ('EmailDisclaimer', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailSyncAdvancedSetting', None), ('EmailSyncConfig', None), ('EmailSyncEntitySetting', None), ('EmailSyncFieldMapping', None), ('EmailSyncValueMapping', None), ('EmailTemp', None), ('EmailTempAttachmentMap', None), ('EmailTemplate', None), ('EmailUserEntitySetting', None), ('EmbeddedServiceBranding', None), ('EmbeddedServiceConfig', None), ('EmbeddedServiceCustomComponent', None), ('EmbeddedServiceCustomLabel', None), ('EmbeddedServiceDetail', None), ('EmbeddedServiceFlow', None), ('EmbeddedServiceFlowConfig', None), ('EmbeddedServiceLabel', None), ('Endorsement', None), ('EngagementEvent', None), ('EngagementHistoryRollup', None), ('EnhancedEmailTemplate', None), ('EnhancedLetterhead', None), ('EntityAssociationDefinitionVersion', None), ('EntityAttributes', None), ('EntityBlacklist', None), ('EntityCategoryGroup', None), ('EntityDataSize', None), ('EntityDefinition', None), ('EntityEventInterface', None), ('EntityFeedLayout', None), ('EntityHistory', None), ('EntityImplements', None), ('EntityIndexingPriority', None), ('EntityLimit', None), ('EntityLock', None), ('EntityParticle', None), ('EntitySharingModel', None), ('EntitySubscription', None), ('EscalationRule', None), ('Event', None), ('EventAssociationItem', None), ('EventAttendee', None), ('EventBusSubscriber', None), ('EventComments', None), ('EventDelivery', None), ('EventDeliveryData', None), ('EventDestination', None), ('EventLogFile', None), ('EventLogFileMetrics', None), ('EventParameter', None), ('EventParameterData', None), ('EventRecurrenceException', None), ('EventRelation', None), ('EventSubscription', None), ('EventSubscriptionData', None), ('EventSubscriptionHandleData', None), ('EventType', None), ('EventTypeDefinition', None), ('EventTypeFieldDefinition', None), ('EventTypeParameter', None), ('EventWhoRelation', None), ('ExchangeUserMapping', None), ('ExecutionPlan', None), ('ExecutionPlanTask', None), ('Experiment', None), ('ExperimentRequest', None), ('ExpressionFilter', None), ('ExpressionFilterCriteria', None), ('ExternalActionParameter', None), ('ExternalCredential', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalIdMap', None), ('ExternalIdMapping', None), ('ExternalizedReference', None), ('ExternalServiceAction', None), ('ExternalServiceDataType', None), ('ExternalServiceListType', None), ('ExternalServiceMapType', None), ('ExternalServiceObjectType', None), ('ExternalServiceOperation', None), ('ExternalServiceParameter', None), ('ExternalServiceProperty', None), ('ExternalServiceRegistration', None), ('ExternalServiceSimpleType', None), ('ExternalServiceType', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('ExtIdentityLoginMetrics', None), ('FeatureLicense', None), ('FeedActionDefinition', None), ('FeedActionState', None), ('FeedAttachment', None), ('FeedChannel', None), ('FeedChannelSubscription', None), ('FeedClumpInfo', None), ('FeedClumpMapping', None), ('FeedComment', None), ('FeedCrossReference', None), ('FeedEntityRead', None), ('FeedEntityUnpublished', None), ('FeedEntry', None), ('FeedFavorite', None), ('FeedFieldHistory', None), ('FeedFilterCriterion', None), ('FeedFilterDefinition', None), ('FeedItem', None), ('FeedLike', None), ('FeedMapping', None), ('FeedMute', None), ('FeedPollChoice', None), ('FeedPollVote', None), ('FeedPost', None), ('FeedPostTemplate', None), ('FeedPostTemplateItem', None), ('FeedRead', None), ('FeedRecommendationInfo', None), ('FeedRevision', None), ('FeedSignal', None), ('FeedTrackedChange', None), ('FieldAttributes', None), ('FieldDefinition', None), ('FieldHistory', None), ('FieldImplements', None), ('FieldMapping', None), ('FieldMappingField', None), ('FieldMappingRow', None), ('FieldPermissions', None), ('FieldSecurityClassification', None), ('FieldSet', None), ('FieldSetItem', None), ('FileFieldData', None), ('FileInspectionResult', None), ('FileSearchActivity', None), ('FirehoseCheckpoint', None), ('FiscalYearSettings', None), ('FlexiPage', None), ('FlexipageComponentMetrics', None), ('FlexipageFieldInstance', None), ('FlexipagePageTypeMetrics', None), ('FlexiPageRegion', None), ('FlexQueueItem', None), ('FlowApexClassDescriptor', None), ('FlowApexClassPropertyDesc', None), ('FlowCategory', None), ('FlowCategoryItem', None), ('FlowDefinition', None), ('FlowDefinitionView', None), ('FlowElementTestCoverage', None), ('FlowExecutionEvent', None), ('FlowExecutionEventMetric', None), ('FlowInterview', None), ('FlowLightningComponent', None), ('FlowLightningComponentParam', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('FlowTestCoverage', None), ('FlowVariableAssignment', None), ('FlowVariableView', None), ('FlowVersionView', None), ('Folder', None), ('FolderClosure', None), ('FolderedContentDocument', None), ('ForecastingAdjustment', None), ('ForecastingCategoryMapping', None), ('ForecastingCompositeKey', None), ('ForecastingDisplayedFamily', None), ('ForecastingFact', None), ('ForecastingItem', None), ('ForecastingItemPivot', None), ('ForecastingOwnerAdjustment', None), ('ForecastingQuota', None), ('ForecastingShare', None), ('ForecastingType', None), ('ForecastingTypeMetrics', None), ('ForecastingTypeToCategory', None), ('ForecastingUserPreference', None), ('ForecastShare', None), ('ForgottenToken', None), ('FormsMetrics', None), ('FormulaFunction', None), ('FormulaFunctionCategory', None), ('FormulaOperator', None), ('FormulaParticle', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('FTestMetadataCatalogEntity', None), ('FTestSystemCatalogEntity', None), ('FTestToolingFLUInfo', None), ('GatherStatsTaskInfo', None), ('GenericContentFolder', None), ('GenericContentFolderItem', None), ('GenericContentFolderMember', None), ('GitHubPushOperation', None), ('GitHubRepositoryLink', None), ('GlobalDbKey', None), ('GlobalOrganization', None), ('GlobalVariable', None), ('GlobalVariableType', None), ('GrantedByLicense', None), ('GridforceJob', None), ('Group', None), ('GroupBlowout', None), ('GroupMember', None), ('GroupSubscription', None), ('HadoopCounter', None), ('HadoopJob', None), ('HammerResultStatus', None), ('HistoricalDataFilter', None), ('HistoricalDataFilterItem', None), ('HistoricalEntityConfig', None), ('HistoricalFieldConfig', None), ('HistoricalSelector', None), ('HistoricalSelectorValue', None), ('HistoricalStaging', None), ('HistoricalTransactionPrefix', None), ('Holiday', None), ('IconDefinition', None), ('IdeaMetrics', None), ('IdeaReputationLevel', None), ('IDEPerspective', None), ('IDEWorkspace', None), ('IdpEventLog', None), ('IframeWhiteListUrl', None), ('Image', None), ('ImportQueue', None), ('InboundChangeSet', None), ('InboundSocialPost', None), ('IncrementalCandidate', None), ('IndexKeyDefinition', None), ('IndexKeyDefinitionItem', None), ('Individual', None), ('InstalledMobileApp', None), ('InstalledPackageVersion', None), ('InstalledSubscriberPackage', None), ('InstalledSubscriberPackageVersion', None), ('InstanceDirective', None), ('InstancePerm', None), ('InstanceSizeJob', None), ('IntegrationAuditingEvent', None), ('IntelligenceField', None), ('InteractionActionCall', None), ('InteractionActionCallParam', None), ('InteractionAllocation', None), ('InteractionAllocator', None), ('InteractionApexCall', None), ('InteractionChoice', None), ('InteractionChoiceLookup', None), ('InteractionCondition', None), ('InteractionConnector', None), ('InteractionConstant', None), ('InteractionCountReport', None), ('InteractionDataColumn', None), ('InteractionDataInput', None), ('InteractionDataOutput', None), ('InteractionDataSource', None), ('InteractionDecision', None), ('InteractionDefinitionVersion', None), ('InteractionFieldMetaData', None), ('InteractionFieldValue', None), ('InteractionForm', None), ('InteractionFormula', None), ('InteractionLanguageMetrics', None), ('InteractionLayoutDetail', None), ('InteractionLayoutGroup', None), ('InteractionLCMetrics', None), ('InteractionLoop', None), ('InteractionMetadataValue', None), ('InteractionOperand', None), ('InteractionQuestion', None), ('InteractionReference', None), ('InteractionRefOrValue', None), ('InteractionResource', None), ('InteractionScreenFieldParam', None), ('InteractionScreenRule', None), ('InteractionScreenRuleAction', None), ('InteractionStage', None), ('InteractionStatement', None), ('InteractionSwitch', None), ('InteractionTodo', None), ('InteractionTranslMetrics', None), ('InteractionUsageMetrics', None), ('InteractionValueList', None), ('InteractionValueListEntry', None), ('InteractionVariable', None), ('InteractionVisibilityRule', None), ('InteractionWait', None), ('InteractionWaitEvent', None), ('InteractionWaitEventParam', None), ('InvocableAction', None), ('InvocableActionParameter', None), ('InvocableActionPicklist', None), ('IpWhitelist', None), ('JiffyTrace', None), ('JigsawSavedSearch', None), ('KanbanView', None), ('KnowledgeableUser', None), ('LabelData', None), ('LabelDefinition', None), ('Layout', None), ('LayoutItem', None), ('LayoutItemActionRef', None), ('LayoutItemColumn', None), ('LayoutParticle', None), ('LayoutRightPanel', None), ('LayoutSection', None), ('LayoutSectionState', None), ('LbpmMetrics', None), ('Lead', None), ('LeadConvertMapping', None), ('LeadConvertSettings', None), ('LeadStatus', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('LicenseManagementOrgCertificate', None), ('LightningBolt', None), ('LightningBoltFeature', None), ('LightningBoltImage', None), ('LightningBoltItem', None), ('LightningComponentBundle', None), ('LightningComponentMetrics', None), ('LightningComponentResource', None), ('LightningComponentTarget', None), ('LightningExperienceTheme', None), ('LightningOnboarding', None), ('LightningSchedulerUsageMetrics', None), ('LightningServiceMetrics', None), ('LimitUsageHistory', None), ('LimitUsageTracker', None), ('LinkedInLeadGen', None), ('LinkedInLeadGenAdAccount', None), ('LinkedInLeadGenConfig', None), ('LinkedInLeadGenToken', None), ('ListColumn', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('ListEmailSentResult', None), ('ListLayout', None), ('ListLayoutItem', None), ('ListPoolUsage', None), ('ListView', None), ('ListViewChart', None), ('ListViewChartInstance', None), ('ListViewCriterion', None), ('ListViewDisplayColumn', None), ('LmaApiSession', None), ('LocalizedValue', None), ('LocalNamespace', None), ('LogAnalysisItem', None), ('LogAnalysisRun', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginGeo', None), ('LoginHistory', None), ('LoginHours', None), ('LoginIp', None), ('LoginIpEmail', None), ('LoginIpRange', None), ('LogoutEventStream', None), ('LogSearch', None), ('LogSearchResult', None), ('LookedUpFromActivity', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MailAppExchangeUserMap', None), ('MailAppExchangeWhitelist', None), ('MailAppOwaWhitelist', None), ('MailAppSettings', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('ManagedContentSpace', None), ('ManagedContentSpaceLink', None), ('ManagedContentSpaceMember', None), ('ManagedContentSpacePermission', None), ('ManagedContentSpaceRole', None), ('ManagedTopicLocation', None), ('MassMail', None), ('MassOperationsJobInfo', None), ('MassOperationsNotification', None), ('MassOperationsSubsetResults', None), ('MatchIndexDefinition', None), ('MatchIndexValue', None), ('MatchingInformation', None), ('MatchingRule', None), ('MatchingRuleItem', None), ('MaterializedFeedEntry', None), ('MenuItem', None), ('MessageIdentifier', None), ('MessagingAggregatedMetrics', None), ('MessagingMetrics', None), ('MetadataChangeTemplate', None), ('MetadataComponentDependency', None), ('MetadataContainer', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetadataContent', None), ('MetadataIdentifier', None), ('MetadataPackage', None), ('MetadataPackageVersion', None), ('MetaMindConnection', None), ('MetricsDataFile', None), ('MetricsInMQMetrics', None), ('MetricsTransmissionHistory', None), ('MobileApplicationDetail', None), ('MobileConfig', None), ('MobileDevice', None), ('MobileEntitySetting', None), ('MobileExcludedField', None), ('MobileMarkedRecord', None), ('MobilePushServiceDevice', None), ('MobilePushSetupRegistry', None), ('MobilePushUserUpdate', None), ('MobileSession', None), ('MobileTab', None), ('MobileView', None), ('MobileViewDisplayColumn', None), ('MobileViewFilter', None), ('MobileViewSortColumn', None), ('Module', None), ('ModuleDependency', None), ('MqSlaJob', None), ('MqSlaRequest', None), ('Mru', None), ('MultiCurrency', None), ('MyDomainDiscoverableLogin', None), ('Name', None), ('Nameable', None), ('NamedCredential', None), ('NamedFilter', None), ('NameUnion', None), ('NetworkCustomerDailyLoginMetrics', None), ('NetworkCustomerLoginMetrics', None), ('NetworkLEADailyLoginMetrics', None), ('NetworkLEAPlusDailyLoginMetrics', None), ('NetworkPartnerDailyLoginMetrics', None), ('NetworkPartnerLoginMetrics', None), ('NetworkPCustDailyLoginMetrics', None), ('NetworkPowerCustomerLoginMetrics', None), ('NewsFeed', None), ('NextBestActionUsageMetrics', None), ('Note', None), ('NoteAndAttachment', None), ('NotifDeliveryUserPref', None), ('NotificationMember', None), ('NotifTypeOrgSetting', None), ('NotifTypeUserSetting', None), ('OauthClientRegistration', None), ('OauthConsumer', None), ('OauthConsumerAsset', None), ('OauthConsumerScope', None), ('OauthCustomScope', None), ('OauthCustomScopeApp', None), ('OauthToken', None), ('OauthTokenLocal', None), ('ObjectMapping', None), ('ObjectMappingField', None), ('ObjectPermissions', None), ('OnboardingMetrics', None), ('OpenActivity', None), ('OperationLog', None), ('Opportunity', None), ('OpportunityAlert', None), ('OpportunityCompetitor', None), ('OpportunityContactRole', None), ('OpportunityHistory', None), ('OpportunityLineItem', None), ('OpportunityMetrics', None), ('OpportunityPartner', None), ('OpportunitySplitMetrics', None), ('OpportunityStage', None), ('OpportunityUpdateReminder', None), ('OpptyAndPricingMetrics', None), ('OptimizerMetricsAverage', None), ('OracleAwrSqlignore', None), ('OracleAwrSqlstat', None), ('OracleAwrSqltext', None), ('Order', None), ('OrderItem', None), ('OrderItemType', None), ('OrderStatus', None), ('Organization', None), ('OrganizationValue', None), ('OrganizationValueInfo', None), ('OrgDeleteRequest', None), ('OrgEmailAddressSecurity', None), ('OrgLifecycleNotification', None), ('OrgObjectsMetrics', None), ('OrgRecommendation', None), ('OrgSigningKey', None), ('OrgSizingDataHolder', None), ('OrgSizingInfo', None), ('OrgStandardObjectsMetrics', None), ('OrgWideEmailAddress', None), ('OutboundField', None), ('OutboundMessage', None), ('OutgoingEmail', None), ('OutgoingEmailRelation', None), ('OvenExperiment', None), ('OwnedContentDocument', None), ('Owner', None), ('OwnerChangeOptionInfo', None), ('PacCrudPermission', None), ('Package2Member', None), ('Package2OauthConsumer', None), ('Package2UpgradeExport', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageDependency', None), ('PackageEvent', None), ('PackageExtension', None), ('PackageIdMapping', None), ('PackageInstallRequest', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageMember', None), ('PackageOperationError', None), ('PackageSupportAccess', None), ('PackageUploadRequest', None), ('PackageVersionInstallRequestError', None), ('PackageVersionPatchOrg', None), ('PackageVersionUninstallRequestError', None), ('PageComponent', None), ('ParallelJobItemData', None), ('ParallelJobStatus', None), ('PartitionStatus', None), ('Partner', None), ('PartnerNetworkSetup', None), ('PartnerRole', None), ('PathAssistant', None), ('PathAssistantStepInfo', None), ('PathAssistantStepItem', None), ('PendingChange', None), ('PendingChangeContainer', None), ('Period', None), ('PermissionDependency', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PermissionSetLicenseMetrics', None), ('PermissionSetMetricsByOrg', None), ('PermissionSetPortalDelegate', None), ('PermissionSetProfileMetrics', None), ('PermissionSetTabSetting', None), ('PersonAccountMetrics', None), ('Personalization', None), ('PersonalizationResource', None), ('PersonalizedUnswdQuestion', None), ('PhoenixDataSync', None), ('Photo', None), ('PhotoItem', None), ('PicklistItemProperty', None), ('PicklistMaster', None), ('PicklistSet', None), ('PicklistValueInfo', None), ('PinnedEntity', None), ('PinPlan', None), ('PlatformAction', None), ('PlatformActionList', None), ('PlatformActionListItem', None), ('PlatformActionMetrics', None), ('PlatformCachePartition', None), ('PlatformCachePartitionType', None), ('PlatformCacheTrial', None), ('PlatformEventChannel', None), ('PlatformEventChannelMember', None), ('PlatformEventConduitMetrics', None), ('PlatformOrgObjectMetrics', None), ('PlatformStatusAlertEvent', None), ('PlinyPhysicalDeleteJob', None), ('Portal', None), ('PortalAccount', None), ('PortalLanguageConfig', None), ('PortalLanguageTabConfig', None), ('PortalMember', None), ('PortalStyleConfig', None), ('PostArchivalDeletionRequest', None), ('PredictiveModel', None), ('Pricebook', None), ('Pricebook2', None), ('Pricebook2Old', None), ('PricebookEntry', None), ('PricebookShare', None), ('PrivacyConsent', None), ('PrivacyConsentRow', None), ('ProcessActionItem', None), ('ProcessAllowedSubmitter', None), ('ProcessDefinition', None), ('ProcessInstance', None), ('ProcessInstanceHistory', None), ('ProcessInstanceNode', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessMetrics', None), ('ProcessNode', None), ('ProcessNodeSecurity', None), ('ProcessPlugin', None), ('ProcessPluginParameter', None), ('ProcessTimeQueue', None), ('ProcessTransition', None), ('ProcessTransitionAction', None), ('ProcessTransitionApprover', None), ('ProcessTransitionCondition', None), ('ProcessTransitionSecurity', None), ('ProcessTypeDefinition', None), ('ProcessWorkitemProperties', None), ('ProdDbHammerFlaggedRequest', None), ('ProdDbHammerRequest', None), ('Product', None), ('Product2', None), ('Profile', None), ('ProfileActionOverride', None), ('ProfileClientSettings', None), ('ProfileIpRestrictionMetrics', None), ('ProfileLayout', None), ('ProfilePasswordPolicy', None), ('ProfilePortalDelegate', None), ('ProfileRecordType', None), ('ProfileSessionSetting', None), ('ProfileTabSetConfiguration', None), ('Project', None), ('Prompt', None), ('PromptAction', None), ('PromptVersion', None), ('ProposedEventResponse', None), ('ProposedEventTime', None), ('PublicSolution', None), ('Publisher', None), ('PushIntent', None), ('PushProfileMapping', None), ('PushTopic', None), ('PushUpgradeExcludedOrg', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QmosEntityDefinition', None), ('QmosInColMap1', None), ('QmosMatCol1', None), ('QmosMatEntityMeta', None), ('QmosQuery1', None), ('QmosQueryCol1', None), ('QmosQueryStatus', None), ('QmosSelCol1', None), ('QoptimizerLimitOverride', None), ('QoptimizerOption', None), ('QuerySet', None), ('QuerySetItem', None), ('Queue', None), ('QueueMember', None), ('QueueSobject', None), ('QuickActionDefinition', None), ('QuickActionList', None), ('QuickActionListItem', None), ('QuickActionMetrics', None), ('QuickText', None), ('Quote', None), ('QuoteDocument', None), ('QuoteLineItem', None), ('QuoteTemplateRichTextData', None), ('RateLimitingNotification', None), ('RateLimitIntBuckets', None), ('RawEmail', None), ('ReadOnlyAppserver', None), ('ReadOnlyAuthSession', None), ('ReadOnlyClientBrowser', None), ('ReadOnlyLoginHistory', None), ('ReadOnlyLoginIp', None), ('ReadOnlyLoginIpEmail', None), ('ReadOnlyLoginMessage', None), ('ReadOnlyMemcachedServer', None), ('ReadOnlyOauthToken', None), ('ReadOnlyOauthTokenScope', None), ('ReadOnlyRedisServer', None), ('ReadOnlySecurityToken', None), ('ReadOnlyUserLogin', None), ('RecalcCampaignStats', None), ('RecentlyViewed', None), ('Recommendation', None), ('RecommendationAudience', None), ('RecommendationBlacklist', None), ('RecommendationDefinition', None), ('RecommendationMetric', None), ('RecommendationReaction', None), ('RecommendationSimilarity', None), ('RecommendationStrategy', None), ('RecommendationStrategyNode', None), ('RecommendationUserActivity', None), ('RecordAction', None), ('RecordActionDefaultItem', None), ('RecordActionDeployment', None), ('RecordActionDeploymentChannel', None), ('RecordActionDeploymentContext', None), ('RecordActionHistory', None), ('RecordActionRecommendation', None), ('RecordActionSelectableItem', None), ('RecordOrigin', None), ('RecordSalt', None), ('RecordType', None), ('RecordTypePicklist', None), ('RecordUserAccessInterface', None), ('RelatedEntity', None), ('RelationshipDomain', None), ('RelationshipInfo', None), ('RemoteProxy', None), ('Report', None), ('ReportAggregate', None), ('ReportBlock', None), ('ReportBlockAggregate', None), ('ReportBreak', None), ('ReportBucketField', None), ('ReportBucketFieldSourceValue', None), ('ReportBucketFieldValue', None), ('ReportChart', None), ('ReportColorRange', None), ('ReportColumn', None), ('ReportCustomDetailField', None), ('ReportFilterItem', None), ('ReportFormattingRule', None), ('ReportFormattingRuleValue', None), ('ReportInstance', None), ('ReportInstanceCsvResult', None), ('ReportInstanceQuery', None), ('ReportJob', None), ('ReportJobFieldMap', None), ('ReportJobRun', None), ('ReportJobRunError', None), ('ReportObjectFilterItem', None), ('ReportParam', None), ('ReportResultBlob', None), ('ReportRunTracker', None), ('Repository', None), ('RequestsForAccessSIQ', None), ('RequestThrottle', None), ('RequestTrace', None), ('ResetAsyncRequest', None), ('RichTextAreaFieldData', None), ('RuleFilter', None), ('RuleFilterAction', None), ('RuleFilterItem', None), ('S2XAdminError', None), ('S2XContactMap', None), ('S2XEventMap', None), ('S2XEventRecordMap', None), ('S2XEventTxnProps', None), ('S2XExchOAuthCredential', None), ('S2XGoogleServiceAccount', None), ('S2XPushSubscription', None), ('S2XRecordMap', None), ('S2XSandmanError', None), ('S2XServiceAccount', None), ('S2XTransaction', None), ('S2XTransactionLock', None), ('S2XUserMap', None), ('SalesforceIqDataSource', None), ('SalesforceIqOrgBlacklist', None), ('SalesforceIqSyncFailure', None), ('SalesforceIqUser', None), ('SamlSsoConfig', None), ('SampledEntity', None), ('SandboxDimensionMetrics', None), ('SandboxOrgDimensionMetrics', None), ('SandOmBulkExport', None), ('SandOmExportedBlob', None), ('SandOmImportInfo', None), ('SandOmImportInfoDetail', None), ('SandOmInfo', None), ('SandOmInfoDetail', None), ('SandOmObserver', None), ('SandstormWhitelist', None), ('ScheduledRecommendation', None), ('SchemaBuilderLayout', None), ('SchemaBuilderLayoutItem', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('ScrutinyPkChunkData', None), ('ScrutinyRun', None), ('SCSInboundSettings', None), ('SCSTermsOfService', None), ('SearchActivity', None), ('SearchLayout', None), ('SearchPromotionRule', None), ('SearchQuerySuggestion', None), ('SearchSchemaOverride', None), ('SecureAgent', None), ('SecureAgentPlugin', None), ('SecureAgentPluginProperty', None), ('SecureAgentsCluster', None), ('SecurityCustomBaseline', None), ('SecurityHealthCheck', None), ('SecurityHealthCheckRisks', None), ('SegmentSpace', None), ('SegmentSpaceChunk', None), ('SendEmailActionDefinition', None), ('Service', None), ('ServiceDataType', None), ('ServiceDeskAttributes', None), ('ServiceDeskComponent', None), ('ServiceDeskCustomStyling', None), ('ServiceDeskHotkey', None), ('ServiceFieldDataType', None), ('ServiceProvider', None), ('ServiceVersion', None), ('SessionLevelPolicy', None), ('SessionPermSetActivation', None), ('SettingsTemplate', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupAuditTrail', None), ('SetupCustomNode', None), ('SetupEntityAccess', None), ('SetupFlowProgress', None), ('SetupNode', None), ('SfdcOutboundMessage', None), ('SfdcPartner', None), ('SharedPicklistDefinition', None), ('ShareInterface', None), ('SharingCoverageJob', None), ('SharingMetrics', None), ('SharingOperation', None), ('SharingPortalMetrics', None), ('SharingRowCauseMetrics', None), ('SharingUserCoverage', None), ('SharingUserMetrics', None), ('SidebarComponentLayout', None), ('SiqExchangeConnection', None), ('SiqExchangeSetting', None), ('SiqUserBlacklist', None), ('Site', None), ('SiteAsset', None), ('SiteChangelist', None), ('SiteChangelistComponent', None), ('SiteComponent', None), ('SiteDetail', None), ('SiteDomain', None), ('SiteIframeWhiteListUrl', None), ('SitePageOverride', None), ('SitePub', None), ('SitePubAsset', None), ('SitePubComponent', None), ('SitePubDomain', None), ('SitePubDomainSite', None), ('SiteRedirectMapping', None), ('SkinnyIndex', None), ('SkinnyIndexColumn', None), ('SkinnyTable', None), ('SkinnyTableExt', None), ('SkinnyTableField', None), ('SocialPersona', None), ('SocialPost', None), ('SocialUserAuth', None), ('SoftDeletable', None), ('SoftphoneLayout', None), ('SoftphoneLayoutCallType', None), ('SoftphoneLayoutInfoField', None), ('SoftphoneLayoutItem', None), ('SoftphoneLayoutSection', None), ('SoftphoneScreenPopOption', None), ('Solution', None), ('SolutionStatus', None), ('SourceObjectAttributes', None), ('Split', None), ('SplitAction', None), ('SplitActionResult', None), ('SplitFrameworkResult', None), ('SplitMapping', None), ('SplitPod', None), ('SPSamlAttributes', None), ('SqlIdToRequestMap', None), ('StagingArea', None), ('Stamp', None), ('StampAssignment', None), ('StandardAction', None), ('StandardReportType', None), ('StandardValueSet', None), ('StaticResource', None), ('StorageConfigAuditTrail', None), ('StrategyContext', None), ('StrategyContextArgument', None), ('StreamActivityAccess', None), ('StreamEmail', None), ('StreamEvent', None), ('StreamingChannel', None), ('Subinteraction', None), ('SubinteractionVariableAssignment', None), ('SubscriberPackage', None), ('SubscriberPackageVersion', None), ('SubscriberPackageVersionInstallRequest', None), ('SubscriberPackageVersionUninstallRequest', None), ('SubscriberTabSetMember', None), ('SummaryLayout', None), ('SummaryLayoutItem', None), ('SummaryLayoutSliceInfo', None), ('SupportOrgWideMetrics', None), ('SurveyResponseUsageMetrics', None), ('SyncTransactionLog', None), ('SynonymDictionary', None), ('SystemStreamingChannel', None), ('TabDefinition', None), ('TabSet', None), ('TabSetMember', None), ('Task', None), ('TaskAssociationItem', None), ('TaskGroup', None), ('TaskPriority', None), ('TaskRecurrenceException', None), ('TaskRelation', None), ('TaskStatus', None), ('TaskWhoRelation', None), ('TemplateDeployment', None), ('TemplateDeploymentItem', None), ('TempStore', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantSecret', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('TestSuiteMembership', None), ('ThirdPartyAccountLink', None), ('ThirdPartyAccountLinkLocal', None), ('TodayCard', None), ('TodayCardProperty', None), ('TodayGoal', None), ('Tombstone', None), ('Topic', None), ('TopicAssignment', None), ('TopicComputeStatus', None), ('TopicDataCategoryRule', None), ('TopicGroupActivity', None), ('TopicIndex', None), ('TopicNameChange', None), ('TopicOntology', None), ('TopicRecordSetting', None), ('TopicSuggestionSetting', None), ('TopicTerm', None), ('TopicUserActivity', None), ('TopicUserEvent', None), ('TraceFlag', None), ('Training', None), ('TransactionSecurityEventInterface', None), ('TransitionMessage', None), ('Translation', None), ('TrendingTopic', None), ('TrendIntervalLookup', None), ('TrialMaster', None), ('TwoFactorAuthPairing', None), ('TwoFactorInfo', None), ('TwoFactorMethodsInfo', None), ('TwoFactorMethodsInfoLocal', None), ('TwoFactorMetrics', None), ('TwoFactorTempCode', None), ('TwoFactorU2F', None), ('UiFormulaCriterion', None), ('UiFormulaRule', None), ('UndecidedEventRelation', None), ('UninstallExport', None), ('User', None), ('UserActivityTimelineFilter', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserAppMenuItem', None), ('UserComponentData', None), ('UserDimMetrics', None), ('UserEmailPreferredPerson', None), ('UserEntityAccess', None), ('UserFavorite', None), ('UserFeedChannel', None), ('UserFieldAccess', None), ('UserLicense', None), ('UserLicenseMetrics', None), ('UserListPreference', None), ('UserListPrefs', None), ('UserListView', None), ('UserListViewCriterion', None), ('UserLogin', None), ('UserMembershipSharingRule', None), ('UserMetrics', None), ('UserNavItem', None), ('UserPackageLicense', None), ('UserPermissionAccess', None), ('UserPreference', None), ('UserProfile', None), ('UserProfileFeed', None), ('UserRecommendation', None), ('UserRecordAccess', None), ('UserRecSummary', None), ('UserRole', None), ('UserSetupAppInfo', None), ('UserVerificationMessageUse', None), ('UtilityBarMetrics', None), ('ValidationFormula', None), ('ValidationRuleInfo', None), ('ValidationRuleMember', None), ('VerificationHistory', None), ('VerificationMessageCreditMetrics', None), ('VersionedContentEntity', None), ('VersionSet', None), ('VisualforceAccessMetrics', None), ('VisualforceMetrics', None), ('Vote', None), ('VoteConfig', None), ('VoteStats', None), ('WaveAutoInstallRequest', None), ('WaveBaseDataset', None), ('WaveBaseField', None), ('WaveCompatibilityCheckItem', None), ('WaveDataConnector', None), ('WaveExternalConnProperty', None), ('WaveReplicationFilterItem', None), ('WebLink', None), ('WebServiceDefinition', None), ('WindowsPushApplicationSetup', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowAlertMember', None), ('WorkflowFieldUpdateMember', None), ('WorkflowOutboundMessageMember', None), ('WorkflowRule', None), ('WorkflowRuleMember', None), ('WorkflowTaskMember', None), ('WorkflowTimeAction', None), ('WorkflowTimeQueue', None), ('WorkflowTimeTrigger', None), ('WorkThanks', None), ('WsdlDataType', None), ('XCleanBulkJob', None), ('XCleanMatchRateMetrics', None), ('XinstanceInfo', None), ('XmlSchema', None)], blank=True, null=True)
    stat_value = models.IntegerField(verbose_name='StatValue', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataStatistics'
        verbose_name = 'Data Statistics'
        verbose_name_plural = 'Data Statistics'
        # keyPrefix = '05a'



class DataType(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Data Type Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=70, verbose_name='Data Type Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_complex = models.BooleanField(verbose_name='Is this Data Type Complex?', sf_read_only=models.READ_ONLY, default=False)
    context_service_data_type_id = models.CharField(max_length=70, verbose_name='Service Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    context_wsdl_data_type_id = models.CharField(max_length=70, verbose_name='WSDL Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataType'
        verbose_name = 'Data Type'
        verbose_name_plural = 'Data Types'
        # keyPrefix = '4dt'



class DataUseLegalBasis(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datauselegalbasis_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datauselegalbasis_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    source = models.CharField(max_length=255, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataUseLegalBasis'
        verbose_name = 'Data Use Legal Basis'
        verbose_name_plural = 'Data Use Legal Basis'
        # keyPrefix = '0ZT'



class DataUseLegalBasisHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    data_use_legal_basis = models.ForeignKey(DataUseLegalBasis, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Source', 'Source')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataUseLegalBasisHistory'
        verbose_name = 'Data Use Legal Basis History'
        verbose_name_plural = 'Data Use Legal Basis History'
        # keyPrefix = 'None'



class DataUseLegalBasisShare(models.Model):
    parent = models.ForeignKey(DataUseLegalBasis, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'DataUseLegalBasisShare'
        verbose_name = 'Data Use Legal Basis Share'
        verbose_name_plural = 'Data Use Legal Basis Share'
        # keyPrefix = 'None'



class DataUsePurpose(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datausepurpose_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='datausepurpose_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    legal_basis = models.ForeignKey(DataUseLegalBasis, models.DO_NOTHING, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    can_data_subject_opt_out = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'DataUsePurpose'
        verbose_name = 'Data Use Purpose'
        verbose_name_plural = 'Data Use Purposes'
        # keyPrefix = '0ZW'



class DataUsePurposeHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    data_use_purpose = models.ForeignKey(DataUsePurpose, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('CanDataSubjectOptOut', 'Can Data Subject Opt Out'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('LegalBasis', 'Legal Basis'), ('IsMaintainablePerContactPoint', 'Maintain Per Contact Point'), ('IsMaintainablePerType', 'Maintain Per Contact Point Type'), ('IsMaintainablePerParty', 'Maintain Per Party'), ('Name', 'Name'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DataUsePurposeHistory'
        verbose_name = 'Data Use Purpose History'
        verbose_name_plural = 'Data Use Purpose History'
        # keyPrefix = 'None'



class DataUsePurposeShare(models.Model):
    parent = models.ForeignKey(DataUsePurpose, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'DataUsePurposeShare'
        verbose_name = 'Data Use Purpose Share'
        verbose_name_plural = 'Data Use Purpose Share'
        # keyPrefix = 'None'



class DatacloudAddress(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Data.com Address ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line1 = models.CharField(max_length=255, verbose_name=' Address Line 1 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    address_line2 = models.CharField(max_length=255, verbose_name=' Address Line 2 ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=255, verbose_name='Country/Territory', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=255, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.CharField(max_length=11, verbose_name=' Latitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.CharField(max_length=11, verbose_name='Longitude ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_code = models.CharField(max_length=15, verbose_name=' GeoAccuracy Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    geo_accuracy_num = models.CharField(max_length=3, verbose_name=' GeoAccuracy Num', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DatacloudAddress'
        verbose_name = 'Data.com Address'
        verbose_name_plural = 'Data.com Addresses'
        # keyPrefix = '07m'



class DeclinedEventRelation(models.Model):
    relation = models.ForeignKey(Calendar, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Contact, Lead, User]
    event = models.ForeignKey('Event', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='declinedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='declinedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DeclinedEventRelation'
        verbose_name = 'Declined Event Relation'
        verbose_name_plural = 'Declined Event Relations'
        # keyPrefix = 'None'



class Document(models.Model):
    folder = models.ForeignKey('Folder', models.DO_NOTHING)  # Reference to tables [Folder, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Document Name')
    developer_name = models.CharField(max_length=80, verbose_name='Document Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_type = models.CharField(max_length=120, verbose_name='MIME Type', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='File Extension', blank=True, null=True)
    is_public = models.BooleanField(verbose_name='Externally Available', default=models.DEFAULTED_ON_CREATE)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY)
    body = models.TextField(blank=True, null=True)
    url = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    keywords = models.CharField(max_length=255, blank=True, null=True)
    is_internal_use_only = models.BooleanField(verbose_name='Internal Use Only', default=models.DEFAULTED_ON_CREATE)
    author = models.ForeignKey('User', models.DO_NOTHING, related_name='document_author_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='document_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='document_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_body_searchable = models.BooleanField(verbose_name='Document Content Searchable', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Document'
        verbose_name = 'Document'
        verbose_name_plural = 'Documents'
        # keyPrefix = '015'



class DocumentAttachmentMap(models.Model):
    parent = models.ForeignKey('EmailTemplate', models.DO_NOTHING)  # Master Detail Relationship *
    document = models.ForeignKey(Document, models.DO_NOTHING)
    document_sequence = models.IntegerField(verbose_name='Attachment Sequence')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DocumentAttachmentMap'
        verbose_name = 'Document Entity Map'
        verbose_name_plural = 'Document Entity Map'
        # keyPrefix = '05X'



class Domain(models.Model):
    domain_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('DNS', 'Domain Name System (DNS)'), ('FacebookPage', 'Facebook Page')])
    domain = models.CharField(max_length=765, verbose_name='Domain Name', sf_read_only=models.READ_ONLY)
    options_external_https = models.BooleanField(verbose_name='Enable External HTTPS', sf_read_only=models.READ_ONLY)
    cname_target = models.CharField(max_length=765, verbose_name='CNAME Target', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domain_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domain_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Domain'
        verbose_name = 'Domain'
        verbose_name_plural = 'Domains'
        # keyPrefix = '0I4'



class DomainSite(models.Model):
    domain = models.ForeignKey(Domain, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    site = models.ForeignKey('Site', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    path_prefix = models.CharField(max_length=255, verbose_name='Path', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domainsite_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='domainsite_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'DomainSite'
        verbose_name = 'Custom URL'
        verbose_name_plural = 'Custom URLs'
        # keyPrefix = '0Jf'



class DuplicateRecordItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Duplicate Record Item Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecorditem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecorditem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    duplicate_record_set = models.ForeignKey('DuplicateRecordSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    record = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, Equipment_Assignment__c, Equipment__c, Incident__c, Individual, Lead, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordItem'
        verbose_name = 'Duplicate Record Item'
        verbose_name_plural = 'Duplicate Record Items'
        # keyPrefix = '0GL'



class DuplicateRecordSet(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Duplicate Record Set Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecordset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterecordset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    duplicate_rule = models.ForeignKey('DuplicateRule', models.DO_NOTHING, blank=True, null=True)
    record_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRecordSet'
        verbose_name = 'Duplicate Record Set'
        verbose_name_plural = 'Duplicate Record Sets'
        # keyPrefix = '0GK'



class DuplicateRule(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Individual', None), ('Lead', None)])
    developer_name = models.CharField(max_length=80, verbose_name='Object Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterule_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='duplicaterule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    sobject_subtype = models.CharField(max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'DuplicateRule'
        verbose_name = 'Duplicate Rule'
        verbose_name_plural = 'Duplicate Rules'
        # keyPrefix = '0Bm'



class EmailCapture(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailcapture_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailcapture_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    to_pattern = models.CharField(max_length=255, verbose_name='To', sf_read_only=models.NOT_UPDATEABLE)
    from_pattern = models.CharField(max_length=255, verbose_name='From', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    sender = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    recipient = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    capture_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    raw_message = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailCapture'
        verbose_name = 'EmailCapture'
        verbose_name_plural = 'Email Captures'
        # keyPrefix = '06F'



class EmailDomainFilter(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainfilter_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainfilter_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    priority_number = models.IntegerField(verbose_name='Priority', blank=True, null=True)
    email_relay = models.ForeignKey('EmailRelay', models.DO_NOTHING)
    to_domain = models.TextField(verbose_name='Recipient Domain', blank=True, null=True)
    from_domain = models.TextField(verbose_name='Sender Domain', blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'EmailDomainFilter'
        verbose_name = 'Email Domain Filter'
        verbose_name_plural = 'Email Domain Filter'
        # keyPrefix = '0T6'



class EmailDomainKey(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainkey_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emaildomainkey_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    selector = models.CharField(max_length=63)
    domain = models.CharField(max_length=255)
    domain_match = models.CharField(max_length=255, choices=[('DomainOnly', 'Exact domain only'), ('SubdomainsOnly', 'Subdomains of the domain only'), ('DomainAndSubdomains', 'Exact domain and subdomains')])
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    txt_records_publish_state = models.CharField(max_length=255, verbose_name='TXT Record Status', sf_read_only=models.READ_ONLY, choices=[('Published', None), ('Publishing in progress', None), ('Publishing failed', None)], blank=True, null=True)
    key_size = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    public_key = models.TextField(blank=True, null=True)
    private_key = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailDomainKey'
        verbose_name = 'Email Domain Key'
        verbose_name_plural = 'Email Domain Keys'
        # keyPrefix = '09P'



class EmailMessage(models.Model):
    parent = models.ForeignKey(Case, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    activity = models.ForeignKey('Task', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailmessage_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailmessage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    text_body = models.TextField(blank=True, null=True)
    html_body = models.TextField(verbose_name='HTML Body', blank=True, null=True)
    headers = models.TextField(blank=True, null=True)
    subject = models.CharField(max_length=3000, blank=True, null=True)
    from_name = models.CharField(max_length=1000, blank=True, null=True)
    from_address = models.EmailField(blank=True, null=True)
    validated_from_address = models.CharField(max_length=255, verbose_name='From', choices=[('tyler@missionbit.com', 'Tyler Iams <tyler@missionbit.com>')], blank=True, null=True)
    to_address = models.CharField(max_length=4000, blank=True, null=True)
    cc_address = models.CharField(max_length=4000, verbose_name='CC Address', blank=True, null=True)
    bcc_address = models.CharField(max_length=4000, verbose_name='BCC Address', blank=True, null=True)
    incoming = models.BooleanField(verbose_name='Is Incoming', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    has_attachment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, choices=[('0', 'New'), ('1', 'Read'), ('2', 'Replied'), ('3', 'Sent'), ('4', 'Forwarded'), ('5', 'Draft')])
    message_date = models.DateTimeField(blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reply_to_email_message = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_externally_visible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    message_identifier = models.CharField(max_length=255, verbose_name='Message ID', blank=True, null=True)
    thread_identifier = models.CharField(max_length=255, verbose_name='Thread ID', blank=True, null=True)
    is_client_managed = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    related_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Enrollment__c, ContactRequest, Contract, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, npe03__Recurring_Donation__c, npo02__Household__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c]
    is_tracked = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    is_opened = models.BooleanField(verbose_name='Opened?', sf_read_only=models.READ_ONLY, default=False)
    first_opened_date = models.DateTimeField(verbose_name='First Opened', blank=True, null=True)
    last_opened_date = models.DateTimeField(verbose_name='Last Opened', blank=True, null=True)
    is_bounced = models.BooleanField(verbose_name='Bounced?', default=models.DEFAULTED_ON_CREATE)
    email_template = models.ForeignKey('EmailTemplate', models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailMessage'
        verbose_name = 'Email Message'
        verbose_name_plural = 'Email Messages'
        # keyPrefix = '02s'



class EmailMessageRelation(models.Model):
    email_message = models.ForeignKey(EmailMessage, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    relation = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    relation_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('ToAddress', 'To Address'), ('CcAddress', 'Cc Address'), ('BccAddress', 'Bcc Address'), ('FromAddress', 'From Address'), ('OtherAddress', 'Other Address')])
    relation_address = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relation_object_type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EmailMessageRelation'
        verbose_name = 'Email Message Relation'
        verbose_name_plural = 'Email Message Relations'
        # keyPrefix = '0CZ'



class EmailRelay(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailrelay_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailrelay_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    host = models.CharField(max_length=255)
    port = models.CharField(max_length=255, choices=[('25', None), ('587', None), ('10025', None), ('11025', None)])
    tls_setting = models.CharField(max_length=255, verbose_name='TLS Setting', choices=[('Off', None), ('Preferred', None), ('Required', None), ('PreferredVerify', None), ('RequiredVerify', None)])
    is_require_auth = models.BooleanField(verbose_name='Enable SMTP Auth', default=models.DEFAULTED_ON_CREATE)
    username = models.CharField(max_length=100, blank=True, null=True)
    password = models.CharField(max_length=100, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailRelay'
        verbose_name = 'Email Relay'
        verbose_name_plural = 'Email Relay'
        # keyPrefix = '26Z'



class EmailServicesAddress(models.Model):
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    local_part = models.CharField(max_length=64, verbose_name='Email address')
    email_domain_name = models.CharField(max_length=255, verbose_name='Email address domain', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authorized_senders = models.TextField(verbose_name='Accept Email From', blank=True, null=True)
    run_as_user = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_runasuser_set')
    function = models.ForeignKey('EmailServicesFunction', models.DO_NOTHING)
    developer_name = models.CharField(max_length=25, verbose_name='Email Address Name', default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesaddress_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesAddress'
        verbose_name = 'Email Services Address'
        verbose_name_plural = 'Email Services Address'
        # keyPrefix = '093'



class EmailServicesFunction(models.Model):
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    function_name = models.CharField(max_length=64, verbose_name='Email Service Name')
    authorized_senders = models.TextField(verbose_name='Accept Email From', blank=True, null=True)
    is_authentication_required = models.BooleanField(verbose_name='Advanced Email Security Settings', default=models.DEFAULTED_ON_CREATE)
    is_tls_required = models.BooleanField(verbose_name='TLS Required', default=models.DEFAULTED_ON_CREATE)
    attachment_option = models.CharField(max_length=40, verbose_name='Accept Attachments', default=models.DEFAULTED_ON_CREATE, choices=[('None', 'None'), ('TextOnly', 'Text attachments only'), ('BinaryOnly', 'Binary attachments only'), ('All', 'All'), ('NoContent', 'Attachment names only, no content')])
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, blank=True, null=True)
    over_limit_action = models.CharField(max_length=40, verbose_name='Over Email Rate Limit Action', default=models.DEFAULTED_ON_CREATE, choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    function_inactive_action = models.CharField(max_length=40, verbose_name='Deactivated Email Service Action', default=models.DEFAULTED_ON_CREATE, choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    address_inactive_action = models.CharField(max_length=40, verbose_name='Deactivated Email Address Action', default=models.DEFAULTED_ON_CREATE, choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    authentication_failure_action = models.CharField(max_length=40, verbose_name='Unauthenticated Sender Action', default=models.DEFAULTED_ON_CREATE, choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    authorization_failure_action = models.CharField(max_length=40, verbose_name='Unauthorized Sender Action', default=models.DEFAULTED_ON_CREATE, choices=[('UseSystemDefault', 'Use System Default'), ('Bounce', 'Bounce message'), ('Discard', 'Discard message'), ('Requeue', 'Requeue message')], blank=True, null=True)
    is_error_routing_enabled = models.BooleanField(verbose_name='Enable Error Routing', default=models.DEFAULTED_ON_CREATE)
    error_routing_address = models.EmailField(verbose_name='Route Error Emails to This Email Address', blank=True, null=True)
    is_text_attachments_as_binary = models.BooleanField(verbose_name='Convert Text Attachments to Binary Attachments', default=models.DEFAULTED_ON_CREATE)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesfunction_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailservicesfunction_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EmailServicesFunction'
        verbose_name = 'Email Service'
        verbose_name_plural = 'Email Services'
        # keyPrefix = '091'



class EmailStatus(models.Model):
    task = models.ForeignKey('Task', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailstatus_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    times_opened = models.IntegerField(verbose_name='# Times Opened', sf_read_only=models.READ_ONLY)
    first_open_date = models.DateTimeField(verbose_name='Date Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_open_date = models.DateTimeField(verbose_name='Last Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_template_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailStatus'
        verbose_name = 'Email Status'
        verbose_name_plural = 'Email Status'
        # keyPrefix = '018'



class EmailTemplate(models.Model):
    name = models.CharField(max_length=80, verbose_name='Email Template Name')
    developer_name = models.CharField(max_length=80, verbose_name='Template Unique Name', default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_owner_set')
    folder = models.ForeignKey('Folder', models.DO_NOTHING)  # Reference to tables [Folder, Organization, User]
    folder_name = models.CharField(max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    brand_template = models.ForeignKey(BrandTemplate, models.DO_NOTHING, blank=True, null=True)
    template_style = models.CharField(max_length=40, verbose_name='Style', sf_read_only=models.NOT_UPDATEABLE, choices=[('none', 'No Email Layout'), ('freeForm', 'Free Form Letter'), ('formalLetter', 'Formal Letter'), ('promotionRight', 'Promotion (Right)'), ('promotionLeft', 'Promotion (Left)'), ('newsletter', 'Newsletter'), ('products', 'Products')])
    is_active = models.BooleanField(verbose_name='Available For Use', default=models.DEFAULTED_ON_CREATE)
    template_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('text', 'Text'), ('html', 'HTML'), ('custom', 'Custom'), ('visualforce', 'Visualforce')])
    encoding = models.CharField(max_length=40, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')], blank=True, null=True)
    description = models.CharField(max_length=4000, blank=True, null=True)
    subject = models.CharField(max_length=255, blank=True, null=True)
    html_value = models.TextField(verbose_name='HTML Value', blank=True, null=True)
    body = models.TextField(verbose_name='Email Body', blank=True, null=True)
    times_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='emailtemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', blank=True, null=True)
    markup = models.TextField(blank=True, null=True)
    ui_type = models.CharField(max_length=40, verbose_name='UI Type', choices=[('Aloha', 'Aloha'), ('SFX', 'SFX'), ('SFX_Sample', 'SFXSample')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    related_entity_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', choices=[('AcceptedEventRelation', None), ('AcceptedRecommendation', None), ('Account', None), ('AccountContactRole', None), ('AccountPartner', None), ('ActionLink', None), ('ActionLinkGroup', None), ('ActionLinkGroupAssoc', None), ('ActionLinkTemplateBinding', None), ('ActionLinkUserState', None), ('Activity', None), ('ActivityEngagementRollup', None), ('ActivityHistory', None), ('ActivityRecurrence2', None), ('ActivityRecurrence2Exception', None), ('ActivityRelation', None), ('AddressableEventInterface', None), ('AggregateResult', None), ('AnalyticAction', None), ('AnalyticActionConfiguration', None), ('AnalyticCondition', None), ('AnalyticNotification', None), ('AnalyticRecordUserAccess', None), ('AnalyticThreshold', None), ('Announcement', None), ('ApexDebuggerBreakpoint', None), ('ApexDebuggerEvent', None), ('ApexDebuggerRequest', None), ('ApexDebuggerSession', None), ('ApexTestQueueItem', None), ('AppAnalyticsQueryRequest', None), ('Approval', None), ('Asset', None), ('AssetRelationship', None), ('AssistantInteraction', None), ('AssistantProgress', None), ('AssistantRecommendation', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiJob', None), ('AsyncApiQueryResult', None), ('AttachedContentDocument', None), ('AttachedContentNote', None), ('Attachment', None), ('AudienceMembership', None), ('Auditable', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('AvroSchema', None), ('BackgroundOperation', None), ('BaseEventInterface', None), ('BaseEventPackageInterface', None), ('BaseSessionInterface', None), ('Calendar2', None), ('Campaign', None), ('CampaignInfluenceAdjustment', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('CanvasFeedItem', None), ('Case', None), ('CaseContactRole', None), ('CaseEscalation', None), ('CaseHistory2', None), ('CaseSolution', None), ('CategoryData', None), ('ChangeSetUploadHistory', None), ('ChatSession', None), ('ChatSessionMembers', None), ('ChatterConversation', None), ('ChatterConversationMember', None), ('ChatterExtensionInstance', None), ('ChatterMessage', None), ('ChatterMessageThread', None), ('CleanActivityLog', None), ('CleanEntityError', None), ('CleanInfo', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('CollaborationGroupMemberRequest', None), ('CollaborationGroupRank', None), ('CollaborationGroupRecord', None), ('CollaborationInvitation', None), ('CollaborativeFilteringItem_to_Item', None), ('CollaborativeFilteringItem2Item', None), ('CombinedAttachment', None), ('ComponentResponseCache', None), ('Contact', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContentBody', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentDocumentLink', None), ('ContentDocumentSubscription', None), ('ContentExternalStorage', None), ('ContentFolder', None), ('ContentFolderDistribution', None), ('ContentFolderItem', None), ('ContentFolderLink', None), ('ContentFolderMember', None), ('ContentNote', None), ('ContentNotification', None), ('ContentNotificationParam', None), ('ContentReference', None), ('ContentVersion', None), ('ContentVersionComment', None), ('ContentVersionMap', None), ('ContentVersionRating', None), ('ContentVersionRenditionContent', None), ('ContentVersionTagName', None), ('ContentWorkspaceDoc', None), ('ContentWorkspaceRecentEvent', None), ('Contract', None), ('ContractContactRole', None), ('CustomSettingNameIndex', None), ('Dashboard', None), ('DashboardComponent', None), ('DashboardFilter', None), ('DashboardFilterItem', None), ('DashboardFilterRepCol', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentValueMetric', None), ('DataExportEventInterface', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('DBCThumbnail', None), ('DBCThumbnailFilter', None), ('DeclinedEventRelation', None), ('DirectMessage', None), ('DirectMessageMember', None), ('DirectMessageMemberActivity', None), ('Document', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailStatus', None), ('EmailTemp', None), ('Endorsement', None), ('EngagementHistoryRollup', None), ('EnhancedLetterhead', None), ('EntityBlacklist', None), ('EntityEventInterface', None), ('EntityHistory', None), ('EntityLock', None), ('EntitySubscription', None), ('Event', None), ('EventAssociationItem', None), ('EventAttendee', None), ('EventComments', None), ('EventDeliveryData', None), ('EventParameterData', None), ('EventRecurrenceException', None), ('EventRelation', None), ('EventSubscriptionData', None), ('EventSubscriptionHandleData', None), ('EventWhoRelation', None), ('ExchangeUserMapping', None), ('ExpressionFilter', None), ('ExpressionFilterCriteria', None), ('ExternalCredential', None), ('ExternalIdMap', None), ('ExternalServiceDataType', None), ('FeedActionState', None), ('FeedAttachment', None), ('FeedChannel', None), ('FeedChannelSubscription', None), ('FeedClumpInfo', None), ('FeedClumpMapping', None), ('FeedComment', None), ('FeedCrossReference', None), ('FeedEntry', None), ('FeedFavorite', None), ('FeedItem', None), ('FeedLike', None), ('FeedMute', None), ('FeedPollChoice', None), ('FeedPollVote', None), ('FeedPost', None), ('FeedRecommendationInfo', None), ('FeedRevision', None), ('FeedSignal', None), ('FeedTrackedChange', None), ('FileInspectionResult', None), ('FileSearchActivity', None), ('FlowInterview', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('FolderedContentDocument', None), ('ForecastingAdjustment', None), ('ForecastingCompositeKey', None), ('ForecastingFact', None), ('ForecastingItem', None), ('ForecastingOwnerAdjustment', None), ('ForecastingQuota', None), ('ForecastShare', None), ('ForgottenToken', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('GenericContentFolder', None), ('GenericContentFolderItem', None), ('GenericContentFolderMember', None), ('GroupSubscription', None), ('HammerResultStatus', None), ('Image', None), ('InboundSocialPost', None), ('IncrementalCandidate', None), ('Individual', None), ('InstalledMobileApp', None), ('InteractionCountReport', None), ('JigsawSavedSearch', None), ('KnowledgeableUser', None), ('Lead', None), ('LinkedInLeadGen', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('ListEmailSentResult', None), ('LogSearch', None), ('LogSearchResult', None), ('LookedUpFromActivity', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('MailAssociationItem', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('ManagedContentSpace', None), ('ManagedContentSpaceMember', None), ('ManagedTopicLocation', None), ('MatchingInformation', None), ('MaterializedFeedEntry', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetricsTransmissionHistory', None), ('MobileMarkedRecord', None), ('MqSlaJob', None), ('MqSlaRequest', None), ('MultiCurrency', None), ('Name', None), ('Nameable', None), ('NameUnion', None), ('NewsFeed', None), ('Note', None), ('NoteAndAttachment', None), ('NotifDeliveryUserPref', None), ('NotificationMember', None), ('OpenActivity', None), ('Opportunity', None), ('OpportunityAlert', None), ('OpportunityCompetitor', None), ('OpportunityContactRole', None), ('OpportunityHistory', None), ('OpportunityLineItem', None), ('OpportunityPartner', None), ('OpportunityUpdateReminder', None), ('Order', None), ('OrderItem', None), ('OrgRecommendation', None), ('OwnedContentDocument', None), ('Partner', None), ('PendingChangeContainer', None), ('PersonalizationResource', None), ('PersonalizedUnswdQuestion', None), ('Photo', None), ('PhotoItem', None), ('PortalAccount', None), ('Pricebook', None), ('Pricebook2', None), ('Pricebook2Old', None), ('PricebookEntry', None), ('PricebookShare', None), ('ProcessInstance', None), ('ProcessInstanceHistory', None), ('ProcessInstanceNode', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('Product', None), ('Product2', None), ('PromptAction', None), ('ProposedEventResponse', None), ('ProposedEventTime', None), ('PushIntent', None), ('PushProfileMapping', None), ('PushTopic', None), ('QuickText', None), ('Quote', None), ('QuoteDocument', None), ('QuoteLineItem', None), ('Recommendation', None), ('RecommendationAudience', None), ('RecommendationBlacklist', None), ('RecommendationDefinition', None), ('RecommendationMetric', None), ('RecommendationReaction', None), ('RecommendationSimilarity', None), ('RecommendationUserActivity', None), ('RecordAction', None), ('RecordOrigin', None), ('RecordUserAccessInterface', None), ('Report', None), ('ReportAggregate', None), ('ReportBlock', None), ('ReportBlockAggregate', None), ('ReportBreak', None), ('ReportBucketField', None), ('ReportBucketFieldSourceValue', None), ('ReportBucketFieldValue', None), ('ReportChart', None), ('ReportColorRange', None), ('ReportColumn', None), ('ReportFilterItem', None), ('ReportJobRun', None), ('ReportJobRunError', None), ('ReportObjectFilterItem', None), ('ReportParam', None), ('ReportResultBlob', None), ('ReportRunTracker', None), ('RequestsForAccessSIQ', None), ('S2XAdminError', None), ('S2XContactMap', None), ('S2XEventMap', None), ('S2XEventRecordMap', None), ('S2XEventTxnProps', None), ('S2XRecordMap', None), ('S2XSandmanError', None), ('S2XTransaction', None), ('SalesforceIqSyncFailure', None), ('ScheduledRecommendation', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('SearchActivity', None), ('SegmentSpace', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupFlowProgress', None), ('ShareInterface', None), ('SiqUserBlacklist', None), ('SiteAsset', None), ('SiteChangelistComponent', None), ('SitePub', None), ('SitePubAsset', None), ('SitePubComponent', None), ('SitePubDomain', None), ('SitePubDomainSite', None), ('SocialPersona', None), ('SocialPost', None), ('SoftDeletable', None), ('Solution', None), ('StreamActivityAccess', None), ('StreamingChannel', None), ('SyncTransactionLog', None), ('SystemStreamingChannel', None), ('Task', None), ('TaskAssociationItem', None), ('TaskRecurrenceException', None), ('TaskRelation', None), ('TaskWhoRelation', None), ('TempStore', None), ('TodayGoal', None), ('Tombstone', None), ('Topic', None), ('TopicAssignment', None), ('TopicDataCategoryRule', None), ('TopicGroupActivity', None), ('TopicUserActivity', None), ('TopicUserEvent', None), ('TransactionSecurityEventInterface', None), ('TransitionMessage', None), ('TrendingTopic', None), ('UndecidedEventRelation', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserEmailPreferredPerson', None), ('UserFeedChannel', None), ('UserMetrics', None), ('UserNavItem', None), ('UserProfileFeed', None), ('UserRecommendation', None), ('UserRecSummary', None), ('UserSetupAppInfo', None), ('Vote', None), ('VoteStats', None), ('WaveAutoInstallRequest', None), ('WaveCompatibilityCheckItem', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None), ('XinstanceInfo', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmailTemplate'
        verbose_name = 'Email Template'
        verbose_name_plural = 'Email Templates'
        # keyPrefix = '00X'



class EmbeddedServiceDetail(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Embedded Service Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    site = models.CharField(max_length=18, sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    secondary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contrast_primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contrast_inverted_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    nav_bar_color = models.CharField(max_length=255, verbose_name='NavBar Color', sf_read_only=models.READ_ONLY, blank=True, null=True)
    font = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_live_agent_enabled = models.BooleanField(verbose_name='Enabled', sf_read_only=models.READ_ONLY, default=False)
    is_field_service_enabled = models.BooleanField(verbose_name='Enabled', sf_read_only=models.READ_ONLY, default=False)
    width = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    height = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_prechat_enabled = models.BooleanField(verbose_name='Pre-Chat Enabled', sf_read_only=models.READ_ONLY, default=False)
    custom_prechat_component = models.CharField(max_length=18, verbose_name='Custom Prechat Component Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    avatar_img = models.CharField(max_length=255, verbose_name='Avatar Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_company_logo_img = models.CharField(max_length=255, verbose_name='Small Company Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    prechat_background_img = models.CharField(max_length=255, verbose_name='Prechat Background Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    waiting_state_background_img = models.CharField(max_length=255, verbose_name='Waiting State Background Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    header_background_img = models.CharField(max_length=255, verbose_name='Header Background Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    font_size = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Small', None), ('Medium', None), ('Large', None)], blank=True, null=True)
    offline_case_background_img = models.CharField(max_length=255, verbose_name='Offline Case Background Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_offline_case_enabled = models.BooleanField(verbose_name='Offline Case Enabled', sf_read_only=models.READ_ONLY, default=False)
    is_queue_position_enabled = models.BooleanField(verbose_name='Queue Position Enabled', sf_read_only=models.READ_ONLY, default=False)
    should_show_new_appointment = models.BooleanField(verbose_name='Show New Appointment', sf_read_only=models.READ_ONLY, default=False)
    should_show_existing_appointment = models.BooleanField(verbose_name='Show Existing Appointment', sf_read_only=models.READ_ONLY, default=False)
    field_service_home_img = models.CharField(max_length=255, verbose_name='Field Service Home Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_service_logo_img = models.CharField(max_length=255, verbose_name='Field Service Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_service_confirm_card_img = models.CharField(max_length=255, verbose_name='Field Service Confirmation Card Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    should_hide_auth_dialog = models.BooleanField(verbose_name='Hide Authentication Dialog', sf_read_only=models.READ_ONLY, default=False)
    custom_minimized_component = models.CharField(max_length=18, verbose_name='Custom Minimized Component Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmbeddedServiceDetail'
        verbose_name = 'Embedded Service'
        verbose_name_plural = 'Embedded Services'
        # keyPrefix = '0Lq'



class EmbeddedServiceLabel(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Embedded Service Label Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    embedded_service_config_developer_name = models.CharField(max_length=80, verbose_name=' Embedded Service Config Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label_key = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('LA_Container_Base_Close', None), ('LA_Container_Base_Minimize', None), ('LA_Container_Base_EndOfDialog', None), ('LA_Container_Base_MinimizedContainerAssistiveText', None), ('LA_Chat_Body_ChatWindowAgent', None), ('LA_Chat_Body_InputTextPlaceholder', None), ('LA_Chat_Body_AgentTypingUpdate', None), ('LA_Chat_Body_Send', None), ('LA_Chat_Body_ChatStartTime', None), ('LA_Chat_Body_MessageAreaTransferred', None), ('LA_Chat_Body_FileTransferCanceled', None), ('LA_Chat_Body_FileTransferSuccess', None), ('LA_Chat_Body_FileTransferFailure', None), ('LA_Chat_Body_FileTransferRequested', None), ('LA_Chat_Body_TransferFailed', None), ('LA_Chat_ExtendedHeader_ShowExtendedHeader', None), ('LA_Chat_ExtendedHeader_HideExtendedHeader', None), ('LA_Chat_ExtendedHeader_ChatStateHeaderGreeting', None), ('LA_Chat_ExtendedHeader_SaveTranscript', None), ('LA_Chat_ExtendedHeader_EndChatAction', None), ('LA_Chat_FileTransfer_FileUpload', None), ('LA_Chat_FileTransfer_UploadFile', None), ('LA_Chat_FileTransfer_SelectNewFile', None), ('LA_Chat_FileTransfer_UsePreviousElementToUploadFile', None), ('LA_Chat_FileTransfer_RemoveFile', None), ('LA_Chat_Minimized_MessageNotification', None), ('LA_Chat_Minimized_SingleMessageNotification', None), ('LA_Chat_Minimized_AgentSaysNotification', None), ('LA_Chat_Minimized_IdleTimeoutMinimizedWarning', None), ('LA_Chat_Minimized_IdleTimeoutMinimizedEndChat', None), ('LA_Chat_Ended_ChatEnd', None), ('LA_Chat_Ended_ChatEndAgent', None), ('LA_Chat_Ended_ChatEndConnection', None), ('LA_Chat_Ended_ChatButtonClose', None), ('LA_Chat_Ended_PostChatButton', None), ('LA_Chat_Ended_IdleTimeoutEndChatMessage', None), ('LA_Chat_Reconnecting_ReconnectingChasitorIssue', None), ('LA_Chat_Reconnecting_ReconnectingMinimizedMessage', None), ('LA_Chat_Timeout_IdleTimeoutWarningQuestion', None), ('LA_Chat_AgentTransfer_BannerInProgressTransfer', None), ('LA_Chat_AgentTransfer_MinimizedInProgressTransfer', None), ('LA_Chat_AgentTransfer_BannerTransferred', None), ('LA_Chat_AgentTransfer_BannerReconnected', None), ('LA_Chat_CloseConfirmation_ChatStateHeader', None), ('LA_Chat_CloseConfirmation_ChatStateBody', None), ('LA_Chat_CloseConfirmation_ChatStateResume', None), ('LA_Chat_CloseConfirmation_ChatStateEnd', None), ('LA_Chat_UnseenMessage_UnseenMessage', None), ('LA_Chat_UnseenMessage_SingleUnseenMessage', None), ('LA_OfflineSupport_SupportForm_HeaderText', None), ('LA_OfflineSupport_Error_ErrorDialogTitle', None), ('LA_OfflineSupport_Error_ErrorDialogBody', None), ('LA_OfflineSupport_Error_ErrorDialogButton', None), ('LA_OfflineSupport_SupportForm_SupportFormTitle', None), ('LA_OfflineSupport_SupportForm_SupportFormSubtitle', None), ('LA_OfflineSupport_SupportForm_SupportFormButton', None), ('LA_OfflineSupport_SupportForm_BannerAltText', None), ('LA_OfflineSupport_CloseConfirmation_ConfirmationDialogTitle', None), ('LA_OfflineSupport_CloseConfirmation_ConfirmationDialogBody', None), ('LA_OfflineSupport_CloseConfirmation_ConfirmationDialogButton', None), ('LA_OfflineSupport_Minimized_ConfirmationMinimizedText', None), ('LA_OfflineSupport_Minimized_ErrorMinimizedText', None), ('LA_PostChat_Base_PostChat', None), ('LA_PreChat_Base_LiveChat', None), ('LA_PreChat_Base_Instructions', None), ('LA_PreChat_Base_BannerAltText', None), ('LA_PreChat_Base_PrechatAssistiveText', None), ('LA_PreChat_Base_StartChat', None), ('LA_PreChat_Base_FieldError', None), ('LA_Waiting_WithoutQueuePos_WaitingGreeting', None), ('LA_Waiting_WithoutQueuePos_WaitingDefaultName', None), ('LA_Waiting_WithoutQueuePos_WaitingMessage', None), ('LA_Waiting_WithoutQueuePos_WaitingCancelChatRequest', None), ('LA_Waiting_WithQueuePos_WaitingQueuePosMessageFirstLine', None), ('LA_Waiting_WithQueuePos_WaitingQueuePosMessageSecondLine', None), ('LA_Waiting_WithQueuePos_WaitingQueuePosZeroMessage', None), ('LA_Waiting_WithQueuePos_WaitingQueuePosConnectingMessage', None), ('LA_Waiting_WithQueuePos_WaitingQueuePosMaxNumber', None), ('LA_Waiting_WithQueuePos_WaitingQueuePosMaxMessageFirstLine', None), ('LA_Waiting_WithQueuePos_WaitingQueuePosMaxMessageSecondLine', None), ('LA_Waiting_Minimized_MinimizedWaitingMessage', None), ('LA_Waiting_Minimized_MinimizedQueuePosMessage', None), ('LA_Waiting_Minimized_MinimizedQueuePosZeroMessage', None), ('LA_Waiting_Minimized_MinimizedQueuePosAssistiveMessage', None), ('LA_Waiting_Minimized_MinimizedQueuePosZeroAssistiveMessage', None), ('LA_Waiting_Error_ErrorNoAgentTitle', None), ('LA_Waiting_Error_ErrorNoAgentHeader', None), ('LA_Waiting_Error_ErrorNoAgentBodyApology', None), ('LA_Waiting_Error_ErrorBlockedTitleAndHeader', None), ('LA_Waiting_Error_ErrorBlockedBody', None), ('LA_Waiting_Error_ErrorBlockedCloseButton', None), ('LA_Waiting_Error_ErrorNoConnectionTitle', None), ('LA_Waiting_Error_ErrorNoConnectionHeader', None), ('LA_Waiting_Error_ErrorNoConnectionBodyApology', None), ('LA_Waiting_Error_ErrorTryAgainButton', None), ('LA_Waiting_Error_ErrorExitChatButton', None), ('LA_Waiting_CloseConfirmation_WaitingStateHeader', None), ('LA_Waiting_CloseConfirmation_WaitingStateBodyApology', None), ('LA_Waiting_CloseConfirmation_WaitingStateLeave', None), ('LA_Waiting_CloseConfirmation_WaitingStateContinue', None), ('LA_Chat_Timeout_IdleTimeoutWarningRequest', None), ('LA_Waiting_Error_ErrorNoAgentBodyRequest', None), ('LA_Waiting_Error_ErrorNoConnectionBodyRequest', None), ('LA_Waiting_CloseConfirmation_WaitingStateBodyWarning', None), ('LA_General_CloseSessionWarningTitle', None), ('LA_General_CloseSessionWarningBody', None), ('LA_General_CloseSessionWarningButton', None), ('LA_Chat_Body_ChooseOption', None), ('LA_Waiting_Base_BannerAssistiveText', None), ('LA_Chat_Group_Chat_HeaderTitle', None), ('LA_Chat_Group_Chat_ExtendedHeaderGreeting', None), ('LA_Chat_Group_Chat_AgentJoinedChat', None), ('LA_Chat_Group_Chat_AgentLeftChat', None), ('LA_Chat_Group_Chat_MinimizedStateMessage', None), ('LA_Chat_WithQueuePos_QueuePosTransferringMessage', None), ('FS_Container_Base_Back', None), ('FS_Container_AuthenticationFailure_Title', None), ('FS_Container_AuthenticationFailure_Body', None), ('FS_Container_AuthenticationFailure_Button', None), ('FS_AppointmentDetail_Error_AccessDenied', None), ('FS_AppointmentDetail_Error_NoAppointmentFound', None), ('FS_AppointmentDetail_Error_ButtonOK', None), ('FS_AppointmentList_Base_ActiveAppointmentTab', None), ('FS_AppointmentList_Base_ClosedAppointmentTab', None), ('FS_AppointmentList_Base_Header', None), ('FS_AppointmentList_Base_NewAppointmentButtonLabel', None), ('FS_AppointmentList_Error_GenericErrorStatement', None), ('FS_AppointmentList_Empty_NoAppointmentsTitleUpcomingTab', None), ('FS_AppointmentList_Empty_NoAppointmentsDescriptionUpcomingTab', None), ('FS_AppointmentList_Empty_NoAppointmentsTitlePastTab', None), ('FS_AppointmentList_Empty_NoAppointmentsDescriptionPastTab', None), ('FS_Confirmation_Base_Scheduled', None), ('FS_Confirmation_Base_Assigned', None), ('FS_Confirmation_Base_Arriving', None), ('FS_Confirmation_Base_InProgress', None), ('FS_Confirmation_Base_Dispatched', None), ('FS_Confirmation_Base_Completed', None), ('FS_Confirmation_Base_HeaderText', None), ('FS_Confirmation_Base_AddCalendar', None), ('FS_Confirmation_Base_ViewAppointment', None), ('FS_Flows_Error_Title', None), ('FS_Flows_Error_Body', None), ('FS_Flows_Error_ConfirmButton', None), ('FS_Flows_Error_CancelOrModifyError', None), ('FS_Flows_NewAppointmentCloseConfirmation_Title', None), ('FS_Flows_NewAppointmentCloseConfirmation_Body', None), ('FS_Flows_NewAppointmentCloseConfirmation_ButtonClose', None), ('FS_Flows_NewAppointmentCloseConfirmation_ButtonCancel', None), ('FS_Flows_CancelAppointmentCloseConfirmation_Title', None), ('FS_Flows_CancelAppointmentCloseConfirmation_Body', None), ('FS_Flows_CancelAppointmentCloseConfirmation_ButtonClose', None), ('FS_Flows_CancelAppointmentCloseConfirmation_ButtonCancel', None), ('FS_Flows_CancelAppointmentCloseConfirmation_Footer', None), ('FS_Flows_ModifyAppointmentCloseConfirmation_Title', None), ('FS_Flows_ModifyAppointmentCloseConfirmation_Body', None), ('FS_Flows_ModifyAppointmentCloseConfirmation_ButtonClose', None), ('FS_Flows_ModifyAppointmentCloseConfirmation_ButtonCancel', None), ('FS_Flows_ModifyAppointmentCloseConfirmation_Footer', None), ('FS_Scheduling_Base_HeaderText', None), ('FS_Scheduling_Base_RecommendedTab', None), ('FS_Scheduling_Base_ByDateTab', None), ('FS_Scheduling_Base_PreviousWeekAssistiveText', None), ('FS_Scheduling_Base_NextWeekAssistiveText', None), ('FS_Scheduling_Base_DatePickerAssistiveText', None), ('FS_Scheduling_Error_UnexpectedError', None), ('FS_Scheduling_Error_NoAvailableTimeslotsError', None), ('FS_Scheduling_Error_NoAvailableTimeslotsByDateError', None), ('FS_Welcome_Base_GreetingTitle', None), ('FS_Welcome_Base_NewAppointmentButton', None), ('FS_Welcome_Base_ExistingAppointmentsButton', None), ('FS_Confirmation_Base_DoneButton', None), ('FS_AppointmentList_Error_GenericErrorRequest', None), ('FS_AppointmentHome_Base_CancelAppointmentButton', None), ('FS_AppointmentHome_Base_ModifyAppointmentButton', None), ('FS_AppointmentHome_Base_ErrorTitle', None), ('FS_Scheduling_Base_TimePickerAssistiveText', None), ('FS_ResourceDetail_Base_Header', None), ('FS_AppointmentHome_Base_DefaultCardHeaderText', None), ('FS_Error_Dialog_Title', None), ('FS_Error_Dialog_Body', None), ('FS_Error_Dialog_Confirm_Button', None)], blank=True, null=True)
    custom_label_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EmbeddedServiceLabel'
        verbose_name = 'Embedded Service Label'
        verbose_name_plural = 'Embedded Service Labels'
        # keyPrefix = '0Uu'



class EntityDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    plural_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_compact_layout_id = models.CharField(max_length=70, verbose_name='Compact Layout ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_customizable = models.BooleanField(verbose_name='Is Customizable?', sf_read_only=models.READ_ONLY, default=False)
    is_apex_triggerable = models.BooleanField(verbose_name='Is Apex Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_enabled = models.BooleanField(verbose_name='Is Workflow Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_process_enabled = models.BooleanField(verbose_name='Is Approval Process Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    key_prefix = models.CharField(max_length=3, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_custom_setting = models.BooleanField(verbose_name='Is Custom Setting?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_replicateable = models.BooleanField(verbose_name='Is Replicateable?', sf_read_only=models.READ_ONLY, default=False)
    is_retrieveable = models.BooleanField(verbose_name='Is Retrieveable?', sf_read_only=models.READ_ONLY, default=False)
    is_search_layoutable = models.BooleanField(verbose_name='Is Search Layoutable?', sf_read_only=models.READ_ONLY, default=False)
    is_searchable = models.BooleanField(verbose_name='Is Searchable?', sf_read_only=models.READ_ONLY, default=False)
    is_triggerable = models.BooleanField(verbose_name='Is Triggerable?', sf_read_only=models.READ_ONLY, default=False)
    is_id_enabled = models.BooleanField(verbose_name='Is Id Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_creatable = models.BooleanField(verbose_name='Is Ever Creatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_updatable = models.BooleanField(verbose_name='Is Ever Updatable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_ever_deletable = models.BooleanField(verbose_name='Is Ever Deletable via API?', sf_read_only=models.READ_ONLY, default=False)
    is_feed_enabled = models.BooleanField(verbose_name='Is Feed Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_queryable = models.BooleanField(verbose_name='Queryable', sf_read_only=models.READ_ONLY, default=False)
    is_mru_enabled = models.BooleanField(verbose_name='Is MRU List Functionality Enabled for This Object?', sf_read_only=models.READ_ONLY, default=False)
    detail_url = models.URLField(verbose_name='Detail URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_url = models.URLField(verbose_name='Edit URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_url = models.URLField(verbose_name='New URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    edit_definition_url = models.URLField(verbose_name='Edit Definition URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    help_setting_page_url = models.URLField(verbose_name='Help Setting Page URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_entity_access_id = models.CharField(max_length=150, verbose_name='User Entity Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    publisher_id = models.CharField(max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_layoutable = models.BooleanField(verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    record_types_supported = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    internal_sharing_model = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')])
    external_sharing_model = models.CharField(max_length=255, verbose_name='External sharing Model', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')])
    has_subtypes = models.BooleanField(verbose_name='Has Subtypes?', sf_read_only=models.READ_ONLY, default=False)
    is_subtype = models.BooleanField(verbose_name='Is Subtype?', sf_read_only=models.READ_ONLY, default=False)
    is_auto_activity_capture_enabled = models.BooleanField(verbose_name='Is Einstein Activity Capture Enabled?', sf_read_only=models.READ_ONLY, default=False)
    data_steward = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    class Meta(models.Model.Meta):
        db_table = 'EntityDefinition'
        verbose_name = 'Entity Definition'
        verbose_name_plural = 'Entity Definitions'
        # keyPrefix = '4ie'



class EntityParticle(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_autonumber = models.BooleanField(verbose_name='Is Field an Autonumber?', sf_read_only=models.READ_ONLY, default=False)
    byte_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_case_sensitive = models.BooleanField(verbose_name='Is Field Case Sensitive?', sf_read_only=models.READ_ONLY, default=False)
    is_unique = models.BooleanField(verbose_name='Is Field Unique?', sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(verbose_name='Is Field Creatable?', sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(verbose_name='Is Field Updatable?', sf_read_only=models.READ_ONLY, default=False)
    is_defaulted_on_create = models.BooleanField(verbose_name='Is Field Defaulted On Create?', sf_read_only=models.READ_ONLY, default=False)
    is_write_requires_master_read = models.BooleanField(verbose_name='Does Write Require Master Read?', sf_read_only=models.READ_ONLY, default=False)
    is_calculated = models.BooleanField(verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_permissionable = models.BooleanField(verbose_name='Is Field Permissionable?', sf_read_only=models.READ_ONLY, default=False)
    is_encrypted = models.BooleanField(verbose_name='Is Field Encrypted?', sf_read_only=models.READ_ONLY, default=False)
    digits = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    inline_help_text = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_target_field = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mask_type = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_workflow_filterable = models.BooleanField(verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_layoutable = models.BooleanField(verbose_name='Is Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    is_dependent_picklist = models.BooleanField(verbose_name='Is Field a Dependent Picklist?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Field a Deprecated and Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_display_location_in_decimal = models.BooleanField(verbose_name='Is Field Displays Location in Decimals?', sf_read_only=models.READ_ONLY, default=False)
    default_value_formula = models.CharField(max_length=150, verbose_name='Default Value if Formula is Not Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_id_lookup = models.BooleanField(verbose_name='Can this Field be Used to Specify a Record in Upsert?', sf_read_only=models.READ_ONLY, default=False)
    is_name_pointing = models.BooleanField(verbose_name='Does this Field Contain the Name of the Parent?', sf_read_only=models.READ_ONLY, default=False)
    relationship_order = models.IntegerField(verbose_name='Type of Relationship for a Master-Detail Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.TextField(verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    is_component = models.BooleanField(verbose_name='Is Field a component of a compound field', sf_read_only=models.READ_ONLY, default=False)
    is_compound = models.BooleanField(verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntityParticle'
        verbose_name = 'Entity Particle'
        verbose_name_plural = 'Entity Particles'
        # keyPrefix = '0Nv'



class EntitySubscription(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentDocument, Contract, Dashboard, DashboardComponent, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, Opportunity, Order, OrderItem, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    subscriber = models.ForeignKey('User', models.DO_NOTHING, related_name='entitysubscription_subscriber_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='entitysubscription_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EntitySubscription'
        verbose_name = 'Entity Subscription'
        verbose_name_plural = 'Entity Subscriptions'
        # keyPrefix = '0E8'



class EquipmentAssignmentChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipmentassignmentchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipmentassignmentchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    assigned_to = models.ForeignKey(Contact, models.DO_NOTHING, db_column='Assigned_To__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    equipment = models.ForeignKey('Equipment', models.DO_NOTHING, custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date = models.DateField(custom=True, db_column='Start_Date__c', verbose_name='Start Date', sf_read_only=models.READ_ONLY, help_text='Starting date of the loan', blank=True, null=True)
    estimated_return_date = models.DateField(custom=True, db_column='Estimated_Return_Date__c', verbose_name='Estimated Return Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    actual_return_date = models.DateField(custom=True, db_column='Actual_Return_Date__c', verbose_name='Actual Return Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Equipment_Assignment__ChangeEvent'
        verbose_name = 'Change Event: Equipment Assignment'
        verbose_name_plural = 'Change Event: Equipment Assignment'
        # keyPrefix = 'None'



class EquipmentAssignmentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('EquipmentAssignment', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Actual_Return_Date__c', 'Actual Return Date'), ('Assigned_To__c', 'Assigned To'), ('created', 'Created.'), ('Equipment__c', 'Equipment'), ('Name', 'Equipment Assignment Number'), ('Estimated_Return_Date__c', 'Estimated Return Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Start_Date__c', 'Start Date')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Equipment_Assignment__History'
        verbose_name = 'History: Equipment Assignment'
        verbose_name_plural = 'History: Equipment Assignment'
        # keyPrefix = 'None'



class EquipmentAssignment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Equipment Assignment Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipmentassignment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipmentassignment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    assigned_to = models.ForeignKey(Contact, models.DO_NOTHING, db_column='Assigned_To__c', custom=True)  # Master Detail Relationship 0
    equipment = models.ForeignKey('Equipment', models.DO_NOTHING, custom=True)  # Master Detail Relationship 1
    start_date = models.DateField(custom=True, db_column='Start_Date__c', verbose_name='Start Date', help_text='Starting date of the loan', blank=True, null=True)
    estimated_return_date = models.DateField(custom=True, db_column='Estimated_Return_Date__c', verbose_name='Estimated Return Date', blank=True, null=True)
    actual_return_date = models.DateField(custom=True, db_column='Actual_Return_Date__c', verbose_name='Actual Return Date', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Equipment_Assignment__c'
        verbose_name = 'Equipment Assignment'
        verbose_name_plural = 'Equipment Assignments'
        # keyPrefix = 'a0x'



class EquipmentChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipmentchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipmentchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    model = models.CharField(custom=True, max_length=20, sf_read_only=models.READ_ONLY, help_text='Model of the computer. Ex: MacBook Pro, MacBook Air, etc', blank=True, null=True)
    os = models.CharField(custom=True, db_column='OS__c', max_length=20, verbose_name='OS', sf_read_only=models.READ_ONLY, blank=True, null=True)
    serial = models.CharField(custom=True, max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    ram = models.CharField(custom=True, db_column='RAM__c', max_length=7, verbose_name='RAM', sf_read_only=models.READ_ONLY, help_text='RAM (GB)', blank=True, null=True)
    cpu = models.CharField(custom=True, db_column='CPU__c', max_length=20, verbose_name='CPU', sf_read_only=models.READ_ONLY, blank=True, null=True)
    disk_capacity = models.CharField(custom=True, db_column='Disk_Capacity__c', max_length=10, verbose_name='Disk Capacity', sf_read_only=models.READ_ONLY, help_text='Storage (Disk Capacity) in GB', blank=True, null=True)
    status = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, default='Active', choices=[('Active', 'Active'), ('Broken', 'Broken'), ('Given-away', 'Given-away'), ('Lost', 'Lost')], blank=True, null=True)
    notes = models.TextField(custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    date_acquired = models.DateField(custom=True, db_column='Date_Acquired__c', verbose_name='Date Acquired', sf_read_only=models.READ_ONLY, blank=True, null=True)
    purchased_or_donated = models.CharField(custom=True, db_column='purchased_or_donated__c', max_length=255, verbose_name='Purchased or Donated?', sf_read_only=models.READ_ONLY, default='Donated', choices=[('Donated', 'Donated'), ('Purchased', 'Purchased')], blank=True, null=True)
    date_retired = models.DateField(custom=True, db_column='Date_Retired__c', verbose_name='Date Retired', sf_read_only=models.READ_ONLY, blank=True, null=True)
    manufacturer = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Apple', 'Apple'), ('Dell', 'Dell'), ('Lenovo', 'Lenovo'), ('HP', 'HP')], blank=True, null=True)
    condition = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Acceptable', 'Acceptable'), ('Poor', 'Poor'), ('Unusable', 'Unusable')], blank=True, null=True)
    vendor_donor = models.CharField(custom=True, db_column='Vendor_Donor__c', max_length=100, verbose_name='Vendor / Donor', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(custom=True, max_length=22, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Equipment__ChangeEvent'
        verbose_name = 'Change Event: Equipment'
        verbose_name_plural = 'Change Event: Equipment'
        # keyPrefix = 'None'



class Equipment(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Equipment Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='equipment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    model = models.CharField(custom=True, max_length=20, help_text='Model of the computer. Ex: MacBook Pro, MacBook Air, etc', blank=True, null=True)
    os = models.CharField(custom=True, db_column='OS__c', max_length=20, verbose_name='OS', blank=True, null=True)
    serial = models.CharField(custom=True, unique=True, max_length=20, blank=True, null=True)
    ram = models.CharField(custom=True, db_column='RAM__c', max_length=7, verbose_name='RAM', help_text='RAM (GB)', blank=True, null=True)
    cpu = models.CharField(custom=True, db_column='CPU__c', max_length=20, verbose_name='CPU', blank=True, null=True)
    disk_capacity = models.CharField(custom=True, db_column='Disk_Capacity__c', max_length=10, verbose_name='Disk Capacity', help_text='Storage (Disk Capacity) in GB', blank=True, null=True)
    status = models.CharField(custom=True, max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('Active', 'Active'), ('Broken', 'Broken'), ('Given-away', 'Given-away'), ('Lost', 'Lost')], blank=True, null=True)
    notes = models.TextField(custom=True, blank=True, null=True)
    date_acquired = models.DateField(custom=True, db_column='Date_Acquired__c', verbose_name='Date Acquired', blank=True, null=True)
    purchased_or_donated = models.CharField(custom=True, db_column='purchased_or_donated__c', max_length=255, verbose_name='Purchased or Donated?', default=models.DEFAULTED_ON_CREATE, choices=[('Donated', 'Donated'), ('Purchased', 'Purchased')], blank=True, null=True)
    date_retired = models.DateField(custom=True, db_column='Date_Retired__c', verbose_name='Date Retired', blank=True, null=True)
    manufacturer = models.CharField(custom=True, max_length=255, choices=[('Apple', 'Apple'), ('Dell', 'Dell'), ('Lenovo', 'Lenovo'), ('HP', 'HP')], blank=True, null=True)
    condition = models.CharField(custom=True, max_length=255, choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Acceptable', 'Acceptable'), ('Poor', 'Poor'), ('Unusable', 'Unusable')], blank=True, null=True)
    vendor_donor = models.CharField(custom=True, db_column='Vendor_Donor__c', max_length=100, verbose_name='Vendor / Donor', blank=True, null=True)
    label = models.CharField(custom=True, max_length=22, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Equipment__c'
        verbose_name = 'Equipment'
        verbose_name_plural = 'Equipments'
        # keyPrefix = 'a0w'



class Event(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='event_what_set', blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Enrollment__c, ContactRequest, Contract, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, npe03__Recurring_Donation__c, npo02__Household__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c] Master Detail Relationship *
    who_count = models.IntegerField(verbose_name='Relation Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    what_count = models.IntegerField(verbose_name='Related To Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(max_length=255, choices=[('Call', 'Call'), ('Email', 'Email'), ('Meeting', 'Meeting'), ('Send Letter/Quote', 'Send Letter/Quote'), ('Other', 'Other')], blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)
    activity_date_time = models.DateTimeField(verbose_name='Due Date Time', blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', blank=True, null=True)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', blank=True, null=True)
    start_date_time = models.DateTimeField(blank=True, null=True)
    end_date_time = models.DateTimeField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='event_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey(Calendar, models.DO_NOTHING)  # Reference to tables [Calendar, User]
    type = models.CharField(max_length=40, choices=[('Call', 'Call'), ('Text', 'Text'), ('Email', 'Email'), ('Meeting', 'Meeting')], blank=True, null=True)
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    show_as = models.CharField(max_length=40, verbose_name='Show Time As', default=models.DEFAULTED_ON_CREATE, choices=[('Busy', 'Busy'), ('OutOfOffice', 'Out of Office'), ('Free', 'Free')], blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_child = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_group_event = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    group_event_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='0', choices=[('0', 'Non-group Event'), ('1', 'Group Event'), ('2', 'Proposed Event'), ('3', 'IsRecurrence2 Series Pattern')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='event_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='event_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Events', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date_time = models.DateTimeField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', default=models.DEFAULTED_ON_CREATE)
    event_subtype = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Event', 'Event')], blank=True, null=True)
    is_recurrence2_exclusion = models.BooleanField(verbose_name='Historical Event, Not Following Recurrence', sf_read_only=models.READ_ONLY, default=False)
    recurrence2_pattern_text = models.TextField(verbose_name='Recurrence Pattern', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence2_pattern_version = models.CharField(max_length=40, verbose_name='Pattern Version', sf_read_only=models.READ_ONLY, choices=[('1', 'RFC 5545 v4 RRULE')], blank=True, null=True)
    is_recurrence2 = models.BooleanField(verbose_name='Repeat', sf_read_only=models.READ_ONLY, default=False)
    is_recurrence2_exception = models.BooleanField(verbose_name='Is Exception', sf_read_only=models.READ_ONLY, default=False)
    recurrence2_pattern_start_date = models.DateTimeField(verbose_name='Recurrence Pattern Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence2_pattern_time_zone = models.CharField(max_length=255, verbose_name='Recurrence Pattern Time Zone Reference', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Task__c', custom=True, blank=True, null=True) 
    npsp_engagement_plan = models.ForeignKey('NpspEngagementPlan', models.DO_NOTHING, db_column='npsp__Engagement_Plan__c', custom=True, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Event'
        verbose_name = 'Event'
        verbose_name_plural = 'Events'
        # keyPrefix = '00U'



class EventBusSubscriber(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80, verbose_name='Subscriber Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    topic = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    position = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    tip = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    retries = models.IntegerField(verbose_name='Retry Attempts', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_error = models.CharField(max_length=255, verbose_name='Last Error Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Running', 'Running'), ('Suspended', 'Suspended'), ('Expired', 'Expired'), ('Error', 'Error')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventBusSubscriber'
        verbose_name = 'Platform Event Subscription'
        verbose_name_plural = 'Platform Event Subscription'
        # keyPrefix = '0Cd'



class EventChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='eventchangeevent_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    who_count = models.IntegerField(verbose_name='Relation Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    what_count = models.IntegerField(verbose_name='Related To Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Email', 'Email'), ('Meeting', 'Meeting'), ('Send Letter/Quote', 'Send Letter/Quote'), ('Other', 'Other')], blank=True, null=True)
    location = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_date_time = models.DateTimeField(verbose_name='Due Date Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', sf_read_only=models.READ_ONLY, blank=True, null=True)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='eventchangeevent_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='eventchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Text', 'Text'), ('Email', 'Email'), ('Meeting', 'Meeting')], blank=True, null=True)
    is_private = models.BooleanField(verbose_name='Private', sf_read_only=models.READ_ONLY, default=False)
    show_as = models.CharField(max_length=40, verbose_name='Show Time As', sf_read_only=models.READ_ONLY, default='Busy', choices=[('Busy', 'Busy'), ('OutOfOffice', 'Out of Office'), ('Free', 'Free')], blank=True, null=True)
    is_child = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_group_event = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    group_event_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='0', choices=[('0', 'Non-group Event'), ('1', 'Group Event'), ('2', 'Proposed Event'), ('3', 'IsRecurrence2 Series Pattern')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_activity = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Events', sf_read_only=models.READ_ONLY, default=False)
    recurrence_start_date_time = models.DateTimeField(verbose_name='Recurrence Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', sf_read_only=models.READ_ONLY, choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    is_recurrence2_exclusion = models.BooleanField(verbose_name='Historical Event, Not Following Recurrence', sf_read_only=models.READ_ONLY, default=False)
    recurrence2_pattern_text = models.TextField(verbose_name='Recurrence Pattern', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence2_pattern_version = models.CharField(max_length=40, verbose_name='Pattern Version', sf_read_only=models.READ_ONLY, choices=[('1', 'RFC 5545 v4 RRULE')], blank=True, null=True)
    npsp_engagement_plan_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Task__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_engagement_plan = models.ForeignKey('NpspEngagementPlan', models.DO_NOTHING, db_column='npsp__Engagement_Plan__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'EventChangeEvent'
        verbose_name = 'Event Change Event'
        verbose_name_plural = 'Event Change Event'
        # keyPrefix = 'None'



class EventFeed(models.Model):
    parent = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey('FeedComment', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventFeed'
        verbose_name = 'Event Feed'
        verbose_name_plural = 'Event Feed'
        # keyPrefix = 'None'



class EventLogFile(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventlogfile_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventlogfile_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    event_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('API', 'API'), ('ApexCallout', 'Apex Callout'), ('ApexExecution', 'Apex Execution'), ('ApexSoap', 'Apex SOAP'), ('ApexTrigger', 'Apex Trigger'), ('ApexUnexpectedException', 'Apex Unexpected Exception'), ('AsyncReportRun', 'Asynchronous Report Run'), ('ConcurrentLongRunningApexLimit', 'Concurrent Long Running Apex Limit'), ('ContinuationCallout', 'Continuation Callout'), ('ExternalCrossOrgCallout', 'External Cross-Org Callout'), ('ExternalCustomApexCallout', 'External Custom Apex Callout'), ('ExternalODataCallout', 'External OData Callout'), ('BulkApi', 'Bulk API'), ('ChangeSetOperation', 'Change Set Operation'), ('Console', 'Console'), ('ContentDistribution', 'Content Distribution'), ('ContentDocumentLink', 'Content Document Link'), ('ContentTransfer', 'Content Transfer'), ('Dashboard', 'Dashboard'), ('DocumentAttachmentDownloads', 'Document Attachment Downloads'), ('InsecureExternalAssets', 'Insecure External Assets'), ('KnowledgeArticleView', 'Knowledge Article View'), ('LightningError', 'Lightning Error'), ('LightningInteraction', 'Lightning Interaction'), ('LightningPageView', 'Lightning Page View'), ('LightningPerformance', 'Lightning Performance'), ('Login', 'Login'), ('LoginAs', 'Login As'), ('Logout', 'Logout'), ('MetadataApiOperation', 'Metadata API Operation'), ('MultiBlockReport', 'Multiblock Report'), ('PackageInstall', 'Package Install'), ('QueuedExecution', 'Queued Execution'), ('Report', 'Report'), ('ReportExport', 'Report Export'), ('RestApi', 'Rest API'), ('Sandbox', 'Sandbox'), ('Search', 'Search'), ('SearchClick', 'Search Click'), ('Sites', 'Sites'), ('PlatformEncryption', 'Platform Encryption'), ('TimeBasedWorkflow', 'Time-Based Workflow'), ('TransactionSecurity', 'Transaction Security'), ('UITracking', 'UI Tracking'), ('URI', 'URI'), ('VisualforceRequest', 'Visualforce Request'), ('WaveChange', 'Wave Change'), ('WaveInteraction', 'Wave Interaction'), ('WavePerformance', 'Wave Performance')])
    log_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    log_file_length = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY)
    log_file_content_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version', sf_read_only=models.READ_ONLY)
    log_file_field_names = models.CharField(max_length=1333, sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_file_field_types = models.CharField(max_length=1333, sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_file = models.TextField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'EventLogFile'
        verbose_name = 'Event Log File'
        verbose_name_plural = 'Event Log Files'
        # keyPrefix = '0AT'



class EventRelation(models.Model):
    relation = models.ForeignKey(Account, models.DO_NOTHING, related_name='eventrelation_relation_set', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, AssetRelationship, Calendar, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, ListEmail, Opportunity, Order, Product2, Quote, Solution, Survey__c, User, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_what = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_parent = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    is_invitee = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='eventrelation_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, choices=[('New', 'New'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('Uninvited', 'Uninvited'), ('Maybe', 'Maybe')], blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', blank=True, null=True)
    response = models.CharField(max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'EventRelation'
        verbose_name = 'Event Relation'
        verbose_name_plural = 'Event Relations'
        # keyPrefix = '0RE'



class EventRelationChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    relation = models.ForeignKey(Account, models.DO_NOTHING, related_name='eventrelationchangeevent_relation_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Calendar, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, ListEmail, Opportunity, Order, Product2, Quote, Solution, Survey__c, User, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_what = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_parent = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_invitee = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='eventrelationchangeevent_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('New', 'New'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('Uninvited', 'Uninvited'), ('Maybe', 'Maybe')], blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelationchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventrelationchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventRelationChangeEvent'
        verbose_name = 'Event Relation Change Event'
        verbose_name_plural = 'Event Relation Change Event'
        # keyPrefix = 'None'



class EventWhoRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventwhorelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='eventwhorelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'EventWhoRelation'
        verbose_name = 'Event Who Relation'
        verbose_name_plural = 'Event Who Relations'
        # keyPrefix = 'None'



class ExpressionFilter(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='ExpressionFilter Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='expressionfilter_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='expressionfilter_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    filter_condition_logic = models.CharField(max_length=255, verbose_name='FilterConditionLogic', blank=True, null=True)
    context = models.ForeignKey('MacroInstruction', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    filter_description = models.CharField(max_length=255, verbose_name='FilterDescription', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExpressionFilter'
        verbose_name = 'ExpressionFilter'
        verbose_name_plural = 'ExpressionFilters'
        # keyPrefix = '1GS'



class ExpressionFilterCriteria(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='ExpressionFilterCriteria Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='expressionfiltercriteria_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='expressionfiltercriteria_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    filter_target = models.CharField(max_length=255, verbose_name='FilterTarget', blank=True, null=True)
    filter_target_value = models.CharField(max_length=255, verbose_name='Context', blank=True, null=True)
    operation = models.CharField(max_length=255)
    sort_order = models.IntegerField(verbose_name='SortOrder', blank=True, null=True)
    expression_filter = models.ForeignKey(ExpressionFilter, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ExpressionFilterCriteria'
        verbose_name = 'ExpressionFilterCriteria'
        verbose_name_plural = 'ExpressionFilterCriteria'
        # keyPrefix = '8BM'



class ExternalDataSource(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='External Data Source', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatasource_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatasource_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=255, verbose_name='Class ID', sf_read_only=models.READ_ONLY, choices=[('contentHubItem', None), ('Datajourney', None), ('Identity', None), ('OpenSearch', None), ('outgoingemail', None), ('recommendation', None), ('Wrapper', None)])
    endpoint = models.TextField(verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    repository = models.CharField(max_length=255, verbose_name='Default External Repository', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_writable = models.BooleanField(verbose_name='Writable External Objects', sf_read_only=models.READ_ONLY, default=False)
    principal_type = models.CharField(max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')])
    protocol = models.CharField(max_length=255, verbose_name='Authentication Protocol', sf_read_only=models.READ_ONLY, help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication'), ('AwsSv4', 'AWS Signature Version 4'), ('Jwt', 'JWT'), ('JwtExchange', 'JWT Token Exchange')])
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    large_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, related_name='externaldatasource_largeicon_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_icon = models.ForeignKey('StaticResource', models.DO_NOTHING, related_name='externaldatasource_smallicon_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    custom_configuration = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataSource'
        verbose_name = 'External Data Source'
        verbose_name_plural = 'External Data Sources'
        # keyPrefix = '0XC'



class ExternalDataUserAuth(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ExternalDataSource, NamedCredential] Master Detail Relationship *
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='externaldatauserauth_user_set', blank=True, null=True)
    protocol = models.CharField(max_length=255, verbose_name='Authentication Protocol', help_text='Specify how Salesforce should authenticate to the external server. Password Authentication indicates that a username and password are required to authenticate. No Authentication indicates that no credentials are required.', choices=[('NoAuthentication', 'No Authentication'), ('Oauth', 'OAuth 2.0'), ('Password', 'Password Authentication'), ('AwsSv4', 'AWS Signature Version 4'), ('Jwt', 'JWT'), ('JwtExchange', 'JWT Token Exchange')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    username = models.CharField(max_length=255, blank=True, null=True)
    password = models.TextField(blank=True, null=True)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ExternalDataUserAuth'
        verbose_name = 'External Data User Authentication'
        verbose_name_plural = 'External Data User Authentications'
        # keyPrefix = '0XU'



class ExternalSocialAccount(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externalsocialaccount_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='externalsocialaccount_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    external_account_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    username = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    provider = models.CharField(max_length=255, verbose_name='Social Network', sf_read_only=models.READ_ONLY, choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('InstagramBusiness', 'InstagramBusiness'), ('GoogleRtc', 'GoogleRTC'), ('Other', 'Other Media Type')])
    provider_user_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    external_picture_url = models.URLField(db_column='ExternalPictureURL', verbose_name='Provider External Picture URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Is Active Account', sf_read_only=models.READ_ONLY, default=False)
    social_property_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_authenticated = models.BooleanField(verbose_name='Is Account Authenticated', sf_read_only=models.READ_ONLY, default=False)
    topic_id = models.CharField(max_length=255, verbose_name='Topic Profile Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_source_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    rule_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_data_source_active = models.BooleanField(verbose_name='Active Data Source', sf_read_only=models.READ_ONLY, default=False)
    unique_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    default_response_account = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    profile_url = models.URLField(verbose_name='Profile URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authorized_by = models.CharField(max_length=255, verbose_name='Authorized by', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_case_creation_enabled = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ExternalSocialAccount'
        verbose_name = 'Managed Social Account'
        verbose_name_plural = 'Managed Social Accounts'
        # keyPrefix = '0AL'



class FeedAttachment(models.Model):
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedComment, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Attachment Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('Content', None), ('InlineImage', None), ('Link', None), ('FeedEntity', None), ('ChatterExtension', None), ('Record', None)])
    record = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentDocument, ContentVersion, FeedItem]
    title = models.CharField(max_length=255, verbose_name='Feed Attachment Title', blank=True, null=True)
    value = models.CharField(max_length=1000, verbose_name='Feed Attachment Value', blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedAttachment'
        verbose_name = 'Feed Attachment'
        verbose_name_plural = 'Feed Attachments'
        # keyPrefix = '08M'



class FeedComment(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentDocument, Contract, Dashboard, DashboardComponent, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, Opportunity, Order, OrderItem, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_lasteditby_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_body = models.TextField()
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedcomment_insertedby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    comment_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('TextComment', None), ('ContentComment', None)], blank=True, null=True)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    is_rich_text = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    is_verified = models.BooleanField(verbose_name='Is a Verified Comment', sf_read_only=models.READ_ONLY, default=False)
    has_entity_links = models.BooleanField(verbose_name='Has entity links', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview'), ('Draft', 'Draft')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    thread_parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    thread_level = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    thread_children_count = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    thread_last_updated_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedComment'
        verbose_name = 'Feed Comment'
        verbose_name_plural = 'Feed Comments'
        # keyPrefix = '0D7'



class FeedItem(models.Model):
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, Contact, ContentDocument, Contract, Dashboard, DashboardComponent, Equipment_Assignment__c, Equipment__c, Event, Incident__c, Lead, Opportunity, Order, OrderItem, Product2, Quote, Report, Site, SocialPost, Solution, Survey__c, Task, Topic, User, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    revision = models.IntegerField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_lasteditby_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    last_edit_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_rich_text = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feeditem_insertedby_set', sf_read_only=models.READ_ONLY)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, related_name='feeditem_bestcomment_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_content = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_link = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_feed_entity = models.BooleanField(verbose_name='Has Feed Entity Attachment', sf_read_only=models.READ_ONLY, default=False)
    has_verified_comment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, choices=[('Published', 'Published'), ('PendingReview', 'PendingReview'), ('Draft', 'Draft')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedItem'
        verbose_name = 'Feed Item'
        verbose_name_plural = 'Feed Items'
        # keyPrefix = '0D5'



class FeedLike(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedlike_feeditem_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedlike_feedentity_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedComment, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedlike_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedlike_insertedby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'FeedLike'
        verbose_name = 'Feed Like'
        verbose_name_plural = 'Feed Likes'
        # keyPrefix = '0I0'



class FeedPollChoice(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    position = models.IntegerField(sf_read_only=models.READ_ONLY)
    choice_body = models.TextField(verbose_name='ChoiceBody', sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollChoice'
        verbose_name = 'Feed Poll Choice'
        verbose_name_plural = 'Feed Poll Choices'
        # keyPrefix = '09A'



class FeedPollVote(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    choice = models.ForeignKey(FeedPollChoice, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedPollVote'
        verbose_name = 'Feed Poll Vote'
        verbose_name_plural = 'Feed Poll Votes'
        # keyPrefix = '09B'



class FeedRevision(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    feed_entity = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [FeedComment, FeedItem] Master Detail Relationship *
    revision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    action = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Changed', None)], blank=True, null=True)
    edited_attribute = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('FeedCommentBody', None), ('FeedElementBody', None), ('FeedElementQuestionTitle', None), ('FeedElementVisibility', None), ('FeedElementParent', None)], blank=True, null=True)
    value = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_value_rich_text = models.BooleanField(verbose_name='Is Value RichText', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FeedRevision'
        verbose_name = 'Feed Revision'
        verbose_name_plural = 'Feed Revisions'
        # keyPrefix = '08U'



class FeedSignal(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedsignal_feeditem_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    feed_entity = models.ForeignKey(AccountFeed, models.DO_NOTHING, related_name='feedsignal_feedentity_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedComment, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    signal_value = models.IntegerField(verbose_name='Signal value', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    signal_type = models.CharField(max_length=40, verbose_name='Signal type', sf_read_only=models.NOT_UPDATEABLE, choices=[('UpDownVote', None), ('Verified', None), ('UserVerified', None)], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedsignal_createdby_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='feedsignal_insertedby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'FeedSignal'
        verbose_name = 'Feed Signal'
        verbose_name_plural = 'Feed Signals'
        # keyPrefix = '0QJ'



class FeedTrackedChange(models.Model):
    feed_item = models.ForeignKey(AccountFeed, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [AccountFeed, AssetFeed, AssetRelationshipFeed, CampaignFeed, CaseFeed, CollaborationGroupFeed, ContactFeed, ContentDocumentFeed, ContractFeed, DashboardComponentFeed, DashboardFeed, EventFeed, FeedItem, LeadFeed, OpportunityFeed, OrderFeed, OrderItemFeed, Product2Feed, QuoteFeed, ReportFeed, SiteFeed, SocialPostFeed, SolutionFeed, TaskFeed, TopicFeed, UserFeed, WorkBadgeDefinitionFeed, npsp__Address__Feed] Master Detail Relationship *
    field_name = models.CharField(max_length=120, verbose_name='Field', sf_read_only=models.READ_ONLY)
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FeedTrackedChange'
        verbose_name = 'Feed Tracked Change'
        verbose_name_plural = 'Feed Tracked Changes'
        # keyPrefix = '0D6'



class FieldDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_data_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value_type_id = models.CharField(max_length=70, verbose_name='Data Type ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    extra_type_info = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_calculated = models.BooleanField(verbose_name='Is Field calculated?', sf_read_only=models.READ_ONLY, default=False)
    is_high_scale_number = models.BooleanField(verbose_name='Is Field a high scale number?', sf_read_only=models.READ_ONLY, default=False)
    is_html_formatted = models.BooleanField(verbose_name='Is Field a HTML formatted?', sf_read_only=models.READ_ONLY, default=False)
    is_name_field = models.BooleanField(verbose_name='Is Field a Name field?', sf_read_only=models.READ_ONLY, default=False)
    is_nillable = models.BooleanField(verbose_name='Is Field a nillable?', sf_read_only=models.READ_ONLY, default=False)
    is_workflow_filterable = models.BooleanField(verbose_name='Is Workflow Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_compact_layoutable = models.BooleanField(verbose_name='Is Compact Layout Enabled?', sf_read_only=models.READ_ONLY, default=False)
    precision = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    scale = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_field_history_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_indexed = models.BooleanField(verbose_name='Is Field indexed?', sf_read_only=models.READ_ONLY, default=False)
    is_api_filterable = models.BooleanField(verbose_name='Is Field Filterable?', sf_read_only=models.READ_ONLY, default=False)
    is_api_sortable = models.BooleanField(verbose_name='Is Field Sortable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_filterable = models.BooleanField(verbose_name='Is Field Filterable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_list_sortable = models.BooleanField(verbose_name='Is Field Sortable in Lists?', sf_read_only=models.READ_ONLY, default=False)
    is_api_groupable = models.BooleanField(verbose_name='Is Field Groupable?', sf_read_only=models.READ_ONLY, default=False)
    is_list_visible = models.BooleanField(verbose_name='Is Field visible in Lists?', sf_read_only=models.READ_ONLY, default=False)
    controlling_field_definition_id = models.CharField(max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    publisher_id = models.CharField(max_length=70, verbose_name='Publisher ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    running_user_field_access_id = models.CharField(max_length=150, verbose_name='User Field Access ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    reference_to = models.TextField(verbose_name='Entities Referenced by Relationship', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    reference_target_field = models.CharField(max_length=80, verbose_name='Target Field on Entities to Which the Foreign Key Points', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_compound = models.BooleanField(verbose_name='Is Field a compound field', sf_read_only=models.READ_ONLY, default=False)
    is_search_prefilterable = models.BooleanField(verbose_name='Is Field Search Prefilterable?', sf_read_only=models.READ_ONLY, default=False)
    is_polymorphic_foreign_key = models.BooleanField(verbose_name='Is ForeignKey Polymorphic?', sf_read_only=models.READ_ONLY, default=False)
    business_owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    business_status = models.CharField(max_length=40, verbose_name='Field Usage', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('DeprecateCandidate', 'DeprecateCandidate'), ('Hidden', 'Hidden')], blank=True, null=True)
    security_classification = models.CharField(max_length=40, verbose_name='Data Sensitivity Level', sf_read_only=models.READ_ONLY, choices=[('Public', 'Public'), ('Internal', 'Internal'), ('Confidential', 'Confidential'), ('Restricted', 'Restricted'), ('MissionCritical', 'MissionCritical')], blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FieldDefinition'
        verbose_name = 'Field Definition'
        verbose_name_plural = 'Field Definitions'
        # keyPrefix = '4fe'



class FieldPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Asset', None), ('AssetRelationship', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('Contract', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Event', None), ('Image', None), ('Individual', None), ('Lead', None), ('Macro', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Pricebook2', None), ('PricebookEntry', None), ('Product2', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Task', None), ('User', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    field = models.CharField(max_length=40, verbose_name='Field Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account.AccountNumber', None), ('Account.AccountSource', None), ('Account.AnnualRevenue', None), ('Account.BillingAddress', None), ('Account.Business_Hours__c', None), ('Account.Description', None), ('Account.Fax', None), ('Account.Industry', None), ('Account.Jigsaw', None), ('Account.npe01__One2OneContact__c', None), ('Account.npe01__SYSTEM_AccountType__c', None), ('Account.npe01__SYSTEMIsIndividual__c', None), ('Account.npo02__AverageAmount__c', None), ('Account.npo02__Best_Gift_Year__c', None), ('Account.npo02__Best_Gift_Year_Total__c', None), ('Account.npo02__FirstCloseDate__c', None), ('Account.npo02__Formal_Greeting__c', None), ('Account.npo02__HouseholdPhone__c', None), ('Account.npo02__Informal_Greeting__c', None), ('Account.npo02__LargestAmount__c', None), ('Account.npo02__LastCloseDate__c', None), ('Account.npo02__LastMembershipAmount__c', None), ('Account.npo02__LastMembershipDate__c', None), ('Account.npo02__LastMembershipLevel__c', None), ('Account.npo02__LastMembershipOrigin__c', None), ('Account.npo02__LastOppAmount__c', None), ('Account.npo02__MembershipEndDate__c', None), ('Account.npo02__MembershipJoinDate__c', None), ('Account.npo02__NumberOfClosedOpps__c', None), ('Account.npo02__NumberOfMembershipOpps__c', None), ('Account.npo02__OppAmount2YearsAgo__c', None), ('Account.npo02__OppAmountLastNDays__c', None), ('Account.npo02__OppAmountLastYear__c', None), ('Account.npo02__OppAmountThisYear__c', None), ('Account.npo02__OppsClosed2YearsAgo__c', None), ('Account.npo02__OppsClosedLastNDays__c', None), ('Account.npo02__OppsClosedLastYear__c', None), ('Account.npo02__OppsClosedThisYear__c', None), ('Account.npo02__SmallestAmount__c', None), ('Account.npo02__SYSTEM_CUSTOM_NAMING__c', None), ('Account.npo02__TotalMembershipOppAmount__c', None), ('Account.npo02__TotalOppAmount__c', None), ('Account.npsp__Batch__c', None), ('Account.npsp__Funding_Focus__c', None), ('Account.npsp__Grantmaker__c', None), ('Account.npsp__Matching_Gift_Administrator_Name__c', None), ('Account.npsp__Matching_Gift_Amount_Max__c', None), ('Account.npsp__Matching_Gift_Amount_Min__c', None), ('Account.npsp__Matching_Gift_Annual_Employee_Max__c', None), ('Account.npsp__Matching_Gift_Comments__c', None), ('Account.npsp__Matching_Gift_Company__c', None), ('Account.npsp__Matching_Gift_Email__c', None), ('Account.npsp__Matching_Gift_Info_Updated__c', None), ('Account.npsp__Matching_Gift_Percent__c', None), ('Account.npsp__Matching_Gift_Phone__c', None), ('Account.npsp__Matching_Gift_Request_Deadline__c', None), ('Account.npsp__Membership_Span__c', None), ('Account.npsp__Membership_Status__c', None), ('Account.npsp__Number_of_Household_Members__c', None), ('Account.NumberOfEmployees', None), ('Account.Ownership', None), ('Account.Parent', None), ('Account.Phone', None), ('Account.Rating', None), ('Account.ShippingAddress', None), ('Account.Sic', None), ('Account.SicDesc', None), ('Account.Site', None), ('Account.TickerSymbol', None), ('Account.Type', None), ('Account.Website', None), ('Asset.Account', None), ('Asset.AssetLevel', None), ('Asset.AssetProvidedBy', None), ('Asset.AssetServicedBy', None), ('Asset.Contact', None), ('Asset.Description', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsInternal', None), ('Asset.Price', None), ('Asset.Product2', None), ('Asset.ProductCode', None), ('Asset.ProductDescription', None), ('Asset.ProductFamily', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.StockKeepingUnit', None), ('Asset.UsageEndDate', None), ('AssetRelationship.RelationshipType', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.HierarchyActualCost', None), ('Campaign.HierarchyAmountAllOpportunities', None), ('Campaign.HierarchyAmountWonOpportunities', None), ('Campaign.HierarchyBudgetedCost', None), ('Campaign.HierarchyExpectedRevenue', None), ('Campaign.HierarchyNumberOfContacts', None), ('Campaign.HierarchyNumberOfConvertedLeads', None), ('Campaign.HierarchyNumberOfLeads', None), ('Campaign.HierarchyNumberOfOpportunities', None), ('Campaign.HierarchyNumberOfResponses', None), ('Campaign.HierarchyNumberOfWonOpportunities', None), ('Campaign.HierarchyNumberSent', None), ('Campaign.IsActive', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.Parent', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.Type', None), ('Case.Account', None), ('Case.Asset', None), ('Case.BusinessHours', None), ('Case.ClosedDate', None), ('Case.Contact', None), ('Case.Description', None), ('Case.IsClosedOnCreate', None), ('Case.IsEscalated', None), ('Case.Origin', None), ('Case.Parent', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.Source', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.Type', None), ('Class_Attendance__c.Assessment_Score__c', None), ('Class_Attendance__c.Class_Meeting_Date__c', None), ('Class_Attendance__c.Status__c', None), ('Class_Attendance__c.Teacher_s_Notes__c', None), ('Class_Enrollment__c.Attended_Family_Orientation__c', None), ('Class_Enrollment__c.Attended_Interview__c', None), ('Class_Enrollment__c.Attended_Makeup_Interview__c', None), ('Class_Enrollment__c.Contact_Ethnicity__c', None), ('Class_Enrollment__c.Contact_Gender__c', None), ('Class_Enrollment__c.Contact_Race__c', None), ('Class_Enrollment__c.Cultural_Affiliation_or_Nationality__c', None), ('Class_Enrollment__c.Current_Income_Information__c', None), ('Class_Enrollment__c.Estimated_income__c', None), ('Class_Enrollment__c.Family_size__c', None), ('Class_Enrollment__c.Household_type__c', None), ('Class_Enrollment__c.If_self_certified_please_explain__c', None), ('Class_Enrollment__c.In_current_semester__c', None), ('Class_Enrollment__c.Income_Certification__c', None), ('Class_Enrollment__c.Interview_Date__c', None), ('Class_Enrollment__c.Notes__c', None), ('Class_Enrollment__c.Origin_School__c', None), ('Class_Enrollment__c.Other_sexual_orientation__c', None), ('Class_Enrollment__c.Parent_Contact__c', None), ('Class_Enrollment__c.Parent_Email__c', None), ('Class_Enrollment__c.Parent_Phone__c', None), ('Class_Enrollment__c.Returner__c', None), ('Class_Enrollment__c.Role__c', None), ('Class_Enrollment__c.Sex_at_birth__c', None), ('Class_Enrollment__c.Sexual_orientation__c', None), ('Class_Enrollment__c.Status__c', None), ('Class_Enrollment__c.Temp_Returner__c', None), ('Class_Enrollment__c.Withdrew_Application_Detail__c', None), ('Class_Meeting__c.Date__c', None), ('Class_Meeting__c.Duration_hours__c', None), ('Class_Meeting__c.End_Time__c', None), ('Class_Meeting__c.Start_Time__c', None), ('Class_Offering__c.Academic_semester__c', None), ('Class_Offering__c.Count_total_female_students__c', None), ('Class_Offering__c.Count_total_latino_african_american__c', None), ('Class_Offering__c.Count_Total_Latino_Students__c', None), ('Class_Offering__c.Course__c', None), ('Class_Offering__c.Course_short_name__c', None), ('Class_Offering__c.Current_academic_semester__c', None), ('Class_Offering__c.Description__c', None), ('Class_Offering__c.End_Date__c', None), ('Class_Offering__c.Female__c', None), ('Class_Offering__c.In_current_semester__c', None), ('Class_Offering__c.Instructor__c', None), ('Class_Offering__c.Latino_African_American__c', None), ('Class_Offering__c.Location__c', None), ('Class_Offering__c.Meeting_Days__c', None), ('Class_Offering__c.Start_Date__c', None), ('Contact.Account', None), ('Contact.Age__c', None), ('Contact.Alumni__c', None), ('Contact.Areas_of_Expertise__c', None), ('Contact.Areas_of_Expertise_Other__c', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.Birthdate', None), ('Contact.Client_ID__c', None), ('Contact.Coding_classes_taken_before__c', None), ('Contact.Current_grade_level__c', None), ('Contact.Date_Background_check_approved__c', None), ('Contact.Date_Orientation_completed__c', None), ('Contact.Date_Orientation_session__c', None), ('Contact.Date_TB_Test_result__c', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.DM_Current_grade__c', None), ('Contact.DoNotCall', None), ('Contact.Email', None), ('Contact.enrollments_this_semester_Applied__c', None), ('Contact.enrollments_this_semester_Drop_out__c', None), ('Contact.enrollments_this_semester_Rejected__c', None), ('Contact.enrollments_this_semester_Waitlisted__c', None), ('Contact.Expected_graduation_year__c', None), ('Contact.Fax', None), ('Contact.Gender__c', None), ('Contact.Gender_Other__c', None), ('Contact.HasOptedOutOfEmail', None), ('Contact.HasOptedOutOfFax', None), ('Contact.Have_reliable_internet_access_at_home__c', None), ('Contact.HomePhone', None), ('Contact.How_did_you_hear_about_us__c', None), ('Contact.How_did_you_hear_about_us_other__c', None), ('Contact.Jigsaw', None), ('Contact.LeadSource', None), ('Contact.MailingAddress', None), ('Contact.MobilePhone', None), ('Contact.npe01__AlternateEmail__c', None), ('Contact.npe01__Home_Address__c', None), ('Contact.npe01__HomeEmail__c', None), ('Contact.npe01__Organization_Type__c', None), ('Contact.npe01__Other_Address__c', None), ('Contact.npe01__Preferred_Email__c', None), ('Contact.npe01__PreferredPhone__c', None), ('Contact.npe01__Primary_Address_Type__c', None), ('Contact.npe01__Private__c', None), ('Contact.npe01__Secondary_Address_Type__c', None), ('Contact.npe01__SystemAccountProcessor__c', None), ('Contact.npe01__Type_of_Account__c', None), ('Contact.npe01__Work_Address__c', None), ('Contact.npe01__WorkEmail__c', None), ('Contact.npe01__WorkPhone__c', None), ('Contact.npo02__AverageAmount__c', None), ('Contact.npo02__Best_Gift_Year__c', None), ('Contact.npo02__Best_Gift_Year_Total__c', None), ('Contact.npo02__FirstCloseDate__c', None), ('Contact.npo02__Formula_HouseholdMailingAddress__c', None), ('Contact.npo02__Formula_HouseholdPhone__c', None), ('Contact.npo02__Household__c', None), ('Contact.npo02__Household_Naming_Order__c', None), ('Contact.npo02__LargestAmount__c', None), ('Contact.npo02__LastCloseDate__c', None), ('Contact.npo02__LastCloseDateHH__c', None), ('Contact.npo02__LastMembershipAmount__c', None), ('Contact.npo02__LastMembershipDate__c', None), ('Contact.npo02__LastMembershipLevel__c', None), ('Contact.npo02__LastMembershipOrigin__c', None), ('Contact.npo02__LastOppAmount__c', None), ('Contact.npo02__MembershipEndDate__c', None), ('Contact.npo02__MembershipJoinDate__c', None), ('Contact.npo02__Naming_Exclusions__c', None), ('Contact.npo02__NumberOfClosedOpps__c', None), ('Contact.npo02__NumberOfMembershipOpps__c', None), ('Contact.npo02__OppAmount2YearsAgo__c', None), ('Contact.npo02__OppAmountLastNDays__c', None), ('Contact.npo02__OppAmountLastYear__c', None), ('Contact.npo02__OppAmountLastYearHH__c', None), ('Contact.npo02__OppAmountThisYear__c', None), ('Contact.npo02__OppAmountThisYearHH__c', None), ('Contact.npo02__OppsClosed2YearsAgo__c', None), ('Contact.npo02__OppsClosedLastNDays__c', None), ('Contact.npo02__OppsClosedLastYear__c', None), ('Contact.npo02__OppsClosedThisYear__c', None), ('Contact.npo02__SmallestAmount__c', None), ('Contact.npo02__Soft_Credit_Last_Year__c', None), ('Contact.npo02__Soft_Credit_This_Year__c', None), ('Contact.npo02__Soft_Credit_Total__c', None), ('Contact.npo02__Soft_Credit_Two_Years_Ago__c', None), ('Contact.npo02__SystemHouseholdProcessor__c', None), ('Contact.npo02__Total_Household_Gifts__c', None), ('Contact.npo02__TotalMembershipOppAmount__c', None), ('Contact.npo02__TotalOppAmount__c', None), ('Contact.npsp__Address_Verification_Status__c', None), ('Contact.npsp__Batch__c', None), ('Contact.npsp__Current_Address__c', None), ('Contact.npsp__Deceased__c', None), ('Contact.npsp__Do_Not_Contact__c', None), ('Contact.npsp__Exclude_from_Household_Formal_Greeting__c', None), ('Contact.npsp__Exclude_from_Household_Informal_Greeting__c', None), ('Contact.npsp__Exclude_from_Household_Name__c', None), ('Contact.npsp__First_Soft_Credit_Amount__c', None), ('Contact.npsp__First_Soft_Credit_Date__c', None), ('Contact.npsp__HHId__c', None), ('Contact.npsp__is_Address_Override__c', None), ('Contact.npsp__Largest_Soft_Credit_Amount__c', None), ('Contact.npsp__Largest_Soft_Credit_Date__c', None), ('Contact.npsp__Last_Soft_Credit_Amount__c', None), ('Contact.npsp__Last_Soft_Credit_Date__c', None), ('Contact.npsp__Number_of_Soft_Credits__c', None), ('Contact.npsp__Number_of_Soft_Credits_Last_N_Days__c', None), ('Contact.npsp__Number_of_Soft_Credits_Last_Year__c', None), ('Contact.npsp__Number_of_Soft_Credits_This_Year__c', None), ('Contact.npsp__Number_of_Soft_Credits_Two_Years_Ago__c', None), ('Contact.npsp__Primary_Affiliation__c', None), ('Contact.npsp__Primary_Contact__c', None), ('Contact.npsp__Soft_Credit_Last_N_Days__c', None), ('Contact.of_Class_Enrollments_Any_status__c', None), ('Contact.of_Class_Enrollments_App_this_semester__c', None), ('Contact.of_Class_Enrollments_Completed__c', None), ('Contact.of_enrollments_Waitlist_this_semester__c', None), ('Contact.OtherAddress', None), ('Contact.OtherPhone', None), ('Contact.Parent_Guardian_email__c', None), ('Contact.Parent_Guardian_first_name__c', None), ('Contact.Parent_Guardian_last_name__c', None), ('Contact.Parent_Guardian_phone__c', None), ('Contact.Phone', None), ('Contact.Race__c', None), ('Contact.Race_Other__c', None), ('Contact.ReportsTo', None), ('Contact.Student_Status__c', None), ('Contact.Title', None), ('Contact.Use_a_computer_at_home__c', None), ('Contact.Volunteer_area_s_of_interest__c', None), ('Contact.Which_best_describes_your_ethnicity__c', None), ('Contact.Why_select_this_particular_class__c', None), ('Contact.Why_select_this_particular_class_Other__c', None), ('Contract.ActivatedBy', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.CompanySigned', None), ('Contract.CompanySignedDate', None), ('Contract.ContractTerm', None), ('Contract.CustomerSigned', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Name', None), ('Contract.OwnerExpirationNotice', None), ('Contract.Pricebook2', None), ('Contract.ShippingAddress', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('dlrs__LookupChild__c.dlrs__Amount__c', None), ('dlrs__LookupChild__c.dlrs__Color__c', None), ('dlrs__LookupChild__c.dlrs__Description__c', None), ('dlrs__LookupChild__c.dlrs__Description2__c', None), ('dlrs__LookupChild__c.dlrs__LookupParent__c', None), ('dlrs__LookupChild__c.dlrs__LookupParent2__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.dlrs__Amount__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.dlrs__LookupParent__c', None), ('dlrs__LookupParent__c.dlrs__Colours__c', None), ('dlrs__LookupParent__c.dlrs__Descriptions__c', None), ('dlrs__LookupParent__c.dlrs__Descriptions2__c', None), ('dlrs__LookupParent__c.dlrs__Total__c', None), ('dlrs__LookupParent__c.dlrs__Total2__c', None), ('dlrs__LookupRollupSummary__c.dlrs__Active__c', None), ('dlrs__LookupRollupSummary__c.dlrs__AggregateAllRows__c', None), ('dlrs__LookupRollupSummary__c.dlrs__AggregateOperation__c', None), ('dlrs__LookupRollupSummary__c.dlrs__CalculateJobId__c', None), ('dlrs__LookupRollupSummary__c.dlrs__CalculationMode__c', None), ('dlrs__LookupRollupSummary__c.dlrs__CalculationSharingMode__c', None), ('dlrs__LookupRollupSummary__c.dlrs__ConcatenateDelimiter__c', None), ('dlrs__LookupRollupSummary__c.dlrs__Description__c', None), ('dlrs__LookupRollupSummary__c.dlrs__FieldToOrderBy__c', None), ('dlrs__LookupRollupSummary__c.dlrs__RelationshipCriteria__c', None), ('dlrs__LookupRollupSummary__c.dlrs__RelationshipCriteriaFields__c', None), ('dlrs__LookupRollupSummary__c.dlrs__RowLimit__c', None), ('dlrs__LookupRollupSummary__c.dlrs__TestCode__c', None), ('dlrs__LookupRollupSummary__c.dlrs__TestCodeSeeAllData__c', None), ('dlrs__LookupRollupSummary__c.dlrs__UniqueName__c', None), ('dlrs__LookupRollupSummaryLog__c.dlrs__ErrorMessage__c', None), ('dlrs__LookupRollupSummaryLog__c.dlrs__ParentObject__c', None), ('dlrs__LookupRollupSummaryLog__c.dlrs__ParentRecord__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c.dlrs__LookupRollupSummary2__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c.dlrs__ParentId__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c.dlrs__ParentRecord__c', None), ('Equipment__c.Condition__c', None), ('Equipment__c.CPU__c', None), ('Equipment__c.Date_Acquired__c', None), ('Equipment__c.Date_Retired__c', None), ('Equipment__c.Disk_Capacity__c', None), ('Equipment__c.Label__c', None), ('Equipment__c.Manufacturer__c', None), ('Equipment__c.Model__c', None), ('Equipment__c.Notes__c', None), ('Equipment__c.OS__c', None), ('Equipment__c.purchased_or_donated__c', None), ('Equipment__c.RAM__c', None), ('Equipment__c.Serial__c', None), ('Equipment__c.Status__c', None), ('Equipment__c.Vendor_Donor__c', None), ('Equipment_Assignment__c.Actual_Return_Date__c', None), ('Equipment_Assignment__c.Estimated_Return_Date__c', None), ('Equipment_Assignment__c.Start_Date__c', None), ('Event.Description', None), ('Event.IsAllDayEvent', None), ('Event.Location', None), ('Event.npsp__Engagement_Plan__c', None), ('Event.npsp__Engagement_Plan_Task__c', None), ('Event.Type', None), ('Event.What', None), ('Event.Who', None), ('Incident__c.Class_Enrollment__c', None), ('Incident__c.Incident_Date__c', None), ('Incident__c.Incident_Summary__c', None), ('Individual.BirthDate', None), ('Individual.CanStorePiiElsewhere', None), ('Individual.ChildrenCount', None), ('Individual.ConsumerCreditScore', None), ('Individual.ConsumerCreditScoreProviderName', None), ('Individual.ConvictionsCount', None), ('Individual.DeathDate', None), ('Individual.HasOptedOutGeoTracking', None), ('Individual.HasOptedOutProcessing', None), ('Individual.HasOptedOutProfiling', None), ('Individual.HasOptedOutSolicit', None), ('Individual.HasOptedOutTracking', None), ('Individual.IndividualsAge', None), ('Individual.InfluencerRating', None), ('Individual.IsHomeOwner', None), ('Individual.MasterRecord', None), ('Individual.MilitaryService', None), ('Individual.Occupation', None), ('Individual.SendIndividualData', None), ('Individual.ShouldForget', None), ('Individual.Website', None), ('Lead.Address', None), ('Lead.AnnualRevenue', None), ('Lead.Description', None), ('Lead.DoNotCall', None), ('Lead.Email', None), ('Lead.Fax', None), ('Lead.HasOptedOutOfEmail', None), ('Lead.HasOptedOutOfFax', None), ('Lead.Industry', None), ('Lead.Jigsaw', None), ('Lead.LastTransferDate', None), ('Lead.LeadSource', None), ('Lead.MobilePhone', None), ('Lead.npe01__Preferred_Email__c', None), ('Lead.npe01__Preferred_Phone__c', None), ('Lead.npsp__Batch__c', None), ('Lead.npsp__CompanyCity__c', None), ('Lead.npsp__CompanyCountry__c', None), ('Lead.npsp__CompanyPostalCode__c', None), ('Lead.npsp__CompanyState__c', None), ('Lead.npsp__CompanyStreet__c', None), ('Lead.NumberOfEmployees', None), ('Lead.Phone', None), ('Lead.Rating', None), ('Lead.Title', None), ('Lead.Website', None), ('npe01__OppPayment__c.npe01__Check_Reference_Number__c', None), ('npe01__OppPayment__c.npe01__Custom_Payment_Field__c', None), ('npe01__OppPayment__c.npe01__Paid__c', None), ('npe01__OppPayment__c.npe01__Payment_Amount__c', None), ('npe01__OppPayment__c.npe01__Payment_Date__c', None), ('npe01__OppPayment__c.npe01__Payment_Method__c', None), ('npe01__OppPayment__c.npe01__Scheduled_Date__c', None), ('npe01__OppPayment__c.npe01__Written_Off__c', None), ('npe01__OppPayment__c.npsp__Payment_Acknowledged_Date__c', None), ('npe01__OppPayment__c.npsp__Payment_Acknowledgment_Status__c', None), ('npe03__Recurring_Donation__c.npe03__Amount__c', None), ('npe03__Recurring_Donation__c.npe03__Contact__c', None), ('npe03__Recurring_Donation__c.npe03__Date_Established__c', None), ('npe03__Recurring_Donation__c.npe03__Donor_Name__c', None), ('npe03__Recurring_Donation__c.npe03__Installment_Amount__c', None), ('npe03__Recurring_Donation__c.npe03__Installment_Period__c', None), ('npe03__Recurring_Donation__c.npe03__Installments__c', None), ('npe03__Recurring_Donation__c.npe03__Last_Payment_Date__c', None), ('npe03__Recurring_Donation__c.npe03__Next_Payment_Date__c', None), ('npe03__Recurring_Donation__c.npe03__Open_Ended_Status__c', None), ('npe03__Recurring_Donation__c.npe03__Organization__c', None), ('npe03__Recurring_Donation__c.npe03__Paid_Amount__c', None), ('npe03__Recurring_Donation__c.npe03__Recurring_Donation_Campaign__c', None), ('npe03__Recurring_Donation__c.npe03__Schedule_Type__c', None), ('npe03__Recurring_Donation__c.npe03__Total__c', None), ('npe03__Recurring_Donation__c.npe03__Total_Paid_Installments__c', None), ('npe03__Recurring_Donation__c.npsp__Always_Use_Last_Day_Of_Month__c', None), ('npe03__Recurring_Donation__c.npsp__Day_of_Month__c', None), ('npe4__Relationship__c.npe4__Description__c', None), ('npe4__Relationship__c.npe4__ReciprocalRelationship__c', None), ('npe4__Relationship__c.npe4__RelatedContact__c', None), ('npe4__Relationship__c.npe4__Relationship_Explanation__c', None), ('npe4__Relationship__c.npe4__Status__c', None), ('npe4__Relationship__c.npe4__SYSTEM_SystemCreated__c', None), ('npe4__Relationship__c.npe4__Type__c', None), ('npe4__Relationship__c.npsp__Related_Opportunity_Contact_Role__c', None), ('npe4__Relationship_Error__c.npe4__Error_Date_Time__c', None), ('npe4__Relationship_Error__c.npe4__Error_Record_Link__c', None), ('npe4__Relationship_Error__c.npe4__Error_Stack_Trace__c', None), ('npe4__Relationship_Error__c.npe4__Error_Type__c', None), ('npe4__Relationship_Error__c.npe4__Full_Error_Message__c', None), ('npe5__Affiliation__c.npe5__Description__c', None), ('npe5__Affiliation__c.npe5__EndDate__c', None), ('npe5__Affiliation__c.npe5__Primary__c', None), ('npe5__Affiliation__c.npe5__Role__c', None), ('npe5__Affiliation__c.npe5__StartDate__c', None), ('npe5__Affiliation__c.npe5__Status__c', None), ('npe5__Affiliation__c.npsp__Related_Opportunity_Contact_Role__c', None), ('npo02__Household__c.npo02__Addressee__c', None), ('npo02__Household__c.npo02__Always_Anonymous__c', None), ('npo02__Household__c.npo02__AverageAmount__c', None), ('npo02__Household__c.npo02__Best_Gift_Year__c', None), ('npo02__Household__c.npo02__Best_Gift_Year_Total__c', None), ('npo02__Household__c.npo02__FirstCloseDate__c', None), ('npo02__Household__c.npo02__Formal_Greeting__c', None), ('npo02__Household__c.npo02__Formula_MailingAddress__c', None), ('npo02__Household__c.npo02__Household_ID__c', None), ('npo02__Household__c.npo02__HouseholdEmail__c', None), ('npo02__Household__c.npo02__HouseholdPhone__c', None), ('npo02__Household__c.npo02__Informal_Greeting__c', None), ('npo02__Household__c.npo02__LargestAmount__c', None), ('npo02__Household__c.npo02__LastCloseDate__c', None), ('npo02__Household__c.npo02__LastMembershipAmount__c', None), ('npo02__Household__c.npo02__LastMembershipDate__c', None), ('npo02__Household__c.npo02__LastMembershipLevel__c', None), ('npo02__Household__c.npo02__LastMembershipOrigin__c', None), ('npo02__Household__c.npo02__LastOppAmount__c', None), ('npo02__Household__c.npo02__MailingCity__c', None), ('npo02__Household__c.npo02__MailingCountry__c', None), ('npo02__Household__c.npo02__MailingPostalCode__c', None), ('npo02__Household__c.npo02__MailingState__c', None), ('npo02__Household__c.npo02__MailingStreet__c', None), ('npo02__Household__c.npo02__Membership_Span__c', None), ('npo02__Household__c.npo02__Membership_Status__c', None), ('npo02__Household__c.npo02__MembershipEndDate__c', None), ('npo02__Household__c.npo02__MembershipJoinDate__c', None), ('npo02__Household__c.npo02__NumberOfClosedOpps__c', None), ('npo02__Household__c.npo02__NumberOfMembershipOpps__c', None), ('npo02__Household__c.npo02__OppAmount2YearsAgo__c', None), ('npo02__Household__c.npo02__OppAmountLastNDays__c', None), ('npo02__Household__c.npo02__OppAmountLastYear__c', None), ('npo02__Household__c.npo02__OppAmountThisYear__c', None), ('npo02__Household__c.npo02__OppsClosed2YearsAgo__c', None), ('npo02__Household__c.npo02__OppsClosedLastNDays__c', None), ('npo02__Household__c.npo02__OppsClosedLastYear__c', None), ('npo02__Household__c.npo02__OppsClosedThisYear__c', None), ('npo02__Household__c.npo02__SmallestAmount__c', None), ('npo02__Household__c.npo02__SYSTEM_CUSTOM_NAMING__c', None), ('npo02__Household__c.npo02__TotalMembershipOppAmount__c', None), ('npo02__Household__c.npo02__TotalOppAmount__c', None), ('npo02__Household__c.npsp__Number_of_Household_Members__c', None), ('npsp__Account_Soft_Credit__c.npsp__Amount__c', None), ('npsp__Account_Soft_Credit__c.npsp__Role__c', None), ('npsp__Address__c.npsp__Address_Type__c', None), ('npsp__Address__c.npsp__Administrative_Area__c', None), ('npsp__Address__c.npsp__Ambiguous__c', None), ('npsp__Address__c.npsp__API_Response__c', None), ('npsp__Address__c.npsp__Congressional_District__c', None), ('npsp__Address__c.npsp__County_Name__c', None), ('npsp__Address__c.npsp__Default_Address__c', None), ('npsp__Address__c.npsp__Formula_MailingAddress__c', None), ('npsp__Address__c.npsp__Formula_MailingStreetAddress__c', None), ('npsp__Address__c.npsp__Geolocation__c', None), ('npsp__Address__c.npsp__Latest_End_Date__c', None), ('npsp__Address__c.npsp__Latest_Start_Date__c', None), ('npsp__Address__c.npsp__MailingCity__c', None), ('npsp__Address__c.npsp__MailingCountry__c', None), ('npsp__Address__c.npsp__MailingPostalCode__c', None), ('npsp__Address__c.npsp__MailingState__c', None), ('npsp__Address__c.npsp__MailingStreet__c', None), ('npsp__Address__c.npsp__MailingStreet2__c', None), ('npsp__Address__c.npsp__Pre_Verification_Address__c', None), ('npsp__Address__c.npsp__Seasonal_End_Day__c', None), ('npsp__Address__c.npsp__Seasonal_End_Month__c', None), ('npsp__Address__c.npsp__Seasonal_Start_Day__c', None), ('npsp__Address__c.npsp__Seasonal_Start_Month__c', None), ('npsp__Address__c.npsp__State_Lower_District__c', None), ('npsp__Address__c.npsp__State_Upper_District__c', None), ('npsp__Address__c.npsp__Verification_Status__c', None), ('npsp__Address__c.npsp__Verified__c', None), ('npsp__Allocation__c.npsp__Amount__c', None), ('npsp__Allocation__c.npsp__Campaign__c', None), ('npsp__Allocation__c.npsp__Opportunity__c', None), ('npsp__Allocation__c.npsp__Payment__c', None), ('npsp__Allocation__c.npsp__Percent__c', None), ('npsp__Allocation__c.npsp__Recurring_Donation__c', None), ('npsp__Batch__c.npsp__Batch_Status__c', None), ('npsp__Batch__c.npsp__Description__c', None), ('npsp__Batch__c.npsp__Number_of_Items__c', None), ('npsp__DataImport__c.npsp__Account1_City__c', None), ('npsp__DataImport__c.npsp__Account1_Country__c', None), ('npsp__DataImport__c.npsp__Account1_Name__c', None), ('npsp__DataImport__c.npsp__Account1_Phone__c', None), ('npsp__DataImport__c.npsp__Account1_State_Province__c', None), ('npsp__DataImport__c.npsp__Account1_Street__c', None), ('npsp__DataImport__c.npsp__Account1_Website__c', None), ('npsp__DataImport__c.npsp__Account1_Zip_Postal_Code__c', None), ('npsp__DataImport__c.npsp__Account1Imported__c', None), ('npsp__DataImport__c.npsp__Account1ImportStatus__c', None), ('npsp__DataImport__c.npsp__Account2_City__c', None), ('npsp__DataImport__c.npsp__Account2_Country__c', None), ('npsp__DataImport__c.npsp__Account2_Name__c', None), ('npsp__DataImport__c.npsp__Account2_Phone__c', None), ('npsp__DataImport__c.npsp__Account2_State_Province__c', None), ('npsp__DataImport__c.npsp__Account2_Street__c', None), ('npsp__DataImport__c.npsp__Account2_Website__c', None), ('npsp__DataImport__c.npsp__Account2_Zip_Postal_Code__c', None), ('npsp__DataImport__c.npsp__Account2Imported__c', None), ('npsp__DataImport__c.npsp__Account2ImportStatus__c', None), ('npsp__DataImport__c.npsp__ApexJobId__c', None), ('npsp__DataImport__c.npsp__Campaign_Member_Status__c', None), ('npsp__DataImport__c.npsp__Contact1_Alternate_Email__c', None), ('npsp__DataImport__c.npsp__Contact1_Birthdate__c', None), ('npsp__DataImport__c.npsp__Contact1_Firstname__c', None), ('npsp__DataImport__c.npsp__Contact1_Home_Phone__c', None), ('npsp__DataImport__c.npsp__Contact1_Lastname__c', None), ('npsp__DataImport__c.npsp__Contact1_Mobile_Phone__c', None), ('npsp__DataImport__c.npsp__Contact1_Other_Phone__c', None), ('npsp__DataImport__c.npsp__Contact1_Personal_Email__c', None), ('npsp__DataImport__c.npsp__Contact1_Preferred_Email__c', None), ('npsp__DataImport__c.npsp__Contact1_Preferred_Phone__c', None), ('npsp__DataImport__c.npsp__Contact1_Salutation__c', None), ('npsp__DataImport__c.npsp__Contact1_Title__c', None), ('npsp__DataImport__c.npsp__Contact1_Work_Email__c', None), ('npsp__DataImport__c.npsp__Contact1_Work_Phone__c', None), ('npsp__DataImport__c.npsp__Contact1Imported__c', None), ('npsp__DataImport__c.npsp__Contact1ImportStatus__c', None), ('npsp__DataImport__c.npsp__Contact2_Alternate_Email__c', None), ('npsp__DataImport__c.npsp__Contact2_Birthdate__c', None), ('npsp__DataImport__c.npsp__Contact2_Firstname__c', None), ('npsp__DataImport__c.npsp__Contact2_Home_Phone__c', None), ('npsp__DataImport__c.npsp__Contact2_Lastname__c', None), ('npsp__DataImport__c.npsp__Contact2_Mobile_Phone__c', None), ('npsp__DataImport__c.npsp__Contact2_Other_Phone__c', None), ('npsp__DataImport__c.npsp__Contact2_Personal_Email__c', None), ('npsp__DataImport__c.npsp__Contact2_Preferred_Email__c', None), ('npsp__DataImport__c.npsp__Contact2_Preferred_Phone__c', None), ('npsp__DataImport__c.npsp__Contact2_Salutation__c', None), ('npsp__DataImport__c.npsp__Contact2_Title__c', None), ('npsp__DataImport__c.npsp__Contact2_Work_Email__c', None), ('npsp__DataImport__c.npsp__Contact2_Work_Phone__c', None), ('npsp__DataImport__c.npsp__Contact2Imported__c', None), ('npsp__DataImport__c.npsp__Contact2ImportStatus__c', None), ('npsp__DataImport__c.npsp__Donation_Amount__c', None), ('npsp__DataImport__c.npsp__Donation_Campaign_Name__c', None), ('npsp__DataImport__c.npsp__Donation_Date__c', None), ('npsp__DataImport__c.npsp__Donation_Description__c', None), ('npsp__DataImport__c.npsp__Donation_Donor__c', None), ('npsp__DataImport__c.npsp__Donation_Member_Level__c', None), ('npsp__DataImport__c.npsp__Donation_Membership_End_Date__c', None), ('npsp__DataImport__c.npsp__Donation_Membership_Origin__c', None), ('npsp__DataImport__c.npsp__Donation_Membership_Start_Date__c', None), ('npsp__DataImport__c.npsp__Donation_Name__c', None), ('npsp__DataImport__c.npsp__Donation_Possible_Matches__c', None), ('npsp__DataImport__c.npsp__Donation_Record_Type_Name__c', None), ('npsp__DataImport__c.npsp__Donation_Stage__c', None), ('npsp__DataImport__c.npsp__Donation_Type__c', None), ('npsp__DataImport__c.npsp__DonationCampaignImported__c', None), ('npsp__DataImport__c.npsp__DonationCampaignImportStatus__c', None), ('npsp__DataImport__c.npsp__DonationImported__c', None), ('npsp__DataImport__c.npsp__DonationImportStatus__c', None), ('npsp__DataImport__c.npsp__FailureInformation__c', None), ('npsp__DataImport__c.npsp__Home_City__c', None), ('npsp__DataImport__c.npsp__Home_Country__c', None), ('npsp__DataImport__c.npsp__Home_State_Province__c', None), ('npsp__DataImport__c.npsp__Home_Street__c', None), ('npsp__DataImport__c.npsp__Home_Zip_Postal_Code__c', None), ('npsp__DataImport__c.npsp__HomeAddressImported__c', None), ('npsp__DataImport__c.npsp__HomeAddressImportStatus__c', None), ('npsp__DataImport__c.npsp__Household_Phone__c', None), ('npsp__DataImport__c.npsp__HouseholdAccountImported__c', None), ('npsp__DataImport__c.npsp__ImportedDate__c', None), ('npsp__DataImport__c.npsp__NPSP_Data_Import_Batch__c', None), ('npsp__DataImport__c.npsp__Payment_Check_Reference_Number__c', None), ('npsp__DataImport__c.npsp__Payment_Method__c', None), ('npsp__DataImport__c.npsp__Payment_Possible_Matches__c', None), ('npsp__DataImport__c.npsp__PaymentImported__c', None), ('npsp__DataImport__c.npsp__PaymentImportStatus__c', None), ('npsp__DataImport__c.npsp__Status__c', None), ('npsp__DataImportBatch__c.npsp__Account_Custom_Unique_ID__c', None), ('npsp__DataImportBatch__c.npsp__Active_Fields__c', None), ('npsp__DataImportBatch__c.npsp__Batch_Description__c', None), ('npsp__DataImportBatch__c.npsp__Contact_Custom_Unique_ID__c', None), ('npsp__DataImportBatch__c.npsp__Donation_Matching_Implementing_Class__c', None), ('npsp__DataImportBatch__c.npsp__Expected_Count_of_Gifts__c', None), ('npsp__DataImportBatch__c.npsp__Expected_Total_Batch_Amount__c', None), ('npsp__DataImportBatch__c.npsp__GiftBatch__c', None), ('npsp__DataImportBatch__c.npsp__Last_Processed_On__c', None), ('npsp__DataImportBatch__c.npsp__Post_Process_Implementing_Class__c', None), ('npsp__DataImportBatch__c.npsp__Process_Using_Scheduled_Job__c', None), ('npsp__DataImportBatch__c.npsp__Records_Failed__c', None), ('npsp__DataImportBatch__c.npsp__Records_Successfully_Processed__c', None), ('npsp__DataImportBatch__c.npsp__RequireTotalMatch__c', None), ('npsp__DataImportBatch__c.npsp__Run_Opportunity_Rollups_while_Processing__c', None), ('npsp__Engagement_Plan__c.npsp__Account__c', None), ('npsp__Engagement_Plan__c.npsp__Campaign__c', None), ('npsp__Engagement_Plan__c.npsp__Case__c', None), ('npsp__Engagement_Plan__c.npsp__Completed_Tasks__c', None), ('npsp__Engagement_Plan__c.npsp__Contact__c', None), ('npsp__Engagement_Plan__c.npsp__Opportunity__c', None), ('npsp__Engagement_Plan__c.npsp__Recurring_Donation__c', None), ('npsp__Engagement_Plan__c.npsp__Status__c', None), ('npsp__Engagement_Plan__c.npsp__Total_EP_Tasks__c', None), ('npsp__Engagement_Plan__c.npsp__Total_Tasks__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Assigned_To__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Comments__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Days_After__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Parent_Task__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Priority__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Reminder__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Reminder_Time__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Send_Email__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Status__c', None), ('npsp__Engagement_Plan_Task__c.npsp__Type__c', None), ('npsp__Engagement_Plan_Template__c.npsp__Automatically_Update_Child_Task_Due_Date__c', None), ('npsp__Engagement_Plan_Template__c.npsp__Default_Assignee__c', None), ('npsp__Engagement_Plan_Template__c.npsp__Description__c', None), ('npsp__Engagement_Plan_Template__c.npsp__Reschedule_To__c', None), ('npsp__Engagement_Plan_Template__c.npsp__Skip_Weekends__c', None), ('npsp__Engagement_Plan_Template__c.npsp__Total_Engagement_Plans__c', None), ('npsp__Engagement_Plan_Template__c.npsp__Total_Tasks__c', None), ('npsp__Error__c.npsp__Context_Type__c', None), ('npsp__Error__c.npsp__Datetime__c', None), ('npsp__Error__c.npsp__Email_Sent__c', None), ('npsp__Error__c.npsp__Error_Type__c', None), ('npsp__Error__c.npsp__Full_Message__c', None), ('npsp__Error__c.npsp__Object_Type__c', None), ('npsp__Error__c.npsp__Posted_in_Chatter__c', None), ('npsp__Error__c.npsp__Record_URL__c', None), ('npsp__Error__c.npsp__Stack_Trace__c', None), ('npsp__General_Accounting_Unit__c.npsp__Active__c', None), ('npsp__General_Accounting_Unit__c.npsp__Average_Allocation__c', None), ('npsp__General_Accounting_Unit__c.npsp__Description__c', None), ('npsp__General_Accounting_Unit__c.npsp__First_Allocation_Date__c', None), ('npsp__General_Accounting_Unit__c.npsp__Largest_Allocation__c', None), ('npsp__General_Accounting_Unit__c.npsp__Last_Allocation_Date__c', None), ('npsp__General_Accounting_Unit__c.npsp__Number_of_Allocations_Last_N_Days__c', None), ('npsp__General_Accounting_Unit__c.npsp__Number_of_Allocations_Last_Year__c', None), ('npsp__General_Accounting_Unit__c.npsp__Number_of_Allocations_This_Year__c', None), ('npsp__General_Accounting_Unit__c.npsp__Number_of_Allocations_Two_Years_Ago__c', None), ('npsp__General_Accounting_Unit__c.npsp__Smallest_Allocation__c', None), ('npsp__General_Accounting_Unit__c.npsp__Total_Allocations__c', None), ('npsp__General_Accounting_Unit__c.npsp__Total_Allocations_Last_N_Days__c', None), ('npsp__General_Accounting_Unit__c.npsp__Total_Allocations_Last_Year__c', None), ('npsp__General_Accounting_Unit__c.npsp__Total_Allocations_This_Year__c', None), ('npsp__General_Accounting_Unit__c.npsp__Total_Allocations_Two_Years_Ago__c', None), ('npsp__General_Accounting_Unit__c.npsp__Total_Number_of_Allocations__c', None), ('npsp__Grant_Deadline__c.npsp__Grant_Deadline_Due_Date__c', None), ('npsp__Grant_Deadline__c.npsp__Grant_Deliverable_Close_Date__c', None), ('npsp__Grant_Deadline__c.npsp__Grant_Deliverable_Requirements__c', None), ('npsp__Grant_Deadline__c.npsp__Type__c', None), ('npsp__Level__c.npsp__Active__c', None), ('npsp__Level__c.npsp__Description__c', None), ('npsp__Level__c.npsp__Engagement_Plan_Template__c', None), ('npsp__Level__c.npsp__Maximum_Amount__c', None), ('npsp__Level__c.npsp__Minimum_Amount__c', None), ('npsp__Level__c.npsp__Previous_Level_Field__c', None), ('npsp__Level__c.npsp__Target__c', None), ('npsp__Partial_Soft_Credit__c.npsp__Amount__c', None), ('npsp__Partial_Soft_Credit__c.npsp__Contact_Name__c', None), ('npsp__Partial_Soft_Credit__c.npsp__Contact_Role_ID__c', None), ('npsp__Partial_Soft_Credit__c.npsp__Role_Name__c', None), ('npsp__Schedulable__c.npsp__Active__c', None), ('npsp__Schedulable__c.npsp__Frequency__c', None), ('npsp__Schedulable__c.npsp__Last_Time_Run__c', None), ('npsp__Trigger_Handler__c.npsp__Active__c', None), ('npsp__Trigger_Handler__c.npsp__Asynchronous__c', None), ('npsp__Trigger_Handler__c.npsp__Load_Order__c', None), ('npsp__Trigger_Handler__c.npsp__Trigger_Action__c', None), ('npsp__Trigger_Handler__c.npsp__User_Managed__c', None), ('npsp__Trigger_Handler__c.npsp__Usernames_to_Exclude__c', None), ('Opportunity.Account', None), ('Opportunity.Amount', None), ('Opportunity.Campaign', None), ('Opportunity.Contract', None), ('Opportunity.Description', None), ('Opportunity.ExpectedRevenue', None), ('Opportunity.Form_of_Payment__c', None), ('Opportunity.IsPrivate', None), ('Opportunity.LeadSource', None), ('Opportunity.NextStep', None), ('Opportunity.npe01__Amount_Outstanding__c', None), ('Opportunity.npe01__Amount_Written_Off__c', None), ('Opportunity.npe01__Contact_Id_for_Role__c', None), ('Opportunity.npe01__Do_Not_Automatically_Create_Payment__c', None), ('Opportunity.npe01__Is_Opp_From_Individual__c', None), ('Opportunity.npe01__Member_Level__c', None), ('Opportunity.npe01__Membership_End_Date__c', None), ('Opportunity.npe01__Membership_Origin__c', None), ('Opportunity.npe01__Membership_Start_Date__c', None), ('Opportunity.npe01__Number_of_Payments__c', None), ('Opportunity.npe01__Payments_Made__c', None), ('Opportunity.npe03__Recurring_Donation__c', None), ('Opportunity.npo02__CombinedRollupFieldset__c', None), ('Opportunity.npo02__systemHouseholdContactRoleProcessor__c', None), ('Opportunity.npsp__Acknowledgment_Date__c', None), ('Opportunity.npsp__Acknowledgment_Status__c', None), ('Opportunity.npsp__Ask_Date__c', None), ('Opportunity.npsp__Batch__c', None), ('Opportunity.npsp__Closed_Lost_Reason__c', None), ('Opportunity.npsp__DisableContactRoleAutomation__c', None), ('Opportunity.npsp__Fair_Market_Value__c', None), ('Opportunity.npsp__Gift_Strategy__c', None), ('Opportunity.npsp__Grant_Contract_Date__c', None), ('Opportunity.npsp__Grant_Contract_Number__c', None), ('Opportunity.npsp__Grant_Period_End_Date__c', None), ('Opportunity.npsp__Grant_Period_Start_Date__c', None), ('Opportunity.npsp__Grant_Program_Area_s__c', None), ('Opportunity.npsp__Grant_Requirements_Website__c', None), ('Opportunity.npsp__Honoree_Contact__c', None), ('Opportunity.npsp__Honoree_Name__c', None), ('Opportunity.npsp__In_Kind_Description__c', None), ('Opportunity.npsp__In_Kind_Donor_Declared_Value__c', None), ('Opportunity.npsp__In_Kind_Type__c', None), ('Opportunity.npsp__Is_Grant_Renewal__c', None), ('Opportunity.npsp__Matching_Gift__c', None), ('Opportunity.npsp__Matching_Gift_Account__c', None), ('Opportunity.npsp__Matching_Gift_Employer__c', None), ('Opportunity.npsp__Matching_Gift_Status__c', None), ('Opportunity.npsp__Next_Grant_Deadline_Due_Date__c', None), ('Opportunity.npsp__Notification_Message__c', None), ('Opportunity.npsp__Notification_Preference__c', None), ('Opportunity.npsp__Notification_Recipient_Contact__c', None), ('Opportunity.npsp__Notification_Recipient_Information__c', None), ('Opportunity.npsp__Notification_Recipient_Name__c', None), ('Opportunity.npsp__Previous_Grant_Opportunity__c', None), ('Opportunity.npsp__Primary_Contact__c', None), ('Opportunity.npsp__Primary_Contact_Campaign_Member_Status__c', None), ('Opportunity.npsp__Qualified_Date__c', None), ('Opportunity.npsp__Recurring_Donation_Installment_Name__c', None), ('Opportunity.npsp__Recurring_Donation_Installment_Number__c', None), ('Opportunity.npsp__Requested_Amount__c', None), ('Opportunity.npsp__Tribute_Type__c', None), ('Opportunity.Probability', None), ('Opportunity.TotalOpportunityQuantity', None), ('Opportunity.Transaction_ID__c', None), ('Opportunity.Type', None), ('OpportunityLineItem.Description', None), ('OpportunityLineItem.Discount', None), ('OpportunityLineItem.ListPrice', None), ('OpportunityLineItem.ProductCode', None), ('OpportunityLineItem.ServiceDate', None), ('OpportunityLineItem.Subtotal', None), ('OpportunityLineItem.TotalPrice', None), ('Order.ActivatedBy', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillToContact', None), ('Order.CompanyAuthorizedBy', None), ('Order.CompanyAuthorizedDate', None), ('Order.ContractEndDate', None), ('Order.ContractName', None), ('Order.CustomerAuthorizedBy', None), ('Order.CustomerAuthorizedDate', None), ('Order.Description', None), ('Order.Name', None), ('Order.Opportunity', None), ('Order.OrderReferenceNumber', None), ('Order.PoDate', None), ('Order.PoNumber', None), ('Order.Quote', None), ('Order.ShippingAddress', None), ('Order.ShipToContact', None), ('Order.TotalAmount', None), ('Order.Type', None), ('OrderItem.Description', None), ('OrderItem.EndDate', None), ('OrderItem.ListPrice', None), ('OrderItem.ProductCode', None), ('OrderItem.QuoteLineItem', None), ('OrderItem.ServiceDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSource', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.StockKeepingUnit', None), ('Quote.Account', None), ('Quote.AdditionalAddress', None), ('Quote.AdditionalName', None), ('Quote.BillingAddress', None), ('Quote.BillingName', None), ('Quote.Contact', None), ('Quote.Contract', None), ('Quote.Description', None), ('Quote.Discount', None), ('Quote.Email', None), ('Quote.ExpirationDate', None), ('Quote.Fax', None), ('Quote.GrandTotal', None), ('Quote.Phone', None), ('Quote.QuoteToAddress', None), ('Quote.QuoteToName', None), ('Quote.ShippingAddress', None), ('Quote.ShippingHandling', None), ('Quote.ShippingName', None), ('Quote.Status', None), ('Quote.Subtotal', None), ('Quote.Tax', None), ('Quote.TotalPrice', None), ('QuoteLineItem.Description', None), ('QuoteLineItem.Discount', None), ('QuoteLineItem.ListPrice', None), ('QuoteLineItem.ProductCode', None), ('QuoteLineItem.ServiceDate', None), ('QuoteLineItem.Subtotal', None), ('QuoteLineItem.TotalPrice', None), ('SocialPersona.AreWeFollowing', None), ('SocialPersona.AuthorLabels', None), ('SocialPersona.Bio', None), ('SocialPersona.Followers', None), ('SocialPersona.Following', None), ('SocialPersona.InfluencerScore', None), ('SocialPersona.IsBlacklisted', None), ('SocialPersona.IsFollowingUs', None), ('SocialPersona.IsVerified', None), ('SocialPersona.ListedCount', None), ('SocialPersona.MediaProvider', None), ('SocialPersona.MediaType', None), ('SocialPersona.NumberOfFriends', None), ('SocialPersona.NumberOfTweets', None), ('SocialPersona.ProfileType', None), ('SocialPersona.R6SourceId', None), ('SocialPersona.RealName', None), ('SocialPersona.SourceApp', None), ('SocialPersona.TopicType', None), ('SocialPost.AnalyzerScore', None), ('SocialPost.AssignedTo', None), ('SocialPost.AttachmentType', None), ('SocialPost.AttachmentUrl', None), ('SocialPost.Classification', None), ('SocialPost.CommentCount', None), ('SocialPost.Content', None), ('SocialPost.DeletedBy', None), ('SocialPost.EngagementLevel', None), ('SocialPost.ExternalPostId', None), ('SocialPost.HarvestDate', None), ('SocialPost.HiddenBy', None), ('SocialPost.InboundLinkCount', None), ('SocialPost.IsOutbound', None), ('SocialPost.KeywordGroupName', None), ('SocialPost.Language', None), ('SocialPost.LikesAndVotes', None), ('SocialPost.MediaProvider', None), ('SocialPost.MediaType', None), ('SocialPost.MessageType', None), ('SocialPost.Notes', None), ('SocialPost.OutboundSocialAccount', None), ('SocialPost.Parent', None), ('SocialPost.Persona', None), ('SocialPost.PostPriority', None), ('SocialPost.PostTags', None), ('SocialPost.PostUrl', None), ('SocialPost.R6PostId', None), ('SocialPost.R6SourceId', None), ('SocialPost.R6TopicId', None), ('SocialPost.Recipient', None), ('SocialPost.RecipientType', None), ('SocialPost.ReplyTo', None), ('SocialPost.ResponseContextExternalId', None), ('SocialPost.ReviewedStatus', None), ('SocialPost.ReviewScale', None), ('SocialPost.ReviewScore', None), ('SocialPost.Sentiment', None), ('SocialPost.Shares', None), ('SocialPost.SourceTags', None), ('SocialPost.SpamRating', None), ('SocialPost.Status', None), ('SocialPost.StatusMessage', None), ('SocialPost.ThreadSize', None), ('SocialPost.TopicProfileName', None), ('SocialPost.TopicType', None), ('SocialPost.UniqueCommentors', None), ('SocialPost.ViewCount', None), ('SocialPost.Who', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.SolutionNote', None), ('Survey__c.Class_Enrollment__c', None), ('Survey__c.Survey_Date__c', None), ('Survey__c.Type__c', None), ('Task.ActivityDate', None), ('Task.Description', None), ('Task.npsp__Engagement_Plan__c', None), ('Task.npsp__Engagement_Plan_Task__c', None), ('Task.Type', None), ('Task.What', None), ('Task.Who', None)])
    permissions_edit = models.BooleanField(verbose_name='Edit Field', default=models.DEFAULTED_ON_CREATE)
    permissions_read = models.BooleanField(verbose_name='Read Field', default=models.DEFAULTED_ON_CREATE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FieldPermissions'
        verbose_name = 'Field Permissions'
        verbose_name_plural = 'Field Permissions'
        # keyPrefix = '01k'



class FileSearchActivity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Search Activity Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='filesearchactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='filesearchactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    search_term = models.CharField(max_length=100, sf_read_only=models.READ_ONLY)
    query_date = models.DateField(verbose_name='Search Date', sf_read_only=models.READ_ONLY)
    count_queries = models.IntegerField(verbose_name='Number of Searches', sf_read_only=models.READ_ONLY)
    count_users = models.IntegerField(verbose_name='Number of Users', sf_read_only=models.READ_ONLY)
    avg_num_results = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='Average Number of Results', sf_read_only=models.READ_ONLY)
    period = models.CharField(max_length=255, verbose_name='Duration', sf_read_only=models.READ_ONLY, choices=[('DAY', 'Daily'), ('MONTH', 'Monthly'), ('YEAR', 'Yearly')])
    query_language = models.CharField(max_length=255, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    click_rank = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='Average Click Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FileSearchActivity'
        verbose_name = 'FileSearchActivity'
        verbose_name_plural = 'File Search Activity'
        # keyPrefix = '06h'



class FiscalYearSettings(models.Model):
    period = models.ForeignKey('Period', models.DO_NOTHING, related_name='fiscalyearsettings_period_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    start_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    is_standard_year = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    year_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', None), ('Custom', None), ('Placeholder', None)], blank=True, null=True)
    quarter_label_scheme = models.CharField(max_length=40, verbose_name='Quarter Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('Custom', 'Custom Quarter Names')], blank=True, null=True)
    period_label_scheme = models.CharField(max_length=40, verbose_name='Period Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('NumberByQuarter', 'Numbered By Quarter'), ('StandardMonths', 'Standard Month Names'), ('Custom', 'Custom Period Names')], blank=True, null=True)
    week_label_scheme = models.CharField(max_length=40, verbose_name='Week Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Year'), ('NumberByQuarter', 'Quarter'), ('NumberByPeriod', 'Period')], blank=True, null=True)
    quarter_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Quarter', choices=[('Quarter', 'Quarter'), ('FQ', 'FQ'), ('Q', 'Q'), ('Trimester', 'Trimester')], blank=True, null=True)
    period_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Period', choices=[('Period', 'Period'), ('FP', 'FP'), ('P', 'P'), ('Month', 'Month')], blank=True, null=True)
    week_start_day = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FiscalYearSettings'
        verbose_name = 'Fiscal Year Settings'
        verbose_name_plural = 'Fiscal Year Settings'
        # keyPrefix = '022'



class FlexQueueItem(models.Model):
    flex_queue_item_id = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    job_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Future', 'Future'), ('SharingRecalculation', 'Sharing Recalculation'), ('ScheduledApex', 'Scheduled Apex'), ('BatchApex', 'Batch Apex'), ('BatchApexWorker', 'Batch Apex Worker'), ('TestRequest', 'Test Request'), ('TestWorker', 'Test Worker'), ('ApexToken', 'Apex Token'), ('Queueable', 'Queueable')])
    async_apex_job = models.ForeignKey(AsyncApexJob, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    job_position = models.IntegerField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FlexQueueItem'
        verbose_name = 'Flex Queue Item'
        verbose_name_plural = 'Flex Queue Items'
        # keyPrefix = '06i'



class FlowInterview(models.Model):
    owner = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowinterview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowinterview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    current_element = models.CharField(max_length=100, sf_read_only=models.READ_ONLY, blank=True, null=True)
    interview_label = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pause_label = models.CharField(max_length=1000, verbose_name='Pause Reason', sf_read_only=models.READ_ONLY, blank=True, null=True)
    guid = models.CharField(max_length=255, verbose_name='Flow Interview Guid', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterview'
        verbose_name = 'Flow Interview'
        verbose_name_plural = 'Flow Interviews'
        # keyPrefix = '0Fo'



class FlowInterviewShare(models.Model):
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'FlowInterviewShare'
        verbose_name = 'Flow Interview Share'
        verbose_name_plural = 'Flow Interview Share'
        # keyPrefix = 'None'



class FlowRecordRelation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowrecordrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowrecordrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    related_record = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, AccountContactRole, AccountPartner, Announcement, ApexTestQueueItem, AppAnalyticsQueryRequest, Approval, Asset, AssetRelationship, AsyncApexJob, Attachment, BackgroundOperation, Campaign, CampaignMember, Case, CaseContactRole, CaseSolution, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, CollaborationGroup, CollaborationGroupMember, CollaborationGroupMemberRequest, CollaborationGroupRecord, CollaborationInvitation, Contact, ContactPointTypeConsent, ContactRequest, ContentDistribution, ContentDocument, ContentDocumentLink, ContentDocumentSubscription, ContentFolder, ContentFolderLink, ContentFolderMember, ContentNote, ContentNotification, ContentVersion, ContentVersionComment, ContentVersionRating, ContentWorkspaceDoc, Contract, ContractContactRole, Dashboard, DashboardComponent, DataAssessmentFieldMetric, DataAssessmentMetric, DataAssessmentValueMetric, DataUseLegalBasis, DataUsePurpose, Document, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, EmailMessageRelation, EntitySubscription, Equipment_Assignment__c, Equipment__c, Event, EventRelation, ExpressionFilter, ExpressionFilterCriteria, FeedAttachment, FeedComment, FeedItem, FeedPollChoice, FeedPollVote, FeedRevision, FileSearchActivity, FlowStageRelation, ForecastShare, ForecastingAdjustment, ForecastingFact, ForecastingItem, ForecastingOwnerAdjustment, ForecastingQuota, Image, Incident__c, Individual, InstalledMobileApp, Lead, ListEmail, ListEmailIndividualRecipient, ListEmailRecipientSource, Macro, MacroInstruction, Note, Opportunity, OpportunityContactRole, OpportunityLineItem, OpportunityPartner, Order, OrderItem, Partner, Pricebook2, PricebookEntry, ProcessInstance, ProcessInstanceNode, Product2, PushTopic, QuickText, Quote, QuoteDocument, QuoteLineItem, Recommendation, RecordAction, Report, SearchActivity, SocialPersona, SocialPost, Solution, StreamingChannel, Survey__c, Task, TaskRelation, TodayGoal, Topic, TopicAssignment, UserAppInfo, UserAppMenuCustomization, UserEmailPreferredPerson, WaveAutoInstallRequest, WaveCompatibilityCheckItem, WorkAccess, WorkBadge, WorkBadgeDefinition, WorkThanks, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    class Meta(models.Model.Meta):
        db_table = 'FlowRecordRelation'
        verbose_name = 'Flow Record Relation'
        verbose_name_plural = 'Flow Record Relations'
        # keyPrefix = '31z'



class FlowStageRelation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowstagerelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='flowstagerelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(FlowInterview, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    stage_order = models.IntegerField(sf_read_only=models.READ_ONLY)
    stage_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='Active', choices=[('Active', None), ('Current', None)], blank=True, null=True)
    stage_label = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    flex_index = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'FlowStageRelation'
        verbose_name = 'Flow Interview Stage Relation'
        verbose_name_plural = 'Flow Interview Stage Relations'
        # keyPrefix = '31y'



class Folder(models.Model):
    parent = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    name = models.CharField(max_length=40)
    developer_name = models.CharField(max_length=80, verbose_name='Folder Unique Name', blank=True, null=True)
    access_type = models.CharField(max_length=40, choices=[('Shared', 'Shared'), ('Public', 'Public'), ('Hidden', 'Hidden'), ('PublicInternal', 'Public Internal')])
    is_readonly = models.BooleanField(verbose_name='Read Only', default=models.DEFAULTED_ON_CREATE)
    type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Document', 'Document'), ('Email', 'Email Template'), ('Report', 'Report'), ('Dashboard', 'Dashboard'), ('QuickText', 'Quick Text'), ('Macro', 'Macro'), ('EmailTemplate', 'Email Template')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folder_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folder_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Folder'
        verbose_name = 'Folder'
        verbose_name_plural = 'Folders'
        # keyPrefix = '00l'



class FolderedContentDocument(models.Model):
    is_folder = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    parent_content_folder = models.ForeignKey(ContentFolder, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folderedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='folderedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'FolderedContentDocument'
        verbose_name = 'Foldered Content Document'
        verbose_name_plural = 'Foldered Content Documents'
        # keyPrefix = 'None'



class ForecastShare(models.Model):
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey('Group', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Forecast Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    can_submit = models.BooleanField(verbose_name='Submit Allowed', sf_read_only=models.READ_ONLY, default=False)
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')])
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ForecastShare'
        verbose_name = 'Forecast Share'
        verbose_name_plural = 'Forecast Share'
        # keyPrefix = '608'



class ForecastingAdjustment(models.Model):
    forecasting_item = models.ForeignKey('ForecastingItem', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    period = models.ForeignKey('Period', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date = models.DateField(verbose_name='Period Start Date', sf_read_only=models.NOT_UPDATEABLE)
    product_family = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('None', 'None')], blank=True, null=True)
    forecasting_item_category = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'ClosedOnly'), ('OpenPipeline', 'OpenPipeline'), ('BestCaseForecast', 'BestCaseForecast'), ('CommitForecast', 'CommitForecast')])
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', sf_read_only=models.NOT_UPDATEABLE, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    adjusted_amount = models.DecimalField(max_digits=18, decimal_places=0)
    adjusted_quantity = models.DecimalField(max_digits=12, decimal_places=2)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingadjustment_owner_set', sf_read_only=models.NOT_UPDATEABLE)
    is_quantity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingadjustment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingadjustment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    adjustment_note = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingAdjustment'
        verbose_name = 'Forecasting Adjustment'
        verbose_name_plural = 'Forecasting Adjustments'
        # keyPrefix = '0G7'



class ForecastingCategoryMapping(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingcategorymapping_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingcategorymapping_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    source_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    forecasting_item_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'ClosedOnly'), ('OpenPipeline', 'OpenPipeline'), ('BestCaseForecast', 'BestCaseForecast'), ('CommitForecast', 'CommitForecast')])
    class Meta(models.Model.Meta):
        db_table = 'ForecastingCategoryMapping'
        verbose_name = 'Forecasting Category Mapping'
        verbose_name_plural = 'Forecasting Category Mappings'
        # keyPrefix = '0Jd'



class ForecastingDisplayedFamily(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingdisplayedfamily_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingdisplayedfamily_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    product_family = models.CharField(unique=True, max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'None')])
    display_position = models.IntegerField(unique=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingDisplayedFamily'
        verbose_name = 'Forecasting Displayed Family'
        verbose_name_plural = 'Forecasting Displayed Families'
        # keyPrefix = '0Zx'



class ForecastingFact(models.Model):
    owner = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    period = models.ForeignKey('Period', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    forecasted_object = models.ForeignKey('OpportunityLineItem', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecasting_item = models.ForeignKey('ForecastingItem', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingFact'
        verbose_name = 'Forecasting Fact'
        verbose_name_plural = 'Forecasting Facts'
        # keyPrefix = '0G6'



class ForecastingItem(models.Model):
    owner = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    period = models.ForeignKey('Period', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecasting_item_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'ClosedOnly'), ('OpenPipeline', 'OpenPipeline'), ('BestCaseForecast', 'BestCaseForecast'), ('CommitForecast', 'CommitForecast')])
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    parent_forecasting_item = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    product_family = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'None')], blank=True, null=True)
    owner_only_amount = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_without_adjustments = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_without_manager_adjustment = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_amount = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner_only_quantity = models.DecimalField(max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity_without_adjustments = models.DecimalField(max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity_without_manager_adjustment = models.DecimalField(max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_quantity = models.DecimalField(max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_quantity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_adjustment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_owner_adjustment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_up_to_date = models.BooleanField(verbose_name='Is up to date', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    amount_without_owner_adjustment = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Amount Without Owner Adjustments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity_without_owner_adjustment = models.DecimalField(max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subordinate_overrides = models.IntegerField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingItem'
        verbose_name = 'Forecasting Item'
        verbose_name_plural = 'Forecasting Items'
        # keyPrefix = '0G3'



class ForecastingOwnerAdjustment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingowneradjustment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingowneradjustment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    forecasting_item = models.ForeignKey(ForecastingItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, unique=True)
    owner_adjusted_amount = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    owner_adjusted_quantity = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    owner_adjustment_note = models.TextField(blank=True, null=True)
    period = models.ForeignKey('Period', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_owner = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingowneradjustment_forecastowner_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    start_date = models.DateField(verbose_name='Period Start Date', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product_family = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('None', 'None')], blank=True, null=True)
    forecasting_item_category = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'ClosedOnly'), ('OpenPipeline', 'OpenPipeline'), ('BestCaseForecast', 'BestCaseForecast'), ('CommitForecast', 'CommitForecast')])
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', sf_read_only=models.NOT_UPDATEABLE, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    is_quantity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingOwnerAdjustment'
        verbose_name = 'Forecasting Owner Adjustment'
        verbose_name_plural = 'Forecasting Owner Adjustments'
        # keyPrefix = '08Q'



class ForecastingQuota(models.Model):
    period = models.ForeignKey('Period', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date = models.DateField(verbose_name='Quota Month')
    product_family = models.CharField(max_length=40, choices=[('None', 'None')], blank=True, null=True)
    quota_amount = models.DecimalField(max_digits=18, decimal_places=0)
    quota_quantity = models.DecimalField(max_digits=12, decimal_places=2)
    quota_owner = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingquota_quotaowner_set')
    is_quantity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingquota_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingquota_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey('ForecastingType', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingQuota'
        verbose_name = 'Forecasting Quota'
        verbose_name_plural = 'Forecasting Quotas'
        # keyPrefix = '0J9'



class ForecastingShare(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingshare_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingshare_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user_or_group = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingshare_userorgroup_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    shared_forecast_manager_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    access_level = models.CharField(max_length=255, verbose_name='Forecasting Share Access Level', choices=[('ViewOnly', '0'), ('ViewAndEdit', '1')])
    role_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('R', None), ('T', None), ('Y', None)])
    class Meta(models.Model.Meta):
        db_table = 'ForecastingShare'
        verbose_name = 'Forecasting Share'
        verbose_name_plural = 'Forecasting Shares'
        # keyPrefix = '0Jc'



class ForecastingType(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='API Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingtype_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingtype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_quantity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_amount = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    can_display_quotas = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_product_family = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    role_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('R', None), ('T', None), ('Y', None)])
    date_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('OpportunityCloseDate', '0'), ('ProductDate', '1'), ('ScheduleDate', '2')])
    class Meta(models.Model.Meta):
        db_table = 'ForecastingType'
        verbose_name = 'Forecasting Type'
        verbose_name_plural = 'Forecasting Types'
        # keyPrefix = '0Db'



class ForecastingTypeToCategory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingtypetocategory_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='forecastingtypetocategory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    forecasting_type = models.ForeignKey(ForecastingType, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    forecasting_item_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('OmittedOnly', 'OmittedOnly'), ('PipelineOnly', 'PipelineOnly'), ('BestCaseOnly', 'BestCaseOnly'), ('CommitOnly', 'CommitOnly'), ('ClosedOnly', 'ClosedOnly'), ('OpenPipeline', 'OpenPipeline'), ('BestCaseForecast', 'BestCaseForecast'), ('CommitForecast', 'CommitForecast')])
    display_position = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_adjustable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_owner_adjustable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingTypeToCategory'
        verbose_name = 'Forecasting Type To Category Mapping'
        verbose_name_plural = 'Forecasting Type To Category Mappings'
        # keyPrefix = '0Jg'



class ForecastingUserPreference(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='External ID', blank=True, null=True)
    forecasting_start_period = models.IntegerField(verbose_name='Period Start', blank=True, null=True)
    forecasting_period_duration = models.IntegerField(verbose_name='Period Duration', blank=True, null=True)
    forecasting_period_type = models.CharField(max_length=255, verbose_name='Period Type', choices=[('Month', None), ('Quarter', None), ('Week', None), ('Year', None)], blank=True, null=True)
    forecasting_displayed_type = models.ForeignKey(ForecastingType, models.DO_NOTHING)
    forecasting_view_currency = models.CharField(max_length=40, verbose_name='Viewing Currency', blank=True, null=True)
    is_hide_forecasting_guided_tour = models.BooleanField(verbose_name='Hide Guided Tour', default=models.DEFAULTED_ON_CREATE)
    is_show_forecasting_quota_attainment = models.BooleanField(verbose_name='Show Quota Attainment', default=models.DEFAULTED_ON_CREATE)
    is_hide_forecasting_quota_column = models.BooleanField(verbose_name='Hide Quota Column', default=models.DEFAULTED_ON_CREATE)
    is_forecasting_show_quantity = models.BooleanField(verbose_name='Show Quantity', default=models.DEFAULTED_ON_CREATE)
    is_forecasting_hide_zero_rows = models.BooleanField(verbose_name='Hide Zero Rows', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'ForecastingUserPreference'
        verbose_name = 'Forecasting User Preference'
        verbose_name_plural = 'Forecasting User Preferences'
        # keyPrefix = '0Cl'



class GrantedByLicense(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='grantedbylicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='grantedbylicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    custom_permission = models.ForeignKey(CustomPermission, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'GrantedByLicense'
        verbose_name = 'Setting Granted By License'
        verbose_name_plural = 'Settings Granted By Licenses'
        # keyPrefix = '06d'



class Group(models.Model):
    name = models.CharField(max_length=40)
    developer_name = models.CharField(max_length=80, blank=True, null=True)
    related = models.ForeignKey('User', models.DO_NOTHING, related_name='group_related_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [User, UserRole]
    type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('AllCustomerPortal', None), ('ChannelProgramGroup', None), ('CollaborationGroup', None), ('Manager', None), ('ManagerAndSubordinatesInternal', None), ('Organization', None), ('PRMOrganization', None), ('Queue', None), ('Regular', None), ('Role', None), ('RoleAndSubordinates', None), ('RoleAndSubordinatesInternal', None), ('Territory', None), ('TerritoryAndSubordinates', None)])
    email = models.EmailField(blank=True, null=True)
    owner = models.ForeignKey('Organization', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Organization, User]
    does_send_email_to_members = models.BooleanField(verbose_name='Send Email to Members', default=models.DEFAULTED_ON_CREATE)
    does_include_bosses = models.BooleanField(verbose_name='Include Bosses', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='group_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='group_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Group'
        verbose_name = 'Group'
        verbose_name_plural = 'Group'
        # keyPrefix = '00G'



class GroupMember(models.Model):
    group = models.ForeignKey(Group, models.DO_NOTHING, related_name='groupmember_group_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, related_name='groupmember_userorgroup_set', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'GroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Member'
        # keyPrefix = '011'



class Holiday(models.Model):
    name = models.CharField(max_length=80, verbose_name='Holiday Name')
    description = models.CharField(max_length=100, blank=True, null=True)
    is_all_day = models.BooleanField(verbose_name='All Day', default=models.DEFAULTED_ON_CREATE)
    activity_date = models.DateField(verbose_name='Holiday Date', blank=True, null=True)
    start_time_in_minutes = models.IntegerField(verbose_name='Start Time In Minutes From Midnight', blank=True, null=True)
    end_time_in_minutes = models.IntegerField(verbose_name='End Time In Minutes From Midnight', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='holiday_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='holiday_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_recurrence = models.BooleanField(verbose_name='Recurring Holiday', default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date = models.DateField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Holiday'
        verbose_name = 'Holiday'
        verbose_name_plural = 'Holidays'
        # keyPrefix = '0C0'



class IconDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Icon Definition Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tab_definition_id = models.CharField(max_length=512, verbose_name='Tab Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url = models.CharField(max_length=255, verbose_name='URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    theme = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    height = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    width = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IconDefinition'
        verbose_name = 'Icon Definition'
        verbose_name_plural = 'Icon Definitions'
        # keyPrefix = '09k'



class IdpEventLog(models.Model):
    initiated_by = models.CharField(max_length=40, verbose_name='Usage Type', sf_read_only=models.READ_ONLY, choices=[('IdP', 'IdP-Initiated SAML'), ('SP', 'SP-Initiated SAML'), ('OauthAuthorize', 'OAuth Authorization'), ('OauthTokenExchange', 'OAuth Token Exchange'), ('Unused', None)])
    timestamp = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_code = models.CharField(max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Success', 'Success'), ('NoSubdomain', 'Error: Org has not configured My Domains yet'), ('InvalidIdpEndpoint', 'Error: Invalid Identity Provider Endpoint URL'), ('InvalidAuthnRequest', 'Error: Unable to parse AuthnRequest from service provider'), ('InvalidSp', 'Error: Misconfigured or invalid service provider'), ('NoUserFedId', 'Error: User does not have a Federation Identifier selected'), ('NoAccess', 'Error: User does not have access to this service provider'), ('InvalidSettings', 'Error: IdP certificate is invalid or does not exist'), ('NoSpokeId', 'Error: No Spoke ID found'), ('InvalidSpokeSp', 'Error: Invalid spoke SP settings'), ('NoCustomAttrValue', 'Error: User does not have a value for the subject custom attribute'), ('NoCustomField', 'Error: Custom field not found'), ('InvalidIssuer', 'Error: Invalid Issuer'), ('InvalidSignature', 'Error: Invalid Signature'), ('UnableToResolve', 'Error: Unable to resolve request into a Service Provider'), ('InvalidSessionLevel', 'Error: Invalid session level'), ('InternalError', 'Error: Internal Error'), ('OauthError', 'OAuth Error'), ('AppAccessDenied', 'Error: App access denied'), ('AppBlocked', 'Error: App blocked'), ('ClientUnapproved', 'Error: Invalid grant'), ('CodeExpired', 'Error: Expired authorization code'), ('InvalidClientCredentials', 'Error: Invalid client credentials'), ('InvalidCode', 'Error: Invalid authorization code'), ('InvalidScope', 'Error: Invalid scope(s)'), ('InvalidUserCredentials', 'Error: Invalid user credentials'), ('InvalidDeviceId', 'Error: Invalid device ID'), ('UnknownError', 'Unknown Error')])
    saml_entity_url = models.CharField(max_length=1500, verbose_name='Entity ID', sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    auth_session = models.ForeignKey(AuthSession, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_type = models.CharField(max_length=40, verbose_name='SSO Type', sf_read_only=models.READ_ONLY, choices=[('Saml', None), ('Oidc', None)], blank=True, null=True)
    app = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    identity_used = models.CharField(max_length=765, sf_read_only=models.READ_ONLY, blank=True, null=True)
    options_has_logout_url = models.BooleanField(verbose_name='Has Logout URL', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'IdpEventLog'
        verbose_name = 'Identity Provider Event Log'
        verbose_name_plural = 'Identity Event Logs'
        # keyPrefix = '0Yu'



class IframeWhiteListUrl(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='iframewhitelisturl_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='iframewhitelisturl_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    url = models.CharField(unique=True, max_length=255, verbose_name='Domain', help_text='Accepts these formats: example.com, *.example.com, and http://example.com', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IframeWhiteListUrl'
        verbose_name = 'Whitelisted Domain for Visualforce Inline Frames'
        verbose_name_plural = 'Whitelisted Domains for Visualforce Inline Frames'
        # keyPrefix = '6TS'



class Image(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='image_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='image_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    image_view_type = models.CharField(max_length=80, blank=True, null=True)
    image_title = models.CharField(max_length=255, blank=True, null=True)
    image_alternate_text = models.CharField(max_length=255, verbose_name='Accessibility Text', blank=True, null=True)
    image_url = models.URLField(verbose_name='Image URL', blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    image_class = models.CharField(max_length=255, verbose_name='Category', default=models.DEFAULTED_ON_CREATE, choices=[('SCENES', 'Scenes'), ('FOOD', 'Food'), ('OBJECTS', 'Objects'), ('LOGOS', 'Logos')], blank=True, null=True)
    image_class_object_type = models.CharField(max_length=255, verbose_name='Image Type', default=models.DEFAULTED_ON_CREATE, choices=[('TRAINING', 'Training'), ('DETECTION', 'Actual Image'), ('FEEDBACK', 'Feedback')], blank=True, null=True)
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    captured_angle = models.CharField(max_length=8, verbose_name='Camera Angle', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Image'
        verbose_name = 'Image'
        verbose_name_plural = 'Images'
        # keyPrefix = '4YL'



class ImageShare(models.Model):
    parent = models.ForeignKey(Image, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ImageShare'
        verbose_name = 'Image Share'
        verbose_name_plural = 'Image Share'
        # keyPrefix = 'None'



class IncidentChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='incidentchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='incidentchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    incident_date = models.DateField(custom=True, db_column='Incident_Date__c', verbose_name='Incident Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    incident_summary = models.TextField(custom=True, db_column='Incident_Summary__c', verbose_name='Incident Summary', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class_enrollment = models.ForeignKey(ClassEnrollment, models.DO_NOTHING, db_column='Class_Enrollment__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Incident__ChangeEvent'
        verbose_name = 'Change Event: Incident'
        verbose_name_plural = 'Change Event: Incident'
        # keyPrefix = 'None'



class IncidentHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Incident', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Class_Enrollment__c', 'Class Enrollment'), ('Contact__c', 'Contact'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Incident_Date__c', 'Incident Date'), ('Name', 'Incident Number'), ('Incident_Summary__c', 'Incident Summary'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Incident__History'
        verbose_name = 'History: Incident'
        verbose_name_plural = 'History: Incident'
        # keyPrefix = 'None'



class Incident(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Incident Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='incident_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='incident_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    incident_date = models.DateField(custom=True, db_column='Incident_Date__c', verbose_name='Incident Date', blank=True, null=True)
    incident_summary = models.TextField(custom=True, db_column='Incident_Summary__c', verbose_name='Incident Summary', blank=True, null=True)
    class_enrollment = models.ForeignKey(ClassEnrollment, models.DO_NOTHING, db_column='Class_Enrollment__c', custom=True, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Incident__c'
        verbose_name = 'Incident'
        verbose_name_plural = 'Incidents'
        # keyPrefix = 'a0m'



class Individual(models.Model):
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='individual_owner_set')  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, blank=True, null=True)
    suffix = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, sf_read_only=models.READ_ONLY)
    has_opted_out_tracking = models.BooleanField(verbose_name="Don't Track", default=models.DEFAULTED_ON_CREATE)
    has_opted_out_profiling = models.BooleanField(verbose_name="Don't Profile", default=models.DEFAULTED_ON_CREATE)
    has_opted_out_processing = models.BooleanField(verbose_name="Don't Process", default=models.DEFAULTED_ON_CREATE)
    has_opted_out_solicit = models.BooleanField(verbose_name="Don't Market", default=models.DEFAULTED_ON_CREATE)
    should_forget = models.BooleanField(verbose_name='Forget this Individual', default=models.DEFAULTED_ON_CREATE)
    send_individual_data = models.BooleanField(verbose_name="Export Individual's Data", default=models.DEFAULTED_ON_CREATE)
    can_store_pii_elsewhere = models.BooleanField(verbose_name='OK to Store PII Data Elsewhere', default=models.DEFAULTED_ON_CREATE)
    has_opted_out_geo_tracking = models.BooleanField(verbose_name='Block Geolocation Tracking', default=models.DEFAULTED_ON_CREATE)
    birth_date = models.DateField(blank=True, null=True)
    death_date = models.DateField(blank=True, null=True)
    convictions_count = models.IntegerField(verbose_name='Conviction Count', blank=True, null=True)
    children_count = models.IntegerField(verbose_name='Number of Children', blank=True, null=True)
    military_service = models.CharField(max_length=40, choices=[('Unknown', 'Unknown'), ('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    is_home_owner = models.BooleanField(verbose_name='Is Homeowner', default=models.DEFAULTED_ON_CREATE)
    occupation = models.CharField(max_length=150, blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    individuals_age = models.CharField(max_length=40, verbose_name="Individual's Age", choices=[('13 or Older', '13 or Older'), ('16 or Older', '16 or Older')], blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_record = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='individual_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='individual_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Individual'
        verbose_name = 'Individual'
        verbose_name_plural = 'Individuals'
        # keyPrefix = '0PK'



class IndividualHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    individual = models.ForeignKey(Individual, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('BirthDate', 'Birth Date'), ('HasOptedOutGeoTracking', 'Block Geolocation Tracking'), ('ConsumerCreditScore', 'Consumer Credit Score'), ('ConsumerCreditScoreProviderName', '\ufeffConsumer Credit Score Provider Name'), ('ConvictionsCount', 'Conviction Count'), ('created', 'Created.'), ('DeathDate', 'Death Date'), ('HasOptedOutSolicit', "Don't Market"), ('HasOptedOutProcessing', "Don't Process"), ('HasOptedOutProfiling', "Don't Profile"), ('HasOptedOutTracking', "Don't Track"), ('SendIndividualData', "Export Individual's Data"), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('ShouldForget', 'Forget this Individual'), ('IndividualsAge', "Individual's Age"), ('individualMerged', 'Individual Merged'), ('Owner', 'Individual Owner'), ('InfluencerRating', 'Influencer Rating'), ('IsHomeOwner', 'Is Homeowner'), ('LastName', 'Last Name'), ('MiddleName', 'Middle Name'), ('MilitaryService', 'Military Service'), ('Name', 'Name'), ('ChildrenCount', 'Number of Children'), ('Occupation', 'Occupation'), ('CanStorePiiElsewhere', 'OK to Store PII Data Elsewhere'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Salutation', 'Salutation'), ('Suffix', 'Suffix'), ('Website', 'Website')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'IndividualHistory'
        verbose_name = 'Individual History'
        verbose_name_plural = 'Individual History'
        # keyPrefix = 'None'



class IndividualShare(models.Model):
    individual = models.ForeignKey(Individual, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    individual_access_level = models.CharField(max_length=40, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, verbose_name='Apex Sharing Reason ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'IndividualShare'
        verbose_name = 'Individual Share'
        verbose_name_plural = 'Individual Share'
        # keyPrefix = '0T5'



class InstalledMobileApp(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Installed Mobile App Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('downloaded', 'Downloaded'), ('installed', 'Installed')])
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='installedmobileapp_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    connected_application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    version = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'InstalledMobileApp'
        verbose_name = 'Installed Mobile App'
        verbose_name_plural = 'Installed Mobile Apps'
        # keyPrefix = '0El'



class KnowledgeableUser(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    topic = models.ForeignKey('Topic', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    raw_rank = models.IntegerField(verbose_name='Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'KnowledgeableUser'
        verbose_name = 'Knowledgeable User'
        verbose_name_plural = 'Knowledgeable Users'
        # keyPrefix = '0in'



class Lead(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, blank=True, null=True)
    suffix = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=128, blank=True, null=True)
    company = models.CharField(max_length=255)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    state_code = models.CharField(max_length=10, verbose_name='State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Advertisement', 'Advertisement'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Internal'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Trade Show'), ('Web', 'Web'), ('Word of mouth', 'Word of mouth'), ('Other', 'Other')], blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Contacted', 'Contacted'), ('Open', 'Open'), ('Qualified', 'Qualified'), ('Unqualified', 'Unqualified')])
    industry = models.CharField(max_length=40, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', blank=True, null=True)
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_converted = models.BooleanField(verbose_name='Converted', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    converted_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_unread_by_owner = models.BooleanField(verbose_name='Unread By Owner', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lead_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lead_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    email_bounced_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    individual = models.ForeignKey(Individual, models.DO_NOTHING, blank=True, null=True)
    npe01_preferred_email = models.CharField(db_column='npe01__Preferred_Email__c', custom=True, max_length=255, verbose_name='Preferred Email', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npe01_preferred_phone = models.CharField(db_column='npe01__Preferred_Phone__c', custom=True, max_length=255, verbose_name='Preferred Phone', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, blank=True, null=True) 
    npsp_company_city = models.CharField(db_column='npsp__CompanyCity__c', custom=True, max_length=255, verbose_name='Company City', blank=True, null=True) 
    npsp_company_country = models.CharField(db_column='npsp__CompanyCountry__c', custom=True, max_length=255, verbose_name='Company Country', blank=True, null=True) 
    npsp_company_postal_code = models.CharField(db_column='npsp__CompanyPostalCode__c', custom=True, max_length=255, verbose_name='Company Zip/Postal Code', blank=True, null=True) 
    npsp_company_state = models.CharField(db_column='npsp__CompanyState__c', custom=True, max_length=255, verbose_name='Company State/Province', blank=True, null=True) 
    npsp_company_street = models.TextField(db_column='npsp__CompanyStreet__c', custom=True, verbose_name='Company Street', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Lead'
        verbose_name = 'Lead'
        verbose_name_plural = 'Leads'
        # keyPrefix = '00Q'



class LeadChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    salutation = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    company = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_code = models.CharField(max_length=10, verbose_name='State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_source = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertisement', 'Advertisement'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Internal'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Trade Show'), ('Web', 'Web'), ('Word of mouth', 'Word of mouth'), ('Other', 'Other')], blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Open', choices=[('Contacted', 'Contacted'), ('Open', 'Open'), ('Qualified', 'Qualified'), ('Unqualified', 'Unqualified')], blank=True, null=True)
    industry = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Other', 'Other'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities')], blank=True, null=True)
    number_of_employees = models.IntegerField(verbose_name='Employees', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='leadchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_converted = models.BooleanField(verbose_name='Converted', sf_read_only=models.READ_ONLY, default=False)
    converted_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    converted_opportunity = models.ForeignKey('Opportunity', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_unread_by_owner = models.BooleanField(verbose_name='Unread By Owner', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    individual = models.ForeignKey(Individual, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_preferred_email = models.CharField(db_column='npe01__Preferred_Email__c', custom=True, max_length=255, verbose_name='Preferred Email', sf_read_only=models.READ_ONLY, choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npe01_preferred_phone = models.CharField(db_column='npe01__Preferred_Phone__c', custom=True, max_length=255, verbose_name='Preferred Phone', sf_read_only=models.READ_ONLY, choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_company_city = models.CharField(db_column='npsp__CompanyCity__c', custom=True, max_length=255, verbose_name='Company City', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_company_country = models.CharField(db_column='npsp__CompanyCountry__c', custom=True, max_length=255, verbose_name='Company Country', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_company_postal_code = models.CharField(db_column='npsp__CompanyPostalCode__c', custom=True, max_length=255, verbose_name='Company Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_company_state = models.CharField(db_column='npsp__CompanyState__c', custom=True, max_length=255, verbose_name='Company State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_company_street = models.TextField(db_column='npsp__CompanyStreet__c', custom=True, verbose_name='Company Street', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'LeadChangeEvent'
        verbose_name = 'Lead Change Event'
        verbose_name_plural = 'Lead Change Event'
        # keyPrefix = 'None'



class LeadFeed(models.Model):
    parent = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadFeed'
        verbose_name = 'Lead Feed'
        verbose_name_plural = 'Lead Feed'
        # keyPrefix = 'None'



class LeadHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    lead = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('AnnualRevenue', 'Annual Revenue'), ('npsp__Batch__c', 'Batch'), ('City', 'City'), ('Company', 'Company'), ('npsp__CompanyCity__c', 'Company City'), ('npsp__CompanyCountry__c', 'Company Country'), ('npsp__CompanyState__c', 'Company State/Province'), ('npsp__CompanyStreet__c', 'Company Street'), ('npsp__CompanyPostalCode__c', 'Company Zip/Postal Code'), ('Country', 'Country'), ('CountryCode', 'Country Code'), ('created', 'Created.'), ('Jigsaw', 'Data.com Key'), ('Description', 'Description'), ('DoNotCall', 'Do Not Call'), ('Email', 'Email'), ('EmailBouncedDate', 'Email Bounced Date'), ('EmailBouncedReason', 'Email Bounced Reason'), ('HasOptedOutOfEmail', 'Email Opt Out'), ('Fax', 'Fax'), ('HasOptedOutOfFax', 'Fax Opt Out'), ('feedEvent', 'Feed event'), ('FirstName', 'First Name'), ('GeocodeAccuracy', 'Geocode Accuracy'), ('Individual', 'Individual'), ('individualMerged', 'Individual Merged'), ('Industry', 'Industry'), ('LastName', 'Last Name'), ('Latitude', 'Latitude'), ('leadConverted', 'Lead Converted.'), ('leadMerged', 'Lead Merged'), ('Owner', 'Lead Owner'), ('LeadSource', 'Lead Source'), ('Status', 'Lead Status'), ('Longitude', 'Longitude'), ('MiddleName', 'Middle Name'), ('MobilePhone', 'Mobile'), ('Name', 'Name'), ('NumberOfEmployees', 'No. of Employees'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', 'Phone'), ('npe01__Preferred_Email__c', 'Preferred Email'), ('npe01__Preferred_Phone__c', 'Preferred Phone'), ('Rating', 'Rating'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Salutation', 'Salutation'), ('State', 'State/Province'), ('StateCode', 'State/Province Code'), ('Street', 'Street'), ('Suffix', 'Suffix'), ('Title', 'Title'), ('IsUnreadByOwner', 'Unread By Owner'), ('Website', 'Website'), ('PostalCode', 'Zip/Postal Code')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LeadHistory'
        verbose_name = 'Lead History'
        verbose_name_plural = 'Lead History'
        # keyPrefix = 'None'



class LeadShare(models.Model):
    lead = models.ForeignKey(Lead, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    lead_access_level = models.CharField(max_length=40, verbose_name='Lead Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'LeadShare'
        verbose_name = 'Lead Share'
        verbose_name_plural = 'Lead Share'
        # keyPrefix = '01o'



class LeadStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_converted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='leadstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'LeadStatus'
        verbose_name = 'Lead Status Value'
        verbose_name_plural = 'Lead Status Value'
        # keyPrefix = '01J'



class LightningExperienceTheme(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=70, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=70, verbose_name='Name')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lightningexperiencetheme_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lightningexperiencetheme_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    default_branding_set = models.ForeignKey(BrandingSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    should_override_loading_image = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    description = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LightningExperienceTheme'
        verbose_name = 'Lightning Experience Theme'
        verbose_name_plural = 'Lightning Experience Themes'
        # keyPrefix = '0S1'



class ListEmail(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemail_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemail_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.TextField(blank=True, null=True)
    html_body = models.TextField(blank=True, null=True)
    text_body = models.TextField(blank=True, null=True)
    from_name = models.CharField(max_length=121, blank=True, null=True)
    from_address = models.TextField()
    status = models.CharField(max_length=255, choices=[('Draft', 'Draft'), ('Scheduled', 'Scheduled'), ('Sent', 'Sent'), ('LimitError', 'Limit Error'), ('Cancelled', 'Cancelled')])
    has_attachment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    scheduled_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_sent = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, blank=True, null=True)
    is_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ListEmail'
        verbose_name = 'List Email'
        verbose_name_plural = 'List Emails'
        # keyPrefix = '0XB'



class ListEmailChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='listemailchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemailchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemailchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    html_body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    text_body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    from_name = models.CharField(max_length=121, sf_read_only=models.READ_ONLY, blank=True, null=True)
    from_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('Scheduled', 'Scheduled'), ('Sent', 'Sent'), ('LimitError', 'Limit Error'), ('Cancelled', 'Cancelled')], blank=True, null=True)
    has_attachment = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    scheduled_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_sent = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_tracked = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ListEmailChangeEvent'
        verbose_name = 'List Email Change Event'
        verbose_name_plural = 'List Email Change Event'
        # keyPrefix = 'None'



class ListEmailIndividualRecipient(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemailindividualrecipient_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemailindividualrecipient_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    list_email = models.ForeignKey(ListEmail, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    recipient = models.ForeignKey(CampaignMember, models.DO_NOTHING)  # Reference to tables [CampaignMember, Contact, Lead] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'ListEmailIndividualRecipient'
        verbose_name = 'List Email Individual Recipient'
        verbose_name_plural = 'List Email Individual Recipients'
        # keyPrefix = '0XF'



class ListEmailRecipientSource(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemailrecipientsource_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listemailrecipientsource_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    list_email = models.ForeignKey(ListEmail, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    source_list = models.ForeignKey(Campaign, models.DO_NOTHING)  # Reference to tables [Campaign, ListView] Master Detail Relationship *
    source_type = models.CharField(max_length=255, verbose_name='Type', choices=[('IncludeList', 'Include')])
    class Meta(models.Model.Meta):
        db_table = 'ListEmailRecipientSource'
        verbose_name = 'List Email Recipient Source'
        verbose_name_plural = 'List Email Recipient Sources'
        # keyPrefix = '0XD'



class ListEmailShare(models.Model):
    parent = models.ForeignKey(ListEmail, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ListEmailShare'
        verbose_name = 'List Email Share'
        verbose_name_plural = 'List Email Share'
        # keyPrefix = 'None'



class ListView(models.Model):
    name = models.CharField(max_length=40, verbose_name='View Name', sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='View Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionLinkGroupTemplate', None), ('ActionLinkTemplate', None), ('ActionOverrideMetrics', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AddressableEventInterface', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexPageInfo', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTestRunResultMetrics', None), ('ApexTrigger', None), ('AppAnalyticsQueryRequest', None), ('AppDefinition', None), ('AppIpRange', None), ('AppMenuItem', None), ('AppNotifTypeUserSetting', None), ('Approval', None), ('AppTabMember', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiBatchOptions', None), ('AsyncApiChunkResults', None), ('AsyncApiJobOptions', None), ('AsyncApiTransformationSpec', None), ('Attachment', None), ('Auditable', None), ('AuraDefinitionBundle', None), ('AuraDefinitionBundleInfo', None), ('AuraDefinitionInfo', None), ('AuthProvider', None), ('AuthSession', None), ('AutoActivityCaptureMetrics', None), ('BackgroundOperation', None), ('BaseEventInterface', None), ('BaseEventPackageInterface', None), ('BaseSessionInterface', None), ('BatchApexErrorEvent', None), ('BigObjectsRecordMetrics', None), ('BotSessionsMetrics', None), ('BrandTemplate', None), ('BusinessHours', None), ('C2CPermissionBinding', None), ('Calendar', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('ChatterActivityDailyMetrics', None), ('ChatterGroupConMetrics', None), ('ChatterMetrics', None), ('ChatterOrgWideMetrics', None), ('ChatterUniqueContributorDailyMetrics', None), ('ChatterUserNetworkMetrics', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('ColorDefinition', None), ('Community', None), ('CompactLayoutInfo', None), ('CompactLayoutItemInfo', None), ('ConnectedApplication', None), ('ConnectedApplication2', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContactRequest', None), ('ContentAsset', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentHubItem', None), ('ContentLogMetricsByFileType', None), ('ContentLogMetricsByOrg', None), ('ContentMetrics', None), ('ContentNote', None), ('ContentOrgMetrics', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CooperSettingsMetrics', None), ('CronTrigger', None), ('CspTrustedSite', None), ('CustomAppMetrics', None), ('CustomConsoleComponent', None), ('CustomEntityDefinition', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomObjectUsageMetrics', None), ('CustomObjectUserLicenseMetrics', None), ('CustomObjTeamMemberMetric', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('Dashboard', None), ('DashboardComponent', None), ('DataAssessmentBIMetrics', None), ('DatacloudAddress', None), ('DatacloudIndustry', None), ('DatacloudIndustryChapter', None), ('DatacloudIndustryCode', None), ('DatacloudIndustryContent', None), ('DatacloudIndustrySubChapter', None), ('DataDotComListPoolMetrics', None), ('DataExportEventInterface', None), ('DataIntegrationRecordPurchasePermission', None), ('DataStatistics', None), ('DataType', None), ('DebugLevel', None), ('DeclarativePlatformMetrics', None), ('DialerMinutesMetrics', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EaasEvent', None), ('EmailBrand', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EmbeddedServiceDetail', None), ('EmbeddedServiceLabel', None), ('EngagementEvent', None), ('EnhancedEmailTemplate', None), ('EnhancedLetterhead', None), ('EntityDefinition', None), ('EntityEventInterface', None), ('EntityHistory', None), ('EntityLimit', None), ('EntityParticle', None), ('EntitySubscription', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Event', None), ('EventAssociationItem', None), ('EventBusSubscriber', None), ('EventLogFile', None), ('EventLogFileMetrics', None), ('EventType', None), ('EventTypeDefinition', None), ('EventTypeFieldDefinition', None), ('EventTypeParameter', None), ('ExternalCredential', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalServiceDataType', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('ExtIdentityLoginMetrics', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FieldDefinition', None), ('FlexiPage', None), ('FlexipageComponentMetrics', None), ('FlexipagePageTypeMetrics', None), ('FlexQueueItem', None), ('FlowApexClassDescriptor', None), ('FlowApexClassPropertyDesc', None), ('FlowDefinition', None), ('FlowDefinitionView', None), ('FlowInterview', None), ('FlowLightningComponent', None), ('FlowLightningComponentParam', None), ('FlowVariableView', None), ('FlowVersionView', None), ('Folder', None), ('ForecastingItemPivot', None), ('ForecastingTypeMetrics', None), ('FormulaFunction', None), ('FormulaFunctionCategory', None), ('FormulaOperator', None), ('FormulaParticle', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('FTestMetadataCatalogEntity', None), ('FTestSystemCatalogEntity', None), ('GenericContentFolder', None), ('GenericContentFolderItem', None), ('GenericContentFolderMember', None), ('GlobalVariable', None), ('GlobalVariableType', None), ('Group', None), ('HammerResultStatus', None), ('Holiday', None), ('IconDefinition', None), ('IdeaMetrics', None), ('IframeWhiteListUrl', None), ('Image', None), ('InboundSocialPost', None), ('Incident__c', None), ('Individual', None), ('InteractionDefinitionVersion', None), ('InteractionLanguageMetrics', None), ('InteractionLayoutDetail', None), ('InteractionLCMetrics', None), ('InteractionTranslMetrics', None), ('InteractionUsageMetrics', None), ('InvocableAction', None), ('InvocableActionParameter', None), ('InvocableActionPicklist', None), ('IpWhitelist', None), ('LayoutParticle', None), ('LbpmMetrics', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('LightningComponentBundle', None), ('LightningComponentMetrics', None), ('LightningSchedulerUsageMetrics', None), ('LightningServiceMetrics', None), ('ListColumn', None), ('ListEmail', None), ('ListEmailSentResult', None), ('ListPoolUsage', None), ('ListView', None), ('ListViewChartInstance', None), ('LocalizedValue', None), ('LocalNamespace', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MenuItem', None), ('MessagingAggregatedMetrics', None), ('MessagingMetrics', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetricsDataFile', None), ('MetricsInMQMetrics', None), ('MobileConfig', None), ('MobileDevice', None), ('MobilePushServiceDevice', None), ('MultiCurrency', None), ('Nameable', None), ('NamedCredential', None), ('NetworkCustomerDailyLoginMetrics', None), ('NetworkCustomerLoginMetrics', None), ('NetworkLEADailyLoginMetrics', None), ('NetworkLEAPlusDailyLoginMetrics', None), ('NetworkPartnerDailyLoginMetrics', None), ('NetworkPartnerLoginMetrics', None), ('NetworkPCustDailyLoginMetrics', None), ('NetworkPowerCustomerLoginMetrics', None), ('NextBestActionUsageMetrics', None), ('Note', None), ('NotifTypeUserSetting', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Filter_Group__mdt', None), ('npsp__Filter_Rule__mdt', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Rollup__mdt', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('OauthConsumer', None), ('OauthCustomScope', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('OpportunityMetrics', None), ('OpportunitySplitMetrics', None), ('OpptyAndPricingMetrics', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('OrganizationValueInfo', None), ('OrgObjectsMetrics', None), ('OrgStandardObjectsMetrics', None), ('OwnerChangeOptionInfo', None), ('Package2Member', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('PathAssistant', None), ('PendingChange', None), ('PendingChangeContainer', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PermissionSetLicenseMetrics', None), ('PermissionSetMetricsByOrg', None), ('PermissionSetProfileMetrics', None), ('PersonAccountMetrics', None), ('PicklistValueInfo', None), ('PlatformAction', None), ('PlatformCachePartition', None), ('PlatformCachePartitionType', None), ('PlatformEventConduitMetrics', None), ('PlatformOrgObjectMetrics', None), ('PlatformStatusAlertEvent', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessMetrics', None), ('ProcessPluginParameter', None), ('ProcessTimeQueue', None), ('ProcessTypeDefinition', None), ('Product2', None), ('Profile', None), ('ProfileIpRestrictionMetrics', None), ('Publisher', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('QuickActionMetrics', None), ('QuickText', None), ('Quote', None), ('QuoteDocument', None), ('QuoteLineItem', None), ('RateLimitingNotification', None), ('Recommendation', None), ('RecordUserAccessInterface', None), ('RelatedEntity', None), ('RelationshipDomain', None), ('RelationshipInfo', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('SamlSsoConfig', None), ('SandboxDimensionMetrics', None), ('SandboxOrgDimensionMetrics', None), ('SchemaBuilderLayout', None), ('SchemaBuilderLayoutItem', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('SecureAgent', None), ('SecureAgentPlugin', None), ('SecureAgentPluginProperty', None), ('SecureAgentsCluster', None), ('SecurityHealthCheck', None), ('SecurityHealthCheckRisks', None), ('Service', None), ('ServiceDataType', None), ('ServiceFieldDataType', None), ('ServiceVersion', None), ('SessionPermSetActivation', None), ('SettingsTemplate', None), ('SetupNode', None), ('ShareInterface', None), ('SharingMetrics', None), ('SharingPortalMetrics', None), ('SharingRowCauseMetrics', None), ('SharingUserMetrics', None), ('SiteDetail', None), ('SiteIframeWhiteListUrl', None), ('SocialPersona', None), ('SocialPost', None), ('SoftDeletable', None), ('SoftphoneLayout', None), ('Solution', None), ('SPSamlAttributes', None), ('StandardValueSet', None), ('StaticResource', None), ('StreamingChannel', None), ('SupportOrgWideMetrics', None), ('Survey__c', None), ('SurveyResponseUsageMetrics', None), ('TabDefinition', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantSecret', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('TransactionSecurityEventInterface', None), ('TwoFactorMetrics', None), ('TwoFactorTempCode', None), ('User', None), ('UserAppMenuItem', None), ('UserDimMetrics', None), ('UserEntityAccess', None), ('UserFieldAccess', None), ('UserLicense', None), ('UserLicenseMetrics', None), ('UserListPreference', None), ('UserRole', None), ('UtilityBarMetrics', None), ('ValidationRuleInfo', None), ('VerificationHistory', None), ('VerificationMessageCreditMetrics', None), ('VisualforceMetrics', None), ('Vote', None), ('WebServiceDefinition', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkThanks', None), ('WsdlDataType', None), ('XCleanMatchRateMetrics', None), ('XmlSchema', None)], blank=True, null=True)
    is_soql_compatible = models.BooleanField(verbose_name='Is SOQL Compatible', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ListView'
        verbose_name = 'List View'
        verbose_name_plural = 'List Views'
        # keyPrefix = '00B'



class ListViewChart(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionLinkGroupTemplate', None), ('ActionLinkTemplate', None), ('ActionOverrideMetrics', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AddressableEventInterface', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexPageInfo', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTestRunResultMetrics', None), ('ApexTrigger', None), ('AppAnalyticsQueryRequest', None), ('AppDefinition', None), ('AppIpRange', None), ('AppMenuItem', None), ('AppNotifTypeUserSetting', None), ('Approval', None), ('AppTabMember', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiBatchOptions', None), ('AsyncApiChunkResults', None), ('AsyncApiJobOptions', None), ('AsyncApiTransformationSpec', None), ('Attachment', None), ('Auditable', None), ('AuraDefinitionBundle', None), ('AuraDefinitionBundleInfo', None), ('AuraDefinitionInfo', None), ('AuthProvider', None), ('AuthSession', None), ('AutoActivityCaptureMetrics', None), ('BackgroundOperation', None), ('BaseEventInterface', None), ('BaseEventPackageInterface', None), ('BaseSessionInterface', None), ('BatchApexErrorEvent', None), ('BigObjectsRecordMetrics', None), ('BotSessionsMetrics', None), ('BrandTemplate', None), ('BusinessHours', None), ('C2CPermissionBinding', None), ('Calendar', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('ChatterActivityDailyMetrics', None), ('ChatterGroupConMetrics', None), ('ChatterMetrics', None), ('ChatterOrgWideMetrics', None), ('ChatterUniqueContributorDailyMetrics', None), ('ChatterUserNetworkMetrics', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('ColorDefinition', None), ('Community', None), ('CompactLayoutInfo', None), ('CompactLayoutItemInfo', None), ('ConnectedApplication', None), ('ConnectedApplication2', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContactRequest', None), ('ContentAsset', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentHubItem', None), ('ContentLogMetricsByFileType', None), ('ContentLogMetricsByOrg', None), ('ContentMetrics', None), ('ContentNote', None), ('ContentOrgMetrics', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CooperSettingsMetrics', None), ('CronTrigger', None), ('CspTrustedSite', None), ('CustomAppMetrics', None), ('CustomConsoleComponent', None), ('CustomEntityDefinition', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomObjectUsageMetrics', None), ('CustomObjectUserLicenseMetrics', None), ('CustomObjTeamMemberMetric', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('Dashboard', None), ('DashboardComponent', None), ('DataAssessmentBIMetrics', None), ('DatacloudAddress', None), ('DatacloudIndustry', None), ('DatacloudIndustryChapter', None), ('DatacloudIndustryCode', None), ('DatacloudIndustryContent', None), ('DatacloudIndustrySubChapter', None), ('DataDotComListPoolMetrics', None), ('DataExportEventInterface', None), ('DataIntegrationRecordPurchasePermission', None), ('DataStatistics', None), ('DataType', None), ('DebugLevel', None), ('DeclarativePlatformMetrics', None), ('DialerMinutesMetrics', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EaasEvent', None), ('EmailBrand', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EmbeddedServiceDetail', None), ('EmbeddedServiceLabel', None), ('EngagementEvent', None), ('EnhancedEmailTemplate', None), ('EnhancedLetterhead', None), ('EntityDefinition', None), ('EntityEventInterface', None), ('EntityHistory', None), ('EntityLimit', None), ('EntityParticle', None), ('EntitySubscription', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Event', None), ('EventAssociationItem', None), ('EventBusSubscriber', None), ('EventLogFile', None), ('EventLogFileMetrics', None), ('EventType', None), ('EventTypeDefinition', None), ('EventTypeFieldDefinition', None), ('EventTypeParameter', None), ('ExternalCredential', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalServiceDataType', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('ExtIdentityLoginMetrics', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FieldDefinition', None), ('FlexiPage', None), ('FlexipageComponentMetrics', None), ('FlexipagePageTypeMetrics', None), ('FlexQueueItem', None), ('FlowApexClassDescriptor', None), ('FlowApexClassPropertyDesc', None), ('FlowDefinition', None), ('FlowDefinitionView', None), ('FlowInterview', None), ('FlowLightningComponent', None), ('FlowLightningComponentParam', None), ('FlowVariableView', None), ('FlowVersionView', None), ('Folder', None), ('ForecastingItemPivot', None), ('ForecastingTypeMetrics', None), ('FormulaFunction', None), ('FormulaFunctionCategory', None), ('FormulaOperator', None), ('FormulaParticle', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('FTestMetadataCatalogEntity', None), ('FTestSystemCatalogEntity', None), ('GenericContentFolder', None), ('GenericContentFolderItem', None), ('GenericContentFolderMember', None), ('GlobalVariable', None), ('GlobalVariableType', None), ('Group', None), ('HammerResultStatus', None), ('Holiday', None), ('IconDefinition', None), ('IdeaMetrics', None), ('IframeWhiteListUrl', None), ('Image', None), ('InboundSocialPost', None), ('Incident__c', None), ('Individual', None), ('InteractionDefinitionVersion', None), ('InteractionLanguageMetrics', None), ('InteractionLayoutDetail', None), ('InteractionLCMetrics', None), ('InteractionTranslMetrics', None), ('InteractionUsageMetrics', None), ('InvocableAction', None), ('InvocableActionParameter', None), ('InvocableActionPicklist', None), ('IpWhitelist', None), ('LayoutParticle', None), ('LbpmMetrics', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('LightningComponentBundle', None), ('LightningComponentMetrics', None), ('LightningSchedulerUsageMetrics', None), ('LightningServiceMetrics', None), ('ListColumn', None), ('ListEmail', None), ('ListEmailSentResult', None), ('ListPoolUsage', None), ('ListView', None), ('ListViewChartInstance', None), ('LocalizedValue', None), ('LocalNamespace', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MenuItem', None), ('MessagingAggregatedMetrics', None), ('MessagingMetrics', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetricsDataFile', None), ('MetricsInMQMetrics', None), ('MobileConfig', None), ('MobileDevice', None), ('MobilePushServiceDevice', None), ('MultiCurrency', None), ('Nameable', None), ('NamedCredential', None), ('NetworkCustomerDailyLoginMetrics', None), ('NetworkCustomerLoginMetrics', None), ('NetworkLEADailyLoginMetrics', None), ('NetworkLEAPlusDailyLoginMetrics', None), ('NetworkPartnerDailyLoginMetrics', None), ('NetworkPartnerLoginMetrics', None), ('NetworkPCustDailyLoginMetrics', None), ('NetworkPowerCustomerLoginMetrics', None), ('NextBestActionUsageMetrics', None), ('Note', None), ('NotifTypeUserSetting', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Filter_Group__mdt', None), ('npsp__Filter_Rule__mdt', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Rollup__mdt', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('OauthConsumer', None), ('OauthCustomScope', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('OpportunityMetrics', None), ('OpportunitySplitMetrics', None), ('OpptyAndPricingMetrics', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('OrganizationValueInfo', None), ('OrgObjectsMetrics', None), ('OrgStandardObjectsMetrics', None), ('OwnerChangeOptionInfo', None), ('Package2Member', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('PathAssistant', None), ('PendingChange', None), ('PendingChangeContainer', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PermissionSetLicenseMetrics', None), ('PermissionSetMetricsByOrg', None), ('PermissionSetProfileMetrics', None), ('PersonAccountMetrics', None), ('PicklistValueInfo', None), ('PlatformAction', None), ('PlatformCachePartition', None), ('PlatformCachePartitionType', None), ('PlatformEventConduitMetrics', None), ('PlatformOrgObjectMetrics', None), ('PlatformStatusAlertEvent', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessMetrics', None), ('ProcessPluginParameter', None), ('ProcessTimeQueue', None), ('ProcessTypeDefinition', None), ('Product2', None), ('Profile', None), ('ProfileIpRestrictionMetrics', None), ('Publisher', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('QuickActionMetrics', None), ('QuickText', None), ('Quote', None), ('QuoteDocument', None), ('QuoteLineItem', None), ('RateLimitingNotification', None), ('Recommendation', None), ('RecordUserAccessInterface', None), ('RelatedEntity', None), ('RelationshipDomain', None), ('RelationshipInfo', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('SamlSsoConfig', None), ('SandboxDimensionMetrics', None), ('SandboxOrgDimensionMetrics', None), ('SchemaBuilderLayout', None), ('SchemaBuilderLayoutItem', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('SecureAgent', None), ('SecureAgentPlugin', None), ('SecureAgentPluginProperty', None), ('SecureAgentsCluster', None), ('SecurityHealthCheck', None), ('SecurityHealthCheckRisks', None), ('Service', None), ('ServiceDataType', None), ('ServiceFieldDataType', None), ('ServiceVersion', None), ('SessionPermSetActivation', None), ('SettingsTemplate', None), ('SetupNode', None), ('ShareInterface', None), ('SharingMetrics', None), ('SharingPortalMetrics', None), ('SharingRowCauseMetrics', None), ('SharingUserMetrics', None), ('SiteDetail', None), ('SiteIframeWhiteListUrl', None), ('SocialPersona', None), ('SocialPost', None), ('SoftDeletable', None), ('SoftphoneLayout', None), ('Solution', None), ('SPSamlAttributes', None), ('StandardValueSet', None), ('StaticResource', None), ('StreamingChannel', None), ('SupportOrgWideMetrics', None), ('Survey__c', None), ('SurveyResponseUsageMetrics', None), ('TabDefinition', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantSecret', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('TransactionSecurityEventInterface', None), ('TwoFactorMetrics', None), ('TwoFactorTempCode', None), ('User', None), ('UserAppMenuItem', None), ('UserDimMetrics', None), ('UserEntityAccess', None), ('UserFieldAccess', None), ('UserLicense', None), ('UserLicenseMetrics', None), ('UserListPreference', None), ('UserRole', None), ('UtilityBarMetrics', None), ('ValidationRuleInfo', None), ('VerificationHistory', None), ('VerificationMessageCreditMetrics', None), ('VisualforceMetrics', None), ('Vote', None), ('WebServiceDefinition', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkThanks', None), ('WsdlDataType', None), ('XCleanMatchRateMetrics', None), ('XmlSchema', None)])
    developer_name = models.CharField(max_length=80, verbose_name='API Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='listviewchart_owner_set')  # Master Detail Relationship *
    chart_type = models.CharField(max_length=255, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    grouping_field = models.CharField(max_length=255, verbose_name='Custom Field Definition ID', choices=[('Account.BillingAddress', None), ('Account.BillingCity', None), ('Account.BillingCountry', None), ('Account.BillingCountryCode', None), ('Account.BillingGeocodeAccuracy', None), ('Account.BillingLatitude', None), ('Account.BillingLongitude', None), ('Account.BillingPostalCode', None), ('Account.BillingState', None), ('Account.BillingStateCode', None), ('Account.BillingStreet', None), ('Account.CreatedById', None), ('Account.CreatedDate', None), ('Account.Description', None), ('Account.Id', None), ('Account.Industry', None), ('Account.IsDeleted', None), ('Account.JigsawCompanyId', None), ('Account.LastActivityDate', None), ('Account.LastModifiedById', None), ('Account.LastModifiedDate', None), ('Account.LastReferencedDate', None), ('Account.LastViewedDate', None), ('Account.MasterRecordId', None), ('Account.Name', None), ('Account.NumberOfEmployees', None), ('Account.OwnerId', None), ('Account.ParentId', None), ('Account.Phone', None), ('Account.PhotoUrl', None), ('Account.RecordTypeId', None), ('Account.ShippingAddress', None), ('Account.ShippingCity', None), ('Account.ShippingCountry', None), ('Account.ShippingCountryCode', None), ('Account.ShippingGeocodeAccuracy', None), ('Account.ShippingLatitude', None), ('Account.ShippingLongitude', None), ('Account.ShippingPostalCode', None), ('Account.ShippingState', None), ('Account.ShippingStateCode', None), ('Account.ShippingStreet', None), ('Account.SystemModstamp', None), ('Account.Type', None), ('Account.Website', None), ('Asset.AccountId', None), ('Asset.ContactId', None), ('Asset.CreatedById', None), ('Asset.CreatedDate', None), ('Asset.Description', None), ('Asset.Id', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsDeleted', None), ('Asset.LastModifiedById', None), ('Asset.LastModifiedDate', None), ('Asset.LastReferencedDate', None), ('Asset.LastViewedDate', None), ('Asset.Name', None), ('Asset.ParentId', None), ('Asset.Price', None), ('Asset.Product2Id', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.RootAssetId', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.StockKeepingUnit', None), ('Asset.SystemModstamp', None), ('Asset.UsageEndDate', None), ('AssetRelationship.AssetId', None), ('AssetRelationship.AssetRelationshipNumber', None), ('AssetRelationship.CreatedById', None), ('AssetRelationship.CreatedDate', None), ('AssetRelationship.FromDate', None), ('AssetRelationship.Id', None), ('AssetRelationship.IsDeleted', None), ('AssetRelationship.LastModifiedById', None), ('AssetRelationship.LastModifiedDate', None), ('AssetRelationship.LastReferencedDate', None), ('AssetRelationship.LastViewedDate', None), ('AssetRelationship.RelatedAssetId', None), ('AssetRelationship.RelationshipType', None), ('AssetRelationship.SystemModstamp', None), ('AssetRelationship.ToDate', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.CampaignMemberRecordTypeId', None), ('Campaign.CreatedById', None), ('Campaign.CreatedDate', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.Id', None), ('Campaign.IsActive', None), ('Campaign.IsDeleted', None), ('Campaign.LastActivityDate', None), ('Campaign.LastModifiedById', None), ('Campaign.LastModifiedDate', None), ('Campaign.LastReferencedDate', None), ('Campaign.LastViewedDate', None), ('Campaign.Name', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.OwnerId', None), ('Campaign.ParentId', None), ('Campaign.RecordTypeId', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.SystemModstamp', None), ('Campaign.Type', None), ('Case.AccountId', None), ('Case.CaseNumber', None), ('Case.ClosedDate', None), ('Case.Comments', None), ('Case.ContactEmail', None), ('Case.ContactFax', None), ('Case.ContactId', None), ('Case.ContactMobile', None), ('Case.ContactPhone', None), ('Case.CreatedById', None), ('Case.CreatedDate', None), ('Case.Description', None), ('Case.Id', None), ('Case.IsClosed', None), ('Case.IsDeleted', None), ('Case.LastModifiedById', None), ('Case.LastModifiedDate', None), ('Case.LastReferencedDate', None), ('Case.LastViewedDate', None), ('Case.Origin', None), ('Case.OwnerId', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.SourceId', None), ('Case.Status', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.SystemModstamp', None), ('Case.Type', None), ('Class_Attendance__c.CreatedById', None), ('Class_Attendance__c.CreatedDate', None), ('Class_Attendance__c.Id', None), ('Class_Attendance__c.IsDeleted', None), ('Class_Attendance__c.LastModifiedById', None), ('Class_Attendance__c.LastModifiedDate', None), ('Class_Attendance__c.Name', None), ('Class_Attendance__c.SystemModstamp', None), ('Class_Enrollment__c.CreatedById', None), ('Class_Enrollment__c.CreatedDate', None), ('Class_Enrollment__c.Id', None), ('Class_Enrollment__c.IsDeleted', None), ('Class_Enrollment__c.LastActivityDate', None), ('Class_Enrollment__c.LastModifiedById', None), ('Class_Enrollment__c.LastModifiedDate', None), ('Class_Enrollment__c.LastReferencedDate', None), ('Class_Enrollment__c.LastViewedDate', None), ('Class_Enrollment__c.Name', None), ('Class_Enrollment__c.SystemModstamp', None), ('Class_Meeting__c.CreatedById', None), ('Class_Meeting__c.CreatedDate', None), ('Class_Meeting__c.Id', None), ('Class_Meeting__c.IsDeleted', None), ('Class_Meeting__c.LastModifiedById', None), ('Class_Meeting__c.LastModifiedDate', None), ('Class_Meeting__c.Name', None), ('Class_Meeting__c.SystemModstamp', None), ('Class_Offering__c.CreatedById', None), ('Class_Offering__c.CreatedDate', None), ('Class_Offering__c.Id', None), ('Class_Offering__c.IsDeleted', None), ('Class_Offering__c.LastModifiedById', None), ('Class_Offering__c.LastModifiedDate', None), ('Class_Offering__c.LastReferencedDate', None), ('Class_Offering__c.LastViewedDate', None), ('Class_Offering__c.Name', None), ('Class_Offering__c.OwnerId', None), ('Class_Offering__c.SystemModstamp', None), ('CollaborationGroup.AnnouncementId', None), ('CollaborationGroup.BannerPhotoUrl', None), ('CollaborationGroup.CanHaveGuests', None), ('CollaborationGroup.CollaborationType', None), ('CollaborationGroup.CreatedById', None), ('CollaborationGroup.CreatedDate', None), ('CollaborationGroup.Description', None), ('CollaborationGroup.FullPhotoUrl', None), ('CollaborationGroup.GroupEmail', None), ('CollaborationGroup.HasPrivateFieldsAccess', None), ('CollaborationGroup.Id', None), ('CollaborationGroup.InformationBody', None), ('CollaborationGroup.InformationTitle', None), ('CollaborationGroup.IsArchived', None), ('CollaborationGroup.IsAutoArchiveDisabled', None), ('CollaborationGroup.IsBroadcast', None), ('CollaborationGroup.LastFeedModifiedDate', None), ('CollaborationGroup.LastModifiedById', None), ('CollaborationGroup.LastModifiedDate', None), ('CollaborationGroup.LastReferencedDate', None), ('CollaborationGroup.LastViewedDate', None), ('CollaborationGroup.MediumPhotoUrl', None), ('CollaborationGroup.MemberCount', None), ('CollaborationGroup.Name', None), ('CollaborationGroup.OwnerId', None), ('CollaborationGroup.SmallPhotoUrl', None), ('CollaborationGroup.SystemModstamp', None), ('Contact.AccountId', None), ('Contact.Birthdate', None), ('Contact.CreatedById', None), ('Contact.CreatedDate', None), ('Contact.Department', None), ('Contact.Email', None), ('Contact.EmailBouncedDate', None), ('Contact.EmailBouncedReason', None), ('Contact.Fax', None), ('Contact.FirstName', None), ('Contact.HomePhone', None), ('Contact.Id', None), ('Contact.IndividualId', None), ('Contact.IsDeleted', None), ('Contact.IsEmailBounced', None), ('Contact.JigsawContactId', None), ('Contact.LastActivityDate', None), ('Contact.LastCURequestDate', None), ('Contact.LastCUUpdateDate', None), ('Contact.LastModifiedById', None), ('Contact.LastModifiedDate', None), ('Contact.LastName', None), ('Contact.LastReferencedDate', None), ('Contact.LastViewedDate', None), ('Contact.MailingAddress', None), ('Contact.MailingCity', None), ('Contact.MailingCountry', None), ('Contact.MailingCountryCode', None), ('Contact.MailingGeocodeAccuracy', None), ('Contact.MailingLatitude', None), ('Contact.MailingLongitude', None), ('Contact.MailingPostalCode', None), ('Contact.MailingState', None), ('Contact.MailingStateCode', None), ('Contact.MailingStreet', None), ('Contact.MasterRecordId', None), ('Contact.MiddleName', None), ('Contact.MobilePhone', None), ('Contact.Name', None), ('Contact.OtherAddress', None), ('Contact.OtherCity', None), ('Contact.OtherCountry', None), ('Contact.OtherCountryCode', None), ('Contact.OtherGeocodeAccuracy', None), ('Contact.OtherLatitude', None), ('Contact.OtherLongitude', None), ('Contact.OtherPhone', None), ('Contact.OtherPostalCode', None), ('Contact.OtherState', None), ('Contact.OtherStateCode', None), ('Contact.OtherStreet', None), ('Contact.OwnerId', None), ('Contact.Phone', None), ('Contact.PhotoUrl', None), ('Contact.RecordTypeId', None), ('Contact.ReportsToId', None), ('Contact.Salutation', None), ('Contact.Suffix', None), ('Contact.SystemModstamp', None), ('Contact.Title', None), ('ContactPointTypeConsent.CaptureContactPointType', None), ('ContactPointTypeConsent.CaptureDate', None), ('ContactPointTypeConsent.CaptureSource', None), ('ContactPointTypeConsent.ContactPointType', None), ('ContactPointTypeConsent.CreatedById', None), ('ContactPointTypeConsent.CreatedDate', None), ('ContactPointTypeConsent.DataUsePurposeId', None), ('ContactPointTypeConsent.DoubleConsentCaptureDate', None), ('ContactPointTypeConsent.EffectiveFrom', None), ('ContactPointTypeConsent.EffectiveTo', None), ('ContactPointTypeConsent.Id', None), ('ContactPointTypeConsent.IsDeleted', None), ('ContactPointTypeConsent.LastModifiedById', None), ('ContactPointTypeConsent.LastModifiedDate', None), ('ContactPointTypeConsent.LastReferencedDate', None), ('ContactPointTypeConsent.LastViewedDate', None), ('ContactPointTypeConsent.Name', None), ('ContactPointTypeConsent.PartyId', None), ('ContactPointTypeConsent.PrivacyConsentStatus', None), ('ContactPointTypeConsent.SystemModstamp', None), ('ContactRequest.CreatedById', None), ('ContactRequest.CreatedDate', None), ('ContactRequest.Id', None), ('ContactRequest.IsDeleted', None), ('ContactRequest.LastModifiedById', None), ('ContactRequest.LastModifiedDate', None), ('ContactRequest.LastReferencedDate', None), ('ContactRequest.LastViewedDate', None), ('ContactRequest.Name', None), ('ContactRequest.OwnerId', None), ('ContactRequest.PreferredChannel', None), ('ContactRequest.PreferredPhone', None), ('ContactRequest.RequestDescription', None), ('ContactRequest.RequestReason', None), ('ContactRequest.Status', None), ('ContactRequest.SystemModstamp', None), ('ContactRequest.WhatId', None), ('ContactRequest.WhoId', None), ('ContentVersion.Checksum', None), ('ContentVersion.ContentBodyId', None), ('ContentVersion.ContentDocumentId', None), ('ContentVersion.ContentLocation', None), ('ContentVersion.ContentModifiedById', None), ('ContentVersion.ContentModifiedDate', None), ('ContentVersion.ContentSize', None), ('ContentVersion.ContentUrl', None), ('ContentVersion.CreatedById', None), ('ContentVersion.CreatedDate', None), ('ContentVersion.Description', None), ('ContentVersion.ExternalDataSourceId', None), ('ContentVersion.ExternalDocumentInfo1', None), ('ContentVersion.ExternalDocumentInfo2', None), ('ContentVersion.FeaturedContentBoost', None), ('ContentVersion.FeaturedContentDate', None), ('ContentVersion.FileExtension', None), ('ContentVersion.FileType', None), ('ContentVersion.FirstPublishLocationId', None), ('ContentVersion.Id', None), ('ContentVersion.IsAssetEnabled', None), ('ContentVersion.IsDeleted', None), ('ContentVersion.IsLatest', None), ('ContentVersion.IsMajorVersion', None), ('ContentVersion.LastModifiedById', None), ('ContentVersion.LastModifiedDate', None), ('ContentVersion.NegativeRatingCount', None), ('ContentVersion.Origin', None), ('ContentVersion.OwnerId', None), ('ContentVersion.PathOnClient', None), ('ContentVersion.PositiveRatingCount', None), ('ContentVersion.PublishStatus', None), ('ContentVersion.RatingCount', None), ('ContentVersion.ReasonForChange', None), ('ContentVersion.SharingOption', None), ('ContentVersion.SharingPrivacy', None), ('ContentVersion.SystemModstamp', None), ('ContentVersion.TagCsv', None), ('ContentVersion.TextPreview', None), ('ContentVersion.Title', None), ('ContentVersion.VersionData', None), ('ContentVersion.VersionNumber', None), ('Contract.AccountId', None), ('Contract.ActivatedById', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.BillingCity', None), ('Contract.BillingCountry', None), ('Contract.BillingCountryCode', None), ('Contract.BillingGeocodeAccuracy', None), ('Contract.BillingLatitude', None), ('Contract.BillingLongitude', None), ('Contract.BillingPostalCode', None), ('Contract.BillingState', None), ('Contract.BillingStateCode', None), ('Contract.BillingStreet', None), ('Contract.CompanySignedDate', None), ('Contract.CompanySignedId', None), ('Contract.ContractNumber', None), ('Contract.ContractTerm', None), ('Contract.CreatedById', None), ('Contract.CreatedDate', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedId', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Id', None), ('Contract.IsDeleted', None), ('Contract.LastActivityDate', None), ('Contract.LastApprovedDate', None), ('Contract.LastModifiedById', None), ('Contract.LastModifiedDate', None), ('Contract.LastReferencedDate', None), ('Contract.LastViewedDate', None), ('Contract.OwnerExpirationNotice', None), ('Contract.OwnerId', None), ('Contract.ShippingAddress', None), ('Contract.ShippingCity', None), ('Contract.ShippingCountry', None), ('Contract.ShippingCountryCode', None), ('Contract.ShippingGeocodeAccuracy', None), ('Contract.ShippingLatitude', None), ('Contract.ShippingLongitude', None), ('Contract.ShippingPostalCode', None), ('Contract.ShippingState', None), ('Contract.ShippingStateCode', None), ('Contract.ShippingStreet', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Contract.Status', None), ('Contract.StatusCode', None), ('Contract.SystemModstamp', None), ('DataUseLegalBasis.CreatedById', None), ('DataUseLegalBasis.CreatedDate', None), ('DataUseLegalBasis.Description', None), ('DataUseLegalBasis.Id', None), ('DataUseLegalBasis.IsDeleted', None), ('DataUseLegalBasis.LastModifiedById', None), ('DataUseLegalBasis.LastModifiedDate', None), ('DataUseLegalBasis.LastReferencedDate', None), ('DataUseLegalBasis.LastViewedDate', None), ('DataUseLegalBasis.Name', None), ('DataUseLegalBasis.OwnerId', None), ('DataUseLegalBasis.Source', None), ('DataUseLegalBasis.SystemModstamp', None), ('DataUsePurpose.CanDataSubjectOptOut', None), ('DataUsePurpose.CreatedById', None), ('DataUsePurpose.CreatedDate', None), ('DataUsePurpose.Description', None), ('DataUsePurpose.Id', None), ('DataUsePurpose.IsDeleted', None), ('DataUsePurpose.LastModifiedById', None), ('DataUsePurpose.LastModifiedDate', None), ('DataUsePurpose.LastReferencedDate', None), ('DataUsePurpose.LastViewedDate', None), ('DataUsePurpose.LegalBasisId', None), ('DataUsePurpose.Name', None), ('DataUsePurpose.OwnerId', None), ('DataUsePurpose.SystemModstamp', None), ('dlrs__LookupChild__c.CreatedById', None), ('dlrs__LookupChild__c.CreatedDate', None), ('dlrs__LookupChild__c.Id', None), ('dlrs__LookupChild__c.IsDeleted', None), ('dlrs__LookupChild__c.LastModifiedById', None), ('dlrs__LookupChild__c.LastModifiedDate', None), ('dlrs__LookupChild__c.Name', None), ('dlrs__LookupChild__c.OwnerId', None), ('dlrs__LookupChild__c.SystemModstamp', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Id', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.IsDeleted', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Name', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.OwnerId', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.SystemModstamp', None), ('dlrs__LookupParent__c.CreatedById', None), ('dlrs__LookupParent__c.CreatedDate', None), ('dlrs__LookupParent__c.Id', None), ('dlrs__LookupParent__c.IsDeleted', None), ('dlrs__LookupParent__c.LastModifiedById', None), ('dlrs__LookupParent__c.LastModifiedDate', None), ('dlrs__LookupParent__c.Name', None), ('dlrs__LookupParent__c.OwnerId', None), ('dlrs__LookupParent__c.SystemModstamp', None), ('dlrs__LookupRollupCalculateJob__c.CreatedById', None), ('dlrs__LookupRollupCalculateJob__c.CreatedDate', None), ('dlrs__LookupRollupCalculateJob__c.Id', None), ('dlrs__LookupRollupCalculateJob__c.IsDeleted', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedById', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastReferencedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastViewedDate', None), ('dlrs__LookupRollupCalculateJob__c.Name', None), ('dlrs__LookupRollupCalculateJob__c.OwnerId', None), ('dlrs__LookupRollupCalculateJob__c.SystemModstamp', None), ('dlrs__LookupRollupSummary__c.CreatedById', None), ('dlrs__LookupRollupSummary__c.CreatedDate', None), ('dlrs__LookupRollupSummary__c.Id', None), ('dlrs__LookupRollupSummary__c.IsDeleted', None), ('dlrs__LookupRollupSummary__c.LastModifiedById', None), ('dlrs__LookupRollupSummary__c.LastModifiedDate', None), ('dlrs__LookupRollupSummary__c.LastReferencedDate', None), ('dlrs__LookupRollupSummary__c.LastViewedDate', None), ('dlrs__LookupRollupSummary__c.Name', None), ('dlrs__LookupRollupSummary__c.OwnerId', None), ('dlrs__LookupRollupSummary__c.SystemModstamp', None), ('dlrs__LookupRollupSummary2__mdt.DeveloperName', None), ('dlrs__LookupRollupSummary2__mdt.Id', None), ('dlrs__LookupRollupSummary2__mdt.Label', None), ('dlrs__LookupRollupSummary2__mdt.Language', None), ('dlrs__LookupRollupSummary2__mdt.MasterLabel', None), ('dlrs__LookupRollupSummary2__mdt.NamespacePrefix', None), ('dlrs__LookupRollupSummary2__mdt.QualifiedApiName', None), ('dlrs__LookupRollupSummaryLog__c.CreatedById', None), ('dlrs__LookupRollupSummaryLog__c.CreatedDate', None), ('dlrs__LookupRollupSummaryLog__c.Id', None), ('dlrs__LookupRollupSummaryLog__c.IsDeleted', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryLog__c.Name', None), ('dlrs__LookupRollupSummaryLog__c.OwnerId', None), ('dlrs__LookupRollupSummaryLog__c.SystemModstamp', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Id', None), ('dlrs__LookupRollupSummaryScheduleItems__c.IsDeleted', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Name', None), ('dlrs__LookupRollupSummaryScheduleItems__c.SystemModstamp', None), ('DuplicateRecordItem.CreatedById', None), ('DuplicateRecordItem.CreatedDate', None), ('DuplicateRecordItem.DuplicateRecordSetId', None), ('DuplicateRecordItem.Id', None), ('DuplicateRecordItem.IsDeleted', None), ('DuplicateRecordItem.LastModifiedById', None), ('DuplicateRecordItem.LastModifiedDate', None), ('DuplicateRecordItem.Name', None), ('DuplicateRecordItem.RecordId', None), ('DuplicateRecordItem.SystemModstamp', None), ('DuplicateRecordSet.CreatedById', None), ('DuplicateRecordSet.CreatedDate', None), ('DuplicateRecordSet.DuplicateRuleId', None), ('DuplicateRecordSet.Id', None), ('DuplicateRecordSet.IsDeleted', None), ('DuplicateRecordSet.LastModifiedById', None), ('DuplicateRecordSet.LastModifiedDate', None), ('DuplicateRecordSet.LastReferencedDate', None), ('DuplicateRecordSet.LastViewedDate', None), ('DuplicateRecordSet.Name', None), ('DuplicateRecordSet.RecordCount', None), ('DuplicateRecordSet.SystemModstamp', None), ('EmailMessage.ActivityId', None), ('EmailMessage.BccAddress', None), ('EmailMessage.CcAddress', None), ('EmailMessage.CreatedById', None), ('EmailMessage.CreatedDate', None), ('EmailMessage.EmailTemplateId', None), ('EmailMessage.FirstOpenedDate', None), ('EmailMessage.FromAddress', None), ('EmailMessage.FromName', None), ('EmailMessage.HasAttachment', None), ('EmailMessage.Headers', None), ('EmailMessage.HtmlBody', None), ('EmailMessage.Id', None), ('EmailMessage.Incoming', None), ('EmailMessage.IsBounced', None), ('EmailMessage.IsClientManaged', None), ('EmailMessage.IsDeleted', None), ('EmailMessage.IsExternallyVisible', None), ('EmailMessage.IsOpened', None), ('EmailMessage.IsTracked', None), ('EmailMessage.LastModifiedById', None), ('EmailMessage.LastModifiedDate', None), ('EmailMessage.LastOpenedDate', None), ('EmailMessage.MessageDate', None), ('EmailMessage.MessageIdentifier', None), ('EmailMessage.ParentId', None), ('EmailMessage.RelatedToId', None), ('EmailMessage.ReplyToEmailMessageId', None), ('EmailMessage.Status', None), ('EmailMessage.Subject', None), ('EmailMessage.SystemModstamp', None), ('EmailMessage.TextBody', None), ('EmailMessage.ThreadIdentifier', None), ('EmailMessage.ToAddress', None), ('EmailMessage.ValidatedFromAddress', None), ('Equipment__c.CreatedById', None), ('Equipment__c.CreatedDate', None), ('Equipment__c.Id', None), ('Equipment__c.IsDeleted', None), ('Equipment__c.LastModifiedById', None), ('Equipment__c.LastModifiedDate', None), ('Equipment__c.LastReferencedDate', None), ('Equipment__c.LastViewedDate', None), ('Equipment__c.Name', None), ('Equipment__c.OwnerId', None), ('Equipment__c.SystemModstamp', None), ('Equipment_Assignment__c.CreatedById', None), ('Equipment_Assignment__c.CreatedDate', None), ('Equipment_Assignment__c.Id', None), ('Equipment_Assignment__c.IsDeleted', None), ('Equipment_Assignment__c.LastModifiedById', None), ('Equipment_Assignment__c.LastModifiedDate', None), ('Equipment_Assignment__c.LastReferencedDate', None), ('Equipment_Assignment__c.LastViewedDate', None), ('Equipment_Assignment__c.Name', None), ('Equipment_Assignment__c.SystemModstamp', None), ('FlowInterview.CreatedById', None), ('FlowInterview.CreatedDate', None), ('FlowInterview.CurrentElement', None), ('FlowInterview.Guid', None), ('FlowInterview.Id', None), ('FlowInterview.InterviewLabel', None), ('FlowInterview.IsDeleted', None), ('FlowInterview.LastModifiedById', None), ('FlowInterview.LastModifiedDate', None), ('FlowInterview.Name', None), ('FlowInterview.OwnerId', None), ('FlowInterview.PauseLabel', None), ('FlowInterview.SystemModstamp', None), ('Image.CapturedAngle', None), ('Image.ContentDocumentId', None), ('Image.CreatedById', None), ('Image.CreatedDate', None), ('Image.Id', None), ('Image.ImageAlternateText', None), ('Image.ImageClass', None), ('Image.ImageClassObjectType', None), ('Image.ImageTitle', None), ('Image.ImageUrl', None), ('Image.ImageViewType', None), ('Image.IsActive', None), ('Image.IsDeleted', None), ('Image.LastModifiedById', None), ('Image.LastModifiedDate', None), ('Image.LastReferencedDate', None), ('Image.LastViewedDate', None), ('Image.Name', None), ('Image.OwnerId', None), ('Image.SystemModstamp', None), ('Incident__c.CreatedById', None), ('Incident__c.CreatedDate', None), ('Incident__c.Id', None), ('Incident__c.IsDeleted', None), ('Incident__c.LastActivityDate', None), ('Incident__c.LastModifiedById', None), ('Incident__c.LastModifiedDate', None), ('Incident__c.Name', None), ('Incident__c.SystemModstamp', None), ('Individual.BirthDate', None), ('Individual.CanStorePiiElsewhere', None), ('Individual.ChildrenCount', None), ('Individual.ConvictionsCount', None), ('Individual.CreatedById', None), ('Individual.CreatedDate', None), ('Individual.DeathDate', None), ('Individual.FirstName', None), ('Individual.HasOptedOutGeoTracking', None), ('Individual.HasOptedOutProcessing', None), ('Individual.HasOptedOutProfiling', None), ('Individual.HasOptedOutSolicit', None), ('Individual.HasOptedOutTracking', None), ('Individual.Id', None), ('Individual.IndividualsAge', None), ('Individual.IsDeleted', None), ('Individual.IsHomeOwner', None), ('Individual.LastModifiedById', None), ('Individual.LastModifiedDate', None), ('Individual.LastName', None), ('Individual.LastViewedDate', None), ('Individual.MasterRecordId', None), ('Individual.MiddleName', None), ('Individual.MilitaryService', None), ('Individual.Name', None), ('Individual.Occupation', None), ('Individual.OwnerId', None), ('Individual.Salutation', None), ('Individual.SendIndividualData', None), ('Individual.ShouldForget', None), ('Individual.Suffix', None), ('Individual.SystemModstamp', None), ('Individual.Website', None), ('Lead.Address', None), ('Lead.City', None), ('Lead.Company', None), ('Lead.ConvertedAccountId', None), ('Lead.ConvertedContactId', None), ('Lead.ConvertedDate', None), ('Lead.ConvertedOpportunityId', None), ('Lead.Country', None), ('Lead.CountryCode', None), ('Lead.CreatedById', None), ('Lead.CreatedDate', None), ('Lead.Email', None), ('Lead.EmailBouncedDate', None), ('Lead.EmailBouncedReason', None), ('Lead.FirstName', None), ('Lead.GeocodeAccuracy', None), ('Lead.Id', None), ('Lead.IndividualId', None), ('Lead.Industry', None), ('Lead.IsConverted', None), ('Lead.IsDeleted', None), ('Lead.IsUnreadByOwner', None), ('Lead.JigsawContactId', None), ('Lead.LastActivityDate', None), ('Lead.LastModifiedById', None), ('Lead.LastModifiedDate', None), ('Lead.LastName', None), ('Lead.LastReferencedDate', None), ('Lead.LastViewedDate', None), ('Lead.Latitude', None), ('Lead.LeadSource', None), ('Lead.Longitude', None), ('Lead.MasterRecordId', None), ('Lead.MiddleName', None), ('Lead.Name', None), ('Lead.NumberOfEmployees', None), ('Lead.OwnerId', None), ('Lead.Phone', None), ('Lead.PhotoUrl', None), ('Lead.PostalCode', None), ('Lead.Salutation', None), ('Lead.State', None), ('Lead.StateCode', None), ('Lead.Status', None), ('Lead.Street', None), ('Lead.Suffix', None), ('Lead.SystemModstamp', None), ('Lead.Title', None), ('ListEmail.CampaignId', None), ('ListEmail.CreatedById', None), ('ListEmail.CreatedDate', None), ('ListEmail.FromAddress', None), ('ListEmail.FromName', None), ('ListEmail.HasAttachment', None), ('ListEmail.HtmlBody', None), ('ListEmail.Id', None), ('ListEmail.IsDeleted', None), ('ListEmail.IsTracked', None), ('ListEmail.LastModifiedById', None), ('ListEmail.LastModifiedDate', None), ('ListEmail.LastReferencedDate', None), ('ListEmail.LastViewedDate', None), ('ListEmail.Name', None), ('ListEmail.OwnerId', None), ('ListEmail.ScheduledDate', None), ('ListEmail.Status', None), ('ListEmail.Subject', None), ('ListEmail.SystemModstamp', None), ('ListEmail.TextBody', None), ('ListEmail.TotalSent', None), ('Macro.CreatedById', None), ('Macro.CreatedDate', None), ('Macro.Description', None), ('Macro.Id', None), ('Macro.IsAlohaSupported', None), ('Macro.IsDeleted', None), ('Macro.IsLightningSupported', None), ('Macro.LastModifiedById', None), ('Macro.LastModifiedDate', None), ('Macro.LastReferencedDate', None), ('Macro.LastViewedDate', None), ('Macro.Name', None), ('Macro.OwnerId', None), ('Macro.StartingContext', None), ('Macro.SystemModstamp', None), ('npe01__OppPayment__c.CreatedById', None), ('npe01__OppPayment__c.CreatedDate', None), ('npe01__OppPayment__c.Id', None), ('npe01__OppPayment__c.IsDeleted', None), ('npe01__OppPayment__c.LastModifiedById', None), ('npe01__OppPayment__c.LastModifiedDate', None), ('npe01__OppPayment__c.LastReferencedDate', None), ('npe01__OppPayment__c.LastViewedDate', None), ('npe01__OppPayment__c.Name', None), ('npe01__OppPayment__c.SystemModstamp', None), ('npe03__Recurring_Donation__c.CreatedById', None), ('npe03__Recurring_Donation__c.CreatedDate', None), ('npe03__Recurring_Donation__c.Id', None), ('npe03__Recurring_Donation__c.IsDeleted', None), ('npe03__Recurring_Donation__c.LastActivityDate', None), ('npe03__Recurring_Donation__c.LastModifiedById', None), ('npe03__Recurring_Donation__c.LastModifiedDate', None), ('npe03__Recurring_Donation__c.LastReferencedDate', None), ('npe03__Recurring_Donation__c.LastViewedDate', None), ('npe03__Recurring_Donation__c.Name', None), ('npe03__Recurring_Donation__c.OwnerId', None), ('npe03__Recurring_Donation__c.SystemModstamp', None), ('npe4__Relationship__c.CreatedById', None), ('npe4__Relationship__c.CreatedDate', None), ('npe4__Relationship__c.Id', None), ('npe4__Relationship__c.IsDeleted', None), ('npe4__Relationship__c.LastModifiedById', None), ('npe4__Relationship__c.LastModifiedDate', None), ('npe4__Relationship__c.LastReferencedDate', None), ('npe4__Relationship__c.LastViewedDate', None), ('npe4__Relationship__c.Name', None), ('npe4__Relationship__c.SystemModstamp', None), ('npe4__Relationship_Error__c.CreatedById', None), ('npe4__Relationship_Error__c.CreatedDate', None), ('npe4__Relationship_Error__c.Id', None), ('npe4__Relationship_Error__c.IsDeleted', None), ('npe4__Relationship_Error__c.LastModifiedById', None), ('npe4__Relationship_Error__c.LastModifiedDate', None), ('npe4__Relationship_Error__c.Name', None), ('npe4__Relationship_Error__c.OwnerId', None), ('npe4__Relationship_Error__c.SystemModstamp', None), ('npe5__Affiliation__c.CreatedById', None), ('npe5__Affiliation__c.CreatedDate', None), ('npe5__Affiliation__c.Id', None), ('npe5__Affiliation__c.IsDeleted', None), ('npe5__Affiliation__c.LastModifiedById', None), ('npe5__Affiliation__c.LastModifiedDate', None), ('npe5__Affiliation__c.LastReferencedDate', None), ('npe5__Affiliation__c.LastViewedDate', None), ('npe5__Affiliation__c.Name', None), ('npe5__Affiliation__c.SystemModstamp', None), ('npo02__Household__c.CreatedById', None), ('npo02__Household__c.CreatedDate', None), ('npo02__Household__c.Id', None), ('npo02__Household__c.IsDeleted', None), ('npo02__Household__c.LastActivityDate', None), ('npo02__Household__c.LastModifiedById', None), ('npo02__Household__c.LastModifiedDate', None), ('npo02__Household__c.LastReferencedDate', None), ('npo02__Household__c.LastViewedDate', None), ('npo02__Household__c.Name', None), ('npo02__Household__c.OwnerId', None), ('npo02__Household__c.SystemModstamp', None), ('npsp__Account_Soft_Credit__c.CreatedById', None), ('npsp__Account_Soft_Credit__c.CreatedDate', None), ('npsp__Account_Soft_Credit__c.Id', None), ('npsp__Account_Soft_Credit__c.IsDeleted', None), ('npsp__Account_Soft_Credit__c.LastModifiedById', None), ('npsp__Account_Soft_Credit__c.LastModifiedDate', None), ('npsp__Account_Soft_Credit__c.Name', None), ('npsp__Account_Soft_Credit__c.SystemModstamp', None), ('npsp__Address__c.CreatedById', None), ('npsp__Address__c.CreatedDate', None), ('npsp__Address__c.Id', None), ('npsp__Address__c.IsDeleted', None), ('npsp__Address__c.LastModifiedById', None), ('npsp__Address__c.LastModifiedDate', None), ('npsp__Address__c.LastReferencedDate', None), ('npsp__Address__c.LastViewedDate', None), ('npsp__Address__c.Name', None), ('npsp__Address__c.SystemModstamp', None), ('npsp__Allocation__c.CreatedById', None), ('npsp__Allocation__c.CreatedDate', None), ('npsp__Allocation__c.Id', None), ('npsp__Allocation__c.IsDeleted', None), ('npsp__Allocation__c.LastModifiedById', None), ('npsp__Allocation__c.LastModifiedDate', None), ('npsp__Allocation__c.Name', None), ('npsp__Allocation__c.OwnerId', None), ('npsp__Allocation__c.SystemModstamp', None), ('npsp__Batch__c.CreatedById', None), ('npsp__Batch__c.CreatedDate', None), ('npsp__Batch__c.Id', None), ('npsp__Batch__c.IsDeleted', None), ('npsp__Batch__c.LastModifiedById', None), ('npsp__Batch__c.LastModifiedDate', None), ('npsp__Batch__c.Name', None), ('npsp__Batch__c.OwnerId', None), ('npsp__Batch__c.SystemModstamp', None), ('npsp__DataImport__c.CreatedById', None), ('npsp__DataImport__c.CreatedDate', None), ('npsp__DataImport__c.Id', None), ('npsp__DataImport__c.IsDeleted', None), ('npsp__DataImport__c.LastModifiedById', None), ('npsp__DataImport__c.LastModifiedDate', None), ('npsp__DataImport__c.LastReferencedDate', None), ('npsp__DataImport__c.LastViewedDate', None), ('npsp__DataImport__c.Name', None), ('npsp__DataImport__c.OwnerId', None), ('npsp__DataImport__c.SystemModstamp', None), ('npsp__DataImportBatch__c.CreatedById', None), ('npsp__DataImportBatch__c.CreatedDate', None), ('npsp__DataImportBatch__c.Id', None), ('npsp__DataImportBatch__c.IsDeleted', None), ('npsp__DataImportBatch__c.LastModifiedById', None), ('npsp__DataImportBatch__c.LastModifiedDate', None), ('npsp__DataImportBatch__c.LastReferencedDate', None), ('npsp__DataImportBatch__c.LastViewedDate', None), ('npsp__DataImportBatch__c.Name', None), ('npsp__DataImportBatch__c.OwnerId', None), ('npsp__DataImportBatch__c.SystemModstamp', None), ('npsp__Engagement_Plan__c.CreatedById', None), ('npsp__Engagement_Plan__c.CreatedDate', None), ('npsp__Engagement_Plan__c.Id', None), ('npsp__Engagement_Plan__c.IsDeleted', None), ('npsp__Engagement_Plan__c.LastActivityDate', None), ('npsp__Engagement_Plan__c.LastModifiedById', None), ('npsp__Engagement_Plan__c.LastModifiedDate', None), ('npsp__Engagement_Plan__c.Name', None), ('npsp__Engagement_Plan__c.SystemModstamp', None), ('npsp__Engagement_Plan_Task__c.CreatedById', None), ('npsp__Engagement_Plan_Task__c.CreatedDate', None), ('npsp__Engagement_Plan_Task__c.Id', None), ('npsp__Engagement_Plan_Task__c.IsDeleted', None), ('npsp__Engagement_Plan_Task__c.LastModifiedById', None), ('npsp__Engagement_Plan_Task__c.LastModifiedDate', None), ('npsp__Engagement_Plan_Task__c.Name', None), ('npsp__Engagement_Plan_Task__c.SystemModstamp', None), ('npsp__Engagement_Plan_Template__c.CreatedById', None), ('npsp__Engagement_Plan_Template__c.CreatedDate', None), ('npsp__Engagement_Plan_Template__c.Id', None), ('npsp__Engagement_Plan_Template__c.IsDeleted', None), ('npsp__Engagement_Plan_Template__c.LastActivityDate', None), ('npsp__Engagement_Plan_Template__c.LastModifiedById', None), ('npsp__Engagement_Plan_Template__c.LastModifiedDate', None), ('npsp__Engagement_Plan_Template__c.LastReferencedDate', None), ('npsp__Engagement_Plan_Template__c.LastViewedDate', None), ('npsp__Engagement_Plan_Template__c.Name', None), ('npsp__Engagement_Plan_Template__c.OwnerId', None), ('npsp__Engagement_Plan_Template__c.SystemModstamp', None), ('npsp__Error__c.CreatedById', None), ('npsp__Error__c.CreatedDate', None), ('npsp__Error__c.Id', None), ('npsp__Error__c.IsDeleted', None), ('npsp__Error__c.LastModifiedById', None), ('npsp__Error__c.LastModifiedDate', None), ('npsp__Error__c.Name', None), ('npsp__Error__c.OwnerId', None), ('npsp__Error__c.SystemModstamp', None), ('npsp__Filter_Group__mdt.DeveloperName', None), ('npsp__Filter_Group__mdt.Id', None), ('npsp__Filter_Group__mdt.Label', None), ('npsp__Filter_Group__mdt.Language', None), ('npsp__Filter_Group__mdt.MasterLabel', None), ('npsp__Filter_Group__mdt.NamespacePrefix', None), ('npsp__Filter_Group__mdt.QualifiedApiName', None), ('npsp__Filter_Rule__mdt.DeveloperName', None), ('npsp__Filter_Rule__mdt.Id', None), ('npsp__Filter_Rule__mdt.Label', None), ('npsp__Filter_Rule__mdt.Language', None), ('npsp__Filter_Rule__mdt.MasterLabel', None), ('npsp__Filter_Rule__mdt.NamespacePrefix', None), ('npsp__Filter_Rule__mdt.QualifiedApiName', None), ('npsp__Fund__c.CreatedById', None), ('npsp__Fund__c.CreatedDate', None), ('npsp__Fund__c.Id', None), ('npsp__Fund__c.IsDeleted', None), ('npsp__Fund__c.LastActivityDate', None), ('npsp__Fund__c.LastModifiedById', None), ('npsp__Fund__c.LastModifiedDate', None), ('npsp__Fund__c.Name', None), ('npsp__Fund__c.OwnerId', None), ('npsp__Fund__c.SystemModstamp', None), ('npsp__General_Accounting_Unit__c.CreatedById', None), ('npsp__General_Accounting_Unit__c.CreatedDate', None), ('npsp__General_Accounting_Unit__c.Id', None), ('npsp__General_Accounting_Unit__c.IsDeleted', None), ('npsp__General_Accounting_Unit__c.LastActivityDate', None), ('npsp__General_Accounting_Unit__c.LastModifiedById', None), ('npsp__General_Accounting_Unit__c.LastModifiedDate', None), ('npsp__General_Accounting_Unit__c.LastReferencedDate', None), ('npsp__General_Accounting_Unit__c.LastViewedDate', None), ('npsp__General_Accounting_Unit__c.Name', None), ('npsp__General_Accounting_Unit__c.OwnerId', None), ('npsp__General_Accounting_Unit__c.SystemModstamp', None), ('npsp__Grant_Deadline__c.CreatedById', None), ('npsp__Grant_Deadline__c.CreatedDate', None), ('npsp__Grant_Deadline__c.Id', None), ('npsp__Grant_Deadline__c.IsDeleted', None), ('npsp__Grant_Deadline__c.LastActivityDate', None), ('npsp__Grant_Deadline__c.LastModifiedById', None), ('npsp__Grant_Deadline__c.LastModifiedDate', None), ('npsp__Grant_Deadline__c.Name', None), ('npsp__Grant_Deadline__c.SystemModstamp', None), ('npsp__Level__c.CreatedById', None), ('npsp__Level__c.CreatedDate', None), ('npsp__Level__c.Id', None), ('npsp__Level__c.IsDeleted', None), ('npsp__Level__c.LastModifiedById', None), ('npsp__Level__c.LastModifiedDate', None), ('npsp__Level__c.LastReferencedDate', None), ('npsp__Level__c.LastViewedDate', None), ('npsp__Level__c.Name', None), ('npsp__Level__c.OwnerId', None), ('npsp__Level__c.SystemModstamp', None), ('npsp__Partial_Soft_Credit__c.CreatedById', None), ('npsp__Partial_Soft_Credit__c.CreatedDate', None), ('npsp__Partial_Soft_Credit__c.Id', None), ('npsp__Partial_Soft_Credit__c.IsDeleted', None), ('npsp__Partial_Soft_Credit__c.LastModifiedById', None), ('npsp__Partial_Soft_Credit__c.LastModifiedDate', None), ('npsp__Partial_Soft_Credit__c.Name', None), ('npsp__Partial_Soft_Credit__c.SystemModstamp', None), ('npsp__Rollup__mdt.DeveloperName', None), ('npsp__Rollup__mdt.Id', None), ('npsp__Rollup__mdt.Label', None), ('npsp__Rollup__mdt.Language', None), ('npsp__Rollup__mdt.MasterLabel', None), ('npsp__Rollup__mdt.NamespacePrefix', None), ('npsp__Rollup__mdt.QualifiedApiName', None), ('npsp__Schedulable__c.CreatedById', None), ('npsp__Schedulable__c.CreatedDate', None), ('npsp__Schedulable__c.Id', None), ('npsp__Schedulable__c.IsDeleted', None), ('npsp__Schedulable__c.LastModifiedById', None), ('npsp__Schedulable__c.LastModifiedDate', None), ('npsp__Schedulable__c.Name', None), ('npsp__Schedulable__c.OwnerId', None), ('npsp__Schedulable__c.SystemModstamp', None), ('npsp__Trigger_Handler__c.CreatedById', None), ('npsp__Trigger_Handler__c.CreatedDate', None), ('npsp__Trigger_Handler__c.Id', None), ('npsp__Trigger_Handler__c.IsDeleted', None), ('npsp__Trigger_Handler__c.LastModifiedById', None), ('npsp__Trigger_Handler__c.LastModifiedDate', None), ('npsp__Trigger_Handler__c.Name', None), ('npsp__Trigger_Handler__c.OwnerId', None), ('npsp__Trigger_Handler__c.SystemModstamp', None), ('Opportunity.AccountId', None), ('Opportunity.Amount', None), ('Opportunity.CampaignId', None), ('Opportunity.CloseDate', None), ('Opportunity.CreatedById', None), ('Opportunity.CreatedDate', None), ('Opportunity.Description', None), ('Opportunity.Fiscal', None), ('Opportunity.FiscalQuarter', None), ('Opportunity.FiscalYear', None), ('Opportunity.ForecastCategory', None), ('Opportunity.ForecastCategoryName', None), ('Opportunity.HasOpenActivity', None), ('Opportunity.HasOpportunityLineItem', None), ('Opportunity.HasOverdueTask', None), ('Opportunity.Id', None), ('Opportunity.IsClosed', None), ('Opportunity.IsDeleted', None), ('Opportunity.IsWon', None), ('Opportunity.LastActivityDate', None), ('Opportunity.LastModifiedById', None), ('Opportunity.LastModifiedDate', None), ('Opportunity.LastReferencedDate', None), ('Opportunity.LastViewedDate', None), ('Opportunity.LeadSource', None), ('Opportunity.Name', None), ('Opportunity.NextStep', None), ('Opportunity.OwnerId', None), ('Opportunity.Pricebook2Id', None), ('Opportunity.Probability', None), ('Opportunity.RecordTypeId', None), ('Opportunity.StageName', None), ('Opportunity.SyncedQuoteId', None), ('Opportunity.SystemModstamp', None), ('Opportunity.Type', None), ('Order.AccountId', None), ('Order.ActivatedById', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillingCity', None), ('Order.BillingCountry', None), ('Order.BillingCountryCode', None), ('Order.BillingGeocodeAccuracy', None), ('Order.BillingLatitude', None), ('Order.BillingLongitude', None), ('Order.BillingPostalCode', None), ('Order.BillingState', None), ('Order.BillingStateCode', None), ('Order.BillingStreet', None), ('Order.CompanyAuthorizedById', None), ('Order.ContractId', None), ('Order.CreatedById', None), ('Order.CreatedDate', None), ('Order.CustomerAuthorizedById', None), ('Order.Description', None), ('Order.EffectiveDate', None), ('Order.EndDate', None), ('Order.Id', None), ('Order.IsDeleted', None), ('Order.IsReductionOrder', None), ('Order.LastModifiedById', None), ('Order.LastModifiedDate', None), ('Order.LastReferencedDate', None), ('Order.LastViewedDate', None), ('Order.OrderNumber', None), ('Order.OriginalOrderId', None), ('Order.OwnerId', None), ('Order.Pricebook2Id', None), ('Order.ShippingAddress', None), ('Order.ShippingCity', None), ('Order.ShippingCountry', None), ('Order.ShippingCountryCode', None), ('Order.ShippingGeocodeAccuracy', None), ('Order.ShippingLatitude', None), ('Order.ShippingLongitude', None), ('Order.ShippingPostalCode', None), ('Order.ShippingState', None), ('Order.ShippingStateCode', None), ('Order.ShippingStreet', None), ('Order.Status', None), ('Order.StatusCode', None), ('Order.SystemModstamp', None), ('Order.TotalAmount', None), ('Order.Type', None), ('Pricebook2.CreatedById', None), ('Pricebook2.CreatedDate', None), ('Pricebook2.Description', None), ('Pricebook2.Id', None), ('Pricebook2.IsActive', None), ('Pricebook2.IsArchived', None), ('Pricebook2.IsDeleted', None), ('Pricebook2.IsStandard', None), ('Pricebook2.LastModifiedById', None), ('Pricebook2.LastModifiedDate', None), ('Pricebook2.LastReferencedDate', None), ('Pricebook2.LastViewedDate', None), ('Pricebook2.Name', None), ('Pricebook2.SystemModstamp', None), ('PricebookEntry.CreatedById', None), ('PricebookEntry.CreatedDate', None), ('PricebookEntry.Id', None), ('PricebookEntry.IsActive', None), ('PricebookEntry.IsArchived', None), ('PricebookEntry.IsDeleted', None), ('PricebookEntry.LastModifiedById', None), ('PricebookEntry.LastModifiedDate', None), ('PricebookEntry.Name', None), ('PricebookEntry.Pricebook2Id', None), ('PricebookEntry.Product2Id', None), ('PricebookEntry.ProductCode', None), ('PricebookEntry.SystemModstamp', None), ('PricebookEntry.UnitPrice', None), ('PricebookEntry.UseStandardPrice', None), ('Product2.CreatedById', None), ('Product2.CreatedDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSourceId', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.Id', None), ('Product2.IsActive', None), ('Product2.IsArchived', None), ('Product2.IsDeleted', None), ('Product2.LastModifiedById', None), ('Product2.LastModifiedDate', None), ('Product2.LastReferencedDate', None), ('Product2.LastViewedDate', None), ('Product2.Name', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.StockKeepingUnit', None), ('Product2.SystemModstamp', None), ('QuickText.Category', None), ('QuickText.Channel', None), ('QuickText.CreatedById', None), ('QuickText.CreatedDate', None), ('QuickText.Id', None), ('QuickText.IsDeleted', None), ('QuickText.LastModifiedById', None), ('QuickText.LastModifiedDate', None), ('QuickText.LastReferencedDate', None), ('QuickText.LastViewedDate', None), ('QuickText.Message', None), ('QuickText.Name', None), ('QuickText.OwnerId', None), ('QuickText.SystemModstamp', None), ('Quote.AccountId', None), ('Quote.BillingAddress', None), ('Quote.BillingCity', None), ('Quote.BillingCountry', None), ('Quote.BillingCountryCode', None), ('Quote.BillingGeocodeAccuracy', None), ('Quote.BillingLatitude', None), ('Quote.BillingLongitude', None), ('Quote.BillingName', None), ('Quote.BillingPostalCode', None), ('Quote.BillingState', None), ('Quote.BillingStateCode', None), ('Quote.BillingStreet', None), ('Quote.CanCreateQuoteLineItems', None), ('Quote.ContactId', None), ('Quote.CreatedById', None), ('Quote.CreatedDate', None), ('Quote.Description', None), ('Quote.Discount', None), ('Quote.Email', None), ('Quote.ExpirationDate', None), ('Quote.Fax', None), ('Quote.GrandTotal', None), ('Quote.Id', None), ('Quote.IsDeleted', None), ('Quote.IsSyncing', None), ('Quote.LastModifiedById', None), ('Quote.LastModifiedDate', None), ('Quote.LastReferencedDate', None), ('Quote.LastViewedDate', None), ('Quote.LineItemCount', None), ('Quote.Name', None), ('Quote.OpportunityId', None), ('Quote.OwnerId', None), ('Quote.Phone', None), ('Quote.Pricebook2Id', None), ('Quote.QuoteNumber', None), ('Quote.ShippingAddress', None), ('Quote.ShippingCity', None), ('Quote.ShippingCountry', None), ('Quote.ShippingCountryCode', None), ('Quote.ShippingGeocodeAccuracy', None), ('Quote.ShippingHandling', None), ('Quote.ShippingLatitude', None), ('Quote.ShippingLongitude', None), ('Quote.ShippingName', None), ('Quote.ShippingPostalCode', None), ('Quote.ShippingState', None), ('Quote.ShippingStateCode', None), ('Quote.ShippingStreet', None), ('Quote.Status', None), ('Quote.Subtotal', None), ('Quote.SystemModstamp', None), ('Quote.Tax', None), ('Quote.TotalPrice', None), ('QuoteLineItem.CreatedById', None), ('QuoteLineItem.CreatedDate', None), ('QuoteLineItem.Description', None), ('QuoteLineItem.Discount', None), ('QuoteLineItem.Id', None), ('QuoteLineItem.IsDeleted', None), ('QuoteLineItem.LastModifiedById', None), ('QuoteLineItem.LastModifiedDate', None), ('QuoteLineItem.LastReferencedDate', None), ('QuoteLineItem.LastViewedDate', None), ('QuoteLineItem.LineNumber', None), ('QuoteLineItem.ListPrice', None), ('QuoteLineItem.OpportunityLineItemId', None), ('QuoteLineItem.PricebookEntryId', None), ('QuoteLineItem.Product2Id', None), ('QuoteLineItem.Quantity', None), ('QuoteLineItem.QuoteId', None), ('QuoteLineItem.SortOrder', None), ('QuoteLineItem.Subtotal', None), ('QuoteLineItem.SystemModstamp', None), ('QuoteLineItem.TotalPrice', None), ('QuoteLineItem.UnitPrice', None), ('Recommendation.AcceptanceLabel', None), ('Recommendation.ActionReference', None), ('Recommendation.CreatedById', None), ('Recommendation.CreatedDate', None), ('Recommendation.Description', None), ('Recommendation.Id', None), ('Recommendation.ImageId', None), ('Recommendation.IsActionActive', None), ('Recommendation.IsDeleted', None), ('Recommendation.LastModifiedById', None), ('Recommendation.LastModifiedDate', None), ('Recommendation.LastReferencedDate', None), ('Recommendation.LastViewedDate', None), ('Recommendation.Name', None), ('Recommendation.RejectionLabel', None), ('Recommendation.SystemModstamp', None), ('SocialPersona.AuthorLabels', None), ('SocialPersona.CreatedById', None), ('SocialPersona.CreatedDate', None), ('SocialPersona.ExternalId', None), ('SocialPersona.ExternalPictureURL', None), ('SocialPersona.Id', None), ('SocialPersona.InfluencerScore', None), ('SocialPersona.IsDefault', None), ('SocialPersona.IsDeleted', None), ('SocialPersona.IsVerified', None), ('SocialPersona.LastModifiedById', None), ('SocialPersona.LastModifiedDate', None), ('SocialPersona.LastReferencedDate', None), ('SocialPersona.LastViewedDate', None), ('SocialPersona.Name', None), ('SocialPersona.ParentId', None), ('SocialPersona.ProfileUrl', None), ('SocialPersona.Provider', None), ('SocialPersona.SystemModstamp', None), ('SocialPost.Content', None), ('SocialPost.CreatedById', None), ('SocialPost.CreatedDate', None), ('SocialPost.Handle', None), ('SocialPost.Headline', None), ('SocialPost.HiddenById', None), ('SocialPost.Id', None), ('SocialPost.IsDeleted', None), ('SocialPost.LastModifiedById', None), ('SocialPost.LastModifiedDate', None), ('SocialPost.LastReferencedDate', None), ('SocialPost.LastViewedDate', None), ('SocialPost.LikedBy', None), ('SocialPost.Name', None), ('SocialPost.Notes', None), ('SocialPost.OwnerId', None), ('SocialPost.ParentId', None), ('SocialPost.PersonaId', None), ('SocialPost.Posted', None), ('SocialPost.PostUrl', None), ('SocialPost.Provider', None), ('SocialPost.ReviewScale', None), ('SocialPost.ReviewScore', None), ('SocialPost.SystemModstamp', None), ('SocialPost.TruncatedContent', None), ('SocialPost.WhoId', None), ('Solution.CreatedById', None), ('Solution.CreatedDate', None), ('Solution.Id', None), ('Solution.IsDeleted', None), ('Solution.IsHtml', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.IsReviewed', None), ('Solution.LastModifiedById', None), ('Solution.LastModifiedDate', None), ('Solution.LastReferencedDate', None), ('Solution.LastViewedDate', None), ('Solution.OwnerId', None), ('Solution.SolutionName', None), ('Solution.SolutionNote', None), ('Solution.SolutionNumber', None), ('Solution.Status', None), ('Solution.SystemModstamp', None), ('Solution.TimesUsed', None), ('Survey__c.CreatedById', None), ('Survey__c.CreatedDate', None), ('Survey__c.Id', None), ('Survey__c.IsDeleted', None), ('Survey__c.LastModifiedById', None), ('Survey__c.LastModifiedDate', None), ('Survey__c.Name', None), ('Survey__c.RecordTypeId', None), ('Survey__c.SystemModstamp', None), ('Task.AccountId', None), ('Task.ActivityDate', None), ('Task.CallDisposition', None), ('Task.CallDurationInSeconds', None), ('Task.CallObject', None), ('Task.CallType', None), ('Task.CompletedDateTime', None), ('Task.CreatedById', None), ('Task.CreatedDate', None), ('Task.Description', None), ('Task.Id', None), ('Task.IsArchived', None), ('Task.IsClosed', None), ('Task.IsDeleted', None), ('Task.IsHighPriority', None), ('Task.IsRecurrence', None), ('Task.IsReminderSet', None), ('Task.LastModifiedById', None), ('Task.LastModifiedDate', None), ('Task.OwnerId', None), ('Task.Priority', None), ('Task.RecurrenceActivityId', None), ('Task.RecurrenceDayOfMonth', None), ('Task.RecurrenceDayOfWeekMask', None), ('Task.RecurrenceEndDateOnly', None), ('Task.RecurrenceInstance', None), ('Task.RecurrenceInterval', None), ('Task.RecurrenceMonthOfYear', None), ('Task.RecurrenceRegeneratedType', None), ('Task.RecurrenceStartDateOnly', None), ('Task.RecurrenceTimeZoneSidKey', None), ('Task.RecurrenceType', None), ('Task.ReminderDateTime', None), ('Task.Status', None), ('Task.Subject', None), ('Task.SystemModstamp', None), ('Task.TaskSubtype', None), ('Task.Type', None), ('Task.WhatCount', None), ('Task.WhatId', None), ('Task.WhoCount', None), ('Task.WhoId', None), ('Topic.CreatedById', None), ('Topic.CreatedDate', None), ('Topic.Description', None), ('Topic.Id', None), ('Topic.ManagedTopicType', None), ('Topic.Name', None), ('Topic.SystemModstamp', None), ('Topic.TalkingAbout', None), ('User.AboutMe', None), ('User.AccountId', None), ('User.Address', None), ('User.Alias', None), ('User.BadgeText', None), ('User.BannerPhotoUrl', None), ('User.CallCenterId', None), ('User.City', None), ('User.CommunityNickname', None), ('User.CompanyName', None), ('User.ContactId', None), ('User.Country', None), ('User.CountryCode', None), ('User.CreatedById', None), ('User.CreatedDate', None), ('User.DefaultGroupNotificationFrequency', None), ('User.DelegatedApproverId', None), ('User.Department', None), ('User.DigestFrequency', None), ('User.Division', None), ('User.Email', None), ('User.EmailEncodingKey', None), ('User.EmailPreferencesAutoBcc', None), ('User.EmailPreferencesAutoBccStayInTouch', None), ('User.EmailPreferencesStayInTouchReminder', None), ('User.EmployeeNumber', None), ('User.Extension', None), ('User.Fax', None), ('User.FederationIdentifier', None), ('User.FirstName', None), ('User.ForecastEnabled', None), ('User.FullPhotoUrl', None), ('User.GeocodeAccuracy', None), ('User.Id', None), ('User.IndividualId', None), ('User.IsActive', None), ('User.IsExtIndicatorVisible', None), ('User.IsProfilePhotoActive', None), ('User.LanguageLocaleKey', None), ('User.LastLoginDate', None), ('User.LastModifiedById', None), ('User.LastModifiedDate', None), ('User.LastName', None), ('User.LastPasswordChangeDate', None), ('User.LastReferencedDate', None), ('User.LastViewedDate', None), ('User.Latitude', None), ('User.LocaleSidKey', None), ('User.Longitude', None), ('User.ManagerId', None), ('User.MediumBannerPhotoUrl', None), ('User.MediumPhotoUrl', None), ('User.MiddleName', None), ('User.MobilePhone', None), ('User.Name', None), ('User.OfflinePdaTrialExpirationDate', None), ('User.OfflineTrialExpirationDate', None), ('User.OutOfOfficeMessage', None), ('User.Phone', None), ('User.PostalCode', None), ('User.ProfileId', None), ('User.ReceivesAdminInfoEmails', None), ('User.ReceivesInfoEmails', None), ('User.SenderEmail', None), ('User.SenderName', None), ('User.Signature', None), ('User.SmallBannerPhotoUrl', None), ('User.SmallPhotoUrl', None), ('User.State', None), ('User.StateCode', None), ('User.StayInTouchNote', None), ('User.StayInTouchSignature', None), ('User.StayInTouchSubject', None), ('User.Street', None), ('User.Suffix', None), ('User.SystemModstamp', None), ('User.TimeZoneSidKey', None), ('User.Title', None), ('User.Username', None), ('User.UserPermissionsAvantgoUser', None), ('User.UserPermissionsCallCenterAutoLogin', None), ('User.UserPermissionsChatterAnswersUser', None), ('User.UserPermissionsInteractionUser', None), ('User.UserPermissionsMarketingUser', None), ('User.UserPermissionsMobileUser', None), ('User.UserPermissionsOfflineUser', None), ('User.UserPermissionsSFContentUser', None), ('User.UserPermissionsSupportUser', None), ('User.UserPreferencesActivityRemindersPopup', None), ('User.UserPreferencesApexPagesDeveloperMode', None), ('User.UserPreferencesCacheDiagnostics', None), ('User.UserPreferencesCreateLEXAppsWTShown', None), ('User.UserPreferencesDisableAllFeedsEmail', None), ('User.UserPreferencesDisableBookmarkEmail', None), ('User.UserPreferencesDisableChangeCommentEmail', None), ('User.UserPreferencesDisableEndorsementEmail', None), ('User.UserPreferencesDisableFileShareNotificationsForApi', None), ('User.UserPreferencesDisableFollowersEmail', None), ('User.UserPreferencesDisableLaterCommentEmail', None), ('User.UserPreferencesDisableLikeEmail', None), ('User.UserPreferencesDisableMentionsPostEmail', None), ('User.UserPreferencesDisableMessageEmail', None), ('User.UserPreferencesDisableProfilePostEmail', None), ('User.UserPreferencesDisableSharePostEmail', None), ('User.UserPreferencesDisCommentAfterLikeEmail', None), ('User.UserPreferencesDisMentionsCommentEmail', None), ('User.UserPreferencesDisProfPostCommentEmail', None), ('User.UserPreferencesEnableAutoSubForFeeds', None), ('User.UserPreferencesEventRemindersCheckboxDefault', None), ('User.UserPreferencesExcludeMailAppAttachments', None), ('User.UserPreferencesFavoritesShowTopFavorites', None), ('User.UserPreferencesFavoritesWTShown', None), ('User.UserPreferencesGlobalNavBarWTShown', None), ('User.UserPreferencesGlobalNavGridMenuWTShown', None), ('User.UserPreferencesHasCelebrationBadge', None), ('User.UserPreferencesHideBiggerPhotoCallout', None), ('User.UserPreferencesHideChatterOnboardingSplash', None), ('User.UserPreferencesHideCSNDesktopTask', None), ('User.UserPreferencesHideCSNGetChatterMobileTask', None), ('User.UserPreferencesHideEndUserOnboardingAssistantModal', None), ('User.UserPreferencesHideLightningMigrationModal', None), ('User.UserPreferencesHideS1BrowserUI', None), ('User.UserPreferencesHideSecondChatterOnboardingSplash', None), ('User.UserPreferencesHideSfxWelcomeMat', None), ('User.UserPreferencesLightningExperiencePreferred', None), ('User.UserPreferencesNewLightningReportRunPageEnabled', None), ('User.UserPreferencesPathAssistantCollapsed', None), ('User.UserPreferencesPipelineViewHideHelpPopover', None), ('User.UserPreferencesPreviewCustomTheme', None), ('User.UserPreferencesPreviewLightning', None), ('User.UserPreferencesRecordHomeReservedWTShown', None), ('User.UserPreferencesRecordHomeSectionCollapseWTShown', None), ('User.UserPreferencesReminderSoundOff', None), ('User.UserPreferencesShowCityToExternalUsers', None), ('User.UserPreferencesShowCityToGuestUsers', None), ('User.UserPreferencesShowCountryToExternalUsers', None), ('User.UserPreferencesShowCountryToGuestUsers', None), ('User.UserPreferencesShowEmailToExternalUsers', None), ('User.UserPreferencesShowEmailToGuestUsers', None), ('User.UserPreferencesShowFaxToExternalUsers', None), ('User.UserPreferencesShowFaxToGuestUsers', None), ('User.UserPreferencesShowManagerToExternalUsers', None), ('User.UserPreferencesShowManagerToGuestUsers', None), ('User.UserPreferencesShowMobilePhoneToExternalUsers', None), ('User.UserPreferencesShowMobilePhoneToGuestUsers', None), ('User.UserPreferencesShowPostalCodeToExternalUsers', None), ('User.UserPreferencesShowPostalCodeToGuestUsers', None), ('User.UserPreferencesShowProfilePicToGuestUsers', None), ('User.UserPreferencesShowStateToExternalUsers', None), ('User.UserPreferencesShowStateToGuestUsers', None), ('User.UserPreferencesShowStreetAddressToExternalUsers', None), ('User.UserPreferencesShowStreetAddressToGuestUsers', None), ('User.UserPreferencesShowTitleToExternalUsers', None), ('User.UserPreferencesShowTitleToGuestUsers', None), ('User.UserPreferencesShowWorkPhoneToExternalUsers', None), ('User.UserPreferencesShowWorkPhoneToGuestUsers', None), ('User.UserPreferencesSortFeedByComment', None), ('User.UserPreferencesSuppressEventSFXReminders', None), ('User.UserPreferencesSuppressTaskSFXReminders', None), ('User.UserPreferencesTaskRemindersCheckboxDefault', None), ('User.UserPreferencesUserDebugModePref', None), ('User.UserRoleId', None), ('User.UserType', None), ('UserAppMenuItem.ApplicationId', None), ('UserAppMenuItem.AppMenuItemId', None), ('UserAppMenuItem.Description', None), ('UserAppMenuItem.IconUrl', None), ('UserAppMenuItem.Id', None), ('UserAppMenuItem.InfoUrl', None), ('UserAppMenuItem.IsUsingAdminAuthorization', None), ('UserAppMenuItem.IsVisible', None), ('UserAppMenuItem.Label', None), ('UserAppMenuItem.LogoUrl', None), ('UserAppMenuItem.MobileStartUrl', None), ('UserAppMenuItem.Name', None), ('UserAppMenuItem.SortOrder', None), ('UserAppMenuItem.StartUrl', None), ('UserAppMenuItem.Type', None), ('UserAppMenuItem.UserSortOrder', None), ('WorkBadge.CreatedById', None), ('WorkBadge.CreatedDate', None), ('WorkBadge.DefinitionId', None), ('WorkBadge.Description', None), ('WorkBadge.GiverId', None), ('WorkBadge.Id', None), ('WorkBadge.ImageUrl', None), ('WorkBadge.IsDeleted', None), ('WorkBadge.LastModifiedById', None), ('WorkBadge.LastModifiedDate', None), ('WorkBadge.LastReferencedDate', None), ('WorkBadge.LastViewedDate', None), ('WorkBadge.Message', None), ('WorkBadge.RecipientId', None), ('WorkBadge.SourceId', None), ('WorkBadge.SystemModstamp', None), ('WorkBadgeDefinition.CreatedById', None), ('WorkBadgeDefinition.CreatedDate', None), ('WorkBadgeDefinition.Description', None), ('WorkBadgeDefinition.GivenBadgeCount', None), ('WorkBadgeDefinition.Id', None), ('WorkBadgeDefinition.ImageUrl', None), ('WorkBadgeDefinition.IsActive', None), ('WorkBadgeDefinition.IsCompanyWide', None), ('WorkBadgeDefinition.IsDeleted', None), ('WorkBadgeDefinition.IsLimitPerUser', None), ('WorkBadgeDefinition.IsRewardBadge', None), ('WorkBadgeDefinition.LastModifiedById', None), ('WorkBadgeDefinition.LastModifiedDate', None), ('WorkBadgeDefinition.LastReferencedDate', None), ('WorkBadgeDefinition.LastViewedDate', None), ('WorkBadgeDefinition.LimitNumber', None), ('WorkBadgeDefinition.LimitStartDate', None), ('WorkBadgeDefinition.Name', None), ('WorkBadgeDefinition.OwnerId', None), ('WorkBadgeDefinition.SystemModstamp', None), ('WorkThanks.CreatedById', None), ('WorkThanks.CreatedDate', None), ('WorkThanks.FeedItemId', None), ('WorkThanks.GiverId', None), ('WorkThanks.Id', None), ('WorkThanks.IsDeleted', None), ('WorkThanks.LastModifiedById', None), ('WorkThanks.LastModifiedDate', None), ('WorkThanks.Message', None), ('WorkThanks.OwnerId', None), ('WorkThanks.SystemModstamp', None)], blank=True, null=True)
    aggregate_field = models.CharField(max_length=255, verbose_name='Custom Field Definition ID', choices=[('Account.BillingAddress', None), ('Account.BillingCity', None), ('Account.BillingCountry', None), ('Account.BillingCountryCode', None), ('Account.BillingGeocodeAccuracy', None), ('Account.BillingLatitude', None), ('Account.BillingLongitude', None), ('Account.BillingPostalCode', None), ('Account.BillingState', None), ('Account.BillingStateCode', None), ('Account.BillingStreet', None), ('Account.CreatedById', None), ('Account.CreatedDate', None), ('Account.Description', None), ('Account.Id', None), ('Account.Industry', None), ('Account.IsDeleted', None), ('Account.JigsawCompanyId', None), ('Account.LastActivityDate', None), ('Account.LastModifiedById', None), ('Account.LastModifiedDate', None), ('Account.LastReferencedDate', None), ('Account.LastViewedDate', None), ('Account.MasterRecordId', None), ('Account.Name', None), ('Account.NumberOfEmployees', None), ('Account.OwnerId', None), ('Account.ParentId', None), ('Account.Phone', None), ('Account.PhotoUrl', None), ('Account.RecordTypeId', None), ('Account.ShippingAddress', None), ('Account.ShippingCity', None), ('Account.ShippingCountry', None), ('Account.ShippingCountryCode', None), ('Account.ShippingGeocodeAccuracy', None), ('Account.ShippingLatitude', None), ('Account.ShippingLongitude', None), ('Account.ShippingPostalCode', None), ('Account.ShippingState', None), ('Account.ShippingStateCode', None), ('Account.ShippingStreet', None), ('Account.SystemModstamp', None), ('Account.Type', None), ('Account.Website', None), ('Asset.AccountId', None), ('Asset.ContactId', None), ('Asset.CreatedById', None), ('Asset.CreatedDate', None), ('Asset.Description', None), ('Asset.Id', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.IsDeleted', None), ('Asset.LastModifiedById', None), ('Asset.LastModifiedDate', None), ('Asset.LastReferencedDate', None), ('Asset.LastViewedDate', None), ('Asset.Name', None), ('Asset.ParentId', None), ('Asset.Price', None), ('Asset.Product2Id', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.RootAssetId', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.StockKeepingUnit', None), ('Asset.SystemModstamp', None), ('Asset.UsageEndDate', None), ('AssetRelationship.AssetId', None), ('AssetRelationship.AssetRelationshipNumber', None), ('AssetRelationship.CreatedById', None), ('AssetRelationship.CreatedDate', None), ('AssetRelationship.FromDate', None), ('AssetRelationship.Id', None), ('AssetRelationship.IsDeleted', None), ('AssetRelationship.LastModifiedById', None), ('AssetRelationship.LastModifiedDate', None), ('AssetRelationship.LastReferencedDate', None), ('AssetRelationship.LastViewedDate', None), ('AssetRelationship.RelatedAssetId', None), ('AssetRelationship.RelationshipType', None), ('AssetRelationship.SystemModstamp', None), ('AssetRelationship.ToDate', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.CampaignMemberRecordTypeId', None), ('Campaign.CreatedById', None), ('Campaign.CreatedDate', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.Id', None), ('Campaign.IsActive', None), ('Campaign.IsDeleted', None), ('Campaign.LastActivityDate', None), ('Campaign.LastModifiedById', None), ('Campaign.LastModifiedDate', None), ('Campaign.LastReferencedDate', None), ('Campaign.LastViewedDate', None), ('Campaign.Name', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.OwnerId', None), ('Campaign.ParentId', None), ('Campaign.RecordTypeId', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.SystemModstamp', None), ('Campaign.Type', None), ('Case.AccountId', None), ('Case.CaseNumber', None), ('Case.ClosedDate', None), ('Case.Comments', None), ('Case.ContactEmail', None), ('Case.ContactFax', None), ('Case.ContactId', None), ('Case.ContactMobile', None), ('Case.ContactPhone', None), ('Case.CreatedById', None), ('Case.CreatedDate', None), ('Case.Description', None), ('Case.Id', None), ('Case.IsClosed', None), ('Case.IsDeleted', None), ('Case.LastModifiedById', None), ('Case.LastModifiedDate', None), ('Case.LastReferencedDate', None), ('Case.LastViewedDate', None), ('Case.Origin', None), ('Case.OwnerId', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.SourceId', None), ('Case.Status', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.SystemModstamp', None), ('Case.Type', None), ('Class_Attendance__c.CreatedById', None), ('Class_Attendance__c.CreatedDate', None), ('Class_Attendance__c.Id', None), ('Class_Attendance__c.IsDeleted', None), ('Class_Attendance__c.LastModifiedById', None), ('Class_Attendance__c.LastModifiedDate', None), ('Class_Attendance__c.Name', None), ('Class_Attendance__c.SystemModstamp', None), ('Class_Enrollment__c.CreatedById', None), ('Class_Enrollment__c.CreatedDate', None), ('Class_Enrollment__c.Id', None), ('Class_Enrollment__c.IsDeleted', None), ('Class_Enrollment__c.LastActivityDate', None), ('Class_Enrollment__c.LastModifiedById', None), ('Class_Enrollment__c.LastModifiedDate', None), ('Class_Enrollment__c.LastReferencedDate', None), ('Class_Enrollment__c.LastViewedDate', None), ('Class_Enrollment__c.Name', None), ('Class_Enrollment__c.SystemModstamp', None), ('Class_Meeting__c.CreatedById', None), ('Class_Meeting__c.CreatedDate', None), ('Class_Meeting__c.Id', None), ('Class_Meeting__c.IsDeleted', None), ('Class_Meeting__c.LastModifiedById', None), ('Class_Meeting__c.LastModifiedDate', None), ('Class_Meeting__c.Name', None), ('Class_Meeting__c.SystemModstamp', None), ('Class_Offering__c.CreatedById', None), ('Class_Offering__c.CreatedDate', None), ('Class_Offering__c.Id', None), ('Class_Offering__c.IsDeleted', None), ('Class_Offering__c.LastModifiedById', None), ('Class_Offering__c.LastModifiedDate', None), ('Class_Offering__c.LastReferencedDate', None), ('Class_Offering__c.LastViewedDate', None), ('Class_Offering__c.Name', None), ('Class_Offering__c.OwnerId', None), ('Class_Offering__c.SystemModstamp', None), ('CollaborationGroup.AnnouncementId', None), ('CollaborationGroup.BannerPhotoUrl', None), ('CollaborationGroup.CanHaveGuests', None), ('CollaborationGroup.CollaborationType', None), ('CollaborationGroup.CreatedById', None), ('CollaborationGroup.CreatedDate', None), ('CollaborationGroup.Description', None), ('CollaborationGroup.FullPhotoUrl', None), ('CollaborationGroup.GroupEmail', None), ('CollaborationGroup.HasPrivateFieldsAccess', None), ('CollaborationGroup.Id', None), ('CollaborationGroup.InformationBody', None), ('CollaborationGroup.InformationTitle', None), ('CollaborationGroup.IsArchived', None), ('CollaborationGroup.IsAutoArchiveDisabled', None), ('CollaborationGroup.IsBroadcast', None), ('CollaborationGroup.LastFeedModifiedDate', None), ('CollaborationGroup.LastModifiedById', None), ('CollaborationGroup.LastModifiedDate', None), ('CollaborationGroup.LastReferencedDate', None), ('CollaborationGroup.LastViewedDate', None), ('CollaborationGroup.MediumPhotoUrl', None), ('CollaborationGroup.MemberCount', None), ('CollaborationGroup.Name', None), ('CollaborationGroup.OwnerId', None), ('CollaborationGroup.SmallPhotoUrl', None), ('CollaborationGroup.SystemModstamp', None), ('Contact.AccountId', None), ('Contact.Birthdate', None), ('Contact.CreatedById', None), ('Contact.CreatedDate', None), ('Contact.Department', None), ('Contact.Email', None), ('Contact.EmailBouncedDate', None), ('Contact.EmailBouncedReason', None), ('Contact.Fax', None), ('Contact.FirstName', None), ('Contact.HomePhone', None), ('Contact.Id', None), ('Contact.IndividualId', None), ('Contact.IsDeleted', None), ('Contact.IsEmailBounced', None), ('Contact.JigsawContactId', None), ('Contact.LastActivityDate', None), ('Contact.LastCURequestDate', None), ('Contact.LastCUUpdateDate', None), ('Contact.LastModifiedById', None), ('Contact.LastModifiedDate', None), ('Contact.LastName', None), ('Contact.LastReferencedDate', None), ('Contact.LastViewedDate', None), ('Contact.MailingAddress', None), ('Contact.MailingCity', None), ('Contact.MailingCountry', None), ('Contact.MailingCountryCode', None), ('Contact.MailingGeocodeAccuracy', None), ('Contact.MailingLatitude', None), ('Contact.MailingLongitude', None), ('Contact.MailingPostalCode', None), ('Contact.MailingState', None), ('Contact.MailingStateCode', None), ('Contact.MailingStreet', None), ('Contact.MasterRecordId', None), ('Contact.MiddleName', None), ('Contact.MobilePhone', None), ('Contact.Name', None), ('Contact.OtherAddress', None), ('Contact.OtherCity', None), ('Contact.OtherCountry', None), ('Contact.OtherCountryCode', None), ('Contact.OtherGeocodeAccuracy', None), ('Contact.OtherLatitude', None), ('Contact.OtherLongitude', None), ('Contact.OtherPhone', None), ('Contact.OtherPostalCode', None), ('Contact.OtherState', None), ('Contact.OtherStateCode', None), ('Contact.OtherStreet', None), ('Contact.OwnerId', None), ('Contact.Phone', None), ('Contact.PhotoUrl', None), ('Contact.RecordTypeId', None), ('Contact.ReportsToId', None), ('Contact.Salutation', None), ('Contact.Suffix', None), ('Contact.SystemModstamp', None), ('Contact.Title', None), ('ContactPointTypeConsent.CaptureContactPointType', None), ('ContactPointTypeConsent.CaptureDate', None), ('ContactPointTypeConsent.CaptureSource', None), ('ContactPointTypeConsent.ContactPointType', None), ('ContactPointTypeConsent.CreatedById', None), ('ContactPointTypeConsent.CreatedDate', None), ('ContactPointTypeConsent.DataUsePurposeId', None), ('ContactPointTypeConsent.DoubleConsentCaptureDate', None), ('ContactPointTypeConsent.EffectiveFrom', None), ('ContactPointTypeConsent.EffectiveTo', None), ('ContactPointTypeConsent.Id', None), ('ContactPointTypeConsent.IsDeleted', None), ('ContactPointTypeConsent.LastModifiedById', None), ('ContactPointTypeConsent.LastModifiedDate', None), ('ContactPointTypeConsent.LastReferencedDate', None), ('ContactPointTypeConsent.LastViewedDate', None), ('ContactPointTypeConsent.Name', None), ('ContactPointTypeConsent.PartyId', None), ('ContactPointTypeConsent.PrivacyConsentStatus', None), ('ContactPointTypeConsent.SystemModstamp', None), ('ContactRequest.CreatedById', None), ('ContactRequest.CreatedDate', None), ('ContactRequest.Id', None), ('ContactRequest.IsDeleted', None), ('ContactRequest.LastModifiedById', None), ('ContactRequest.LastModifiedDate', None), ('ContactRequest.LastReferencedDate', None), ('ContactRequest.LastViewedDate', None), ('ContactRequest.Name', None), ('ContactRequest.OwnerId', None), ('ContactRequest.PreferredChannel', None), ('ContactRequest.PreferredPhone', None), ('ContactRequest.RequestDescription', None), ('ContactRequest.RequestReason', None), ('ContactRequest.Status', None), ('ContactRequest.SystemModstamp', None), ('ContactRequest.WhatId', None), ('ContactRequest.WhoId', None), ('ContentVersion.Checksum', None), ('ContentVersion.ContentBodyId', None), ('ContentVersion.ContentDocumentId', None), ('ContentVersion.ContentLocation', None), ('ContentVersion.ContentModifiedById', None), ('ContentVersion.ContentModifiedDate', None), ('ContentVersion.ContentSize', None), ('ContentVersion.ContentUrl', None), ('ContentVersion.CreatedById', None), ('ContentVersion.CreatedDate', None), ('ContentVersion.Description', None), ('ContentVersion.ExternalDataSourceId', None), ('ContentVersion.ExternalDocumentInfo1', None), ('ContentVersion.ExternalDocumentInfo2', None), ('ContentVersion.FeaturedContentBoost', None), ('ContentVersion.FeaturedContentDate', None), ('ContentVersion.FileExtension', None), ('ContentVersion.FileType', None), ('ContentVersion.FirstPublishLocationId', None), ('ContentVersion.Id', None), ('ContentVersion.IsAssetEnabled', None), ('ContentVersion.IsDeleted', None), ('ContentVersion.IsLatest', None), ('ContentVersion.IsMajorVersion', None), ('ContentVersion.LastModifiedById', None), ('ContentVersion.LastModifiedDate', None), ('ContentVersion.NegativeRatingCount', None), ('ContentVersion.Origin', None), ('ContentVersion.OwnerId', None), ('ContentVersion.PathOnClient', None), ('ContentVersion.PositiveRatingCount', None), ('ContentVersion.PublishStatus', None), ('ContentVersion.RatingCount', None), ('ContentVersion.ReasonForChange', None), ('ContentVersion.SharingOption', None), ('ContentVersion.SharingPrivacy', None), ('ContentVersion.SystemModstamp', None), ('ContentVersion.TagCsv', None), ('ContentVersion.TextPreview', None), ('ContentVersion.Title', None), ('ContentVersion.VersionData', None), ('ContentVersion.VersionNumber', None), ('Contract.AccountId', None), ('Contract.ActivatedById', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.BillingCity', None), ('Contract.BillingCountry', None), ('Contract.BillingCountryCode', None), ('Contract.BillingGeocodeAccuracy', None), ('Contract.BillingLatitude', None), ('Contract.BillingLongitude', None), ('Contract.BillingPostalCode', None), ('Contract.BillingState', None), ('Contract.BillingStateCode', None), ('Contract.BillingStreet', None), ('Contract.CompanySignedDate', None), ('Contract.CompanySignedId', None), ('Contract.ContractNumber', None), ('Contract.ContractTerm', None), ('Contract.CreatedById', None), ('Contract.CreatedDate', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedId', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Id', None), ('Contract.IsDeleted', None), ('Contract.LastActivityDate', None), ('Contract.LastApprovedDate', None), ('Contract.LastModifiedById', None), ('Contract.LastModifiedDate', None), ('Contract.LastReferencedDate', None), ('Contract.LastViewedDate', None), ('Contract.OwnerExpirationNotice', None), ('Contract.OwnerId', None), ('Contract.ShippingAddress', None), ('Contract.ShippingCity', None), ('Contract.ShippingCountry', None), ('Contract.ShippingCountryCode', None), ('Contract.ShippingGeocodeAccuracy', None), ('Contract.ShippingLatitude', None), ('Contract.ShippingLongitude', None), ('Contract.ShippingPostalCode', None), ('Contract.ShippingState', None), ('Contract.ShippingStateCode', None), ('Contract.ShippingStreet', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Contract.Status', None), ('Contract.StatusCode', None), ('Contract.SystemModstamp', None), ('DataUseLegalBasis.CreatedById', None), ('DataUseLegalBasis.CreatedDate', None), ('DataUseLegalBasis.Description', None), ('DataUseLegalBasis.Id', None), ('DataUseLegalBasis.IsDeleted', None), ('DataUseLegalBasis.LastModifiedById', None), ('DataUseLegalBasis.LastModifiedDate', None), ('DataUseLegalBasis.LastReferencedDate', None), ('DataUseLegalBasis.LastViewedDate', None), ('DataUseLegalBasis.Name', None), ('DataUseLegalBasis.OwnerId', None), ('DataUseLegalBasis.Source', None), ('DataUseLegalBasis.SystemModstamp', None), ('DataUsePurpose.CanDataSubjectOptOut', None), ('DataUsePurpose.CreatedById', None), ('DataUsePurpose.CreatedDate', None), ('DataUsePurpose.Description', None), ('DataUsePurpose.Id', None), ('DataUsePurpose.IsDeleted', None), ('DataUsePurpose.LastModifiedById', None), ('DataUsePurpose.LastModifiedDate', None), ('DataUsePurpose.LastReferencedDate', None), ('DataUsePurpose.LastViewedDate', None), ('DataUsePurpose.LegalBasisId', None), ('DataUsePurpose.Name', None), ('DataUsePurpose.OwnerId', None), ('DataUsePurpose.SystemModstamp', None), ('dlrs__LookupChild__c.CreatedById', None), ('dlrs__LookupChild__c.CreatedDate', None), ('dlrs__LookupChild__c.Id', None), ('dlrs__LookupChild__c.IsDeleted', None), ('dlrs__LookupChild__c.LastModifiedById', None), ('dlrs__LookupChild__c.LastModifiedDate', None), ('dlrs__LookupChild__c.Name', None), ('dlrs__LookupChild__c.OwnerId', None), ('dlrs__LookupChild__c.SystemModstamp', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.CreatedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Id', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.IsDeleted', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedById', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.LastModifiedDate', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.Name', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.OwnerId', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c.SystemModstamp', None), ('dlrs__LookupParent__c.CreatedById', None), ('dlrs__LookupParent__c.CreatedDate', None), ('dlrs__LookupParent__c.Id', None), ('dlrs__LookupParent__c.IsDeleted', None), ('dlrs__LookupParent__c.LastModifiedById', None), ('dlrs__LookupParent__c.LastModifiedDate', None), ('dlrs__LookupParent__c.Name', None), ('dlrs__LookupParent__c.OwnerId', None), ('dlrs__LookupParent__c.SystemModstamp', None), ('dlrs__LookupRollupCalculateJob__c.CreatedById', None), ('dlrs__LookupRollupCalculateJob__c.CreatedDate', None), ('dlrs__LookupRollupCalculateJob__c.Id', None), ('dlrs__LookupRollupCalculateJob__c.IsDeleted', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedById', None), ('dlrs__LookupRollupCalculateJob__c.LastModifiedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastReferencedDate', None), ('dlrs__LookupRollupCalculateJob__c.LastViewedDate', None), ('dlrs__LookupRollupCalculateJob__c.Name', None), ('dlrs__LookupRollupCalculateJob__c.OwnerId', None), ('dlrs__LookupRollupCalculateJob__c.SystemModstamp', None), ('dlrs__LookupRollupSummary__c.CreatedById', None), ('dlrs__LookupRollupSummary__c.CreatedDate', None), ('dlrs__LookupRollupSummary__c.Id', None), ('dlrs__LookupRollupSummary__c.IsDeleted', None), ('dlrs__LookupRollupSummary__c.LastModifiedById', None), ('dlrs__LookupRollupSummary__c.LastModifiedDate', None), ('dlrs__LookupRollupSummary__c.LastReferencedDate', None), ('dlrs__LookupRollupSummary__c.LastViewedDate', None), ('dlrs__LookupRollupSummary__c.Name', None), ('dlrs__LookupRollupSummary__c.OwnerId', None), ('dlrs__LookupRollupSummary__c.SystemModstamp', None), ('dlrs__LookupRollupSummary2__mdt.DeveloperName', None), ('dlrs__LookupRollupSummary2__mdt.Id', None), ('dlrs__LookupRollupSummary2__mdt.Label', None), ('dlrs__LookupRollupSummary2__mdt.Language', None), ('dlrs__LookupRollupSummary2__mdt.MasterLabel', None), ('dlrs__LookupRollupSummary2__mdt.NamespacePrefix', None), ('dlrs__LookupRollupSummary2__mdt.QualifiedApiName', None), ('dlrs__LookupRollupSummaryLog__c.CreatedById', None), ('dlrs__LookupRollupSummaryLog__c.CreatedDate', None), ('dlrs__LookupRollupSummaryLog__c.Id', None), ('dlrs__LookupRollupSummaryLog__c.IsDeleted', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryLog__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryLog__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryLog__c.Name', None), ('dlrs__LookupRollupSummaryLog__c.OwnerId', None), ('dlrs__LookupRollupSummaryLog__c.SystemModstamp', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.CreatedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Id', None), ('dlrs__LookupRollupSummaryScheduleItems__c.IsDeleted', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedById', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastModifiedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastReferencedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.LastViewedDate', None), ('dlrs__LookupRollupSummaryScheduleItems__c.Name', None), ('dlrs__LookupRollupSummaryScheduleItems__c.SystemModstamp', None), ('DuplicateRecordItem.CreatedById', None), ('DuplicateRecordItem.CreatedDate', None), ('DuplicateRecordItem.DuplicateRecordSetId', None), ('DuplicateRecordItem.Id', None), ('DuplicateRecordItem.IsDeleted', None), ('DuplicateRecordItem.LastModifiedById', None), ('DuplicateRecordItem.LastModifiedDate', None), ('DuplicateRecordItem.Name', None), ('DuplicateRecordItem.RecordId', None), ('DuplicateRecordItem.SystemModstamp', None), ('DuplicateRecordSet.CreatedById', None), ('DuplicateRecordSet.CreatedDate', None), ('DuplicateRecordSet.DuplicateRuleId', None), ('DuplicateRecordSet.Id', None), ('DuplicateRecordSet.IsDeleted', None), ('DuplicateRecordSet.LastModifiedById', None), ('DuplicateRecordSet.LastModifiedDate', None), ('DuplicateRecordSet.LastReferencedDate', None), ('DuplicateRecordSet.LastViewedDate', None), ('DuplicateRecordSet.Name', None), ('DuplicateRecordSet.RecordCount', None), ('DuplicateRecordSet.SystemModstamp', None), ('EmailMessage.ActivityId', None), ('EmailMessage.BccAddress', None), ('EmailMessage.CcAddress', None), ('EmailMessage.CreatedById', None), ('EmailMessage.CreatedDate', None), ('EmailMessage.EmailTemplateId', None), ('EmailMessage.FirstOpenedDate', None), ('EmailMessage.FromAddress', None), ('EmailMessage.FromName', None), ('EmailMessage.HasAttachment', None), ('EmailMessage.Headers', None), ('EmailMessage.HtmlBody', None), ('EmailMessage.Id', None), ('EmailMessage.Incoming', None), ('EmailMessage.IsBounced', None), ('EmailMessage.IsClientManaged', None), ('EmailMessage.IsDeleted', None), ('EmailMessage.IsExternallyVisible', None), ('EmailMessage.IsOpened', None), ('EmailMessage.IsTracked', None), ('EmailMessage.LastModifiedById', None), ('EmailMessage.LastModifiedDate', None), ('EmailMessage.LastOpenedDate', None), ('EmailMessage.MessageDate', None), ('EmailMessage.MessageIdentifier', None), ('EmailMessage.ParentId', None), ('EmailMessage.RelatedToId', None), ('EmailMessage.ReplyToEmailMessageId', None), ('EmailMessage.Status', None), ('EmailMessage.Subject', None), ('EmailMessage.SystemModstamp', None), ('EmailMessage.TextBody', None), ('EmailMessage.ThreadIdentifier', None), ('EmailMessage.ToAddress', None), ('EmailMessage.ValidatedFromAddress', None), ('Equipment__c.CreatedById', None), ('Equipment__c.CreatedDate', None), ('Equipment__c.Id', None), ('Equipment__c.IsDeleted', None), ('Equipment__c.LastModifiedById', None), ('Equipment__c.LastModifiedDate', None), ('Equipment__c.LastReferencedDate', None), ('Equipment__c.LastViewedDate', None), ('Equipment__c.Name', None), ('Equipment__c.OwnerId', None), ('Equipment__c.SystemModstamp', None), ('Equipment_Assignment__c.CreatedById', None), ('Equipment_Assignment__c.CreatedDate', None), ('Equipment_Assignment__c.Id', None), ('Equipment_Assignment__c.IsDeleted', None), ('Equipment_Assignment__c.LastModifiedById', None), ('Equipment_Assignment__c.LastModifiedDate', None), ('Equipment_Assignment__c.LastReferencedDate', None), ('Equipment_Assignment__c.LastViewedDate', None), ('Equipment_Assignment__c.Name', None), ('Equipment_Assignment__c.SystemModstamp', None), ('FlowInterview.CreatedById', None), ('FlowInterview.CreatedDate', None), ('FlowInterview.CurrentElement', None), ('FlowInterview.Guid', None), ('FlowInterview.Id', None), ('FlowInterview.InterviewLabel', None), ('FlowInterview.IsDeleted', None), ('FlowInterview.LastModifiedById', None), ('FlowInterview.LastModifiedDate', None), ('FlowInterview.Name', None), ('FlowInterview.OwnerId', None), ('FlowInterview.PauseLabel', None), ('FlowInterview.SystemModstamp', None), ('Image.CapturedAngle', None), ('Image.ContentDocumentId', None), ('Image.CreatedById', None), ('Image.CreatedDate', None), ('Image.Id', None), ('Image.ImageAlternateText', None), ('Image.ImageClass', None), ('Image.ImageClassObjectType', None), ('Image.ImageTitle', None), ('Image.ImageUrl', None), ('Image.ImageViewType', None), ('Image.IsActive', None), ('Image.IsDeleted', None), ('Image.LastModifiedById', None), ('Image.LastModifiedDate', None), ('Image.LastReferencedDate', None), ('Image.LastViewedDate', None), ('Image.Name', None), ('Image.OwnerId', None), ('Image.SystemModstamp', None), ('Incident__c.CreatedById', None), ('Incident__c.CreatedDate', None), ('Incident__c.Id', None), ('Incident__c.IsDeleted', None), ('Incident__c.LastActivityDate', None), ('Incident__c.LastModifiedById', None), ('Incident__c.LastModifiedDate', None), ('Incident__c.Name', None), ('Incident__c.SystemModstamp', None), ('Individual.BirthDate', None), ('Individual.CanStorePiiElsewhere', None), ('Individual.ChildrenCount', None), ('Individual.ConvictionsCount', None), ('Individual.CreatedById', None), ('Individual.CreatedDate', None), ('Individual.DeathDate', None), ('Individual.FirstName', None), ('Individual.HasOptedOutGeoTracking', None), ('Individual.HasOptedOutProcessing', None), ('Individual.HasOptedOutProfiling', None), ('Individual.HasOptedOutSolicit', None), ('Individual.HasOptedOutTracking', None), ('Individual.Id', None), ('Individual.IndividualsAge', None), ('Individual.IsDeleted', None), ('Individual.IsHomeOwner', None), ('Individual.LastModifiedById', None), ('Individual.LastModifiedDate', None), ('Individual.LastName', None), ('Individual.LastViewedDate', None), ('Individual.MasterRecordId', None), ('Individual.MiddleName', None), ('Individual.MilitaryService', None), ('Individual.Name', None), ('Individual.Occupation', None), ('Individual.OwnerId', None), ('Individual.Salutation', None), ('Individual.SendIndividualData', None), ('Individual.ShouldForget', None), ('Individual.Suffix', None), ('Individual.SystemModstamp', None), ('Individual.Website', None), ('Lead.Address', None), ('Lead.City', None), ('Lead.Company', None), ('Lead.ConvertedAccountId', None), ('Lead.ConvertedContactId', None), ('Lead.ConvertedDate', None), ('Lead.ConvertedOpportunityId', None), ('Lead.Country', None), ('Lead.CountryCode', None), ('Lead.CreatedById', None), ('Lead.CreatedDate', None), ('Lead.Email', None), ('Lead.EmailBouncedDate', None), ('Lead.EmailBouncedReason', None), ('Lead.FirstName', None), ('Lead.GeocodeAccuracy', None), ('Lead.Id', None), ('Lead.IndividualId', None), ('Lead.Industry', None), ('Lead.IsConverted', None), ('Lead.IsDeleted', None), ('Lead.IsUnreadByOwner', None), ('Lead.JigsawContactId', None), ('Lead.LastActivityDate', None), ('Lead.LastModifiedById', None), ('Lead.LastModifiedDate', None), ('Lead.LastName', None), ('Lead.LastReferencedDate', None), ('Lead.LastViewedDate', None), ('Lead.Latitude', None), ('Lead.LeadSource', None), ('Lead.Longitude', None), ('Lead.MasterRecordId', None), ('Lead.MiddleName', None), ('Lead.Name', None), ('Lead.NumberOfEmployees', None), ('Lead.OwnerId', None), ('Lead.Phone', None), ('Lead.PhotoUrl', None), ('Lead.PostalCode', None), ('Lead.Salutation', None), ('Lead.State', None), ('Lead.StateCode', None), ('Lead.Status', None), ('Lead.Street', None), ('Lead.Suffix', None), ('Lead.SystemModstamp', None), ('Lead.Title', None), ('ListEmail.CampaignId', None), ('ListEmail.CreatedById', None), ('ListEmail.CreatedDate', None), ('ListEmail.FromAddress', None), ('ListEmail.FromName', None), ('ListEmail.HasAttachment', None), ('ListEmail.HtmlBody', None), ('ListEmail.Id', None), ('ListEmail.IsDeleted', None), ('ListEmail.IsTracked', None), ('ListEmail.LastModifiedById', None), ('ListEmail.LastModifiedDate', None), ('ListEmail.LastReferencedDate', None), ('ListEmail.LastViewedDate', None), ('ListEmail.Name', None), ('ListEmail.OwnerId', None), ('ListEmail.ScheduledDate', None), ('ListEmail.Status', None), ('ListEmail.Subject', None), ('ListEmail.SystemModstamp', None), ('ListEmail.TextBody', None), ('ListEmail.TotalSent', None), ('Macro.CreatedById', None), ('Macro.CreatedDate', None), ('Macro.Description', None), ('Macro.Id', None), ('Macro.IsAlohaSupported', None), ('Macro.IsDeleted', None), ('Macro.IsLightningSupported', None), ('Macro.LastModifiedById', None), ('Macro.LastModifiedDate', None), ('Macro.LastReferencedDate', None), ('Macro.LastViewedDate', None), ('Macro.Name', None), ('Macro.OwnerId', None), ('Macro.StartingContext', None), ('Macro.SystemModstamp', None), ('npe01__OppPayment__c.CreatedById', None), ('npe01__OppPayment__c.CreatedDate', None), ('npe01__OppPayment__c.Id', None), ('npe01__OppPayment__c.IsDeleted', None), ('npe01__OppPayment__c.LastModifiedById', None), ('npe01__OppPayment__c.LastModifiedDate', None), ('npe01__OppPayment__c.LastReferencedDate', None), ('npe01__OppPayment__c.LastViewedDate', None), ('npe01__OppPayment__c.Name', None), ('npe01__OppPayment__c.SystemModstamp', None), ('npe03__Recurring_Donation__c.CreatedById', None), ('npe03__Recurring_Donation__c.CreatedDate', None), ('npe03__Recurring_Donation__c.Id', None), ('npe03__Recurring_Donation__c.IsDeleted', None), ('npe03__Recurring_Donation__c.LastActivityDate', None), ('npe03__Recurring_Donation__c.LastModifiedById', None), ('npe03__Recurring_Donation__c.LastModifiedDate', None), ('npe03__Recurring_Donation__c.LastReferencedDate', None), ('npe03__Recurring_Donation__c.LastViewedDate', None), ('npe03__Recurring_Donation__c.Name', None), ('npe03__Recurring_Donation__c.OwnerId', None), ('npe03__Recurring_Donation__c.SystemModstamp', None), ('npe4__Relationship__c.CreatedById', None), ('npe4__Relationship__c.CreatedDate', None), ('npe4__Relationship__c.Id', None), ('npe4__Relationship__c.IsDeleted', None), ('npe4__Relationship__c.LastModifiedById', None), ('npe4__Relationship__c.LastModifiedDate', None), ('npe4__Relationship__c.LastReferencedDate', None), ('npe4__Relationship__c.LastViewedDate', None), ('npe4__Relationship__c.Name', None), ('npe4__Relationship__c.SystemModstamp', None), ('npe4__Relationship_Error__c.CreatedById', None), ('npe4__Relationship_Error__c.CreatedDate', None), ('npe4__Relationship_Error__c.Id', None), ('npe4__Relationship_Error__c.IsDeleted', None), ('npe4__Relationship_Error__c.LastModifiedById', None), ('npe4__Relationship_Error__c.LastModifiedDate', None), ('npe4__Relationship_Error__c.Name', None), ('npe4__Relationship_Error__c.OwnerId', None), ('npe4__Relationship_Error__c.SystemModstamp', None), ('npe5__Affiliation__c.CreatedById', None), ('npe5__Affiliation__c.CreatedDate', None), ('npe5__Affiliation__c.Id', None), ('npe5__Affiliation__c.IsDeleted', None), ('npe5__Affiliation__c.LastModifiedById', None), ('npe5__Affiliation__c.LastModifiedDate', None), ('npe5__Affiliation__c.LastReferencedDate', None), ('npe5__Affiliation__c.LastViewedDate', None), ('npe5__Affiliation__c.Name', None), ('npe5__Affiliation__c.SystemModstamp', None), ('npo02__Household__c.CreatedById', None), ('npo02__Household__c.CreatedDate', None), ('npo02__Household__c.Id', None), ('npo02__Household__c.IsDeleted', None), ('npo02__Household__c.LastActivityDate', None), ('npo02__Household__c.LastModifiedById', None), ('npo02__Household__c.LastModifiedDate', None), ('npo02__Household__c.LastReferencedDate', None), ('npo02__Household__c.LastViewedDate', None), ('npo02__Household__c.Name', None), ('npo02__Household__c.OwnerId', None), ('npo02__Household__c.SystemModstamp', None), ('npsp__Account_Soft_Credit__c.CreatedById', None), ('npsp__Account_Soft_Credit__c.CreatedDate', None), ('npsp__Account_Soft_Credit__c.Id', None), ('npsp__Account_Soft_Credit__c.IsDeleted', None), ('npsp__Account_Soft_Credit__c.LastModifiedById', None), ('npsp__Account_Soft_Credit__c.LastModifiedDate', None), ('npsp__Account_Soft_Credit__c.Name', None), ('npsp__Account_Soft_Credit__c.SystemModstamp', None), ('npsp__Address__c.CreatedById', None), ('npsp__Address__c.CreatedDate', None), ('npsp__Address__c.Id', None), ('npsp__Address__c.IsDeleted', None), ('npsp__Address__c.LastModifiedById', None), ('npsp__Address__c.LastModifiedDate', None), ('npsp__Address__c.LastReferencedDate', None), ('npsp__Address__c.LastViewedDate', None), ('npsp__Address__c.Name', None), ('npsp__Address__c.SystemModstamp', None), ('npsp__Allocation__c.CreatedById', None), ('npsp__Allocation__c.CreatedDate', None), ('npsp__Allocation__c.Id', None), ('npsp__Allocation__c.IsDeleted', None), ('npsp__Allocation__c.LastModifiedById', None), ('npsp__Allocation__c.LastModifiedDate', None), ('npsp__Allocation__c.Name', None), ('npsp__Allocation__c.OwnerId', None), ('npsp__Allocation__c.SystemModstamp', None), ('npsp__Batch__c.CreatedById', None), ('npsp__Batch__c.CreatedDate', None), ('npsp__Batch__c.Id', None), ('npsp__Batch__c.IsDeleted', None), ('npsp__Batch__c.LastModifiedById', None), ('npsp__Batch__c.LastModifiedDate', None), ('npsp__Batch__c.Name', None), ('npsp__Batch__c.OwnerId', None), ('npsp__Batch__c.SystemModstamp', None), ('npsp__DataImport__c.CreatedById', None), ('npsp__DataImport__c.CreatedDate', None), ('npsp__DataImport__c.Id', None), ('npsp__DataImport__c.IsDeleted', None), ('npsp__DataImport__c.LastModifiedById', None), ('npsp__DataImport__c.LastModifiedDate', None), ('npsp__DataImport__c.LastReferencedDate', None), ('npsp__DataImport__c.LastViewedDate', None), ('npsp__DataImport__c.Name', None), ('npsp__DataImport__c.OwnerId', None), ('npsp__DataImport__c.SystemModstamp', None), ('npsp__DataImportBatch__c.CreatedById', None), ('npsp__DataImportBatch__c.CreatedDate', None), ('npsp__DataImportBatch__c.Id', None), ('npsp__DataImportBatch__c.IsDeleted', None), ('npsp__DataImportBatch__c.LastModifiedById', None), ('npsp__DataImportBatch__c.LastModifiedDate', None), ('npsp__DataImportBatch__c.LastReferencedDate', None), ('npsp__DataImportBatch__c.LastViewedDate', None), ('npsp__DataImportBatch__c.Name', None), ('npsp__DataImportBatch__c.OwnerId', None), ('npsp__DataImportBatch__c.SystemModstamp', None), ('npsp__Engagement_Plan__c.CreatedById', None), ('npsp__Engagement_Plan__c.CreatedDate', None), ('npsp__Engagement_Plan__c.Id', None), ('npsp__Engagement_Plan__c.IsDeleted', None), ('npsp__Engagement_Plan__c.LastActivityDate', None), ('npsp__Engagement_Plan__c.LastModifiedById', None), ('npsp__Engagement_Plan__c.LastModifiedDate', None), ('npsp__Engagement_Plan__c.Name', None), ('npsp__Engagement_Plan__c.SystemModstamp', None), ('npsp__Engagement_Plan_Task__c.CreatedById', None), ('npsp__Engagement_Plan_Task__c.CreatedDate', None), ('npsp__Engagement_Plan_Task__c.Id', None), ('npsp__Engagement_Plan_Task__c.IsDeleted', None), ('npsp__Engagement_Plan_Task__c.LastModifiedById', None), ('npsp__Engagement_Plan_Task__c.LastModifiedDate', None), ('npsp__Engagement_Plan_Task__c.Name', None), ('npsp__Engagement_Plan_Task__c.SystemModstamp', None), ('npsp__Engagement_Plan_Template__c.CreatedById', None), ('npsp__Engagement_Plan_Template__c.CreatedDate', None), ('npsp__Engagement_Plan_Template__c.Id', None), ('npsp__Engagement_Plan_Template__c.IsDeleted', None), ('npsp__Engagement_Plan_Template__c.LastActivityDate', None), ('npsp__Engagement_Plan_Template__c.LastModifiedById', None), ('npsp__Engagement_Plan_Template__c.LastModifiedDate', None), ('npsp__Engagement_Plan_Template__c.LastReferencedDate', None), ('npsp__Engagement_Plan_Template__c.LastViewedDate', None), ('npsp__Engagement_Plan_Template__c.Name', None), ('npsp__Engagement_Plan_Template__c.OwnerId', None), ('npsp__Engagement_Plan_Template__c.SystemModstamp', None), ('npsp__Error__c.CreatedById', None), ('npsp__Error__c.CreatedDate', None), ('npsp__Error__c.Id', None), ('npsp__Error__c.IsDeleted', None), ('npsp__Error__c.LastModifiedById', None), ('npsp__Error__c.LastModifiedDate', None), ('npsp__Error__c.Name', None), ('npsp__Error__c.OwnerId', None), ('npsp__Error__c.SystemModstamp', None), ('npsp__Filter_Group__mdt.DeveloperName', None), ('npsp__Filter_Group__mdt.Id', None), ('npsp__Filter_Group__mdt.Label', None), ('npsp__Filter_Group__mdt.Language', None), ('npsp__Filter_Group__mdt.MasterLabel', None), ('npsp__Filter_Group__mdt.NamespacePrefix', None), ('npsp__Filter_Group__mdt.QualifiedApiName', None), ('npsp__Filter_Rule__mdt.DeveloperName', None), ('npsp__Filter_Rule__mdt.Id', None), ('npsp__Filter_Rule__mdt.Label', None), ('npsp__Filter_Rule__mdt.Language', None), ('npsp__Filter_Rule__mdt.MasterLabel', None), ('npsp__Filter_Rule__mdt.NamespacePrefix', None), ('npsp__Filter_Rule__mdt.QualifiedApiName', None), ('npsp__Fund__c.CreatedById', None), ('npsp__Fund__c.CreatedDate', None), ('npsp__Fund__c.Id', None), ('npsp__Fund__c.IsDeleted', None), ('npsp__Fund__c.LastActivityDate', None), ('npsp__Fund__c.LastModifiedById', None), ('npsp__Fund__c.LastModifiedDate', None), ('npsp__Fund__c.Name', None), ('npsp__Fund__c.OwnerId', None), ('npsp__Fund__c.SystemModstamp', None), ('npsp__General_Accounting_Unit__c.CreatedById', None), ('npsp__General_Accounting_Unit__c.CreatedDate', None), ('npsp__General_Accounting_Unit__c.Id', None), ('npsp__General_Accounting_Unit__c.IsDeleted', None), ('npsp__General_Accounting_Unit__c.LastActivityDate', None), ('npsp__General_Accounting_Unit__c.LastModifiedById', None), ('npsp__General_Accounting_Unit__c.LastModifiedDate', None), ('npsp__General_Accounting_Unit__c.LastReferencedDate', None), ('npsp__General_Accounting_Unit__c.LastViewedDate', None), ('npsp__General_Accounting_Unit__c.Name', None), ('npsp__General_Accounting_Unit__c.OwnerId', None), ('npsp__General_Accounting_Unit__c.SystemModstamp', None), ('npsp__Grant_Deadline__c.CreatedById', None), ('npsp__Grant_Deadline__c.CreatedDate', None), ('npsp__Grant_Deadline__c.Id', None), ('npsp__Grant_Deadline__c.IsDeleted', None), ('npsp__Grant_Deadline__c.LastActivityDate', None), ('npsp__Grant_Deadline__c.LastModifiedById', None), ('npsp__Grant_Deadline__c.LastModifiedDate', None), ('npsp__Grant_Deadline__c.Name', None), ('npsp__Grant_Deadline__c.SystemModstamp', None), ('npsp__Level__c.CreatedById', None), ('npsp__Level__c.CreatedDate', None), ('npsp__Level__c.Id', None), ('npsp__Level__c.IsDeleted', None), ('npsp__Level__c.LastModifiedById', None), ('npsp__Level__c.LastModifiedDate', None), ('npsp__Level__c.LastReferencedDate', None), ('npsp__Level__c.LastViewedDate', None), ('npsp__Level__c.Name', None), ('npsp__Level__c.OwnerId', None), ('npsp__Level__c.SystemModstamp', None), ('npsp__Partial_Soft_Credit__c.CreatedById', None), ('npsp__Partial_Soft_Credit__c.CreatedDate', None), ('npsp__Partial_Soft_Credit__c.Id', None), ('npsp__Partial_Soft_Credit__c.IsDeleted', None), ('npsp__Partial_Soft_Credit__c.LastModifiedById', None), ('npsp__Partial_Soft_Credit__c.LastModifiedDate', None), ('npsp__Partial_Soft_Credit__c.Name', None), ('npsp__Partial_Soft_Credit__c.SystemModstamp', None), ('npsp__Rollup__mdt.DeveloperName', None), ('npsp__Rollup__mdt.Id', None), ('npsp__Rollup__mdt.Label', None), ('npsp__Rollup__mdt.Language', None), ('npsp__Rollup__mdt.MasterLabel', None), ('npsp__Rollup__mdt.NamespacePrefix', None), ('npsp__Rollup__mdt.QualifiedApiName', None), ('npsp__Schedulable__c.CreatedById', None), ('npsp__Schedulable__c.CreatedDate', None), ('npsp__Schedulable__c.Id', None), ('npsp__Schedulable__c.IsDeleted', None), ('npsp__Schedulable__c.LastModifiedById', None), ('npsp__Schedulable__c.LastModifiedDate', None), ('npsp__Schedulable__c.Name', None), ('npsp__Schedulable__c.OwnerId', None), ('npsp__Schedulable__c.SystemModstamp', None), ('npsp__Trigger_Handler__c.CreatedById', None), ('npsp__Trigger_Handler__c.CreatedDate', None), ('npsp__Trigger_Handler__c.Id', None), ('npsp__Trigger_Handler__c.IsDeleted', None), ('npsp__Trigger_Handler__c.LastModifiedById', None), ('npsp__Trigger_Handler__c.LastModifiedDate', None), ('npsp__Trigger_Handler__c.Name', None), ('npsp__Trigger_Handler__c.OwnerId', None), ('npsp__Trigger_Handler__c.SystemModstamp', None), ('Opportunity.AccountId', None), ('Opportunity.Amount', None), ('Opportunity.CampaignId', None), ('Opportunity.CloseDate', None), ('Opportunity.CreatedById', None), ('Opportunity.CreatedDate', None), ('Opportunity.Description', None), ('Opportunity.Fiscal', None), ('Opportunity.FiscalQuarter', None), ('Opportunity.FiscalYear', None), ('Opportunity.ForecastCategory', None), ('Opportunity.ForecastCategoryName', None), ('Opportunity.HasOpenActivity', None), ('Opportunity.HasOpportunityLineItem', None), ('Opportunity.HasOverdueTask', None), ('Opportunity.Id', None), ('Opportunity.IsClosed', None), ('Opportunity.IsDeleted', None), ('Opportunity.IsWon', None), ('Opportunity.LastActivityDate', None), ('Opportunity.LastModifiedById', None), ('Opportunity.LastModifiedDate', None), ('Opportunity.LastReferencedDate', None), ('Opportunity.LastViewedDate', None), ('Opportunity.LeadSource', None), ('Opportunity.Name', None), ('Opportunity.NextStep', None), ('Opportunity.OwnerId', None), ('Opportunity.Pricebook2Id', None), ('Opportunity.Probability', None), ('Opportunity.RecordTypeId', None), ('Opportunity.StageName', None), ('Opportunity.SyncedQuoteId', None), ('Opportunity.SystemModstamp', None), ('Opportunity.Type', None), ('Order.AccountId', None), ('Order.ActivatedById', None), ('Order.ActivatedDate', None), ('Order.BillingAddress', None), ('Order.BillingCity', None), ('Order.BillingCountry', None), ('Order.BillingCountryCode', None), ('Order.BillingGeocodeAccuracy', None), ('Order.BillingLatitude', None), ('Order.BillingLongitude', None), ('Order.BillingPostalCode', None), ('Order.BillingState', None), ('Order.BillingStateCode', None), ('Order.BillingStreet', None), ('Order.CompanyAuthorizedById', None), ('Order.ContractId', None), ('Order.CreatedById', None), ('Order.CreatedDate', None), ('Order.CustomerAuthorizedById', None), ('Order.Description', None), ('Order.EffectiveDate', None), ('Order.EndDate', None), ('Order.Id', None), ('Order.IsDeleted', None), ('Order.IsReductionOrder', None), ('Order.LastModifiedById', None), ('Order.LastModifiedDate', None), ('Order.LastReferencedDate', None), ('Order.LastViewedDate', None), ('Order.OrderNumber', None), ('Order.OriginalOrderId', None), ('Order.OwnerId', None), ('Order.Pricebook2Id', None), ('Order.ShippingAddress', None), ('Order.ShippingCity', None), ('Order.ShippingCountry', None), ('Order.ShippingCountryCode', None), ('Order.ShippingGeocodeAccuracy', None), ('Order.ShippingLatitude', None), ('Order.ShippingLongitude', None), ('Order.ShippingPostalCode', None), ('Order.ShippingState', None), ('Order.ShippingStateCode', None), ('Order.ShippingStreet', None), ('Order.Status', None), ('Order.StatusCode', None), ('Order.SystemModstamp', None), ('Order.TotalAmount', None), ('Order.Type', None), ('Pricebook2.CreatedById', None), ('Pricebook2.CreatedDate', None), ('Pricebook2.Description', None), ('Pricebook2.Id', None), ('Pricebook2.IsActive', None), ('Pricebook2.IsArchived', None), ('Pricebook2.IsDeleted', None), ('Pricebook2.IsStandard', None), ('Pricebook2.LastModifiedById', None), ('Pricebook2.LastModifiedDate', None), ('Pricebook2.LastReferencedDate', None), ('Pricebook2.LastViewedDate', None), ('Pricebook2.Name', None), ('Pricebook2.SystemModstamp', None), ('PricebookEntry.CreatedById', None), ('PricebookEntry.CreatedDate', None), ('PricebookEntry.Id', None), ('PricebookEntry.IsActive', None), ('PricebookEntry.IsArchived', None), ('PricebookEntry.IsDeleted', None), ('PricebookEntry.LastModifiedById', None), ('PricebookEntry.LastModifiedDate', None), ('PricebookEntry.Name', None), ('PricebookEntry.Pricebook2Id', None), ('PricebookEntry.Product2Id', None), ('PricebookEntry.ProductCode', None), ('PricebookEntry.SystemModstamp', None), ('PricebookEntry.UnitPrice', None), ('PricebookEntry.UseStandardPrice', None), ('Product2.CreatedById', None), ('Product2.CreatedDate', None), ('Product2.Description', None), ('Product2.DisplayUrl', None), ('Product2.ExternalDataSourceId', None), ('Product2.ExternalId', None), ('Product2.Family', None), ('Product2.Id', None), ('Product2.IsActive', None), ('Product2.IsArchived', None), ('Product2.IsDeleted', None), ('Product2.LastModifiedById', None), ('Product2.LastModifiedDate', None), ('Product2.LastReferencedDate', None), ('Product2.LastViewedDate', None), ('Product2.Name', None), ('Product2.ProductCode', None), ('Product2.QuantityUnitOfMeasure', None), ('Product2.StockKeepingUnit', None), ('Product2.SystemModstamp', None), ('QuickText.Category', None), ('QuickText.Channel', None), ('QuickText.CreatedById', None), ('QuickText.CreatedDate', None), ('QuickText.Id', None), ('QuickText.IsDeleted', None), ('QuickText.LastModifiedById', None), ('QuickText.LastModifiedDate', None), ('QuickText.LastReferencedDate', None), ('QuickText.LastViewedDate', None), ('QuickText.Message', None), ('QuickText.Name', None), ('QuickText.OwnerId', None), ('QuickText.SystemModstamp', None), ('Quote.AccountId', None), ('Quote.BillingAddress', None), ('Quote.BillingCity', None), ('Quote.BillingCountry', None), ('Quote.BillingCountryCode', None), ('Quote.BillingGeocodeAccuracy', None), ('Quote.BillingLatitude', None), ('Quote.BillingLongitude', None), ('Quote.BillingName', None), ('Quote.BillingPostalCode', None), ('Quote.BillingState', None), ('Quote.BillingStateCode', None), ('Quote.BillingStreet', None), ('Quote.CanCreateQuoteLineItems', None), ('Quote.ContactId', None), ('Quote.CreatedById', None), ('Quote.CreatedDate', None), ('Quote.Description', None), ('Quote.Discount', None), ('Quote.Email', None), ('Quote.ExpirationDate', None), ('Quote.Fax', None), ('Quote.GrandTotal', None), ('Quote.Id', None), ('Quote.IsDeleted', None), ('Quote.IsSyncing', None), ('Quote.LastModifiedById', None), ('Quote.LastModifiedDate', None), ('Quote.LastReferencedDate', None), ('Quote.LastViewedDate', None), ('Quote.LineItemCount', None), ('Quote.Name', None), ('Quote.OpportunityId', None), ('Quote.OwnerId', None), ('Quote.Phone', None), ('Quote.Pricebook2Id', None), ('Quote.QuoteNumber', None), ('Quote.ShippingAddress', None), ('Quote.ShippingCity', None), ('Quote.ShippingCountry', None), ('Quote.ShippingCountryCode', None), ('Quote.ShippingGeocodeAccuracy', None), ('Quote.ShippingHandling', None), ('Quote.ShippingLatitude', None), ('Quote.ShippingLongitude', None), ('Quote.ShippingName', None), ('Quote.ShippingPostalCode', None), ('Quote.ShippingState', None), ('Quote.ShippingStateCode', None), ('Quote.ShippingStreet', None), ('Quote.Status', None), ('Quote.Subtotal', None), ('Quote.SystemModstamp', None), ('Quote.Tax', None), ('Quote.TotalPrice', None), ('QuoteLineItem.CreatedById', None), ('QuoteLineItem.CreatedDate', None), ('QuoteLineItem.Description', None), ('QuoteLineItem.Discount', None), ('QuoteLineItem.Id', None), ('QuoteLineItem.IsDeleted', None), ('QuoteLineItem.LastModifiedById', None), ('QuoteLineItem.LastModifiedDate', None), ('QuoteLineItem.LastReferencedDate', None), ('QuoteLineItem.LastViewedDate', None), ('QuoteLineItem.LineNumber', None), ('QuoteLineItem.ListPrice', None), ('QuoteLineItem.OpportunityLineItemId', None), ('QuoteLineItem.PricebookEntryId', None), ('QuoteLineItem.Product2Id', None), ('QuoteLineItem.Quantity', None), ('QuoteLineItem.QuoteId', None), ('QuoteLineItem.SortOrder', None), ('QuoteLineItem.Subtotal', None), ('QuoteLineItem.SystemModstamp', None), ('QuoteLineItem.TotalPrice', None), ('QuoteLineItem.UnitPrice', None), ('Recommendation.AcceptanceLabel', None), ('Recommendation.ActionReference', None), ('Recommendation.CreatedById', None), ('Recommendation.CreatedDate', None), ('Recommendation.Description', None), ('Recommendation.Id', None), ('Recommendation.ImageId', None), ('Recommendation.IsActionActive', None), ('Recommendation.IsDeleted', None), ('Recommendation.LastModifiedById', None), ('Recommendation.LastModifiedDate', None), ('Recommendation.LastReferencedDate', None), ('Recommendation.LastViewedDate', None), ('Recommendation.Name', None), ('Recommendation.RejectionLabel', None), ('Recommendation.SystemModstamp', None), ('SocialPersona.AuthorLabels', None), ('SocialPersona.CreatedById', None), ('SocialPersona.CreatedDate', None), ('SocialPersona.ExternalId', None), ('SocialPersona.ExternalPictureURL', None), ('SocialPersona.Id', None), ('SocialPersona.InfluencerScore', None), ('SocialPersona.IsDefault', None), ('SocialPersona.IsDeleted', None), ('SocialPersona.IsVerified', None), ('SocialPersona.LastModifiedById', None), ('SocialPersona.LastModifiedDate', None), ('SocialPersona.LastReferencedDate', None), ('SocialPersona.LastViewedDate', None), ('SocialPersona.Name', None), ('SocialPersona.ParentId', None), ('SocialPersona.ProfileUrl', None), ('SocialPersona.Provider', None), ('SocialPersona.SystemModstamp', None), ('SocialPost.Content', None), ('SocialPost.CreatedById', None), ('SocialPost.CreatedDate', None), ('SocialPost.Handle', None), ('SocialPost.Headline', None), ('SocialPost.HiddenById', None), ('SocialPost.Id', None), ('SocialPost.IsDeleted', None), ('SocialPost.LastModifiedById', None), ('SocialPost.LastModifiedDate', None), ('SocialPost.LastReferencedDate', None), ('SocialPost.LastViewedDate', None), ('SocialPost.LikedBy', None), ('SocialPost.Name', None), ('SocialPost.Notes', None), ('SocialPost.OwnerId', None), ('SocialPost.ParentId', None), ('SocialPost.PersonaId', None), ('SocialPost.Posted', None), ('SocialPost.PostUrl', None), ('SocialPost.Provider', None), ('SocialPost.ReviewScale', None), ('SocialPost.ReviewScore', None), ('SocialPost.SystemModstamp', None), ('SocialPost.TruncatedContent', None), ('SocialPost.WhoId', None), ('Solution.CreatedById', None), ('Solution.CreatedDate', None), ('Solution.Id', None), ('Solution.IsDeleted', None), ('Solution.IsHtml', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.IsReviewed', None), ('Solution.LastModifiedById', None), ('Solution.LastModifiedDate', None), ('Solution.LastReferencedDate', None), ('Solution.LastViewedDate', None), ('Solution.OwnerId', None), ('Solution.SolutionName', None), ('Solution.SolutionNote', None), ('Solution.SolutionNumber', None), ('Solution.Status', None), ('Solution.SystemModstamp', None), ('Solution.TimesUsed', None), ('Survey__c.CreatedById', None), ('Survey__c.CreatedDate', None), ('Survey__c.Id', None), ('Survey__c.IsDeleted', None), ('Survey__c.LastModifiedById', None), ('Survey__c.LastModifiedDate', None), ('Survey__c.Name', None), ('Survey__c.RecordTypeId', None), ('Survey__c.SystemModstamp', None), ('Task.AccountId', None), ('Task.ActivityDate', None), ('Task.CallDisposition', None), ('Task.CallDurationInSeconds', None), ('Task.CallObject', None), ('Task.CallType', None), ('Task.CompletedDateTime', None), ('Task.CreatedById', None), ('Task.CreatedDate', None), ('Task.Description', None), ('Task.Id', None), ('Task.IsArchived', None), ('Task.IsClosed', None), ('Task.IsDeleted', None), ('Task.IsHighPriority', None), ('Task.IsRecurrence', None), ('Task.IsReminderSet', None), ('Task.LastModifiedById', None), ('Task.LastModifiedDate', None), ('Task.OwnerId', None), ('Task.Priority', None), ('Task.RecurrenceActivityId', None), ('Task.RecurrenceDayOfMonth', None), ('Task.RecurrenceDayOfWeekMask', None), ('Task.RecurrenceEndDateOnly', None), ('Task.RecurrenceInstance', None), ('Task.RecurrenceInterval', None), ('Task.RecurrenceMonthOfYear', None), ('Task.RecurrenceRegeneratedType', None), ('Task.RecurrenceStartDateOnly', None), ('Task.RecurrenceTimeZoneSidKey', None), ('Task.RecurrenceType', None), ('Task.ReminderDateTime', None), ('Task.Status', None), ('Task.Subject', None), ('Task.SystemModstamp', None), ('Task.TaskSubtype', None), ('Task.Type', None), ('Task.WhatCount', None), ('Task.WhatId', None), ('Task.WhoCount', None), ('Task.WhoId', None), ('Topic.CreatedById', None), ('Topic.CreatedDate', None), ('Topic.Description', None), ('Topic.Id', None), ('Topic.ManagedTopicType', None), ('Topic.Name', None), ('Topic.SystemModstamp', None), ('Topic.TalkingAbout', None), ('User.AboutMe', None), ('User.AccountId', None), ('User.Address', None), ('User.Alias', None), ('User.BadgeText', None), ('User.BannerPhotoUrl', None), ('User.CallCenterId', None), ('User.City', None), ('User.CommunityNickname', None), ('User.CompanyName', None), ('User.ContactId', None), ('User.Country', None), ('User.CountryCode', None), ('User.CreatedById', None), ('User.CreatedDate', None), ('User.DefaultGroupNotificationFrequency', None), ('User.DelegatedApproverId', None), ('User.Department', None), ('User.DigestFrequency', None), ('User.Division', None), ('User.Email', None), ('User.EmailEncodingKey', None), ('User.EmailPreferencesAutoBcc', None), ('User.EmailPreferencesAutoBccStayInTouch', None), ('User.EmailPreferencesStayInTouchReminder', None), ('User.EmployeeNumber', None), ('User.Extension', None), ('User.Fax', None), ('User.FederationIdentifier', None), ('User.FirstName', None), ('User.ForecastEnabled', None), ('User.FullPhotoUrl', None), ('User.GeocodeAccuracy', None), ('User.Id', None), ('User.IndividualId', None), ('User.IsActive', None), ('User.IsExtIndicatorVisible', None), ('User.IsProfilePhotoActive', None), ('User.LanguageLocaleKey', None), ('User.LastLoginDate', None), ('User.LastModifiedById', None), ('User.LastModifiedDate', None), ('User.LastName', None), ('User.LastPasswordChangeDate', None), ('User.LastReferencedDate', None), ('User.LastViewedDate', None), ('User.Latitude', None), ('User.LocaleSidKey', None), ('User.Longitude', None), ('User.ManagerId', None), ('User.MediumBannerPhotoUrl', None), ('User.MediumPhotoUrl', None), ('User.MiddleName', None), ('User.MobilePhone', None), ('User.Name', None), ('User.OfflinePdaTrialExpirationDate', None), ('User.OfflineTrialExpirationDate', None), ('User.OutOfOfficeMessage', None), ('User.Phone', None), ('User.PostalCode', None), ('User.ProfileId', None), ('User.ReceivesAdminInfoEmails', None), ('User.ReceivesInfoEmails', None), ('User.SenderEmail', None), ('User.SenderName', None), ('User.Signature', None), ('User.SmallBannerPhotoUrl', None), ('User.SmallPhotoUrl', None), ('User.State', None), ('User.StateCode', None), ('User.StayInTouchNote', None), ('User.StayInTouchSignature', None), ('User.StayInTouchSubject', None), ('User.Street', None), ('User.Suffix', None), ('User.SystemModstamp', None), ('User.TimeZoneSidKey', None), ('User.Title', None), ('User.Username', None), ('User.UserPermissionsAvantgoUser', None), ('User.UserPermissionsCallCenterAutoLogin', None), ('User.UserPermissionsChatterAnswersUser', None), ('User.UserPermissionsInteractionUser', None), ('User.UserPermissionsMarketingUser', None), ('User.UserPermissionsMobileUser', None), ('User.UserPermissionsOfflineUser', None), ('User.UserPermissionsSFContentUser', None), ('User.UserPermissionsSupportUser', None), ('User.UserPreferencesActivityRemindersPopup', None), ('User.UserPreferencesApexPagesDeveloperMode', None), ('User.UserPreferencesCacheDiagnostics', None), ('User.UserPreferencesCreateLEXAppsWTShown', None), ('User.UserPreferencesDisableAllFeedsEmail', None), ('User.UserPreferencesDisableBookmarkEmail', None), ('User.UserPreferencesDisableChangeCommentEmail', None), ('User.UserPreferencesDisableEndorsementEmail', None), ('User.UserPreferencesDisableFileShareNotificationsForApi', None), ('User.UserPreferencesDisableFollowersEmail', None), ('User.UserPreferencesDisableLaterCommentEmail', None), ('User.UserPreferencesDisableLikeEmail', None), ('User.UserPreferencesDisableMentionsPostEmail', None), ('User.UserPreferencesDisableMessageEmail', None), ('User.UserPreferencesDisableProfilePostEmail', None), ('User.UserPreferencesDisableSharePostEmail', None), ('User.UserPreferencesDisCommentAfterLikeEmail', None), ('User.UserPreferencesDisMentionsCommentEmail', None), ('User.UserPreferencesDisProfPostCommentEmail', None), ('User.UserPreferencesEnableAutoSubForFeeds', None), ('User.UserPreferencesEventRemindersCheckboxDefault', None), ('User.UserPreferencesExcludeMailAppAttachments', None), ('User.UserPreferencesFavoritesShowTopFavorites', None), ('User.UserPreferencesFavoritesWTShown', None), ('User.UserPreferencesGlobalNavBarWTShown', None), ('User.UserPreferencesGlobalNavGridMenuWTShown', None), ('User.UserPreferencesHasCelebrationBadge', None), ('User.UserPreferencesHideBiggerPhotoCallout', None), ('User.UserPreferencesHideChatterOnboardingSplash', None), ('User.UserPreferencesHideCSNDesktopTask', None), ('User.UserPreferencesHideCSNGetChatterMobileTask', None), ('User.UserPreferencesHideEndUserOnboardingAssistantModal', None), ('User.UserPreferencesHideLightningMigrationModal', None), ('User.UserPreferencesHideS1BrowserUI', None), ('User.UserPreferencesHideSecondChatterOnboardingSplash', None), ('User.UserPreferencesHideSfxWelcomeMat', None), ('User.UserPreferencesLightningExperiencePreferred', None), ('User.UserPreferencesNewLightningReportRunPageEnabled', None), ('User.UserPreferencesPathAssistantCollapsed', None), ('User.UserPreferencesPipelineViewHideHelpPopover', None), ('User.UserPreferencesPreviewCustomTheme', None), ('User.UserPreferencesPreviewLightning', None), ('User.UserPreferencesRecordHomeReservedWTShown', None), ('User.UserPreferencesRecordHomeSectionCollapseWTShown', None), ('User.UserPreferencesReminderSoundOff', None), ('User.UserPreferencesShowCityToExternalUsers', None), ('User.UserPreferencesShowCityToGuestUsers', None), ('User.UserPreferencesShowCountryToExternalUsers', None), ('User.UserPreferencesShowCountryToGuestUsers', None), ('User.UserPreferencesShowEmailToExternalUsers', None), ('User.UserPreferencesShowEmailToGuestUsers', None), ('User.UserPreferencesShowFaxToExternalUsers', None), ('User.UserPreferencesShowFaxToGuestUsers', None), ('User.UserPreferencesShowManagerToExternalUsers', None), ('User.UserPreferencesShowManagerToGuestUsers', None), ('User.UserPreferencesShowMobilePhoneToExternalUsers', None), ('User.UserPreferencesShowMobilePhoneToGuestUsers', None), ('User.UserPreferencesShowPostalCodeToExternalUsers', None), ('User.UserPreferencesShowPostalCodeToGuestUsers', None), ('User.UserPreferencesShowProfilePicToGuestUsers', None), ('User.UserPreferencesShowStateToExternalUsers', None), ('User.UserPreferencesShowStateToGuestUsers', None), ('User.UserPreferencesShowStreetAddressToExternalUsers', None), ('User.UserPreferencesShowStreetAddressToGuestUsers', None), ('User.UserPreferencesShowTitleToExternalUsers', None), ('User.UserPreferencesShowTitleToGuestUsers', None), ('User.UserPreferencesShowWorkPhoneToExternalUsers', None), ('User.UserPreferencesShowWorkPhoneToGuestUsers', None), ('User.UserPreferencesSortFeedByComment', None), ('User.UserPreferencesSuppressEventSFXReminders', None), ('User.UserPreferencesSuppressTaskSFXReminders', None), ('User.UserPreferencesTaskRemindersCheckboxDefault', None), ('User.UserPreferencesUserDebugModePref', None), ('User.UserRoleId', None), ('User.UserType', None), ('UserAppMenuItem.ApplicationId', None), ('UserAppMenuItem.AppMenuItemId', None), ('UserAppMenuItem.Description', None), ('UserAppMenuItem.IconUrl', None), ('UserAppMenuItem.Id', None), ('UserAppMenuItem.InfoUrl', None), ('UserAppMenuItem.IsUsingAdminAuthorization', None), ('UserAppMenuItem.IsVisible', None), ('UserAppMenuItem.Label', None), ('UserAppMenuItem.LogoUrl', None), ('UserAppMenuItem.MobileStartUrl', None), ('UserAppMenuItem.Name', None), ('UserAppMenuItem.SortOrder', None), ('UserAppMenuItem.StartUrl', None), ('UserAppMenuItem.Type', None), ('UserAppMenuItem.UserSortOrder', None), ('WorkBadge.CreatedById', None), ('WorkBadge.CreatedDate', None), ('WorkBadge.DefinitionId', None), ('WorkBadge.Description', None), ('WorkBadge.GiverId', None), ('WorkBadge.Id', None), ('WorkBadge.ImageUrl', None), ('WorkBadge.IsDeleted', None), ('WorkBadge.LastModifiedById', None), ('WorkBadge.LastModifiedDate', None), ('WorkBadge.LastReferencedDate', None), ('WorkBadge.LastViewedDate', None), ('WorkBadge.Message', None), ('WorkBadge.RecipientId', None), ('WorkBadge.SourceId', None), ('WorkBadge.SystemModstamp', None), ('WorkBadgeDefinition.CreatedById', None), ('WorkBadgeDefinition.CreatedDate', None), ('WorkBadgeDefinition.Description', None), ('WorkBadgeDefinition.GivenBadgeCount', None), ('WorkBadgeDefinition.Id', None), ('WorkBadgeDefinition.ImageUrl', None), ('WorkBadgeDefinition.IsActive', None), ('WorkBadgeDefinition.IsCompanyWide', None), ('WorkBadgeDefinition.IsDeleted', None), ('WorkBadgeDefinition.IsLimitPerUser', None), ('WorkBadgeDefinition.IsRewardBadge', None), ('WorkBadgeDefinition.LastModifiedById', None), ('WorkBadgeDefinition.LastModifiedDate', None), ('WorkBadgeDefinition.LastReferencedDate', None), ('WorkBadgeDefinition.LastViewedDate', None), ('WorkBadgeDefinition.LimitNumber', None), ('WorkBadgeDefinition.LimitStartDate', None), ('WorkBadgeDefinition.Name', None), ('WorkBadgeDefinition.OwnerId', None), ('WorkBadgeDefinition.SystemModstamp', None), ('WorkThanks.CreatedById', None), ('WorkThanks.CreatedDate', None), ('WorkThanks.FeedItemId', None), ('WorkThanks.GiverId', None), ('WorkThanks.Id', None), ('WorkThanks.IsDeleted', None), ('WorkThanks.LastModifiedById', None), ('WorkThanks.LastModifiedDate', None), ('WorkThanks.Message', None), ('WorkThanks.OwnerId', None), ('WorkThanks.SystemModstamp', None)], blank=True, null=True)
    aggregate_type = models.CharField(max_length=255, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChart'
        verbose_name = 'List View Chart'
        verbose_name_plural = 'List View Charts'
        # keyPrefix = '0Dd'



class ListViewChartInstance(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='ListView Chart Instance ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    list_view_chart = models.ForeignKey(ListViewChart, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='API Name', sf_read_only=models.READ_ONLY)
    source_entity = models.CharField(max_length=255, verbose_name='Entity', sf_read_only=models.READ_ONLY)
    list_view_context = models.ForeignKey(ListView, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    chart_type = models.CharField(max_length=255, verbose_name='TODO, use alias', sf_read_only=models.READ_ONLY, choices=[('vbar', 'Vertical Bar Chart'), ('hbar', 'Horizontal Bar Chart'), ('pie', 'Donut Chart')])
    is_last_viewed = models.BooleanField(verbose_name='Last Viewed', sf_read_only=models.READ_ONLY, default=False)
    data_query = models.TextField(verbose_name='SOQL Query for Chart Data', sf_read_only=models.READ_ONLY, blank=True, null=True)
    data_query_without_user_filters = models.TextField(verbose_name='SOQL Query for Desktop Chart Data without S1 User Filters', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(verbose_name='Editable', sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(verbose_name='Deletable', sf_read_only=models.READ_ONLY, default=False)
    grouping_field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    aggregate_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Sum', 'Sum'), ('Count', 'Count'), ('Avg', 'Average')])
    class Meta(models.Model.Meta):
        db_table = 'ListViewChartInstance'
        verbose_name = 'List View Chart Instance'
        verbose_name_plural = 'List View Chart Instances'
        # keyPrefix = '0De'



class LoginGeo(models.Model):
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='logingeo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='logingeo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    login_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    country_iso = models.CharField(max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='PostalCode', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subdivision = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginGeo'
        verbose_name = 'Login Geo Data'
        verbose_name_plural = 'Login Geo Data'
        # keyPrefix = '04F'



class LoginHistory(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    login_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    login_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(max_length=255, verbose_name='Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    authentication_service = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [AuthProvider, SamlSsoConfig]
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    tls_protocol = models.CharField(max_length=40, verbose_name='TLS Protocol', sf_read_only=models.READ_ONLY, choices=[('TLS 1.0', 'TLS 1.0'), ('TLS 1.1', 'TLS 1.1'), ('TLS 1.2', 'TLS 1.2'), ('Unknown', 'Unknown')], blank=True, null=True)
    cipher_suite = models.CharField(max_length=40, verbose_name='TLS Cipher Suite', sf_read_only=models.READ_ONLY, choices=[('AES128-GCM-SHA256', 'AES128-GCM-SHA256'), ('AES128-SHA', 'AES128-SHA'), ('AES128-SHA256', 'AES128-SHA256'), ('AES256-GCM-SHA384', 'AES256-GCM-SHA384'), ('AES256-SHA', 'AES256-SHA'), ('AES256-SHA256', 'AES256-SHA256'), ('DES-CBC3-SHA', 'DES-CBC3-SHA'), ('DHE-RSA-AES128-GCM-SHA256', 'DHE-RSA-AES128-GCM-SHA256'), ('DHE-RSA-AES128-SHA', 'DHE-RSA-AES128-SHA'), ('DHE-RSA-AES256-GCM-SHA384', 'DHE-RSA-AES256-GCM-SHA384'), ('DHE-RSA-AES256-SHA', 'DHE-RSA-AES256-SHA'), ('DHE-RSA-DES-CBC3-SHA', 'DHE-RSA-DES-CBC3-SHA'), ('ECDH-ECDSA-AES128-GCM-SHA256', 'ECDH-ECDSA-AES128-GCM-SHA256'), ('ECDH-ECDSA-AES128-SHA256', 'ECDH-ECDSA-AES128-SHA256'), ('ECDH-ECDSA-AES256-GCM-SHA384', 'ECDH-ECDSA-AES256-GCM-SHA384'), ('ECDH-ECDSA-AES256-SHA384', 'ECDH-ECDSA-AES256-SHA384'), ('ECDH-RSA-AES128-GCM-SHA256', 'ECDH-RSA-AES128-GCM-SHA256'), ('ECDH-RSA-AES128-SHA256', 'ECDH-RSA-AES128-SHA256'), ('ECDH-RSA-AES256-GCM-SHA384', 'ECDH-RSA-AES256-GCM-SHA384'), ('ECDH-RSA-AES256-SHA384', 'ECDH-RSA-AES256-SHA384'), ('ECDHE-ECDSA-AES128-GCM-SHA256', 'ECDHE-ECDSA-AES128-GCM-SHA256'), ('ECDHE-ECDSA-AES128-SHA256', 'ECDHE-ECDSA-AES128-SHA256'), ('ECDHE-ECDSA-AES256-GCM-SHA384', 'ECDHE-ECDSA-AES256-GCM-SHA384'), ('ECDHE-ECDSA-AES256-SHA384', 'ECDHE-ECDSA-AES256-SHA384'), ('ECDHE-RSA-AES128-CBC-SHA', 'ECDHE-RSA-AES128-CBC-SHA'), ('ECDHE-RSA-AES128-GCM-SHA256', 'ECDHE-RSA-AES128-GCM-SHA256'), ('ECDHE-RSA-AES128-SHA', 'ECDHE-RSA-AES128-SHA'), ('ECDHE-RSA-AES128-SHA256', 'ECDHE-RSA-AES128-SHA256'), ('ECDHE-RSA-AES256-CBC-SHA', 'ECDHE-RSA-AES256-CBC-SHA'), ('ECDHE-RSA-AES256-GCM-SHA384', 'ECDHE-RSA-AES256-GCM-SHA384'), ('ECDHE-RSA-AES256-SHA', 'ECDHE-RSA-AES256-SHA'), ('ECDHE-RSA-AES256-SHA384', 'ECDHE-RSA-AES256-SHA384'), ('ECDHE-RSA-DES-CBC3-SHA', 'ECDHE-RSA-DES-CBC3-SHA'), ('Unknown', 'Unknown')], blank=True, null=True)
    options_is_get = models.BooleanField(verbose_name='Login via GET', sf_read_only=models.READ_ONLY)
    options_is_post = models.BooleanField(verbose_name='Login via POST', sf_read_only=models.READ_ONLY)
    browser = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    platform = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    application = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    client_version = models.CharField(max_length=64, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_type = models.CharField(max_length=64, verbose_name='API Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_version = models.CharField(max_length=32, verbose_name='API Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country_iso = models.CharField(max_length=3, verbose_name='Country Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginHistory'
        verbose_name = 'Login History'
        verbose_name_plural = 'Login History'
        # keyPrefix = '0Ya'



class LoginIp(models.Model):
    users = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    source_ip = models.CharField(max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_authenticated = models.BooleanField(verbose_name='IsAuthenticated', sf_read_only=models.READ_ONLY, default=False)
    challenge_sent_date = models.DateTimeField(verbose_name='Challenge SentDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    challenge_method = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Email', None), ('SMS', None), ('TOTP_CHOICE', None), ('TOTP_ONLY', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'LoginIp'
        verbose_name = 'Login IP'
        verbose_name_plural = 'Login IP'
        # keyPrefix = '710'



class LookedUpFromActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='lookedupfromactivity_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    who = models.ForeignKey(Contact, models.DO_NOTHING, related_name='lookedupfromactivity_who_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='lookedupfromactivity_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey(Calendar, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, User]
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Text', None), ('Text', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_all_day_event = models.BooleanField(verbose_name='All-Day Event', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='lookedupfromactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_who = models.ForeignKey(Contact, models.DO_NOTHING, related_name='lookedupfromactivity_primarywho_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    primary_account = models.ForeignKey(Account, models.DO_NOTHING, related_name='lookedupfromactivity_primaryaccount_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    npsp_engagement_plan_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Task__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_engagement_plan = models.ForeignKey('NpspEngagementPlan', models.DO_NOTHING, db_column='npsp__Engagement_Plan__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'LookedUpFromActivity'
        verbose_name = 'Lookups from Activity'
        verbose_name_plural = 'Lookups from Activities'
        # keyPrefix = 'None'



class Macro(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Macro Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macro_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macro_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    is_aloha_supported = models.BooleanField(verbose_name='Supports Classic', sf_read_only=models.READ_ONLY, default=False)
    is_lightning_supported = models.BooleanField(verbose_name='Supports Lightning', sf_read_only=models.READ_ONLY, default=False)
    starting_context = models.CharField(max_length=255, verbose_name='Apply To', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', 'Account'), ('npsp__Account_Soft_Credit__c', 'Account Soft Credit'), ('npsp__Address__c', 'Address'), ('npe5__Affiliation__c', 'Affiliation'), ('Asset', 'Asset'), ('AssetRelationship', 'Asset Relationship'), ('npsp__Batch__c', 'Batch'), ('Campaign', 'Campaign'), ('Case', 'Case'), ('Class_Attendance__c', 'Class Attendance'), ('Class_Enrollment__c', 'Class Enrollment'), ('Class_Meeting__c', 'Class Meeting'), ('Class_Offering__c', 'Class Offering'), ('Contact', 'Contact'), ('Contract', 'Contract'), ('npsp__Grant_Deadline__c', 'Deliverable'), ('npsp__Fund__c', 'DEPRECATED-Fund'), ('npe4__Relationship_Error__c', 'DEPRECATED-Relationship Error'), ('npsp__Schedulable__c', 'DEPRECATED-Schedulable'), ('npsp__Engagement_Plan__c', 'Engagement Plan'), ('npsp__Engagement_Plan_Task__c', 'Engagement Plan Task'), ('npsp__Engagement_Plan_Template__c', 'Engagement Plan Template'), ('Equipment__c', 'Equipment'), ('Equipment_Assignment__c', 'Equipment Assignment'), ('npsp__Error__c', 'Error'), ('Event', 'Event'), ('FeedItem', 'Feed Item'), ('npsp__Allocation__c', 'GAU Allocation'), ('npsp__General_Accounting_Unit__c', 'General Accounting Unit'), ('CollaborationGroup', 'Group'), ('npo02__Household__c', 'Household'), ('Incident__c', 'Incident'), ('Individual', 'Individual'), ('Lead', 'Lead'), ('npsp__Level__c', 'Level'), ('dlrs__LookupChild__c', 'Lookup Child'), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', 'Lookup Child Big'), ('dlrs__LookupParent__c', 'Lookup Parent'), ('dlrs__LookupRollupCalculateJob__c', 'Lookup Rollup Calculate Job'), ('dlrs__LookupRollupSummary__c', 'Lookup Rollup Summary'), ('dlrs__LookupRollupSummaryLog__c', 'Lookup Rollup Summary Log'), ('dlrs__LookupRollupSummaryScheduleItems__c', 'Lookup Rollup Summary Schedule Item'), ('npsp__DataImport__c', 'NPSP Data Import'), ('npsp__DataImportBatch__c', 'NPSP Data Import Batch'), ('Opportunity', 'Opportunity'), ('Order', 'Order'), ('npsp__Partial_Soft_Credit__c', 'Partial Soft Credit'), ('npe01__OppPayment__c', 'Payment'), ('Product2', 'Product'), ('Quote', 'Quote'), ('npe03__Recurring_Donation__c', 'Recurring Donations'), ('npe4__Relationship__c', 'Relationship'), ('SocialPost', 'Social Post'), ('Survey__c', 'Survey'), ('Task', 'Task'), ('npsp__Trigger_Handler__c', 'Trigger Handler'), ('User', 'User')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Macro'
        verbose_name = 'Macro'
        verbose_name_plural = 'Macros'
        # keyPrefix = '0JZ'



class MacroHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Name', 'Macro Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MacroHistory'
        verbose_name = 'Macro History'
        verbose_name_plural = 'Macro History'
        # keyPrefix = 'None'



class MacroInstruction(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Macro Instruction Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macroinstruction_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='macroinstruction_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    macro = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    operation = models.CharField(max_length=255, choices=[('Select', 'select'), ('Set', 'set'), ('Insert', 'insert'), ('Submit', 'submit'), ('Close', 'close'), ('If', 'if'), ('ElseIf', 'elseif'), ('Else', 'else'), ('EndIf', 'endif')])
    target = models.CharField(max_length=255, choices=[('Field.CollaborationGroup.CollaborationType', 'Access Type'), ('Field.Case.AccountId', 'Account Name'), ('Field.Account.Name', 'Account Name'), ('Field.Account.Name.end', 'Account Name'), ('Field.Account.Name.begin', 'Account Name'), ('Field.Contact.AccountId', 'Account Name'), ('Field.Opportunity.AccountId', 'Account Name'), ('Tab.npsp__Account_Soft_Credit__c', 'Active Account Soft Credit Tab'), ('Tab.Account', 'Active Account Tab'), ('Tab.npsp__Address__c', 'Active Address Tab'), ('Tab.npe5__Affiliation__c', 'Active Affiliation Tab'), ('Tab.AssetRelationship', 'Active Asset Relationship Tab'), ('Tab.Asset', 'Active Asset Tab'), ('Tab.npsp__Batch__c', 'Active Batch Tab'), ('Tab.Campaign', 'Active Campaign Tab'), ('Tab.Case', 'Active Case Tab'), ('Tab.Class_Attendance__c', 'Active Class Attendance Tab'), ('Tab.Class_Enrollment__c', 'Active Class Enrollment Tab'), ('Tab.Class_Meeting__c', 'Active Class Meeting Tab'), ('Tab.Class_Offering__c', 'Active Class Offering Tab'), ('Tab.Contact', 'Active Contact Tab'), ('Tab.Contract', 'Active Contract Tab'), ('Tab.npsp__Grant_Deadline__c', 'Active Deliverable Tab'), ('Tab.npsp__Fund__c', 'Active DEPRECATED-Fund Tab'), ('Tab.npe4__Relationship_Error__c', 'Active DEPRECATED-Relationship Error Tab'), ('Tab.npsp__Schedulable__c', 'Active DEPRECATED-Schedulable Tab'), ('Tab.npsp__Engagement_Plan__c', 'Active Engagement Plan Tab'), ('Tab.npsp__Engagement_Plan_Task__c', 'Active Engagement Plan Task Tab'), ('Tab.npsp__Engagement_Plan_Template__c', 'Active Engagement Plan Template Tab'), ('Tab.Equipment_Assignment__c', 'Active Equipment Assignment Tab'), ('Tab.Equipment__c', 'Active Equipment Tab'), ('Tab.npsp__Error__c', 'Active Error Tab'), ('Tab.Event', 'Active Event Tab'), ('Tab.FeedItem', 'Active Feed Item Tab'), ('Tab.npsp__Allocation__c', 'Active GAU Allocation Tab'), ('Tab.npsp__General_Accounting_Unit__c', 'Active General Accounting Unit Tab'), ('Tab.CollaborationGroup', 'Active Group Tab'), ('Tab.npo02__Household__c', 'Active Household Tab'), ('Tab.Incident__c', 'Active Incident Tab'), ('Tab.Individual', 'Active Individual Tab'), ('Tab.Lead', 'Active Lead Tab'), ('Tab.npsp__Level__c', 'Active Level Tab'), ('Tab.dlrs__LookupChildAReallyReallyReallyBigBigName__c', 'Active Lookup Child Big Tab'), ('Tab.dlrs__LookupChild__c', 'Active Lookup Child Tab'), ('Tab.dlrs__LookupParent__c', 'Active Lookup Parent Tab'), ('Tab.dlrs__LookupRollupCalculateJob__c', 'Active Lookup Rollup Calculate Job Tab'), ('Tab.dlrs__LookupRollupSummaryLog__c', 'Active Lookup Rollup Summary Log Tab'), ('Tab.dlrs__LookupRollupSummaryScheduleItems__c', 'Active Lookup Rollup Summary Schedule Item Tab'), ('Tab.dlrs__LookupRollupSummary__c', 'Active Lookup Rollup Summary Tab'), ('Tab.npsp__DataImportBatch__c', 'Active NPSP Data Import Batch Tab'), ('Tab.npsp__DataImport__c', 'Active NPSP Data Import Tab'), ('Tab.Opportunity', 'Active Opportunity Tab'), ('Tab.Order', 'Active Order Tab'), ('Tab.npsp__Partial_Soft_Credit__c', 'Active Partial Soft Credit Tab'), ('Tab.npe01__OppPayment__c', 'Active Payment Tab'), ('Tab.Product2', 'Active Product Tab'), ('Tab.Quote', 'Active Quote Tab'), ('Tab.npe03__Recurring_Donation__c', 'Active Recurring Donations Tab'), ('Tab.npe4__Relationship__c', 'Active Relationship Tab'), ('Tab.SocialPost', 'Active Social Post Tab'), ('Tab.Survey__c', 'Active Survey Tab'), ('Tab.Task', 'Active Task Tab'), ('Tab.npsp__Trigger_Handler__c', 'Active Trigger Handler Tab'), ('Tab.User', 'Active User Tab'), ('QuickAction.CollaborationGroup.NewGroupRecord', 'Add Record Action'), ('Field.npsp__Address__c.npsp__Address_Type__c', 'Address Type'), ('Field.CollaborationGroup.CanHaveGuests', 'Allow customers'), ('Field.Contact.npe01__AlternateEmail__c', 'Alternate Email'), ('Field.npe03__Recurring_Donation__c.npe03__Amount__c', 'Amount'), ('Field.Opportunity.Amount', 'Amount'), ('Field.Task.OwnerId', 'Assigned To'), ('Field.Event.OwnerId', 'Assigned To'), ('Field.Account.BillingCity.begin', 'Billing City'), ('Field.Account.BillingCity', 'Billing City'), ('Field.Account.BillingCity.end', 'Billing City'), ('Field.Account.BillingCountry', 'Billing Country'), ('Field.Account.BillingCountryCode', 'Billing Country Code'), ('Field.Account.BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('Field.Account.BillingLatitude', 'Billing Latitude'), ('Field.Account.BillingLongitude', 'Billing Longitude'), ('Field.Account.BillingState', 'Billing State/Province'), ('Field.Account.BillingStateCode', 'Billing State/Province Code'), ('Field.Account.BillingStreet', 'Billing Street'), ('Field.Account.BillingStreet.begin', 'Billing Street'), ('Field.Account.BillingStreet.end', 'Billing Street'), ('Field.Account.BillingStreet.cursor', 'Billing Street'), ('Field.Account.BillingPostalCode', 'Billing Zip/Postal Code'), ('Field.Account.BillingPostalCode.end', 'Billing Zip/Postal Code'), ('Field.Account.BillingPostalCode.begin', 'Billing Zip/Postal Code'), ('Field.npe03__Recurring_Donation__c.npe03__Recurring_Donation_Campaign__c', 'Campaign'), ('QuickAction.Contact.Case', 'Case Action'), ('QuickAction.Case', 'Case Action'), ('QuickAction.Account.Case', 'Case Action'), ('Field.Case.OwnerId', 'Case Owner'), ('QuickAction.Task.Defer', 'Change Date Action'), ('QuickAction.Task.UpdatePriority', 'Change Priority Action'), ('QuickAction.Task.UpdateStatus', 'Change Status Action'), ('Field.Opportunity.CloseDate', 'Close Date'), ('Field.Task.Description.cursor', 'Comments'), ('Field.Task.Description', 'Comments'), ('Field.Task.Description.begin', 'Comments'), ('Field.Task.Description.end', 'Comments'), ('Field.Lead.Company', 'Company'), ('Field.Lead.Company.begin', 'Company'), ('Field.Lead.Company.end', 'Company'), ('Field.npe5__Affiliation__c.npe5__Contact__c', 'Contact'), ('Field.npe4__Relationship__c.npe4__Contact__c', 'Contact'), ('Field.npe03__Recurring_Donation__c.npe03__Contact__c', 'Contact'), ('Field.Case.ContactId', 'Contact Name'), ('QuickAction.FeedItem.NewTaskFromFeedItem', 'Create New Task Action'), ('Field.Contact.npsp__Current_Address__c', 'Current Address'), ('Field.npsp__Address__c.npsp__Default_Address__c', 'Default Address'), ('Field.npe4__Relationship__c.npe4__Description__c.begin', 'Description'), ('Field.npe5__Affiliation__c.npe5__Description__c.begin', 'Description'), ('Field.Event.Description.cursor', 'Description'), ('Field.CollaborationGroup.Description', 'Description'), ('Field.Account.Description.begin', 'Description'), ('Field.Event.Description.begin', 'Description'), ('Field.npe4__Relationship__c.npe4__Description__c.end', 'Description'), ('Field.npe5__Affiliation__c.npe5__Description__c.cursor', 'Description'), ('Field.npe4__Relationship__c.npe4__Description__c.cursor', 'Description'), ('Field.Case.Description.end', 'Description'), ('Field.Account.Description.end', 'Description'), ('Field.Event.Description.end', 'Description'), ('Field.Case.Description.begin', 'Description'), ('Field.CollaborationGroup.Description.begin', 'Description'), ('Field.npe5__Affiliation__c.npe5__Description__c', 'Description'), ('Field.Account.Description.cursor', 'Description'), ('Field.Case.Description.cursor', 'Description'), ('Field.Case.Description', 'Description'), ('Field.npe4__Relationship__c.npe4__Description__c', 'Description'), ('Field.CollaborationGroup.Description.cursor', 'Description'), ('Field.Account.Description', 'Description'), ('Field.npe5__Affiliation__c.npe5__Description__c.end', 'Description'), ('Field.CollaborationGroup.Description.end', 'Description'), ('Field.Event.Description', 'Description'), ('Field.Task.ActivityDate', 'Due Date'), ('QuickAction.Task.EditDescription', 'Edit Comments Action'), ('Field.Lead.Email', 'Email'), ('Field.Contact.Email', 'Email'), ('Field.Event.EndDateTime', 'End'), ('QuickAction.Opportunity.Event', 'Event Action'), ('QuickAction.Case.Event', 'Event Action'), ('QuickAction.Lead.Event', 'Event Action'), ('QuickAction.Event', 'Event Action'), ('QuickAction.Contact.Event', 'Event Action'), ('Field.Contact.FirstName.end', 'First Name'), ('Field.Contact.FirstName.begin', 'First Name'), ('Field.Lead.FirstName', 'First Name'), ('Field.Contact.FirstName', 'First Name'), ('Field.Lead.FirstName.begin', 'First Name'), ('Field.Lead.FirstName.end', 'First Name'), ('Field.CollaborationGroupRecord.CollaborationGroupId', 'Group'), ('Field.CollaborationGroupMember.CollaborationGroupId', 'Group'), ('Field.CollaborationGroupMember.CollaborationRole', 'Group Member Role'), ('Field.Contact.HomePhone', 'Home Phone'), ('Field.Contact.npo02__Household__c', 'Household'), ('Field.npo02__Household__c.npo02__HouseholdEmail__c', 'Household Email'), ('Field.npo02__Household__c.Name', 'Household Name'), ('Field.npo02__Household__c.Name.begin', 'Household Name'), ('Field.npo02__Household__c.Name.end', 'Household Name'), ('Field.npo02__Household__c.npo02__HouseholdPhone__c', 'Household Phone'), ('Field.Account.Industry', 'Industry'), ('Field.npe03__Recurring_Donation__c.npe03__Installment_Period__c', 'Installment Period'), ('Field.npe03__Recurring_Donation__c.npe03__Installments__c', 'Installments'), ('Field.Contact.LastName.begin', 'Last Name'), ('Field.Contact.LastName.end', 'Last Name'), ('Field.Lead.LastName.end', 'Last Name'), ('Field.Lead.LastName', 'Last Name'), ('Field.Contact.LastName', 'Last Name'), ('Field.Lead.LastName.begin', 'Last Name'), ('QuickAction.Lead', 'Lead Action'), ('Field.Event.Location', 'Location'), ('Field.Event.Location.begin', 'Location'), ('Field.Event.Location.end', 'Location'), ('QuickAction.Lead.Log_a_Call', 'Log a Call Action'), ('QuickAction.npsp__LogACall', 'Log a Call Action'), ('QuickAction.Contact.Log_a_Call', 'Log a Call Action'), ('QuickAction.Log_a_Call', 'Log a Call Action'), ('QuickAction.LogACall', 'Log a Call Action'), ('QuickAction.Case.Log_a_Call', 'Log a Call Action'), ('QuickAction.Account.Log_a_Call', 'Log a Call Action'), ('QuickAction.Opportunity.Log_a_Call', 'Log a Call Action'), ('QuickAction.Contact.Maikhanh', 'Maikhanh Action'), ('Field.npsp__Address__c.npsp__MailingCity__c', 'Mailing City'), ('Field.npsp__Address__c.npsp__MailingCity__c.begin', 'Mailing City'), ('Field.npsp__Address__c.npsp__MailingCity__c.end', 'Mailing City'), ('Field.npo02__Household__c.npo02__MailingCity__c.end', 'Mailing City'), ('Field.npo02__Household__c.npo02__MailingCity__c.begin', 'Mailing City'), ('Field.npo02__Household__c.npo02__MailingCity__c', 'Mailing City'), ('Field.npsp__Address__c.npsp__MailingCountry__c.begin', 'Mailing Country'), ('Field.npsp__Address__c.npsp__MailingCountry__c.end', 'Mailing Country'), ('Field.npo02__Household__c.npo02__MailingCountry__c.begin', 'Mailing Country'), ('Field.npsp__Address__c.npsp__MailingCountry__c', 'Mailing Country'), ('Field.npo02__Household__c.npo02__MailingCountry__c.end', 'Mailing Country'), ('Field.npo02__Household__c.npo02__MailingCountry__c', 'Mailing Country'), ('Field.npsp__Address__c.npsp__MailingState__c', 'Mailing State/Province'), ('Field.npo02__Household__c.npo02__MailingState__c', 'Mailing State/Province'), ('Field.npo02__Household__c.npo02__MailingState__c.begin', 'Mailing State/Province'), ('Field.npsp__Address__c.npsp__MailingState__c.end', 'Mailing State/Province'), ('Field.npsp__Address__c.npsp__MailingState__c.begin', 'Mailing State/Province'), ('Field.npo02__Household__c.npo02__MailingState__c.end', 'Mailing State/Province'), ('Field.npo02__Household__c.npo02__MailingStreet__c.begin', 'Mailing Street'), ('Field.npsp__Address__c.npsp__MailingStreet__c', 'Mailing Street'), ('Field.npsp__Address__c.npsp__MailingStreet__c.begin', 'Mailing Street'), ('Field.npo02__Household__c.npo02__MailingStreet__c.end', 'Mailing Street'), ('Field.npo02__Household__c.npo02__MailingStreet__c', 'Mailing Street'), ('Field.npsp__Address__c.npsp__MailingStreet__c.end', 'Mailing Street'), ('Field.npo02__Household__c.npo02__MailingPostalCode__c.end', 'Mailing Zip/Postal Code'), ('Field.npsp__Address__c.npsp__MailingPostalCode__c.end', 'Mailing Zip/Postal Code'), ('Field.npsp__Address__c.npsp__MailingPostalCode__c', 'Mailing Zip/Postal Code'), ('Field.npo02__Household__c.npo02__MailingPostalCode__c', 'Mailing Zip/Postal Code'), ('Field.npo02__Household__c.npo02__MailingPostalCode__c.begin', 'Mailing Zip/Postal Code'), ('Field.npsp__Address__c.npsp__MailingPostalCode__c.begin', 'Mailing Zip/Postal Code'), ('Field.CollaborationGroupMember.MemberId', 'Member'), ('Field.Lead.MiddleName.end', 'Middle Name'), ('Field.Lead.MiddleName.begin', 'Middle Name'), ('Field.Contact.MiddleName', 'Middle Name'), ('Field.Lead.MiddleName', 'Middle Name'), ('Field.Contact.MiddleName.end', 'Middle Name'), ('Field.Contact.MiddleName.begin', 'Middle Name'), ('Field.Contact.MobilePhone', 'Mobile'), ('Field.CollaborationGroup.Name.end', 'Name'), ('Field.Task.WhoId', 'Name'), ('Field.CollaborationGroup.Name.begin', 'Name'), ('Field.Event.WhoId', 'Name'), ('Field.CollaborationGroup.Name', 'Name'), ('QuickAction.Account.npsp__New_Address', 'New Address Action'), ('QuickAction.Account.npsp__New_Affiliation', 'New Affiliation Action'), ('QuickAction.Contact.npsp__New_Affiliation', 'New Affiliation Action'), ('QuickAction.NewCase', 'New Case Action'), ('QuickAction.NewEvent', 'New Event Action'), ('QuickAction.NewGroup', 'New Group Action'), ('QuickAction.CollaborationGroup.NewGroupMember', 'New Group Member Action'), ('QuickAction.New_Household_Account', 'New Household Action'), ('QuickAction.NewLead', 'New Lead Action'), ('QuickAction.NewOpportunity', 'New Opportunity Action'), ('QuickAction.npe03__Recurring_Donation__c.npsp__New_Opportunity', 'New Opportunity Action'), ('QuickAction.npsp__NewOpportunity', 'New Opportunity Action'), ('QuickAction.npe03__Recurring_Donation__c.npe03__New_Opportunity', 'New Opportunity Action'), ('QuickAction.New_Organization', 'New Organization Action'), ('QuickAction.Opportunity.npsp__New_Payment', 'New Payment Action'), ('QuickAction.npsp__New_Recurring_Donation', 'New Recurring Donation Action'), ('QuickAction.Contact.npsp__New_Recurring_Donation', 'New Recurring Donation Action'), ('QuickAction.Contact.npsp__New_Relationship', 'New Relationship Action'), ('QuickAction.npsp__NewTask', 'New Task Action'), ('QuickAction.npe03__NewTask', 'New Task Action'), ('Field.npe03__Recurring_Donation__c.npe03__Next_Payment_Date__c', 'Next Donation Date'), ('Field.Opportunity.NextStep', 'Next Step'), ('Field.Opportunity.NextStep.begin', 'Next Step'), ('Field.Opportunity.NextStep.end', 'Next Step'), ('Field.npe03__Recurring_Donation__c.npe03__Open_Ended_Status__c', 'Open Ended Status'), ('QuickAction.Opportunity', 'Opportunity Action'), ('QuickAction.Account.Opportunity', 'Opportunity Action'), ('Field.Opportunity.Name.begin', 'Opportunity Name'), ('Field.Opportunity.Name', 'Opportunity Name'), ('Field.Opportunity.Name.end', 'Opportunity Name'), ('Field.npe5__Affiliation__c.npe5__Organization__c', 'Organization'), ('Field.Contact.OtherPhone', 'Other Phone'), ('Field.npe01__OppPayment__c.npe01__Paid__c', 'Paid'), ('Field.npe03__Recurring_Donation__c.npe03__Paid_Amount__c', 'Paid Amount'), ('Field.npe01__OppPayment__c.npe01__Payment_Amount__c', 'Payment Amount'), ('Field.npe01__OppPayment__c.npe01__Payment_Date__c', 'Payment Date'), ('Field.npe01__OppPayment__c.npe01__Payment_Method__c', 'Payment Method'), ('Field.Contact.npe01__HomeEmail__c', 'Personal Email'), ('Field.Contact.Phone', 'Phone'), ('Field.Lead.Phone', 'Phone'), ('Field.Account.Phone', 'Phone'), ('Field.Contact.npe01__Preferred_Email__c', 'Preferred Email'), ('Field.Contact.npe01__PreferredPhone__c', 'Preferred Phone'), ('Field.npe5__Affiliation__c.npe5__Primary__c', 'Primary'), ('Field.Contact.npsp__Primary_Affiliation__c', 'Primary Affiliation'), ('Field.Task.Priority', 'Priority'), ('Field.Case.Priority', 'Priority'), ('QuickAction.npe03__Recurring_Donation__c.npe03__Quick_Update', 'Quick Update Action'), ('QuickAction.Opportunity.npsp__Quick_Update', 'Quick Update Action'), ('QuickAction.npe03__Recurring_Donation__c.npsp__Quick_Update', 'Quick Update Action'), ('QuickAction.Contact.npsp__Quick_Update', 'Quick Update Action'), ('QuickAction.Account.npsp__Quick_Household_Update', 'Quick Update Action'), ('QuickAction.npe01__OppPayment__c.npsp__Quick_Update', 'Quick Update Action'), ('QuickAction.Account.npsp__Quick_Organization_Update', 'Quick Update Action'), ('Field.CollaborationGroupRecord.RecordId', 'Record'), ('Field.npe03__Recurring_Donation__c.Name.begin', 'Recurring Donation Name'), ('Field.npe03__Recurring_Donation__c.Name.end', 'Recurring Donation Name'), ('Field.npe03__Recurring_Donation__c.Name', 'Recurring Donation Name'), ('Field.npe4__Relationship__c.npe4__RelatedContact__c', 'Related Contact'), ('Field.Event.WhatId', 'Related To'), ('Field.Task.WhatId', 'Related To'), ('Field.npe5__Affiliation__c.npe5__Role__c', 'Role'), ('Field.npe5__Affiliation__c.npe5__Role__c.begin', 'Role'), ('Field.npe5__Affiliation__c.npe5__Role__c.end', 'Role'), ('Field.Lead.Salutation', 'Salutation'), ('Field.Contact.Salutation', 'Salutation'), ('Field.npe03__Recurring_Donation__c.npe03__Schedule_Type__c', 'Schedule Type'), ('Field.Opportunity.StageName', 'Stage'), ('Field.Event.StartDateTime', 'Start'), ('Field.npe5__Affiliation__c.npe5__StartDate__c', 'Start Date'), ('Field.Case.Status', 'Status'), ('Field.npe5__Affiliation__c.npe5__Status__c', 'Status'), ('Field.Task.Status', 'Status'), ('Field.npe4__Relationship__c.npe4__Status__c', 'Status'), ('Field.Case.Subject', 'Subject'), ('Field.Case.Subject.begin', 'Subject'), ('Field.Event.Subject', 'Subject'), ('Field.Case.Subject.end', 'Subject'), ('Field.Task.Subject', 'Subject'), ('Field.Contact.Suffix.begin', 'Suffix'), ('Field.Contact.Suffix', 'Suffix'), ('Field.Contact.Suffix.end', 'Suffix'), ('Field.Lead.Suffix.end', 'Suffix'), ('Field.Lead.Suffix', 'Suffix'), ('Field.Lead.Suffix.begin', 'Suffix'), ('QuickAction.Contact.Task', 'Task Action'), ('QuickAction.Case.Task', 'Task Action'), ('QuickAction.Campaign.Task', 'Task Action'), ('QuickAction.Lead.Task', 'Task Action'), ('QuickAction.Opportunity.Task', 'Task Action'), ('QuickAction.Task', 'Task Action'), ('QuickAction.Account.Task', 'Task Action'), ('Field.Contact.Title.end', 'Title'), ('Field.Lead.Title.begin', 'Title'), ('Field.Contact.Title', 'Title'), ('Field.Lead.Title.end', 'Title'), ('Field.Lead.Title', 'Title'), ('Field.Contact.Title.begin', 'Title'), ('Field.Task.Type', 'Type'), ('Field.npe4__Relationship__c.npe4__Type__c', 'Type'), ('Field.Account.Type', 'Type'), ('QuickAction.npsp__Address__c.npsp__Update_Address', 'Update Address Action'), ('QuickAction.Case._LightningUpdateCase', 'Update Case Action'), ('QuickAction.Contact._LightningRelatedContact', 'Update Contact Action'), ('QuickAction.npo02__Household__c.npsp__Update_Household', 'Update Household Action'), ('Field.Account.Website', 'Website'), ('Field.Contact.npe01__WorkEmail__c', 'Work Email')], blank=True, null=True)
    value = models.TextField(blank=True, null=True)
    value_record = models.CharField(max_length=15, verbose_name='Value Record ID', blank=True, null=True)
    sort_order = models.IntegerField()
    class Meta(models.Model.Meta):
        db_table = 'MacroInstruction'
        verbose_name = 'Macro Instruction'
        verbose_name_plural = 'Macro Instructions'
        # keyPrefix = '0Ji'



class MacroShare(models.Model):
    parent = models.ForeignKey(Macro, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'MacroShare'
        verbose_name = 'Macro Share'
        verbose_name_plural = 'Macro Share'
        # keyPrefix = 'None'



class MailmergeTemplate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80)
    description = models.CharField(max_length=255, blank=True, null=True)
    filename = models.CharField(max_length=255, verbose_name='File', sf_read_only=models.NOT_UPDATEABLE)
    body_length = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    category = models.CharField(max_length=40, verbose_name='Document Type', default=models.DEFAULTED_ON_CREATE, choices=[('Document', 'Document'), ('Label', 'Label'), ('Envelope', 'Envelope')], blank=True, null=True)
    body = models.TextField(sf_read_only=models.NOT_UPDATEABLE)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mailmergetemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mailmergetemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    security_options_attachment_scanned_for_xss = models.BooleanField(db_column='SecurityOptionsAttachmentScannedForXSS', verbose_name='Attachment has been scanned for XSS')
    security_options_attachment_has_xssthreat = models.BooleanField(db_column='SecurityOptionsAttachmentHasXSSThreat', verbose_name='XSS threat was detected in the attachment')
    security_options_attachment_scannedfor_flash = models.BooleanField(verbose_name='Attachment has been scanned for Flash Injection')
    security_options_attachment_has_flash = models.BooleanField(verbose_name='Flash Injection was detected in the attachment')
    class Meta(models.Model.Meta):
        db_table = 'MailmergeTemplate'
        verbose_name = 'Mail Merge Template'
        verbose_name_plural = 'Mail Merge Template'
        # keyPrefix = '01H'



class MatchingRule(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    sobject_type = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Contact', None), ('Individual', None), ('Lead', None)])
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Rule Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingrule_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingrule_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    match_engine = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('ExactMatchEngine', 'Exact Match Engine'), ('FuzzyMatchEngine', 'Fuzzy Match Engine')], blank=True, null=True)
    boolean_filter = models.CharField(max_length=255, verbose_name='Advanced Logic', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    rule_status = models.CharField(max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, default='Inactive', choices=[('Inactive', 'Inactive'), ('DeactivationFailed', 'Deactivation Failed'), ('Activating', 'Activating'), ('Deactivating', 'Deactivating'), ('Active', 'Active'), ('ActivationFailed', 'Activation Failed')])
    sobject_subtype = models.CharField(max_length=255, verbose_name='Object Subtype', sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('PersonAccount', 'Person Account')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MatchingRule'
        verbose_name = 'Matching Rule'
        verbose_name_plural = 'Matching Rules'
        # keyPrefix = '0JD'



class MatchingRuleItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingruleitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='matchingruleitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    matching_rule = models.ForeignKey(MatchingRule, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Account', None), ('Account', None), ('Account_Custom_Unique_ID', None), ('Account1_City', None), ('Account1_Country', None), ('Account1_Name', None), ('Account1_Phone', None), ('Account1_State_Province', None), ('Account1_Street', None), ('Account1_Website', None), ('Account1_Zip_Postal_Code', None), ('Account1Imported', None), ('Account1ImportStatus', None), ('Account2_City', None), ('Account2_Country', None), ('Account2_Name', None), ('Account2_Phone', None), ('Account2_State_Province', None), ('Account2_Street', None), ('Account2_Website', None), ('Account2_Zip_Postal_Code', None), ('Account2Imported', None), ('Account2ImportStatus', None), ('AccountNumber', None), ('AccountSource', None), ('Address', None), ('Address_Type', None), ('Addressee', None), ('Administrative_Area', None), ('AggregateOperation', None), ('AggregateResultField', None), ('AlternateEmail', None), ('Amount', None), ('Amount', None), ('ApexJobId', None), ('Areas_of_Expertise_Other', None), ('Assessment_Score', None), ('Assigned_To', None), ('AssistantName', None), ('AssistantPhone', None), ('Batch', None), ('Batch', None), ('Batch', None), ('Batch_Process_Size', None), ('Batch_Status', None), ('Best_Gift_Year', None), ('Best_Gift_Year', None), ('Best_Gift_Year', None), ('BillingAddress', None), ('BillingCity', None), ('BillingCountry', None), ('BillingCountryCode', None), ('BillingPostalCode', None), ('BillingState', None), ('BillingStateCode', None), ('BillingStreet', None), ('CalculateJobId', None), ('CalculationMode', None), ('CalculationSharingMode', None), ('Campaign_Member_Status', None), ('Check_Reference_Number', None), ('ChildObject', None), ('ChildrenCount', None), ('City', None), ('Class', None), ('Class_Meeting', None), ('Class_Name', None), ('Class_Offering', None), ('Class_Offering', None), ('Client_ID', None), ('Color', None), ('Company', None), ('CompanyCity', None), ('CompanyCountry', None), ('CompanyPostalCode', None), ('CompanyState', None), ('CompanyStreet', None), ('Completed_Tasks', None), ('ConcatenateDelimiter', None), ('Condition', None), ('Congressional_District', None), ('Contact', None), ('Contact', None), ('Contact', None), ('Contact', None), ('Contact', None), ('Contact', None), ('Contact', None), ('Contact', None), ('Contact', None), ('Contact_Custom_Unique_ID', None), ('Contact_Ethnicity', None), ('Contact_Gender', None), ('Contact_Matching_Rule', None), ('Contact_Race', None), ('Contact_Role_ID', None), ('Contact1_Alternate_Email', None), ('Contact1_Firstname', None), ('Contact1_Home_Phone', None), ('Contact1_Lastname', None), ('Contact1_Mobile_Phone', None), ('Contact1_Other_Phone', None), ('Contact1_Personal_Email', None), ('Contact1_Preferred_Email', None), ('Contact1_Preferred_Phone', None), ('Contact1_Salutation', None), ('Contact1_Title', None), ('Contact1_Work_Email', None), ('Contact1_Work_Phone', None), ('Contact1Imported', None), ('Contact1ImportStatus', None), ('Contact2_Alternate_Email', None), ('Contact2_Firstname', None), ('Contact2_Home_Phone', None), ('Contact2_Lastname', None), ('Contact2_Mobile_Phone', None), ('Contact2_Other_Phone', None), ('Contact2_Personal_Email', None), ('Contact2_Preferred_Email', None), ('Contact2_Preferred_Phone', None), ('Contact2_Salutation', None), ('Contact2_Title', None), ('Contact2_Work_Email', None), ('Contact2_Work_Phone', None), ('Contact2Imported', None), ('Contact2ImportStatus', None), ('Context_Type', None), ('ConvictionsCount', None), ('Country', None), ('CountryCode', None), ('County_Name', None), ('Course', None), ('CPU', None), ('Cultural_Affiliation_or_Nationality', None), ('Current_Income_Information', None), ('Custom_Payment_Field', None), ('Day_of_Month', None), ('Days_After', None), ('Default_Assignee', None), ('Department', None), ('Description', None), ('Description', None), ('Description', None), ('Description2', None), ('Descriptions', None), ('Descriptions2', None), ('Disk_Capacity', None), ('DM_Current_grade', None), ('Donation_Campaign_Name', None), ('Donation_Date_Range', None), ('Donation_Donor', None), ('Donation_Matching_Behavior', None), ('Donation_Matching_Implementing_Class', None), ('Donation_Matching_Rule', None), ('Donation_Member_Level', None), ('Donation_Membership_Origin', None), ('Donation_Name', None), ('Donation_Possible_Matches', None), ('Donation_Record_Type_Name', None), ('Donation_Stage', None), ('Donation_Type', None), ('DonationCampaignImportStatus', None), ('DonationImportStatus', None), ('Duration_hours', None), ('Email', None), ('Email', None), ('EmailBouncedReason', None), ('Engagement_Plan_Template', None), ('Engagement_Plan_Template', None), ('Engagement_Plan_Template', None), ('enrollments_this_semester_Applied', None), ('enrollments_this_semester_Drop_out', None), ('enrollments_this_semester_Rejected', None), ('enrollments_this_semester_Waitlisted', None), ('Equipment', None), ('Error_Record_Link', None), ('Error_Type', None), ('Error_Type', None), ('Expected_Count_of_Gifts', None), ('Expected_graduation_year', None), ('Family_size', None), ('Fax', None), ('Fax', None), ('Fax', None), ('FieldToAggregate', None), ('FieldToOrderBy', None), ('FirstName', None), ('FirstName', None), ('FirstName', None), ('Formal_Greeting', None), ('Formal_Greeting', None), ('Frequency', None), ('Gender', None), ('Gender_Other', None), ('General_Accounting_Unit', None), ('Have_reliable_internet_access_at_home', None), ('Home_City', None), ('Home_Country', None), ('Home_State_Province', None), ('Home_Street', None), ('Home_Zip_Postal_Code', None), ('HomeAddressImportStatus', None), ('HomeEmail', None), ('HomePhone', None), ('Household', None), ('Household_Account', None), ('Household_ID', None), ('Household_Naming_Order', None), ('Household_Phone', None), ('Household_type', None), ('HouseholdAccountImported', None), ('HouseholdEmail', None), ('HouseholdPhone', None), ('HouseholdPhone', None), ('How_did_you_hear_about_us', None), ('How_did_you_hear_about_us_other', None), ('If_self_certified_please_explain', None), ('Individual', None), ('Individual', None), ('IndividualsAge', None), ('Industry', None), ('Industry', None), ('Informal_Greeting', None), ('Informal_Greeting', None), ('Installment_Period', None), ('Installments', None), ('Instructor', None), ('Jigsaw', None), ('Jigsaw', None), ('Jigsaw', None), ('Label', None), ('LastMembershipLevel', None), ('LastMembershipLevel', None), ('LastMembershipLevel', None), ('LastMembershipOrigin', None), ('LastMembershipOrigin', None), ('LastMembershipOrigin', None), ('LastName', None), ('LastName', None), ('LastName', None), ('LeadSource', None), ('LeadSource', None), ('Level_Field', None), ('Load_Order', None), ('Location', None), ('LookupParent', None), ('LookupParent', None), ('LookupParent2', None), ('LookupRollupSummary', None), ('LookupRollupSummary2', None), ('LookupRollupSummaryId', None), ('MailingAddress', None), ('MailingCity', None), ('MailingCity', None), ('MailingCity', None), ('MailingCountry', None), ('MailingCountry', None), ('MailingCountry', None), ('MailingCountryCode', None), ('MailingPostalCode', None), ('MailingPostalCode', None), ('MailingPostalCode', None), ('MailingState', None), ('MailingState', None), ('MailingState', None), ('MailingStateCode', None), ('MailingStreet', None), ('MailingStreet', None), ('MailingStreet', None), ('MailingStreet2', None), ('Manufacturer', None), ('Matching_Gift_Administrator_Name', None), ('Matching_Gift_Email', None), ('Matching_Gift_Percent', None), ('Matching_Gift_Phone', None), ('Matching_Gift_Request_Deadline', None), ('Maximum_Amount', None), ('Meeting_Days', None), ('MiddleName', None), ('MiddleName', None), ('MiddleName', None), ('MilitaryService', None), ('Minimum_Amount', None), ('MobilePhone', None), ('MobilePhone', None), ('Model', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('Name', None), ('NPSP_Data_Import_Batch', None), ('Number_of_Allocations_Last_N_Days', None), ('Number_of_Allocations_Last_Year', None), ('Number_of_Allocations_This_Year', None), ('Number_of_Allocations_Two_Years_Ago', None), ('Number_of_Household_Members', None), ('Number_of_Household_Members', None), ('Number_of_Items', None), ('Number_of_Soft_Credits', None), ('Number_of_Soft_Credits_Last_N_Days', None), ('Number_of_Soft_Credits_Last_Year', None), ('Number_of_Soft_Credits_This_Year', None), ('Number_of_Soft_Credits_Two_Years_Ago', None), ('NumberOfClosedOpps', None), ('NumberOfClosedOpps', None), ('NumberOfClosedOpps', None), ('NumberOfEmployees', None), ('NumberOfEmployees', None), ('NumberOfMembershipOpps', None), ('NumberOfMembershipOpps', None), ('NumberOfMembershipOpps', None), ('Object', None), ('Object_Name', None), ('Object_Type', None), ('Occupation', None), ('One2OneContact', None), ('Open_Ended_Status', None), ('OppsClosed2YearsAgo', None), ('OppsClosed2YearsAgo', None), ('OppsClosed2YearsAgo', None), ('OppsClosedLastNDays', None), ('OppsClosedLastNDays', None), ('OppsClosedLastNDays', None), ('OppsClosedLastYear', None), ('OppsClosedLastYear', None), ('OppsClosedLastYear', None), ('OppsClosedThisYear', None), ('OppsClosedThisYear', None), ('OppsClosedThisYear', None), ('Organization', None), ('Organization', None), ('OS', None), ('Other_sexual_orientation', None), ('OtherAddress', None), ('OtherCity', None), ('OtherCountry', None), ('OtherCountryCode', None), ('OtherPhone', None), ('OtherPostalCode', None), ('OtherState', None), ('OtherStateCode', None), ('OtherStreet', None), ('Ownership', None), ('Parent', None), ('Parent_Contact', None), ('Parent_Guardian_email', None), ('Parent_Guardian_first_name', None), ('Parent_Guardian_last_name', None), ('Parent_Guardian_phone', None), ('Parent_Task', None), ('ParentId', None), ('ParentId', None), ('ParentObject', None), ('ParentObject', None), ('Payment_Acknowledgment_Status', None), ('Payment_Check_Reference_Number', None), ('Payment_Method', None), ('Payment_Method', None), ('Payment_Possible_Matches', None), ('PaymentImportStatus', None), ('Percent', None), ('Phone', None), ('Phone', None), ('Phone', None), ('Post_Process_Implementing_Class', None), ('PostalCode', None), ('Pre_Verification_Address', None), ('Preferred_Email', None), ('Preferred_Email', None), ('Preferred_Phone', None), ('PreferredPhone', None), ('Previous_Level_Field', None), ('Primary_Address_Type', None), ('Primary_Affiliation', None), ('Priority', None), ('purchased_or_donated', None), ('QualifiedParentID', None), ('Race', None), ('Race_Other', None), ('RAM', None), ('Rating', None), ('Rating', None), ('Record_URL', None), ('Records_Failed', None), ('Records_Successfully_Processed', None), ('Recurring_Donation', None), ('Recurring_Donation', None), ('Related_Opportunity_Contact_Role', None), ('Related_Opportunity_Contact_Role', None), ('RelatedContact', None), ('RelationshipCriteria', None), ('RelationshipCriteriaFields', None), ('RelationshipField', None), ('Reminder_Time', None), ('ReportsTo', None), ('Reschedule_To', None), ('Role', None), ('Role', None), ('Role', None), ('Role_Name', None), ('RowLimit', None), ('Salutation', None), ('Salutation', None), ('Salutation', None), ('Schedule_Type', None), ('Seasonal_End_Day', None), ('Seasonal_End_Month', None), ('Seasonal_Start_Day', None), ('Seasonal_Start_Month', None), ('Secondary_Address_Type', None), ('Serial', None), ('Sex_at_birth', None), ('Sexual_orientation', None), ('ShippingAddress', None), ('ShippingCity', None), ('ShippingCountry', None), ('ShippingCountryCode', None), ('ShippingPostalCode', None), ('ShippingState', None), ('ShippingStateCode', None), ('ShippingStreet', None), ('Sic', None), ('SicDesc', None), ('Site', None), ('Source_Field', None), ('State', None), ('State_Lower_District', None), ('State_Upper_District', None), ('StateCode', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Status', None), ('Street', None), ('Suffix', None), ('Suffix', None), ('Suffix', None), ('SYSTEM_AccountType', None), ('SystemAccountProcessor', None), ('SystemHouseholdProcessor', None), ('Target', None), ('TextName', None), ('TickerSymbol', None), ('Title', None), ('Title', None), ('Total', None), ('Total_Number_of_Allocations', None), ('Total_Paid_Installments', None), ('Total_Tasks', None), ('Total2', None), ('Type', None), ('Type', None), ('Type', None), ('Type', None), ('Type', None), ('UniqueName', None), ('Use_a_computer_at_home', None), ('Usernames_to_Exclude', None), ('Vendor_Donor', None), ('Verification_Status', None), ('Website', None), ('Website', None), ('Website', None), ('Which_best_describes_your_ethnicity', None), ('Why_select_this_particular_class', None), ('Why_select_this_particular_class_Other', None), ('Withdrew_Application_Detail', None), ('WorkEmail', None), ('WorkPhone', None)], blank=True, null=True)
    matching_method = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Exact', 'Exact'), ('FirstName', 'Fuzzy: First Name'), ('LastName', 'Fuzzy: Last Name'), ('CompanyName', 'Fuzzy: Company Name'), ('Phone', 'Fuzzy: Phone'), ('City', 'Fuzzy: City'), ('Street', 'Fuzzy: Street'), ('Zip', 'Fuzzy: ZIP'), ('Title', 'Fuzzy: Title')], blank=True, null=True)
    blank_value_behavior = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='MatchBlanks', choices=[('MatchBlanks', 'Match When Both Blank'), ('NullNotAllowed', 'Does Not Match If Null')])
    class Meta(models.Model.Meta):
        db_table = 'MatchingRuleItem'
        verbose_name = 'Matching Rule Item'
        verbose_name_plural = 'Matching Rule Items'
        # keyPrefix = '0JE'



class MyDomainDiscoverableLogin(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mydomaindiscoverablelogin_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='mydomaindiscoverablelogin_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_handler = models.ForeignKey(ApexClass, models.DO_NOTHING)
    execute_apex_handler_as = models.ForeignKey('User', models.DO_NOTHING, related_name='mydomaindiscoverablelogin_executeapexhandleras_set', blank=True, null=True)
    username_label = models.CharField(max_length=255, verbose_name='Login Prompt', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'MyDomainDiscoverableLogin'
        verbose_name = 'My Domain Discoverable Login'
        verbose_name_plural = 'My Domain Discoverable Logins'
        # keyPrefix = '4hy'



class Name(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    middle_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AccountContactRole', None), ('Announcement', None), ('AppAnalyticsQueryRequest', None), ('Asset', None), ('AssetRelationship', None), ('BackgroundOperation', None), ('Campaign', None), ('Case', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('Contact', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContentDistribution', None), ('ContentDocument', None), ('ContentFolder', None), ('ContentVersion', None), ('Contract', None), ('Dashboard', None), ('DashboardComponent', None), ('DataAssessmentFieldMetric', None), ('DataAssessmentMetric', None), ('DataAssessmentValueMetric', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Event', None), ('ExpressionFilter', None), ('ExpressionFilterCriteria', None), ('FileSearchActivity', None), ('FlowInterview', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('ForecastingOwnerAdjustment', None), ('Image', None), ('Incident__c', None), ('Individual', None), ('InstalledMobileApp', None), ('Lead', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('Macro', None), ('MacroInstruction', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('Opportunity', None), ('Order', None), ('OrderItem', None), ('Pricebook2', None), ('ProcessInstanceNode', None), ('Product2', None), ('Queue', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('RecordAction', None), ('Report', None), ('SearchActivity', None), ('SelfServiceUser', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('Survey__c', None), ('Task', None), ('TodayGoal', None), ('Topic', None), ('User', None), ('UserAppInfo', None), ('UserAppMenuCustomization', None), ('UserEmailPreferredPerson', None), ('WaveAutoInstallRequest', None), ('WaveCompatibilityCheckItem', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)], blank=True, null=True)
    alias = models.CharField(max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, related_name='name_userrole_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, related_name='name_recordtype_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey('Profile', models.DO_NOTHING, related_name='name_profile_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    username = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Name'
        verbose_name = 'Name'
        verbose_name_plural = 'Names'
        # keyPrefix = 'None'



class NamedCredential(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='namedcredential_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='namedcredential_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    endpoint = models.TextField(verbose_name='URL', sf_read_only=models.READ_ONLY, help_text='The URL for connecting to the external system.', blank=True, null=True)
    principal_type = models.CharField(max_length=255, verbose_name='Identity Type', sf_read_only=models.READ_ONLY, help_text='Used to track users accessing the external server. Anonymous implies a user identity is not specified for external server access. Named Principal uses one user identity for all users to access the external server.', choices=[('Anonymous', 'Anonymous'), ('PerUser', 'Per User'), ('NamedUser', 'Named Principal')])
    callout_options_generate_authorization_header = models.BooleanField(verbose_name='GenerateAuthorizationHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_header = models.BooleanField(verbose_name='AllowMergeFieldsInHeader', sf_read_only=models.READ_ONLY)
    callout_options_allow_merge_fields_in_body = models.BooleanField(verbose_name='AllowMergeFieldsInBody', sf_read_only=models.READ_ONLY)
    auth_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'NamedCredential'
        verbose_name = 'Named Credential'
        verbose_name_plural = 'Named Credentials'
        # keyPrefix = '0XA'



class Note(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, Opportunity, Order, Product2, Quote, SocialPost, Survey__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__OppPayment__c, npe03__Recurring_Donation__c, npe4__Relationship_Error__c, npe4__Relationship__c, npe5__Affiliation__c, npo02__Household__c, npsp__Account_Soft_Credit__c, npsp__Address__c, npsp__Allocation__c, npsp__Batch__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Level__c, npsp__Partial_Soft_Credit__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    title = models.CharField(max_length=80)
    is_private = models.BooleanField(verbose_name='Private', default=models.DEFAULTED_ON_CREATE)
    body = models.TextField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='note_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='note_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='note_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Note'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '002'



class NoteAndAttachment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_note = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, Opportunity, Order, Product2, Quote, SocialPost, Survey__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__OppPayment__c, npe03__Recurring_Donation__c, npe4__Relationship_Error__c, npe4__Relationship__c, npe5__Affiliation__c, npo02__Household__c, npsp__Account_Soft_Credit__c, npsp__Address__c, npsp__Allocation__c, npsp__Batch__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Level__c, npsp__Partial_Soft_Credit__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_private = models.BooleanField(verbose_name='Private', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_owner_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='noteandattachment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'NoteAndAttachment'
        verbose_name = 'Note and Attachment'
        verbose_name_plural = 'Notes and Attachments'
        # keyPrefix = 'None'



class OauthToken(models.Model):
    access_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    request_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_name = models.CharField(max_length=255, verbose_name='Application Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_used_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    use_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    delete_token = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    app_menu_item = models.ForeignKey(AppMenuItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OauthToken'
        verbose_name = 'Oauth Token'
        verbose_name_plural = 'Oauth Tokens'
        # keyPrefix = '0CQ'



class ObjectPermissions(models.Model):
    parent = models.ForeignKey('PermissionSet', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('AccountBrand', None), ('AccountRelationship', None), ('Accreditation', None), ('ActionCadence', None), ('ActionCadenceStep', None), ('ActionCadenceStepTracker', None), ('ActionCadenceTracker', None), ('ActionPlan', None), ('ActionPlanTemplate', None), ('ActiveScratchOrg', None), ('AddOnDefinition', None), ('Address', None), ('AggregationRow', None), ('AiDataset', None), ('AiImageDetectedObject', None), ('AiImageTrainingObject', None), ('AiVisionModel', None), ('AppAnalyticsQueryRequest', None), ('Asset', None), ('Assortment', None), ('AssortmentProduct', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('Award', None), ('BillingPeriodItem', None), ('BillingPeriodTaxItem', None), ('BillingSchedule', None), ('BoardCertification', None), ('BusinessLicense', None), ('BuyerAccount', None), ('BuyerGroupPricebook', None), ('Campaign', None), ('CardPaymentMethod', None), ('CareBarrier', None), ('CareBarrierDeterminant', None), ('CareBarrierType', None), ('CareDeterminant', None), ('CareDeterminantType', None), ('CareDiagnosis', None), ('CareInterventionType', None), ('CarePreauth', None), ('CarePreauthItem', None), ('CareProgram', None), ('CareProgramCampaign', None), ('CareProgramEligibilityRule', None), ('CareProgramEnrollee', None), ('CareProgramEnrolleeProduct', None), ('CareProgramEnrollmentCard', None), ('CareProgramGoal', None), ('CareProgramProduct', None), ('CareProgramProvider', None), ('CareProgramTeamMember', None), ('CareProviderFacilitySpecialty', None), ('CareRequest', None), ('CareRequestDrug', None), ('CareRequestExtension', None), ('CareRequestItem', None), ('CareSpecialty', None), ('CareTaxonomy', None), ('Case', None), ('Certification', None), ('CertificationDef', None), ('CertificationSectionDef', None), ('CertificationStep', None), ('CertificationStepDef', None), ('ChannelProgram', None), ('ChannelProgramLevel', None), ('ChannelProgramMember', None), ('Claim', None), ('ClaimCase', None), ('ClaimParticipant', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('CloudServiceProvider', None), ('CloudServiceProviderApi', None), ('CommerceEntitlementBuyerGroup', None), ('CommerceEntitlementPolicy', None), ('CommerceEntitlementProduct', None), ('ConsumptionSchedule', None), ('Contact', None), ('ContactPointAddress', None), ('ContactPointConsent', None), ('ContactPointEmail', None), ('ContactPointPhone', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('Contract', None), ('ContractLineItem', None), ('CoverageBenefit', None), ('CoverageBenefitItem', None), ('CoverageType', None), ('CustomerProperty', None), ('DandBCompany', None), ('DataSharingCustomerLocal', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('DuplicateRecordSet', None), ('EditionDefinition', None), ('EngagementProgram', None), ('EngagementProgramNode', None), ('EngagementProgramVersion', None), ('EnrollmentEligibilityCriteria', None), ('Entitlement', None), ('EntitlementContact', None), ('EnvironmentHubInvitation', None), ('EnvironmentHubMember', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('FtestAccountChild', None), ('FtestChild', None), ('FtestConcrete', None), ('FtestConcrete2', None), ('FtestConcrete3', None), ('FtestConcrete4', None), ('FtestConcrete5', None), ('FtestConcrete6', None), ('FtestConcrete7', None), ('FtestConcrete8', None), ('FtestConcreteNoDefault', None), ('FtestConcreteNoDefault2', None), ('FtestConcreteNoDefault3', None), ('FtestConcreteNoSup', None), ('FtestConcreteNoSup2', None), ('FtestConcreteNoSup3', None), ('FtestContactPointEmail', None), ('FtestContactPointPhone', None), ('FtestError', None), ('FtestErrorChild', None), ('FtestGrandChild', None), ('FtestHiddenName', None), ('FtestMain', None), ('FtestOffCoreRecord', None), ('FtestPerson', None), ('FtestVirtualMain', None), ('FulfillmentOrder', None), ('FulfillmentOrderLineItem', None), ('Goal', None), ('GoalLink', None), ('HealthCareDiagnosis', None), ('HealthcareFacilityNetwork', None), ('HealthcarePayerNetwork', None), ('HealthcarePractitionerFacility', None), ('HealthCareProcedure', None), ('HealthcareProvider', None), ('HealthcareProviderNpi', None), ('HealthcareProviderSpecialty', None), ('HealthcareProviderTaxonomy', None), ('Household', None), ('Idea', None), ('IdeaTheme', None), ('IdentityDocument', None), ('Image', None), ('Incident__c', None), ('IncludedLicenseDefinition', None), ('Individual', None), ('InStoreLocation', None), ('InsuranceClaimAsset', None), ('InsurancePolicy', None), ('InsurancePolicyAsset', None), ('InsurancePolicyCoverage', None), ('InsurancePolicyMemberAsset', None), ('InsurancePolicyParticipant', None), ('InsuranceProfile', None), ('Invoice', None), ('InvoiceLine', None), ('KeyPerformanceIndicator', None), ('Lead', None), ('LicensingError', None), ('LicensingRequest', None), ('LiveAgentSession', None), ('LiveChatTranscript', None), ('LiveChatVisitor', None), ('LoanApplicant', None), ('LoanApplicantAddress', None), ('LoanApplicantAsset', None), ('LoanApplicantDeclaration', None), ('LoanApplicantEmployment', None), ('LoanApplicantIncome', None), ('LoanApplicantLiability', None), ('LoanApplicationFinancial', None), ('LoanApplicationPayment', None), ('LoanApplicationProperty', None), ('LoanApplicationTitleHolder', None), ('Location', None), ('Macro', None), ('MaintenancePlan', None), ('ManagementAddOnLicense', None), ('ManagementEditionLicense', None), ('ManagementPlatformLicense', None), ('ManagementUserLicense', None), ('MemberPlan', None), ('MessagingEndUser', None), ('MessagingSession', None), ('Metric', None), ('MetricDataLink', None), ('MyCustomObject', None), ('NamespaceRegistry', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('OperatingHours', None), ('Opportunity', None), ('Order', None), ('OrderDeliveryGroup', None), ('OrderDeliveryMethod', None), ('OrderPaymentSummary', None), ('OrderSummary', None), ('OrgSnapshot', None), ('PartnerFundAllocation', None), ('PartnerFundClaim', None), ('PartnerFundRequest', None), ('PartnerMarketingBudget', None), ('PartyRelatedParty', None), ('PartyRelationshipType', None), ('Payment', None), ('PaymentAuthorization', None), ('PaymentGateway', None), ('PaymentGroup', None), ('PaymentLineInvoice', None), ('PersonEducation', None), ('PersonEmployment', None), ('PersonLifeEvent', None), ('PersonList', None), ('PlanBenefit', None), ('PlanBenefitItem', None), ('PlatformLicenseDefinition', None), ('PriceAdjustmentSchedule', None), ('PriceAdjustmentTier', None), ('Pricebook2', None), ('Producer', None), ('Product2', None), ('ProductCatalog', None), ('ProductCategory', None), ('ProductCategoryProduct', None), ('ProductCoverage', None), ('ProductItem', None), ('ProductRequest', None), ('ProductTransfer', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('Promotion', None), ('PromotionChannel', None), ('PromotionProduct', None), ('PromotionProductCategory', None), ('PurchaserPlan', None), ('PurchaserPlanAssn', None), ('PushTopic', None), ('Question', None), ('QuickText', None), ('Quote', None), ('Refund', None), ('RegisteredMobileDevice', None), ('ResidentialLoanApplication', None), ('RetailContentDocument', None), ('RetailLocationGroup', None), ('RetailStore', None), ('RetailStoreKpi', None), ('RetailStoreVisitTemplate', None), ('RetailVisitKpi', None), ('RetailVisitTemplate', None), ('RetailVisitTemplateWorkTask', None), ('RetailVisitWorkTask', None), ('RetailWorkTask', None), ('RetailWorkTaskKpi', None), ('ReturnOrder', None), ('SalesAgreement', None), ('SalesChannel', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('ScratchOrgInfo', None), ('ServiceAppointment', None), ('ServiceContract', None), ('ServiceCrew', None), ('ServiceResource', None), ('ServiceTerritory', None), ('SettingUsageDefinition', None), ('SettingUsageMap', None), ('ShapeRepresentation', None), ('Shift', None), ('Shipment', None), ('SignupRequest', None), ('Snippet', None), ('SocialPost', None), ('Solution', None), ('SOSSession', None), ('StoreAssortment', None), ('StoreProduct', None), ('StreamingChannel', None), ('Survey', None), ('Survey__c', None), ('SurveyInvitation', None), ('SurveyResponse', None), ('SurveySubject', None), ('Tenant', None), ('TenantParameterMap', None), ('TimeSheet', None), ('TrialEnvironmentSignup', None), ('UsageEntitlement', None), ('UsageFactor', None), ('UserLicenseDefinition', None), ('Visit', None), ('WebCart', None), ('WebStoreCatalog', None), ('WebStorePricebook', None), ('WorkCapacityLimit', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkFeedbackTemplate', None), ('WorkGoal', None), ('WorkGoalCollaborator', None), ('WorkGoalLink', None), ('WorkOrder', None), ('WorkPerformanceCycle', None), ('WorkReward', None), ('WorkRewardFund', None), ('WorkRewardFundType', None), ('WorkType', None), ('WorkTypeGroup', None), ('WorkUpgradeAction', None), ('WorkUpgradeCustomer', None), ('WorkUpgradeUser', None)])
    permissions_create = models.BooleanField(verbose_name='Create Records')
    permissions_read = models.BooleanField(verbose_name='Read Records')
    permissions_edit = models.BooleanField(verbose_name='Edit Records')
    permissions_delete = models.BooleanField(verbose_name='Delete Records')
    permissions_view_all_records = models.BooleanField(verbose_name='Read All Records')
    permissions_modify_all_records = models.BooleanField(verbose_name='Edit All Records')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='objectpermissions_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='objectpermissions_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ObjectPermissions'
        verbose_name = 'Object Permissions'
        verbose_name_plural = 'Object Permissions'
        # keyPrefix = '110'



class OnboardingMetrics(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='onboardingmetrics_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='onboardingmetrics_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='onboardingmetrics_user_set')  # Master Detail Relationship *
    seen_count = models.IntegerField(blank=True, null=True)
    experience_name = models.CharField(max_length=255)
    class Meta(models.Model.Meta):
        db_table = 'OnboardingMetrics'
        verbose_name = 'Onboarding Metrics'
        verbose_name_plural = 'Onboarding Metrics'
        # keyPrefix = '0UG'



class OpenActivity(models.Model):
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='openactivity_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey(Contact, models.DO_NOTHING, related_name='openactivity_who_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='openactivity_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Enrollment__c, ContactRequest, Contract, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, npe03__Recurring_Donation__c, npo02__Household__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c] Master Detail Relationship *
    subject = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    is_task = models.BooleanField(verbose_name='Task', sf_read_only=models.READ_ONLY, default=False)
    activity_date = models.DateField(verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey(Calendar, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, User]
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')], blank=True, null=True)
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    activity_type = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Text', None), ('Text', None)], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_visible_in_self_service = models.BooleanField(verbose_name='Public', sf_read_only=models.READ_ONLY, default=False)
    duration_in_minutes = models.IntegerField(verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='openactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    end_date_time = models.DateTimeField(verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_date_time = models.DateTimeField(verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    primary_who = models.ForeignKey(Contact, models.DO_NOTHING, related_name='openactivity_primarywho_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    primary_account = models.ForeignKey(Account, models.DO_NOTHING, related_name='openactivity_primaryaccount_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    activity_subtype = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call'), ('Event', 'Event')], blank=True, null=True)
    alternate_detail = models.ForeignKey(EmailMessage, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Task__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_engagement_plan = models.ForeignKey('NpspEngagementPlan', models.DO_NOTHING, db_column='npsp__Engagement_Plan__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'OpenActivity'
        verbose_name = 'Open Activity'
        verbose_name_plural = 'Open Activities'
        # keyPrefix = 'None'



class Opportunity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='opportunity_account_set', blank=True, null=True)  # Master Detail Relationship *
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=120)
    description = models.TextField(blank=True, null=True)
    stage_name = models.CharField(max_length=40, verbose_name='Stage', choices=[('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Proposal', 'Proposal'), ('Negotiation', 'Negotiation'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost'), ('Prospecting', 'Prospecting'), ('Value Proposition', 'Value Proposition'), ('Id. Decision Makers', 'Id. Decision Makers'), ('Perception Analysis', 'Perception Analysis'), ('Proposal/Price Quote', 'Proposal/Price Quote'), ('Negotiation/Review', 'Negotiation/Review')])
    amount = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    close_date = models.DateField()
    type = models.CharField(max_length=40, verbose_name='Opportunity Type', choices=[('Existing Business', 'Existing Business'), ('New Business', 'New Business')], blank=True, null=True)
    next_step = models.CharField(max_length=255, blank=True, null=True)
    lead_source = models.CharField(max_length=40, choices=[('Advertisement', 'Advertisement'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Internal'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Trade Show'), ('Web', 'Web'), ('Word of mouth', 'Word of mouth'), ('Other', 'Other')], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, blank=True, null=True)
    has_opportunity_line_item = models.BooleanField(verbose_name='Has Line Item', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_quarter = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal_year = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal = models.CharField(max_length=6, verbose_name='Fiscal Period', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    synced_quote = models.ForeignKey('Quote', models.DO_NOTHING, related_name='opportunity_syncedquote_set', blank=True, null=True)
    has_open_activity = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_overdue_task = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    npe01_amount_outstanding = models.DecimalField(db_column='npe01__Amount_Outstanding__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Remaining Balance', sf_read_only=models.READ_ONLY, help_text='Formula: The Amount of this Opportunity minus the Payment Writeoff Amount and Payment Amount Received.', blank=True, null=True) 
    npe01_contact_id_for_role = models.CharField(db_column='npe01__Contact_Id_for_Role__c', custom=True, max_length=255, verbose_name='Contact Id for Role', help_text='Hidden field for passing a Contact Id for Contact Role creation.', blank=True, null=True) 
    npe01_do_not_automatically_create_payment = models.BooleanField(db_column='npe01__Do_Not_Automatically_Create_Payment__c', custom=True, verbose_name='Do Not Automatically Create Payment', default=models.DEFAULTED_ON_CREATE, help_text='If payments are active, and if checked, a new payment will not be automatically created for this Opportunity.') 
    npe01_is_opp_from_individual = models.CharField(db_column='npe01__Is_Opp_From_Individual__c', custom=True, max_length=1300, verbose_name='Is Opp From Individual', sf_read_only=models.READ_ONLY, help_text='Formula: Whether or not the related Account is defined as an individual (SYSTEMIsIndividual__c)', blank=True, null=True) 
    npe01_member_level = models.CharField(db_column='npe01__Member_Level__c', custom=True, max_length=255, verbose_name='Member Level', help_text='Determines the value on the Contact or Account of the Last Membership Level field.', choices=[('Gold', 'Gold'), ('Silver', 'Silver'), ('Bronze', 'Bronze')], blank=True, null=True) 
    npe01_membership_end_date = models.DateField(db_column='npe01__Membership_End_Date__c', custom=True, verbose_name='Membership End Date', help_text='Date membership period ends.', blank=True, null=True) 
    npe01_membership_origin = models.CharField(db_column='npe01__Membership_Origin__c', custom=True, max_length=255, verbose_name='Membership Origin', help_text='Is this a renewal, a new membership, or a membership with someone who lapsed and has returned.', choices=[('New', 'New'), ('Renewal', 'Renewal'), ('Reacquire', 'Reacquire')], blank=True, null=True) 
    npe01_membership_start_date = models.DateField(db_column='npe01__Membership_Start_Date__c', custom=True, verbose_name='Membership Start Date', help_text='Date when membership period starts', blank=True, null=True) 
    npe01_amount_written_off = models.DecimalField(db_column='npe01__Amount_Written_Off__c', custom=True, max_digits=14, decimal_places=2, verbose_name='Payment Writeoff Amount', sf_read_only=models.READ_ONLY, help_text='Total value of the Payments marked as written-off or noncollectable for this Opportunity.', blank=True, null=True) 
    npe01_number_of_payments = models.DecimalField(db_column='npe01__Number_of_Payments__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Payments', sf_read_only=models.READ_ONLY, help_text='Total number of payments for this Opportunity (Donation)', blank=True, null=True) 
    npe01_payments_made = models.DecimalField(db_column='npe01__Payments_Made__c', custom=True, max_digits=14, decimal_places=2, verbose_name='Payment Amount Received', sf_read_only=models.READ_ONLY, help_text='The total value of Payments marked as paid for this Opportunity.', blank=True, null=True) 
    npo02_combined_rollup_fieldset = models.CharField(db_column='npo02__CombinedRollupFieldset__c', custom=True, max_length=1300, verbose_name='Combined Rollup Fieldset', sf_read_only=models.READ_ONLY, help_text='Formula: Concatenated fields used during rollups to locate the most recent opportunity.', blank=True, null=True) 
    npo02_system_household_contact_role_processor = models.CharField(db_column='npo02__systemHouseholdContactRoleProcessor__c', custom=True, max_length=255, verbose_name='_SYSTEM: HOUSEHOLD CONTACT ROLEPROCESSOR', default=models.DEFAULTED_ON_CREATE, help_text='Controls if Household contact roles are created for Opportunities.  DEPRECATED.  Replaced by custom settings.', choices=[('All Opportunities', 'All Opportunities'), ('No Opportunities', 'No Opportunities')], blank=True, null=True) 
    npe03_recurring_donation = models.ForeignKey('Npe03RecurringDonation', models.DO_NOTHING, db_column='npe03__Recurring_Donation__c', custom=True, blank=True, null=True) 
    npsp_acknowledgment_date = models.DateField(db_column='npsp__Acknowledgment_Date__c', custom=True, verbose_name='Acknowledgment Date', help_text='Date of acknowledgment', blank=True, null=True) 
    npsp_acknowledgment_status = models.CharField(db_column='npsp__Acknowledgment_Status__c', custom=True, max_length=255, verbose_name='Acknowledgment Status', help_text='Status of Acknowledgment of this gift.', choices=[('To Be Acknowledged', 'To Be Acknowledged'), ('Acknowledged', 'Acknowledged'), ('Do Not Acknowledge', 'Do Not Acknowledge'), ('Email Acknowledgment Now', 'Email Acknowledgment Now'), ('Email Acknowledgment Not Sent', 'Email Acknowledgment Not Sent')], blank=True, null=True) 
    npsp_ask_date = models.DateField(db_column='npsp__Ask_Date__c', custom=True, verbose_name='Ask Date', help_text='The date when the donor was specifically asked for the donation, as opposed to the Opportunity Close Date that the organization may set to either when the Opportunity was first created, or when the Opportunity was won.', blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, blank=True, null=True) 
    npsp_closed_lost_reason = models.TextField(db_column='npsp__Closed_Lost_Reason__c', custom=True, verbose_name='Closed Lost Reason', help_text='Notes on why the donation ask was not successful.', blank=True, null=True) 
    npsp_fair_market_value = models.DecimalField(db_column='npsp__Fair_Market_Value__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Fair Market Value', help_text='The Fair Market Value of an In-Kind gift.', blank=True, null=True) 
    npsp_gift_strategy = models.CharField(db_column='npsp__Gift_Strategy__c', custom=True, max_length=255, verbose_name='Gift Strategy', help_text='Categorizes the type of ask for this opportunity.', choices=[('New Donor', 'New Donor'), ('Renewal', 'Renewal'), ('Upgrade', 'Upgrade')], blank=True, null=True) 
    npsp_grant_contract_date = models.DateField(db_column='npsp__Grant_Contract_Date__c', custom=True, verbose_name='Grant Contract Date', help_text="The date of the grant's inception, according to the document or contract sent by the grant-making organization.", blank=True, null=True) 
    npsp_grant_contract_number = models.CharField(db_column='npsp__Grant_Contract_Number__c', custom=True, max_length=255, verbose_name='Grant Contract Number', help_text='Tracks unique numbers sometimes assigned by grant-making organizations.', blank=True, null=True) 
    npsp_grant_period_end_date = models.DateField(db_column='npsp__Grant_Period_End_Date__c', custom=True, verbose_name='Grant Period End Date', blank=True, null=True) 
    npsp_grant_period_start_date = models.DateField(db_column='npsp__Grant_Period_Start_Date__c', custom=True, verbose_name='Grant Period Start Date', blank=True, null=True) 
    npsp_grant_program_area_s = models.TextField(db_column='npsp__Grant_Program_Area_s__c', custom=True, verbose_name='Program Areas', help_text='Describes the funding areas for the grant/gift. You can enter anything you want here. For example, you could enter the name of the program the grant/gift applies to.', blank=True, null=True) 
    npsp_grant_requirements_website = models.URLField(db_column='npsp__Grant_Requirements_Website__c', custom=True, verbose_name='Grant Requirements Website', help_text="A URL that points to the grant requirements on the grant-maker's website.", blank=True, null=True) 
    npsp_honoree_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Honoree_Contact__c', custom=True, related_name='opportunity_npsphonoreecontact_set', blank=True, null=True) 
    npsp_honoree_name = models.CharField(db_column='npsp__Honoree_Name__c', custom=True, max_length=255, verbose_name='Honoree Name', help_text='The honoree name as provided by the donor. If this field is left blank, and the Honoree Contact field contains a value, Salesforce automatically populates this field with that value.', blank=True, null=True) 
    npsp_in_kind_description = models.TextField(db_column='npsp__In_Kind_Description__c', custom=True, verbose_name='In-Kind Description', help_text='Holds any rich text description of the In-Kind Gift, including pictures.', blank=True, null=True) 
    npsp_in_kind_donor_declared_value = models.BooleanField(db_column='npsp__In_Kind_Donor_Declared_Value__c', custom=True, verbose_name='In-Kind Donor Declared Value', default=models.DEFAULTED_ON_CREATE, help_text='Checked if the donor provided the Fair Market Value for this In-Kind gift.') 
    npsp_in_kind_type = models.CharField(db_column='npsp__In_Kind_Type__c', custom=True, max_length=255, verbose_name='In-Kind Type', help_text='The type of In-Kind gift.', choices=[('Goods', 'Goods'), ('Services', 'Services')], blank=True, null=True) 
    npsp_is_grant_renewal = models.BooleanField(db_column='npsp__Is_Grant_Renewal__c', custom=True, verbose_name='Is Grant Renewal', default=models.DEFAULTED_ON_CREATE, help_text='If selected, indicates that the grant is a renewal of a previous grant.') 
    npsp_matching_gift_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Matching_Gift_Account__c', custom=True, related_name='opportunity_npspmatchinggiftaccount_set', blank=True, null=True) 
    npsp_matching_gift_employer = models.CharField(db_column='npsp__Matching_Gift_Employer__c', custom=True, max_length=255, verbose_name='Matching Gift Employer', help_text='The name of the company who will match this gift.', blank=True, null=True) 
    npsp_matching_gift_status = models.CharField(db_column='npsp__Matching_Gift_Status__c', custom=True, max_length=255, verbose_name='Matching Gift Status', help_text='The status of this gift being matched.', choices=[('Potential', 'Potential'), ('Submitted', 'Submitted'), ('Received', 'Received')], blank=True, null=True) 
    npsp_matching_gift = models.ForeignKey('self', models.DO_NOTHING, db_column='npsp__Matching_Gift__c', custom=True, related_name='opportunity_npspmatchinggift_set', blank=True, null=True) 
    npsp_notification_message = models.TextField(db_column='npsp__Notification_Message__c', custom=True, verbose_name='Notification Message', help_text='A personalized message for the notification recipient.', blank=True, null=True) 
    npsp_notification_preference = models.CharField(db_column='npsp__Notification_Preference__c', custom=True, max_length=255, verbose_name='Notification Preference', help_text='How the notification recipient should be notified.', choices=[('Email', 'Email'), ('Postal Mail', 'Postal Mail'), ('Phone', 'Phone'), ('Do Not Notify', 'Do Not Notify')], blank=True, null=True) 
    npsp_notification_recipient_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Notification_Recipient_Contact__c', custom=True, related_name='opportunity_npspnotificationrecipientcontact_set', blank=True, null=True) 
    npsp_notification_recipient_information = models.TextField(db_column='npsp__Notification_Recipient_Information__c', custom=True, verbose_name='Notification Recipient Information', help_text='The contact information (as provided by the donor) for the notification recipient.', blank=True, null=True) 
    npsp_notification_recipient_name = models.CharField(db_column='npsp__Notification_Recipient_Name__c', custom=True, max_length=255, verbose_name='Notification Recipient Name', help_text='The name (as provided by the donor) of the person who should be notified about this gift. If this field is left blank and the Notification Recipient Contact field contains a value, Salesforce automatically populates this field with that value.', blank=True, null=True) 
    npsp_previous_grant_opportunity = models.ForeignKey('self', models.DO_NOTHING, db_column='npsp__Previous_Grant_Opportunity__c', custom=True, related_name='opportunity_npsppreviousgrantopportunity_set', blank=True, null=True) 
    npsp_primary_contact_campaign_member_status = models.CharField(db_column='npsp__Primary_Contact_Campaign_Member_Status__c', custom=True, max_length=40, verbose_name='Primary Contact Campaign Member Status', help_text="The status to use when creating a campaign member for this opportunity's primary contact and primary campaign source. Leave blank to default to an responded status for closed/won opportunities, and a non-responded status for other opportunities.", blank=True, null=True) 
    npsp_primary_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Primary_Contact__c', custom=True, related_name='opportunity_npspprimarycontact_set', blank=True, null=True) 
    npsp_qualified_date = models.DateField(db_column='npsp__Qualified_Date__c', custom=True, verbose_name='Qualified Date', help_text='The date this donor was identified as qualifying for this donation.', blank=True, null=True) 
    npsp_recurring_donation_installment_name = models.CharField(db_column='npsp__Recurring_Donation_Installment_Name__c', custom=True, max_length=1300, verbose_name='Recurring Donation Installment Name', sf_read_only=models.READ_ONLY, help_text='Installment name for inclusion in Opportunity Naming. Shows the installment number in parenthesis for open ended recurring donations, or the installment number out of the total for recurring donations with a set number of installments.', blank=True, null=True) 
    npsp_recurring_donation_installment_number = models.DecimalField(db_column='npsp__Recurring_Donation_Installment_Number__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Recurring Donation Installment Number', help_text="The installment number of this opportunity's recurring donation schedule.", blank=True, null=True) 
    npsp_requested_amount = models.DecimalField(db_column='npsp__Requested_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Requested Amount', help_text='The amount you are requesting. This number might be different from the final award amount.', blank=True, null=True) 
    npsp_tribute_type = models.CharField(db_column='npsp__Tribute_Type__c', custom=True, max_length=255, verbose_name='Tribute Type', help_text='Indicates whether the gift is in honor or memory of an individual.', choices=[('Honor', 'Honor'), ('Memorial', 'Memorial')], blank=True, null=True) 
    npsp_next_grant_deadline_due_date = models.DateField(db_column='npsp__Next_Grant_Deadline_Due_Date__c', custom=True, verbose_name='Next Deliverable Date', sf_read_only=models.READ_ONLY, help_text='The NPSP updates this field automatically based on the next Deliverable record.', blank=True, null=True) 
    form_of_payment = models.CharField(custom=True, db_column='Form_of_Payment__c', max_length=255, verbose_name='Form of Payment', default=models.DEFAULTED_ON_CREATE, choices=[('Stripe', 'Stripe'), ('Square', 'Square'), ('Check', 'Check'), ('Cash', 'Cash'), ('Other', 'Other')], blank=True, null=True)
    transaction_id = models.CharField(custom=True, db_column='Transaction_ID__c', max_length=64, verbose_name='Transaction ID', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Opportunity'
        verbose_name = 'Opportunity'
        verbose_name_plural = 'Opportunities'
        # keyPrefix = '006'



class OpportunityChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='opportunitychangeevent_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=120, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    stage_name = models.CharField(max_length=40, verbose_name='Stage', sf_read_only=models.READ_ONLY, choices=[('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Proposal', 'Proposal'), ('Negotiation', 'Negotiation'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost'), ('Prospecting', 'Prospecting'), ('Value Proposition', 'Value Proposition'), ('Id. Decision Makers', 'Id. Decision Makers'), ('Perception Analysis', 'Perception Analysis'), ('Proposal/Price Quote', 'Proposal/Price Quote'), ('Negotiation/Review', 'Negotiation/Review')], blank=True, null=True)
    amount = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    close_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Opportunity Type', sf_read_only=models.READ_ONLY, choices=[('Existing Business', 'Existing Business'), ('New Business', 'New Business')], blank=True, null=True)
    next_step = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    lead_source = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertisement', 'Advertisement'), ('Employee Referral', 'Employee Referral'), ('External Referral', 'External Referral'), ('Partner', 'Partner'), ('Public Relations', 'Public Relations'), ('Seminar - Internal', 'Seminar - Internal'), ('Seminar - Partner', 'Seminar - Partner'), ('Trade Show', 'Trade Show'), ('Web', 'Web'), ('Word of mouth', 'Word of mouth'), ('Other', 'Other')], blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    forecast_category_name = models.CharField(max_length=40, verbose_name='Forecast Category', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    campaign = models.ForeignKey(Campaign, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_opportunity_line_item = models.BooleanField(verbose_name='Has Line Item', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitychangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitychangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitychangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    synced_quote = models.ForeignKey('Quote', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_amount_outstanding = models.DecimalField(db_column='npe01__Amount_Outstanding__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Remaining Balance', sf_read_only=models.READ_ONLY, help_text='Formula: The Amount of this Opportunity minus the Payment Writeoff Amount and Payment Amount Received.', blank=True, null=True) 
    npe01_contact_id_for_role = models.CharField(db_column='npe01__Contact_Id_for_Role__c', custom=True, max_length=255, verbose_name='Contact Id for Role', sf_read_only=models.READ_ONLY, help_text='Hidden field for passing a Contact Id for Contact Role creation.', blank=True, null=True) 
    npe01_do_not_automatically_create_payment = models.BooleanField(db_column='npe01__Do_Not_Automatically_Create_Payment__c', custom=True, verbose_name='Do Not Automatically Create Payment', sf_read_only=models.READ_ONLY, default=False, help_text='If payments are active, and if checked, a new payment will not be automatically created for this Opportunity.') 
    npe01_is_opp_from_individual = models.CharField(db_column='npe01__Is_Opp_From_Individual__c', custom=True, max_length=3900, verbose_name='Is Opp From Individual', sf_read_only=models.READ_ONLY, help_text='Formula: Whether or not the related Account is defined as an individual (SYSTEMIsIndividual__c)', blank=True, null=True) 
    npe01_member_level = models.CharField(db_column='npe01__Member_Level__c', custom=True, max_length=255, verbose_name='Member Level', sf_read_only=models.READ_ONLY, help_text='Determines the value on the Contact or Account of the Last Membership Level field.', choices=[('Gold', 'Gold'), ('Silver', 'Silver'), ('Bronze', 'Bronze')], blank=True, null=True) 
    npe01_membership_end_date = models.DateField(db_column='npe01__Membership_End_Date__c', custom=True, verbose_name='Membership End Date', sf_read_only=models.READ_ONLY, help_text='Date membership period ends.', blank=True, null=True) 
    npe01_membership_origin = models.CharField(db_column='npe01__Membership_Origin__c', custom=True, max_length=255, verbose_name='Membership Origin', sf_read_only=models.READ_ONLY, help_text='Is this a renewal, a new membership, or a membership with someone who lapsed and has returned.', choices=[('New', 'New'), ('Renewal', 'Renewal'), ('Reacquire', 'Reacquire')], blank=True, null=True) 
    npe01_membership_start_date = models.DateField(db_column='npe01__Membership_Start_Date__c', custom=True, verbose_name='Membership Start Date', sf_read_only=models.READ_ONLY, help_text='Date when membership period starts', blank=True, null=True) 
    npe01_amount_written_off = models.DecimalField(db_column='npe01__Amount_Written_Off__c', custom=True, max_digits=14, decimal_places=2, verbose_name='Payment Writeoff Amount', sf_read_only=models.READ_ONLY, help_text='Total value of the Payments marked as written-off or noncollectable for this Opportunity.', blank=True, null=True) 
    npe01_number_of_payments = models.DecimalField(db_column='npe01__Number_of_Payments__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Payments', sf_read_only=models.READ_ONLY, help_text='Total number of payments for this Opportunity (Donation)', blank=True, null=True) 
    npe01_payments_made = models.DecimalField(db_column='npe01__Payments_Made__c', custom=True, max_digits=14, decimal_places=2, verbose_name='Payment Amount Received', sf_read_only=models.READ_ONLY, help_text='The total value of Payments marked as paid for this Opportunity.', blank=True, null=True) 
    npo02_combined_rollup_fieldset = models.CharField(db_column='npo02__CombinedRollupFieldset__c', custom=True, max_length=3900, verbose_name='Combined Rollup Fieldset', sf_read_only=models.READ_ONLY, help_text='Formula: Concatenated fields used during rollups to locate the most recent opportunity.', blank=True, null=True) 
    npo02_system_household_contact_role_processor = models.CharField(db_column='npo02__systemHouseholdContactRoleProcessor__c', custom=True, max_length=255, verbose_name='_SYSTEM: HOUSEHOLD CONTACT ROLEPROCESSOR', sf_read_only=models.READ_ONLY, default='All Opportunities', help_text='Controls if Household contact roles are created for Opportunities.  DEPRECATED.  Replaced by custom settings.', choices=[('All Opportunities', 'All Opportunities'), ('No Opportunities', 'No Opportunities')], blank=True, null=True) 
    npe03_recurring_donation = models.ForeignKey('Npe03RecurringDonation', models.DO_NOTHING, db_column='npe03__Recurring_Donation__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_acknowledgment_date = models.DateField(db_column='npsp__Acknowledgment_Date__c', custom=True, verbose_name='Acknowledgment Date', sf_read_only=models.READ_ONLY, help_text='Date of acknowledgment', blank=True, null=True) 
    npsp_acknowledgment_status = models.CharField(db_column='npsp__Acknowledgment_Status__c', custom=True, max_length=255, verbose_name='Acknowledgment Status', sf_read_only=models.READ_ONLY, help_text='Status of Acknowledgment of this gift.', choices=[('To Be Acknowledged', 'To Be Acknowledged'), ('Acknowledged', 'Acknowledged'), ('Do Not Acknowledge', 'Do Not Acknowledge'), ('Email Acknowledgment Now', 'Email Acknowledgment Now'), ('Email Acknowledgment Not Sent', 'Email Acknowledgment Not Sent')], blank=True, null=True) 
    npsp_ask_date = models.DateField(db_column='npsp__Ask_Date__c', custom=True, verbose_name='Ask Date', sf_read_only=models.READ_ONLY, help_text='The date when the donor was specifically asked for the donation, as opposed to the Opportunity Close Date that the organization may set to either when the Opportunity was first created, or when the Opportunity was won.', blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_closed_lost_reason = models.TextField(db_column='npsp__Closed_Lost_Reason__c', custom=True, verbose_name='Closed Lost Reason', sf_read_only=models.READ_ONLY, help_text='Notes on why the donation ask was not successful.', blank=True, null=True) 
    npsp_fair_market_value = models.DecimalField(db_column='npsp__Fair_Market_Value__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Fair Market Value', sf_read_only=models.READ_ONLY, help_text='The Fair Market Value of an In-Kind gift.', blank=True, null=True) 
    npsp_gift_strategy = models.CharField(db_column='npsp__Gift_Strategy__c', custom=True, max_length=255, verbose_name='Gift Strategy', sf_read_only=models.READ_ONLY, help_text='Categorizes the type of ask for this opportunity.', choices=[('New Donor', 'New Donor'), ('Renewal', 'Renewal'), ('Upgrade', 'Upgrade')], blank=True, null=True) 
    npsp_grant_contract_date = models.DateField(db_column='npsp__Grant_Contract_Date__c', custom=True, verbose_name='Grant Contract Date', sf_read_only=models.READ_ONLY, help_text="The date of the grant's inception, according to the document or contract sent by the grant-making organization.", blank=True, null=True) 
    npsp_grant_contract_number = models.CharField(db_column='npsp__Grant_Contract_Number__c', custom=True, max_length=255, verbose_name='Grant Contract Number', sf_read_only=models.READ_ONLY, help_text='Tracks unique numbers sometimes assigned by grant-making organizations.', blank=True, null=True) 
    npsp_grant_period_end_date = models.DateField(db_column='npsp__Grant_Period_End_Date__c', custom=True, verbose_name='Grant Period End Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_grant_period_start_date = models.DateField(db_column='npsp__Grant_Period_Start_Date__c', custom=True, verbose_name='Grant Period Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_grant_program_area_s = models.TextField(db_column='npsp__Grant_Program_Area_s__c', custom=True, verbose_name='Program Areas', sf_read_only=models.READ_ONLY, help_text='Describes the funding areas for the grant/gift. You can enter anything you want here. For example, you could enter the name of the program the grant/gift applies to.', blank=True, null=True) 
    npsp_grant_requirements_website = models.URLField(db_column='npsp__Grant_Requirements_Website__c', custom=True, verbose_name='Grant Requirements Website', sf_read_only=models.READ_ONLY, help_text="A URL that points to the grant requirements on the grant-maker's website.", blank=True, null=True) 
    npsp_honoree_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Honoree_Contact__c', custom=True, related_name='opportunitychangeevent_npsphonoreecontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_honoree_name = models.CharField(db_column='npsp__Honoree_Name__c', custom=True, max_length=255, verbose_name='Honoree Name', sf_read_only=models.READ_ONLY, help_text='The honoree name as provided by the donor. If this field is left blank, and the Honoree Contact field contains a value, Salesforce automatically populates this field with that value.', blank=True, null=True) 
    npsp_in_kind_description = models.TextField(db_column='npsp__In_Kind_Description__c', custom=True, verbose_name='In-Kind Description', sf_read_only=models.READ_ONLY, help_text='Holds any rich text description of the In-Kind Gift, including pictures.', blank=True, null=True) 
    npsp_in_kind_donor_declared_value = models.BooleanField(db_column='npsp__In_Kind_Donor_Declared_Value__c', custom=True, verbose_name='In-Kind Donor Declared Value', sf_read_only=models.READ_ONLY, default=False, help_text='Checked if the donor provided the Fair Market Value for this In-Kind gift.') 
    npsp_in_kind_type = models.CharField(db_column='npsp__In_Kind_Type__c', custom=True, max_length=255, verbose_name='In-Kind Type', sf_read_only=models.READ_ONLY, help_text='The type of In-Kind gift.', choices=[('Goods', 'Goods'), ('Services', 'Services')], blank=True, null=True) 
    npsp_is_grant_renewal = models.BooleanField(db_column='npsp__Is_Grant_Renewal__c', custom=True, verbose_name='Is Grant Renewal', sf_read_only=models.READ_ONLY, default=False, help_text='If selected, indicates that the grant is a renewal of a previous grant.') 
    npsp_matching_gift_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Matching_Gift_Account__c', custom=True, related_name='opportunitychangeevent_npspmatchinggiftaccount_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_matching_gift_employer = models.CharField(db_column='npsp__Matching_Gift_Employer__c', custom=True, max_length=255, verbose_name='Matching Gift Employer', sf_read_only=models.READ_ONLY, help_text='The name of the company who will match this gift.', blank=True, null=True) 
    npsp_matching_gift_status = models.CharField(db_column='npsp__Matching_Gift_Status__c', custom=True, max_length=255, verbose_name='Matching Gift Status', sf_read_only=models.READ_ONLY, help_text='The status of this gift being matched.', choices=[('Potential', 'Potential'), ('Submitted', 'Submitted'), ('Received', 'Received')], blank=True, null=True) 
    npsp_matching_gift = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Matching_Gift__c', custom=True, related_name='opportunitychangeevent_npspmatchinggift_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_notification_message = models.TextField(db_column='npsp__Notification_Message__c', custom=True, verbose_name='Notification Message', sf_read_only=models.READ_ONLY, help_text='A personalized message for the notification recipient.', blank=True, null=True) 
    npsp_notification_preference = models.CharField(db_column='npsp__Notification_Preference__c', custom=True, max_length=255, verbose_name='Notification Preference', sf_read_only=models.READ_ONLY, help_text='How the notification recipient should be notified.', choices=[('Email', 'Email'), ('Postal Mail', 'Postal Mail'), ('Phone', 'Phone'), ('Do Not Notify', 'Do Not Notify')], blank=True, null=True) 
    npsp_notification_recipient_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Notification_Recipient_Contact__c', custom=True, related_name='opportunitychangeevent_npspnotificationrecipientcontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_notification_recipient_information = models.TextField(db_column='npsp__Notification_Recipient_Information__c', custom=True, verbose_name='Notification Recipient Information', sf_read_only=models.READ_ONLY, help_text='The contact information (as provided by the donor) for the notification recipient.', blank=True, null=True) 
    npsp_notification_recipient_name = models.CharField(db_column='npsp__Notification_Recipient_Name__c', custom=True, max_length=255, verbose_name='Notification Recipient Name', sf_read_only=models.READ_ONLY, help_text='The name (as provided by the donor) of the person who should be notified about this gift. If this field is left blank and the Notification Recipient Contact field contains a value, Salesforce automatically populates this field with that value.', blank=True, null=True) 
    npsp_previous_grant_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Previous_Grant_Opportunity__c', custom=True, related_name='opportunitychangeevent_npsppreviousgrantopportunity_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_primary_contact_campaign_member_status = models.CharField(db_column='npsp__Primary_Contact_Campaign_Member_Status__c', custom=True, max_length=40, verbose_name='Primary Contact Campaign Member Status', sf_read_only=models.READ_ONLY, help_text="The status to use when creating a campaign member for this opportunity's primary contact and primary campaign source. Leave blank to default to an responded status for closed/won opportunities, and a non-responded status for other opportunities.", blank=True, null=True) 
    npsp_primary_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Primary_Contact__c', custom=True, related_name='opportunitychangeevent_npspprimarycontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_qualified_date = models.DateField(db_column='npsp__Qualified_Date__c', custom=True, verbose_name='Qualified Date', sf_read_only=models.READ_ONLY, help_text='The date this donor was identified as qualifying for this donation.', blank=True, null=True) 
    npsp_recurring_donation_installment_name = models.CharField(db_column='npsp__Recurring_Donation_Installment_Name__c', custom=True, max_length=3900, verbose_name='Recurring Donation Installment Name', sf_read_only=models.READ_ONLY, help_text='Installment name for inclusion in Opportunity Naming. Shows the installment number in parenthesis for open ended recurring donations, or the installment number out of the total for recurring donations with a set number of installments.', blank=True, null=True) 
    npsp_recurring_donation_installment_number = models.DecimalField(db_column='npsp__Recurring_Donation_Installment_Number__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Recurring Donation Installment Number', sf_read_only=models.READ_ONLY, help_text="The installment number of this opportunity's recurring donation schedule.", blank=True, null=True) 
    npsp_requested_amount = models.DecimalField(db_column='npsp__Requested_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Requested Amount', sf_read_only=models.READ_ONLY, help_text='The amount you are requesting. This number might be different from the final award amount.', blank=True, null=True) 
    npsp_tribute_type = models.CharField(db_column='npsp__Tribute_Type__c', custom=True, max_length=255, verbose_name='Tribute Type', sf_read_only=models.READ_ONLY, help_text='Indicates whether the gift is in honor or memory of an individual.', choices=[('Honor', 'Honor'), ('Memorial', 'Memorial')], blank=True, null=True) 
    npsp_next_grant_deadline_due_date = models.DateField(db_column='npsp__Next_Grant_Deadline_Due_Date__c', custom=True, verbose_name='Next Deliverable Date', sf_read_only=models.READ_ONLY, help_text='The NPSP updates this field automatically based on the next Deliverable record.', blank=True, null=True) 
    form_of_payment = models.CharField(custom=True, db_column='Form_of_Payment__c', max_length=255, verbose_name='Form of Payment', sf_read_only=models.READ_ONLY, default='Stripe', choices=[('Stripe', 'Stripe'), ('Square', 'Square'), ('Check', 'Check'), ('Cash', 'Cash'), ('Other', 'Other')], blank=True, null=True)
    transaction_id = models.CharField(custom=True, db_column='Transaction_ID__c', max_length=64, verbose_name='Transaction ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityChangeEvent'
        verbose_name = 'Opportunity Change Event'
        verbose_name_plural = 'Opportunity Change Event'
        # keyPrefix = 'None'



class OpportunityCompetitor(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    competitor_name = models.CharField(max_length=40, blank=True, null=True)
    strengths = models.CharField(max_length=1000, blank=True, null=True)
    weaknesses = models.CharField(max_length=1000, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycompetitor_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycompetitor_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityCompetitor'
        verbose_name = 'Opportunity: Competitor'
        verbose_name_plural = 'Opportunity: Competitor'
        # keyPrefix = '00J'



class OpportunityContactRole(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    contact = models.ForeignKey(Contact, models.DO_NOTHING)  # Master Detail Relationship *
    role = models.CharField(max_length=40, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrole_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityContactRole'
        verbose_name = 'Opportunity Contact Role'
        verbose_name_plural = 'Opportunity Contact Role'
        # keyPrefix = '00K'



class OpportunityContactRoleChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrolechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitycontactrolechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityContactRoleChangeEvent'
        verbose_name = 'Opportunity Contact Role Change Event'
        verbose_name_plural = 'Opportunity Contact Role Change Event'
        # keyPrefix = 'None'



class OpportunityFeed(models.Model):
    parent = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunityfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunityfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFeed'
        verbose_name = 'Opportunity Feed'
        verbose_name_plural = 'Opportunity Feed'
        # keyPrefix = 'None'



class OpportunityFieldHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npo02__systemHouseholdContactRoleProcessor__c', '_SYSTEM: HOUSEHOLD CONTACT ROLEPROCESSOR'), ('Account', 'Account Name'), ('npsp__Acknowledgment_Date__c', 'Acknowledgment Date'), ('npsp__Acknowledgment_Status__c', 'Acknowledgment Status'), ('Amount', 'Amount'), ('npsp__Ask_Date__c', 'Ask Date'), ('npsp__Batch__c', 'Batch'), ('CloseDate', 'Close Date'), ('npsp__Closed_Lost_Reason__c', 'Closed Lost Reason'), ('Contact', 'Contact'), ('npe01__Contact_Id_for_Role__c', 'Contact Id for Role'), ('Contract', 'Contract'), ('created', 'Created.'), ('opportunityCreatedFromLead', 'Created by lead convert'), ('Description', 'Description'), ('npsp__DisableContactRoleAutomation__c', 'Disable Contact Role Automation'), ('npe01__Do_Not_Automatically_Create_Payment__c', 'Do Not Automatically Create Payment'), ('npsp__Fair_Market_Value__c', 'Fair Market Value'), ('feedEvent', 'Feed event'), ('ForecastCategoryName', 'Forecast Category'), ('Form_of_Payment__c', 'Form of Payment'), ('npsp__Gift_Strategy__c', 'Gift Strategy'), ('npsp__Grant_Contract_Date__c', 'Grant Contract Date'), ('npsp__Grant_Contract_Number__c', 'Grant Contract Number'), ('npsp__Grant_Period_End_Date__c', 'Grant Period End Date'), ('npsp__Grant_Period_Start_Date__c', 'Grant Period Start Date'), ('npsp__Grant_Requirements_Website__c', 'Grant Requirements Website'), ('npsp__Honoree_Contact__c', 'Honoree Contact'), ('npsp__Honoree_Name__c', 'Honoree Name'), ('individualMerged', 'Individual Merged'), ('npsp__In_Kind_Description__c', 'In-Kind Description'), ('npsp__In_Kind_Donor_Declared_Value__c', 'In-Kind Donor Declared Value'), ('npsp__In_Kind_Type__c', 'In-Kind Type'), ('npsp__Is_Grant_Renewal__c', 'Is Grant Renewal'), ('LeadSource', 'Lead Source'), ('npsp__Matching_Gift__c', 'Matching Gift'), ('npsp__Matching_Gift_Account__c', 'Matching Gift Account'), ('npsp__Matching_Gift_Employer__c', 'Matching Gift Employer'), ('npsp__Matching_Gift_Status__c', 'Matching Gift Status'), ('npe01__Member_Level__c', 'Member Level'), ('npe01__Membership_End_Date__c', 'Membership End Date'), ('npe01__Membership_Origin__c', 'Membership Origin'), ('npe01__Membership_Start_Date__c', 'Membership Start Date'), ('NextStep', 'Next Step'), ('npsp__Notification_Message__c', 'Notification Message'), ('npsp__Notification_Preference__c', 'Notification Preference'), ('npsp__Notification_Recipient_Contact__c', 'Notification Recipient Contact'), ('npsp__Notification_Recipient_Information__c', 'Notification Recipient Information'), ('npsp__Notification_Recipient_Name__c', 'Notification Recipient Name'), ('Name', 'Opportunity Name'), ('Owner', 'Opportunity Owner'), ('RecordType', 'Opportunity Record Type'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('npsp__Previous_Grant_Opportunity__c', 'Previous Grant/Gift Opportunity'), ('Campaign', 'Primary Campaign Source'), ('npsp__Primary_Contact__c', 'Primary Contact'), ('npsp__Primary_Contact_Campaign_Member_Status__c', 'Primary Contact Campaign Member Status'), ('IsPrivate', 'Private'), ('Probability', 'Probability (%)'), ('npsp__Grant_Program_Area_s__c', 'Program Areas'), ('npsp__Qualified_Date__c', 'Qualified Date'), ('TotalOpportunityQuantity', 'Quantity'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('npe03__Recurring_Donation__c', 'Recurring Donation'), ('npsp__Recurring_Donation_Installment_Number__c', 'Recurring Donation Installment Number'), ('npsp__Requested_Amount__c', 'Requested Amount'), ('StageName', 'Stage'), ('SyncedQuote', 'Synced Quote'), ('Transaction_ID__c', 'Transaction ID'), ('npsp__Tribute_Type__c', 'Tribute Type'), ('Type', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityFieldHistory'
        verbose_name = 'Opportunity Field History'
        verbose_name_plural = 'Opportunity Field History'
        # keyPrefix = 'None'



class OpportunityHistory(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    stage_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Qualification', 'Qualification'), ('Needs Analysis', 'Needs Analysis'), ('Proposal', 'Proposal'), ('Negotiation', 'Negotiation'), ('Closed Won', 'Closed Won'), ('Closed Lost', 'Closed Lost'), ('Prospecting', 'Prospecting'), ('Value Proposition', 'Value Proposition'), ('Id. Decision Makers', 'Id. Decision Makers'), ('Perception Analysis', 'Perception Analysis'), ('Proposal/Price Quote', 'Proposal/Price Quote'), ('Negotiation/Review', 'Negotiation/Review')])
    amount = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    expected_revenue = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    close_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    probability = models.DecimalField(max_digits=3, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecast_category = models.CharField(max_length=40, verbose_name='To ForecastCategory', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityHistory'
        verbose_name = 'Opportunity History'
        verbose_name_plural = 'Opportunity History'
        # keyPrefix = '008'



class OpportunityLineItem(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    product_code = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=376, verbose_name='Opportunity Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Sales Price', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    service_date = models.DateField(verbose_name='Date', blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Description', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitylineitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitylineitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityLineItem'
        verbose_name = 'Opportunity Product'
        verbose_name_plural = 'Opportunity Product'
        # keyPrefix = '00k'



class OpportunityPartner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitypartner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitypartner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityPartner'
        verbose_name = 'Opportunity Partner'
        verbose_name_plural = 'Opportunity Partner'
        # keyPrefix = '00I'



class OpportunityShare(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    opportunity_access_level = models.CharField(max_length=40, verbose_name='Opportunity Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityShare'
        verbose_name = 'Opportunity Share'
        verbose_name_plural = 'Opportunity Share'
        # keyPrefix = '00t'



class OpportunityStage(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    is_won = models.BooleanField(verbose_name='Won', sf_read_only=models.READ_ONLY, default=False)
    forecast_category = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecast_category_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    default_probability = models.DecimalField(max_digits=3, decimal_places=0, verbose_name='Probability (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitystage_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='opportunitystage_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OpportunityStage'
        verbose_name = 'Opportunity Stage'
        verbose_name_plural = 'Opportunity Stage'
        # keyPrefix = '01J'



class Order(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    contract = models.ForeignKey(Contract, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    account = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, blank=True, null=True)
    original_order = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    effective_date = models.DateField(verbose_name='Order Start Date')
    end_date = models.DateField(verbose_name='Order End Date', blank=True, null=True)
    is_reduction_order = models.BooleanField(verbose_name='Reduction Order', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, choices=[('Draft', 'Draft'), ('Activated', 'Activated')])
    description = models.TextField(blank=True, null=True)
    customer_authorized_by = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    company_authorized_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_companyauthorizedby_set', blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Order Type', blank=True, null=True)
    billing_street = models.TextField(blank=True, null=True)
    billing_city = models.CharField(max_length=40, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(blank=True, null=True)
    shipping_city = models.CharField(max_length=40, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    activated_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_activatedby_set', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', sf_read_only=models.NOT_CREATEABLE, choices=[('Draft', 'Draft'), ('Activated', 'Activated'), ('Canceled', 'Cancelled'), ('Expired', 'Expired')])
    order_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    total_amount = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Order Amount', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='order_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Order'
        verbose_name = 'Order'
        verbose_name_plural = 'Orders'
        # keyPrefix = '801'



class OrderChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='orderchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contract = models.ForeignKey(Contract, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey('Pricebook2', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    original_order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    effective_date = models.DateField(verbose_name='Order Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    end_date = models.DateField(verbose_name='Order End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reduction_order = models.BooleanField(verbose_name='Reduction Order', sf_read_only=models.READ_ONLY, default=False)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('Activated', 'Activated')], blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    customer_authorized_by = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_authorized_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderchangeevent_companyauthorizedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, verbose_name='Order Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Billing State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Billing Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Shipping State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Shipping Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    activated_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    activated_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderchangeevent_activatedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status_code = models.CharField(max_length=40, verbose_name='Status Category', sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('Activated', 'Activated'), ('Canceled', 'Cancelled'), ('Expired', 'Expired')], blank=True, null=True)
    order_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    total_amount = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Order Amount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderChangeEvent'
        verbose_name = 'Order Change Event'
        verbose_name_plural = 'Order Change Event'
        # keyPrefix = 'None'



class OrderFeed(models.Model):
    parent = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderFeed'
        verbose_name = 'Order Feed'
        verbose_name_plural = 'Order Feed'
        # keyPrefix = 'None'



class OrderHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', 'Account Name'), ('ActivatedBy', 'Activated By'), ('ActivatedDate', 'Activated Date'), ('BillingAddress', 'Billing Address'), ('BillingCity', 'Billing City'), ('BillingCountry', 'Billing Country'), ('BillingCountryCode', 'Billing Country Code'), ('BillingGeocodeAccuracy', 'Billing Geocode Accuracy'), ('BillingLatitude', 'Billing Latitude'), ('BillingLongitude', 'Billing Longitude'), ('BillingState', 'Billing State/Province'), ('BillingStateCode', 'Billing State Code'), ('BillingStreet', 'Billing Street'), ('BillingPostalCode', 'Billing Zip/Postal Code'), ('BillToContact', 'Bill To Contact'), ('CompanyAuthorizedBy', 'Company Authorized By'), ('CompanyAuthorizedDate', 'Company Authorized Date'), ('Contract', 'Contract Number'), ('created', 'Created.'), ('CustomerAuthorizedBy', 'Customer Authorized By'), ('CustomerAuthorizedDate', 'Customer Authorized Date'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Opportunity', 'Opportunity'), ('orderActivated', 'Order Activated.'), ('orderApproved', 'Order Approved.'), ('orderCancelled', 'Order Canceled.'), ('orderDeactivated', 'Order Deactivated.'), ('EndDate', 'Order End Date'), ('orderExpired', 'Order Expired.'), ('Name', 'Order Name'), ('Owner', 'Order Owner'), ('OrderReferenceNumber', 'Order Reference Number'), ('EffectiveDate', 'Order Start Date'), ('orderSubmitted', 'Order Submitted.'), ('Type', 'Order Type'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PoDate', 'PO Date'), ('PoNumber', 'PO Number'), ('Pricebook2', 'Price Book'), ('Quote', 'Quote'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', 'Shipping Address'), ('ShippingCity', 'Shipping City'), ('ShippingCountry', 'Shipping Country'), ('ShippingCountryCode', 'Shipping Country Code'), ('ShippingGeocodeAccuracy', 'Shipping Geocode Accuracy'), ('ShippingLatitude', 'Shipping Latitude'), ('ShippingLongitude', 'Shipping Longitude'), ('ShippingState', 'Shipping State/Province'), ('ShippingStateCode', 'Shipping State Code'), ('ShippingStreet', 'Shipping Street'), ('ShippingPostalCode', 'Shipping Zip/Postal Code'), ('ShipToContact', 'Ship To Contact'), ('Status', 'Status'), ('StatusCode', 'Status Category')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderHistory'
        verbose_name = 'Order History'
        verbose_name_plural = 'Order History'
        # keyPrefix = 'None'



class OrderItem(models.Model):
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    original_order_item = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    available_quantity = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=18, decimal_places=2)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Description', blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    order_item_number = models.CharField(max_length=30, verbose_name='Order Product Number', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OrderItem'
        verbose_name = 'Order Product'
        verbose_name_plural = 'Order Products'
        # keyPrefix = '802'



class OrderItemChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook_entry = models.ForeignKey('PricebookEntry', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    original_order_item = models.ForeignKey(OrderItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    available_quantity = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    order_item_number = models.CharField(max_length=30, verbose_name='Order Product Number', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemChangeEvent'
        verbose_name = 'Order Product Change Event'
        verbose_name_plural = 'Order Product Change Event'
        # keyPrefix = 'None'



class OrderItemFeed(models.Model):
    parent = models.ForeignKey(OrderItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderitemfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemFeed'
        verbose_name = 'Order Product Feed'
        verbose_name_plural = 'Order Product Feed'
        # keyPrefix = 'None'



class OrderItemHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    order_item = models.ForeignKey(OrderItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('EndDate', 'End Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Description', 'Line Description'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Quantity', 'Quantity'), ('QuoteLineItem', 'Quote Line Item'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ServiceDate', 'Start Date'), ('UnitPrice', 'Unit Price')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OrderItemHistory'
        verbose_name = 'Order Product History'
        verbose_name_plural = 'Order Product History'
        # keyPrefix = 'None'



class OrderShare(models.Model):
    order = models.ForeignKey(Order, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    order_access_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, verbose_name='Apex Sharing Reason ID', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'OrderShare'
        verbose_name = 'Order Share'
        verbose_name_plural = 'Order Share'
        # keyPrefix = '0Fy'



class OrderStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    status_code = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('Activated', 'Activated'), ('Canceled', 'Cancelled'), ('Expired', 'Expired')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orderstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'OrderStatus'
        verbose_name = 'Order Status Value'
        verbose_name_plural = 'Order Status Values'
        # keyPrefix = 'None'



class OrgWideEmailAddress(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orgwideemailaddress_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='orgwideemailaddress_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    address = models.EmailField(verbose_name='Email Address')
    display_name = models.CharField(max_length=300)
    is_allow_all_profiles = models.BooleanField(verbose_name='Allow All Profiles', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'OrgWideEmailAddress'
        verbose_name = 'Organization-wide From Email Address'
        verbose_name_plural = 'Organization-wide From Email Addresses'
        # keyPrefix = '0D2'



class Organization(models.Model):
    name = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE)
    division = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    street = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_code = models.CharField(max_length=10, verbose_name='State/Province Code', sf_read_only=models.NOT_CREATEABLE, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    primary_contact = models.CharField(max_length=80, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    default_locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', sf_read_only=models.NOT_CREATEABLE, choices=[('af_ZA', 'Afrikaans (South Africa)'), ('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('bn_BD', 'Bangla (Bangladesh)'), ('bn_IN', 'Bangla (India)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czechia)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_SZ', 'English (Swaziland)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_BE', 'German (Belgium)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('gu_IN', 'Gujarati (India)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kn_IN', 'Kannada (India)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('ml_IN', 'Malayalam (India)'), ('mt_MT', 'Maltese (Malta)'), ('mr_IN', 'Marathi (India)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_KZ', 'Russian (Kazakhstan)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Cyrillic) (Bosnia and Herzegovina)'), ('sr_CS', 'Serbian (Cyrillic) (Serbia)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sw_KE', 'Swahili (Kenya)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('te_IN', 'Telugu (India)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('xh_ZA', 'Xhosa (South Africa)'), ('yo_BJ', 'Yoruba (Benin)'), ('zu_ZA', 'Zulu (South Africa)')])
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', sf_read_only=models.NOT_CREATEABLE, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', sf_read_only=models.NOT_CREATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', sf_read_only=models.NOT_CREATEABLE, default=False)
    receives_admin_info_emails = models.BooleanField(verbose_name='Info Emails Admin', sf_read_only=models.NOT_CREATEABLE, default=False)
    preferences_require_opportunity_products = models.BooleanField(verbose_name='RequireOpportunityProducts', sf_read_only=models.NOT_CREATEABLE)
    preferences_consent_management_enabled = models.BooleanField(verbose_name='ConsentManagementEnabled', sf_read_only=models.NOT_CREATEABLE)
    preferences_individual_auto_create_enabled = models.BooleanField(verbose_name='IndividualAutoCreateEnabled', sf_read_only=models.NOT_CREATEABLE)
    preferences_auto_select_individual_on_merge = models.BooleanField(verbose_name='AutoSelectIndividualOnMerge', sf_read_only=models.NOT_CREATEABLE)
    preferences_activity_analytics_enabled = models.BooleanField(verbose_name='ActivityAnalyticsEnabled', sf_read_only=models.NOT_CREATEABLE)
    preferences_lightning_login_enabled = models.BooleanField(verbose_name='LightningLoginEnabled', sf_read_only=models.NOT_CREATEABLE)
    preferences_only_llperm_user_allowed = models.BooleanField(db_column='PreferencesOnlyLLPermUserAllowed', verbose_name='OnlyLLPermUserAllowed', sf_read_only=models.NOT_CREATEABLE)
    fiscal_year_start_month = models.IntegerField(verbose_name='Fiscal Year Starts In', sf_read_only=models.READ_ONLY, blank=True, null=True)
    uses_start_date_as_fiscal_year_name = models.BooleanField(verbose_name='Fiscal Year Name by Start', sf_read_only=models.READ_ONLY, default=False)
    default_account_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_contact_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByParent', 'Controlled By Parent')], blank=True, null=True)
    default_opportunity_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByLeadOrContact', 'ControlledByLeadOrContact'), ('ControlledByCampaign', 'ControlledByCampaign')], blank=True, null=True)
    default_lead_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_case_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True, null=True)
    default_calendar_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='HideDetailsInsert', choices=[('HideDetails', 'Hide Details'), ('HideDetailsInsert', 'Hide Details and Add Events'), ('ShowDetails', 'Show Details'), ('ShowDetailsInsert', 'Show Details and Add Events'), ('AllowEdits', 'Full Access')], blank=True, null=True)
    default_pricebook_access = models.CharField(max_length=40, verbose_name='Default Price Book Access', sf_read_only=models.READ_ONLY, choices=[('None', 'No Access'), ('Read', 'View Only'), ('ReadSelect', 'Use')], blank=True, null=True)
    default_campaign_access = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    compliance_bcc_email = models.EmailField(verbose_name='Compliance BCC Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ui_skin = models.CharField(max_length=40, verbose_name='UI Skin', sf_read_only=models.NOT_CREATEABLE, default='Theme3', choices=[('Theme1', 'salesforce.com Classic'), ('Theme2', 'Salesforce'), ('PortalDefault', 'Portal Default'), ('Webstore', 'Webstore'), ('Theme3', 'Aloha')], blank=True, null=True)
    signup_country_iso_code = models.CharField(max_length=2, verbose_name='Signup Country', sf_read_only=models.READ_ONLY, blank=True, null=True)
    trial_expiration_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    num_knowledge_service = models.IntegerField(verbose_name='Knowledge Licenses', sf_read_only=models.READ_ONLY, blank=True, null=True)
    organization_type = models.CharField(max_length=40, verbose_name='Edition', sf_read_only=models.READ_ONLY, choices=[('Team Edition', None), ('Professional Edition', None), ('Enterprise Edition', None), ('Developer Edition', None), ('Personal Edition', None), ('Unlimited Edition', None), ('Contact Manager Edition', None), ('Base Edition', None)], blank=True, null=True)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    instance_name = models.CharField(max_length=5, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_sandbox = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    web_to_case_default_origin = models.CharField(max_length=40, verbose_name='Web to Cases Default Origin', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    monthly_page_views_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_entitlement = models.IntegerField(verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_read_only = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='organization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='organization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Organization'
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        # keyPrefix = '00D'



class OwnedContentDocument(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_owner_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    content_document = models.ForeignKey(ContentDocument, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(verbose_name='Created', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='ownedcontentdocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    file_type = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_size = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    file_extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    content_url = models.URLField(verbose_name='Content URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OwnedContentDocument'
        verbose_name = 'User Owned File'
        verbose_name_plural = 'User Owned File'
        # keyPrefix = 'None'



class OwnerChangeOptionInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=150, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_editable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    default_value = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    parent_id = models.CharField(max_length=70, verbose_name='Change Owner Option ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'OwnerChangeOptionInfo'
        verbose_name = 'Change Owner Option Info'
        verbose_name_plural = 'Change Owner Options Info'
        # keyPrefix = '0Cy'



class PackageLicense(models.Model):
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Trial', 'Trial'), ('Free', 'Free'), ('Active', 'Active')])
    is_provisioned = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    allowed_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    expiration_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PackageLicense'
        verbose_name = 'Package License'
        verbose_name_plural = 'Package License'
        # keyPrefix = '050'



class Partner(models.Model):
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_from = models.ForeignKey(Account, models.DO_NOTHING, related_name='partner_accountfrom_set', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    account_to = models.ForeignKey(Account, models.DO_NOTHING, related_name='partner_accountto_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    role = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    is_primary = models.BooleanField(verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partner_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partner_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    reverse_partner = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Partner'
        verbose_name = 'Partner'
        verbose_name_plural = 'Partner'
        # keyPrefix = '00I'



class PartnerRole(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    reverse_role = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Advertiser', 'Advertiser'), ('Agency', 'Agency'), ('Broker', 'Broker'), ('Consultant', 'Consultant'), ('Dealer', 'Dealer'), ('Developer', 'Developer'), ('Distributor', 'Distributor'), ('Institution', 'Institution'), ('Lender', 'Lender'), ('System Integrator', 'System Integrator'), ('VAR/Reseller', 'VAR/Reseller')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partnerrole_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='partnerrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PartnerRole'
        verbose_name = 'Partner Role Value'
        verbose_name_plural = 'Partner Role Value'
        # keyPrefix = 'None'



class Period(models.Model):
    fiscal_year_settings = models.ForeignKey(FiscalYearSettings, models.DO_NOTHING, related_name='period_fiscalyearsettings_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Month', None), ('Quarter', None), ('Week', None), ('Year', None)], blank=True, null=True)
    start_date = models.DateField(sf_read_only=models.READ_ONLY)
    end_date = models.DateField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_forecast_period = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    quarter_label = models.CharField(max_length=40, verbose_name='Quarter Name', sf_read_only=models.READ_ONLY, default='Spring', choices=[('Spring', 'Spring'), ('Summer', 'Summer'), ('Fall', 'Fall'), ('Winter', 'Winter')], blank=True, null=True)
    period_label = models.CharField(max_length=40, verbose_name='Period Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    number = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    fully_qualified_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Period'
        verbose_name = 'Period'
        verbose_name_plural = 'Period'
        # keyPrefix = '026'



class PermissionSet(models.Model):
    name = models.CharField(max_length=80, verbose_name='Permission Set Name')
    label = models.CharField(max_length=80, verbose_name='Permission Set Label')
    license = models.ForeignKey('PermissionSetLicense', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Reference to tables [PermissionSetLicense, UserLicense]
    profile = models.ForeignKey('Profile', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_owned_by_profile = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_custom = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    permissions_email_single = models.BooleanField(verbose_name='Send Email')
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email')
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks')
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events')
    permissions_export_report = models.BooleanField(verbose_name='Export Reports')
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts')
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export')
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users')
    permissions_edit_public_filters = models.BooleanField(verbose_name='Manage Public List Views')
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates')
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data')
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases')
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists')
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions')
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application')
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields')
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports')
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration')
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record')
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder')
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts')
    permissions_activate_order = models.BooleanField(verbose_name='Activate Orders')
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads')
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads')
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads')
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data')
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents')
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data')
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads')
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates')
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User')
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts')
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter')
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests')
    permissions_override_forecasts = models.BooleanField(verbose_name='Override Forecasts')
    permissions_view_all_forecasts = models.BooleanField(verbose_name='View All Forecasts')
    permissions_api_user_only = models.BooleanField(verbose_name='Api Only User')
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps')
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder')
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories')
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads')
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires')
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards')
    permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders')
    permissions_install_packaging = models.BooleanField(verbose_name='Download AppExchange Packages')
    permissions_publish_packaging = models.BooleanField(verbose_name='Upload AppExchange Packages')
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups')
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price')
    permissions_create_packaging = models.BooleanField(verbose_name='Create AppExchange Packages')
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete')
    permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets')
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions')
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers')
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms')
    permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets')
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals')
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations')
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages')
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations')
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries')
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup')
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories')
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex')
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations')
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled')
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types')
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments')
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases')
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content')
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries')
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions')
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties')
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files')
    permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards')
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync')
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots')
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports')
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays')
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow')
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards")
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter')
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users')
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License')
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds')
    permissions_activities_access = models.BooleanField(verbose_name='Access Activities')
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates')
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration')
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages')
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links')
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins')
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files')
    permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities')
    permissions_view_case_interaction = models.BooleanField(verbose_name='Use Case Feed')
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers')
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows')
    permissions_manage_quotas = models.BooleanField(verbose_name='Manage Quotas')
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards')
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders')
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders')
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders')
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports')
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders')
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders')
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders')
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards')
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports')
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users')
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub')
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views')
    permissions_content_hub_user = models.BooleanField(verbose_name='Files Connect Cloud')
    permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities')
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console')
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins')
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics')
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics')
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics')
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics')
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features')
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect')
    permissions_content_workspaces = models.BooleanField(verbose_name='Access Libraries')
    permissions_create_work_badge_definition = models.BooleanField(verbose_name='Create custom Badge Definitions')
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps')
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link')
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets')
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets')
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles')
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses')
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing')
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users')
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies')
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies')
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions')
    permissions_can_verify_comment = models.BooleanField(verbose_name='Verify Answers to Chatter Questions')
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups')
    permissions_std_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture Standard')
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API')
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User')
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations')
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo")
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records')
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations')
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails')
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts')
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own')
    permissions_create_audit_fields = models.BooleanField(verbose_name='Set Audit Fields upon Record Creation')
    permissions_update_with_inactive_owner = models.BooleanField(verbose_name='Update Records with Inactive Owners')
    permissions_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture')
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects')
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface')
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI')
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce')
    permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users')
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics')
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports')
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards')
    permissions_allow_lightning_login = models.BooleanField(verbose_name='Lightning Login User')
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence')
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment')
    permissions_remove_direct_message_members = models.BooleanField(verbose_name='Remove People from Direct Messages')
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment')
    permissions_add_direct_message_members = models.BooleanField(verbose_name='Add People to Direct Messages')
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads')
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role')
    permissions_access_cmc = models.BooleanField(db_column='PermissionsAccessCMC', verbose_name='Access Community Management')
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check')
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check')
    permissions_packaging2 = models.BooleanField(verbose_name='Create and Update Second-Generation Packages')
    permissions_manage_certificates = models.BooleanField(verbose_name='Manage Certificates')
    permissions_create_report_in_lightning = models.BooleanField(verbose_name='Report Builder (Lightning Experience)')
    permissions_prevent_classic_experience = models.BooleanField(verbose_name='Hide Option to Switch to Salesforce Classic')
    permissions_hide_read_by_list = models.BooleanField(verbose_name='Hide the Seen By List')
    permissions_list_email_send = models.BooleanField(verbose_name='Allow sending of List Emails')
    permissions_feed_pinning = models.BooleanField(verbose_name='Pin Posts in Feeds')
    permissions_change_dashboard_colors = models.BooleanField(verbose_name='Change Dashboard Colors')
    permissions_manage_recommendation_strategies = models.BooleanField(verbose_name='Manage Next Best Action Strategies')
    permissions_manage_propositions = models.BooleanField(verbose_name='Manage Next Best Action Recommendations')
    permissions_close_conversations = models.BooleanField(verbose_name='Close Conversation Threads')
    permissions_subscribe_report_roles_grps = models.BooleanField(verbose_name='Subscribe to Reports: Send to Groups and Roles')
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(verbose_name='Subscribe to Dashboards: Send to Groups and Roles')
    permissions_use_web_link = models.BooleanField(verbose_name='Allow Access to Customized Actions')
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions')
    permissions_view_only_embedded_app_user = models.BooleanField(verbose_name='Access to View-Only Licensed Templates and Apps')
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities')
    permissions_subscribe_report_to_other_users = models.BooleanField(verbose_name='Subscribe to Reports: Add Recipients')
    permissions_lightning_console_allowed_for_user = models.BooleanField(verbose_name='Lightning Console User')
    permissions_subscribe_reports_run_as_user = models.BooleanField(verbose_name='Subscribe to Reports: Set Running User')
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(verbose_name='Subscribe to Dashboards')
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(verbose_name='Subscribe to Dashboards: Add Recipients')
    permissions_create_ltng_temp_in_pub = models.BooleanField(verbose_name='Manage Public Lightning Email Templates')
    permissions_transactional_email_send = models.BooleanField(verbose_name='Send Non-Commercial Email')
    permissions_create_ltng_temp_folder = models.BooleanField(verbose_name='Create Folders for Lightning Email Templates')
    permissions_apex_rest_services = models.BooleanField(verbose_name='Apex REST Services')
    permissions_enable_community_app_launcher = models.BooleanField(verbose_name='Show App Launcher in Communities')
    permissions_give_recognition_badge = models.BooleanField(verbose_name='Give Recognition Badges in Lightning Communities')
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(verbose_name='Remain in Salesforce Classic')
    permissions_manage_surveys = models.BooleanField(verbose_name='Manage Surveys')
    permissions_view_roles = models.BooleanField(verbose_name='View Roles and Role Hierarchy')
    permissions_einstein_assistant_user = models.BooleanField(verbose_name='Allows a user to access Einstein Assistant.')
    permissions_modify_data_classification = models.BooleanField(verbose_name='Modify Data Classification')
    permissions_privacy_data_access = models.BooleanField(verbose_name='Allow user to access privacy data')
    permissions_query_all_files = models.BooleanField(verbose_name='Query All Files')
    permissions_modify_metadata = models.BooleanField(verbose_name='Modify Metadata Through Metadata API Functions')
    description = models.CharField(max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionset_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionset_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    has_activation_required = models.BooleanField(verbose_name='Session Activation Required', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSet'
        verbose_name = 'Permission Set'
        verbose_name_plural = 'Permission Sets'
        # keyPrefix = '0PS'



class PermissionSetAssignment(models.Model):
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    assignee = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetAssignment'
        verbose_name = 'Permission Set Assignment'
        verbose_name_plural = 'Permission Set Assignments'
        # keyPrefix = '0Pa'



class PermissionSetLicense(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Permission Set License Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    permission_set_license_key = models.CharField(unique=True, max_length=81, sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    expiration_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    maximum_permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    maximum_permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.READ_ONLY)
    maximum_permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_filters = models.BooleanField(verbose_name='Manage Public List Views', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    maximum_permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_activate_order = models.BooleanField(verbose_name='Activate Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    maximum_permissions_override_forecasts = models.BooleanField(verbose_name='Override Forecasts', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_forecasts = models.BooleanField(verbose_name='View All Forecasts', sf_read_only=models.READ_ONLY)
    maximum_permissions_api_user_only = models.BooleanField(verbose_name='Api Only User', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders', sf_read_only=models.READ_ONLY)
    maximum_permissions_install_packaging = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_publish_packaging = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_packaging = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    maximum_permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.READ_ONLY)
    maximum_permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    maximum_permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.READ_ONLY)
    maximum_permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    maximum_permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    maximum_permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.READ_ONLY)
    maximum_permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    maximum_permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    maximum_permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_flow_uflrequired = models.BooleanField(db_column='MaximumPermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    maximum_permissions_activities_access = models.BooleanField(verbose_name='Access Activities', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links', sf_read_only=models.READ_ONLY)
    maximum_permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_case_interaction = models.BooleanField(verbose_name='Use Case Feed', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    maximum_permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_quotas = models.BooleanField(verbose_name='Manage Quotas', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_hub_user = models.BooleanField(verbose_name='Files Connect Cloud', sf_read_only=models.READ_ONLY)
    maximum_permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities', sf_read_only=models.READ_ONLY)
    maximum_permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.READ_ONLY)
    maximum_permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    maximum_permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    maximum_permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    maximum_permissions_content_workspaces = models.BooleanField(verbose_name='Access Libraries', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_work_badge_definition = models.BooleanField(verbose_name='Create custom Badge Definitions', sf_read_only=models.READ_ONLY)
    maximum_permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_verify_comment = models.BooleanField(verbose_name='Verify Answers to Chatter Questions', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.READ_ONLY)
    maximum_permissions_std_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture Standard', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.READ_ONLY)
    maximum_permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.READ_ONLY)
    maximum_permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.READ_ONLY)
    maximum_permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.READ_ONLY)
    maximum_permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.READ_ONLY)
    maximum_permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_audit_fields = models.BooleanField(verbose_name='Set Audit Fields upon Record Creation', sf_read_only=models.READ_ONLY)
    maximum_permissions_update_with_inactive_owner = models.BooleanField(verbose_name='Update Records with Inactive Owners', sf_read_only=models.READ_ONLY)
    maximum_permissions_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture', sf_read_only=models.READ_ONLY)
    maximum_permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.READ_ONLY)
    maximum_permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.READ_ONLY)
    maximum_permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.READ_ONLY)
    maximum_permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.READ_ONLY)
    maximum_permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users', sf_read_only=models.READ_ONLY)
    maximum_permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_lightning_login = models.BooleanField(verbose_name='Lightning Login User', sf_read_only=models.READ_ONLY)
    maximum_permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.READ_ONLY)
    maximum_permissions_remove_direct_message_members = models.BooleanField(verbose_name='Remove People from Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.READ_ONLY)
    maximum_permissions_add_direct_message_members = models.BooleanField(verbose_name='Add People to Direct Messages', sf_read_only=models.READ_ONLY)
    maximum_permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.READ_ONLY)
    maximum_permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.READ_ONLY)
    maximum_permissions_access_cmc = models.BooleanField(db_column='MaximumPermissionsAccessCMC', verbose_name='Access Community Management', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.READ_ONLY)
    maximum_permissions_packaging2 = models.BooleanField(verbose_name='Create and Update Second-Generation Packages', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_certificates = models.BooleanField(verbose_name='Manage Certificates', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_report_in_lightning = models.BooleanField(verbose_name='Report Builder (Lightning Experience)', sf_read_only=models.READ_ONLY)
    maximum_permissions_prevent_classic_experience = models.BooleanField(verbose_name='Hide Option to Switch to Salesforce Classic', sf_read_only=models.READ_ONLY)
    maximum_permissions_hide_read_by_list = models.BooleanField(verbose_name='Hide the Seen By List', sf_read_only=models.READ_ONLY)
    maximum_permissions_list_email_send = models.BooleanField(verbose_name='Allow sending of List Emails', sf_read_only=models.READ_ONLY)
    maximum_permissions_feed_pinning = models.BooleanField(verbose_name='Pin Posts in Feeds', sf_read_only=models.READ_ONLY)
    maximum_permissions_change_dashboard_colors = models.BooleanField(verbose_name='Change Dashboard Colors', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_recommendation_strategies = models.BooleanField(verbose_name='Manage Next Best Action Strategies', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_propositions = models.BooleanField(verbose_name='Manage Next Best Action Recommendations', sf_read_only=models.READ_ONLY)
    maximum_permissions_close_conversations = models.BooleanField(verbose_name='Close Conversation Threads', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_report_roles_grps = models.BooleanField(verbose_name='Subscribe to Reports: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_dashboard_roles_grps = models.BooleanField(verbose_name='Subscribe to Dashboards: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    maximum_permissions_use_web_link = models.BooleanField(verbose_name='Allow Access to Customized Actions', sf_read_only=models.READ_ONLY)
    maximum_permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='MaximumPermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_only_embedded_app_user = models.BooleanField(verbose_name='Access to View-Only Licensed Templates and Apps', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_report_to_other_users = models.BooleanField(verbose_name='Subscribe to Reports: Add Recipients', sf_read_only=models.READ_ONLY)
    maximum_permissions_lightning_console_allowed_for_user = models.BooleanField(verbose_name='Lightning Console User', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_reports_run_as_user = models.BooleanField(verbose_name='Subscribe to Reports: Set Running User', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_to_lightning_dashboards = models.BooleanField(verbose_name='Subscribe to Dashboards', sf_read_only=models.READ_ONLY)
    maximum_permissions_subscribe_dashboard_to_other_users = models.BooleanField(verbose_name='Subscribe to Dashboards: Add Recipients', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_ltng_temp_in_pub = models.BooleanField(verbose_name='Manage Public Lightning Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_transactional_email_send = models.BooleanField(verbose_name='Send Non-Commercial Email', sf_read_only=models.READ_ONLY)
    maximum_permissions_create_ltng_temp_folder = models.BooleanField(verbose_name='Create Folders for Lightning Email Templates', sf_read_only=models.READ_ONLY)
    maximum_permissions_apex_rest_services = models.BooleanField(verbose_name='Apex REST Services', sf_read_only=models.READ_ONLY)
    maximum_permissions_enable_community_app_launcher = models.BooleanField(verbose_name='Show App Launcher in Communities', sf_read_only=models.READ_ONLY)
    maximum_permissions_give_recognition_badge = models.BooleanField(verbose_name='Give Recognition Badges in Lightning Communities', sf_read_only=models.READ_ONLY)
    maximum_permissions_ltng_promo_reserved01_user_perm = models.BooleanField(verbose_name='Remain in Salesforce Classic', sf_read_only=models.READ_ONLY)
    maximum_permissions_manage_surveys = models.BooleanField(verbose_name='Manage Surveys', sf_read_only=models.READ_ONLY)
    maximum_permissions_view_roles = models.BooleanField(verbose_name='View Roles and Role Hierarchy', sf_read_only=models.READ_ONLY)
    maximum_permissions_einstein_assistant_user = models.BooleanField(verbose_name='Allows a user to access Einstein Assistant.', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_data_classification = models.BooleanField(verbose_name='Modify Data Classification', sf_read_only=models.READ_ONLY)
    maximum_permissions_privacy_data_access = models.BooleanField(verbose_name='Allow user to access privacy data', sf_read_only=models.READ_ONLY)
    maximum_permissions_query_all_files = models.BooleanField(verbose_name='Query All Files', sf_read_only=models.READ_ONLY)
    maximum_permissions_modify_metadata = models.BooleanField(verbose_name='Modify Metadata Through Metadata API Functions', sf_read_only=models.READ_ONLY)
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicense'
        verbose_name = 'Permission Set License'
        verbose_name_plural = 'Permission Set Licenses'
        # keyPrefix = '0PL'



class PermissionSetLicenseAssign(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    permission_set_license = models.ForeignKey(PermissionSetLicense, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    assignee = models.ForeignKey('User', models.DO_NOTHING, related_name='permissionsetlicenseassign_assignee_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetLicenseAssign'
        verbose_name = 'Permission Set License Assignment'
        verbose_name_plural = 'Permission Set License Assignments'
        # keyPrefix = '2LA'



class PermissionSetTabSetting(models.Model):
    parent = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    visibility = models.CharField(max_length=40, choices=[('DefaultOff', 'Default Off'), ('DefaultOn', 'Default On')])
    name = models.CharField(max_length=60, verbose_name='Tab Name', sf_read_only=models.NOT_UPDATEABLE)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PermissionSetTabSetting'
        verbose_name = 'Permission Set Tab Setting'
        verbose_name_plural = 'Permission Set Tab Setting'
        # keyPrefix = '01P'



class PicklistValueInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    value = models.CharField(max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=70, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default_value = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    valid_for = models.CharField(max_length=200, sf_read_only=models.READ_ONLY, blank=True, null=True)
    entity_particle_id = models.CharField(max_length=150, verbose_name='Entity Particle ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PicklistValueInfo'
        verbose_name = 'Picklist Value Info'
        verbose_name_plural = 'Picklist Value Info'
        # keyPrefix = '4pv'



class PlatformAction(models.Model):
    external_id = models.CharField(max_length=255, verbose_name='Platform Action ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('QuickAction', 'Quick Action'), ('StandardButton', 'Standard Button'), ('CustomButton', 'Custom Button'), ('ProductivityAction', 'Productivity (Highlight) Action'), ('ActionLink', 'ActionLink'), ('InvocableAction', 'Invocable Action')])
    subtype = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, verbose_name='API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_target_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Describe', 'Target is for describing the action'), ('Invoke', 'Target is for invoking the action'), ('Visualforce', 'Target is for a visualforce page')], blank=True, null=True)
    confirmation_message = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    group_id = models.CharField(max_length=18, verbose_name='Group ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    is_group_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    category = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Primary', 'Primary action'), ('Overflow', 'Overflow action')], blank=True, null=True)
    invocation_status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('New', 'New'), ('Pending', 'Pending'), ('Successful', 'Successful'), ('Failed', 'Failed')], blank=True, null=True)
    invoked_by_user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    source_entity = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    action_list_context = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('ListView', 'Header for a list view'), ('RelatedList', 'Header for a related list'), ('ListViewRecord', 'View for a list view record'), ('RelatedListRecord', 'View for a related list record'), ('Record', 'View page for a record'), ('FeedElement', 'An element in the Feed'), ('Chatter', 'Chatter specific view'), ('Global', 'View page for Global'), ('Flexipage', 'View for Lightning Page'), ('MruList', 'Header for an MRU list'), ('MruRow', 'View for a MRU list record'), ('RecordEdit', 'Edit page for a record'), ('Photo', 'View for an entity photo detail component'), ('BannerPhoto', 'View for an entity Banner photo detail component'), ('ObjectHomeChart', 'View for object home charts'), ('ListViewDefinition', 'View for a list view definition'), ('Dockable', 'View for dockable actions'), ('Lookup', 'View for lookup'), ('Assistant', 'View for Assistant')], blank=True, null=True)
    device_format = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='Phone', choices=[('Phone', 'Phone'), ('Tablet', 'Tablet'), ('Desktop', 'Desktop'), ('Aloha', 'Aloha')], blank=True, null=True)
    icon_content_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_height = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_width = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(verbose_name='Icon URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mass_action = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    primary_color = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    related_source_entity = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    section = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Page', 'Page Actions'), ('ActivityComposer', 'Activity Composer Actions'), ('CollaborateComposer', 'Collaboration Composer Actions'), ('SingleActionLinks', 'Single Action Links')], blank=True, null=True)
    related_list_record_id = models.CharField(max_length=255, verbose_name='Related List Record ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_url = models.CharField(max_length=2048, verbose_name='Target URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    target_object = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PlatformAction'
        verbose_name = 'Platform Action'
        verbose_name_plural = 'Platform Actions'
        # keyPrefix = '0JV'



class PlatformCachePartition(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(blank=True, null=True)
    is_default_partition = models.BooleanField(verbose_name='Default Partition', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'PlatformCachePartition'
        verbose_name = 'Platform Cache Partition'
        verbose_name_plural = 'Platform Cache Partitions'
        # keyPrefix = '0Er'



class PlatformCachePartitionType(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartitiontype_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='platformcachepartitiontype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    platform_cache_partition = models.ForeignKey(PlatformCachePartition, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    cache_type = models.CharField(max_length=255, choices=[('Session', None), ('Organization', None)])
    allocated_capacity = models.IntegerField(blank=True, null=True)
    allocated_purchased_capacity = models.IntegerField(verbose_name='Allocated Namespaced Purchased Capacity', blank=True, null=True)
    allocated_trial_capacity = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'PlatformCachePartitionType'
        verbose_name = 'Platform Cache Partition Type'
        verbose_name_plural = 'Platform Cache Partition Types'
        # keyPrefix = '0Ev'



class Pricebook2(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Price Book Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebook2_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebook2_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(max_length=255, blank=True, null=True)
    is_standard = models.BooleanField(verbose_name='Is Standard Price Book', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2'
        verbose_name = 'Price Book'
        verbose_name_plural = 'Price Books'
        # keyPrefix = '01s'



class Pricebook2History(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('IsArchived', 'Archived'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('IsStandard', 'Is Standard Price Book'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Name', 'Price Book Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Pricebook2History'
        verbose_name = 'Price Book History'
        verbose_name_plural = 'Price Book History'
        # keyPrefix = 'None'



class PricebookEntry(models.Model):
    name = models.CharField(max_length=255, verbose_name='Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    product2 = models.ForeignKey('Product2', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='List Price')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    use_standard_price = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebookentry_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pricebookentry_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    product_code = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'PricebookEntry'
        verbose_name = 'Price Book Entry'
        verbose_name_plural = 'Price Book Entries'
        # keyPrefix = '01u'



class ProcessDefinition(models.Model):
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    type = models.CharField(max_length=40, verbose_name='Process Definition Type', sf_read_only=models.READ_ONLY, default='Approval', choices=[('Approval', 'Approval Process'), ('State', 'State-based Process')])
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    table_enum_or_id = models.CharField(max_length=40, verbose_name='Custom Object Definition ID', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('Campaign', None), ('Case', None), ('Contact', None), ('ContactPointTypeConsent', None), ('Contract', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('ExchangeUserMapping', None), ('Image', None), ('Lead', None), ('Opportunity', None), ('Order', None), ('OrgDeleteRequest', None), ('Product2', None), ('PromptAction', None), ('Quote', None), ('RequestsForAccessSIQ', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('WorkBadgeDefinition', None)])
    lock_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Total', None), ('Admin', None), ('Owner', None), ('Workitem', None), ('Node', None), ('none', None)])
    state = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Obsolete', 'Obsolete')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processdefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processdefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessDefinition'
        verbose_name = 'Process Definition'
        verbose_name_plural = 'Process Definition'
        # keyPrefix = '04a'



class ProcessInstance(models.Model):
    process_definition = models.ForeignKey(ProcessDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    target_object = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactPointTypeConsent, Contract, DataUseLegalBasis, DataUsePurpose, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, Equipment_Assignment__c, Equipment__c, Image, Incident__c, Lead, Opportunity, Order, Product2, Quote, SocialPost, Solution, StreamingChannel, Survey__c, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'No Response')])
    completed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_actor = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_lastactor_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    submitted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_submittedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstance_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstance'
        verbose_name = 'Process Instance'
        verbose_name_plural = 'Process Instance'
        # keyPrefix = '04g'



class ProcessInstanceHistory(models.Model):
    is_pending = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    target_object = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactPointTypeConsent, Contract, DataUseLegalBasis, DataUsePurpose, DuplicateRecordItem, DuplicateRecordSet, EmailMessage, Equipment_Assignment__c, Equipment__c, Image, Incident__c, Lead, Opportunity, Order, Product2, Quote, SocialPost, Solution, StreamingChannel, Survey__c, WorkBadgeDefinition, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    step_status = models.CharField(max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'No Response')], blank=True, null=True)
    process_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancehistory_originalactor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancehistory_actor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User]
    reminders_sent = models.IntegerField(verbose_name='RemindersSent', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    comments = models.CharField(max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceHistory'
        verbose_name = 'Process Instance History'
        verbose_name_plural = 'Process Instance History'
        # keyPrefix = 'None'



class ProcessInstanceNode(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    process_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    node_status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'No Response')], blank=True, null=True)
    completed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_actor = models.ForeignKey('User', models.DO_NOTHING, related_name='processinstancenode_lastactor_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    process_node_name = models.CharField(max_length=255, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceNode'
        verbose_name = 'Process Instance Node'
        verbose_name_plural = 'Process Instance Node'
        # keyPrefix = '0OO'



class ProcessInstanceStep(models.Model):
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    step_status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'No Response')], blank=True, null=True)
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancestep_originalactor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstancestep_actor_set', sf_read_only=models.READ_ONLY)  # Reference to tables [Group, User] Master Detail Relationship *
    comments = models.CharField(max_length=4000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    step_node = models.ForeignKey('ProcessNode', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    elapsed_time_in_days = models.DecimalField(max_digits=18, decimal_places=0, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceStep'
        verbose_name = 'Process Instance Step'
        verbose_name_plural = 'Process Instance Step'
        # keyPrefix = '04h'



class ProcessInstanceWorkitem(models.Model):
    process_instance = models.ForeignKey(ProcessInstance, models.DO_NOTHING, sf_read_only=models.NOT_CREATEABLE)  # Master Detail Relationship *
    original_actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstanceworkitem_originalactor_set', sf_read_only=models.NOT_CREATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    actor = models.ForeignKey(Group, models.DO_NOTHING, related_name='processinstanceworkitem_actor_set', sf_read_only=models.NOT_CREATEABLE)  # Reference to tables [Group, User]
    elapsed_time_in_days = models.DecimalField(max_digits=7, decimal_places=3, verbose_name='Elapsed Time in Days', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_hours = models.DecimalField(max_digits=7, decimal_places=2, verbose_name='Elapsed Time in Hours', sf_read_only=models.READ_ONLY, blank=True, null=True)
    elapsed_time_in_minutes = models.DecimalField(max_digits=8, decimal_places=0, verbose_name='Elapsed Time in Minutes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessInstanceWorkitem'
        verbose_name = 'Approval Request'
        verbose_name_plural = 'Approval Requests'
        # keyPrefix = '04i'



class ProcessNode(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, verbose_name='Unique Name', sf_read_only=models.READ_ONLY)
    process_definition = models.ForeignKey(ProcessDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'ProcessNode'
        verbose_name = 'Process Node'
        verbose_name_plural = 'Process Node'
        # keyPrefix = '04b'



class Product2(models.Model):
    name = models.CharField(max_length=255, verbose_name='Product Name')
    product_code = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(verbose_name='Product Description', blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    family = models.CharField(max_length=40, verbose_name='Product Family', choices=[('None', 'None')], blank=True, null=True)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, blank=True, null=True)
    external_id = models.CharField(max_length=255, verbose_name='External ID', blank=True, null=True)
    display_url = models.URLField(verbose_name='Display URL', blank=True, null=True)
    quantity_unit_of_measure = models.CharField(max_length=40, choices=[('Each', 'Each')], blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    stock_keeping_unit = models.CharField(max_length=180, verbose_name='Product SKU', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2'
        verbose_name = 'Product'
        verbose_name_plural = 'Products'
        # keyPrefix = '01t'



class Product2ChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=255, verbose_name='Product Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product_code = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(verbose_name='Product Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2changeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2changeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    family = models.CharField(max_length=40, verbose_name='Product Family', sf_read_only=models.READ_ONLY, choices=[('None', 'None')], blank=True, null=True)
    external_data_source = models.ForeignKey(ExternalDataSource, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    external_id = models.CharField(max_length=255, verbose_name='External ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    display_url = models.URLField(verbose_name='Display URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity_unit_of_measure = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Each', 'Each')], blank=True, null=True)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    stock_keeping_unit = models.CharField(max_length=180, verbose_name='Product SKU', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2ChangeEvent'
        verbose_name = 'Product Change Event'
        verbose_name_plural = 'Product Change Event'
        # keyPrefix = 'None'



class Product2Feed(models.Model):
    parent = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2feed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='product2feed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2Feed'
        verbose_name = 'Product Feed'
        verbose_name_plural = 'Product Feed'
        # keyPrefix = 'None'



class Product2History(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('created', 'Created.'), ('DisplayUrl', 'Display URL'), ('ExternalDataSource', 'External Data Source'), ('ExternalId', 'External ID'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ProductCode', 'Product Code'), ('Description', 'Product Description'), ('Family', 'Product Family'), ('Name', 'Product Name'), ('StockKeepingUnit', 'Product SKU'), ('QuantityUnitOfMeasure', 'Quantity Unit Of Measure'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Product2History'
        verbose_name = 'Product History'
        verbose_name_plural = 'Product History'
        # keyPrefix = 'None'



class Profile(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE)
    permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.NOT_CREATEABLE)
    permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.NOT_CREATEABLE)
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_public_filters = models.BooleanField(verbose_name='Manage Public List Views', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.NOT_CREATEABLE)
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.NOT_CREATEABLE)
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.NOT_CREATEABLE)
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.NOT_CREATEABLE)
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.NOT_CREATEABLE)
    permissions_activate_order = models.BooleanField(verbose_name='Activate Orders', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.NOT_CREATEABLE)
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.NOT_CREATEABLE)
    permissions_override_forecasts = models.BooleanField(verbose_name='Override Forecasts', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_forecasts = models.BooleanField(verbose_name='View All Forecasts', sf_read_only=models.NOT_CREATEABLE)
    permissions_api_user_only = models.BooleanField(verbose_name='Api Only User', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.NOT_CREATEABLE)
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.NOT_CREATEABLE)
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders', sf_read_only=models.NOT_CREATEABLE)
    permissions_install_multiforce = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_publish_multiforce = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_multiforce = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.NOT_CREATEABLE)
    permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.NOT_CREATEABLE)
    permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.NOT_CREATEABLE)
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.NOT_CREATEABLE)
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.NOT_CREATEABLE)
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.NOT_CREATEABLE)
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.NOT_CREATEABLE)
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.NOT_CREATEABLE)
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.NOT_CREATEABLE)
    permissions_activities_access = models.BooleanField(verbose_name='Access Activities', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links', sf_read_only=models.NOT_CREATEABLE)
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_case_interaction = models.BooleanField(verbose_name='Use Case Feed', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.NOT_CREATEABLE)
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_quotas = models.BooleanField(verbose_name='Manage Quotas', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.NOT_CREATEABLE)
    permissions_content_hub_user = models.BooleanField(verbose_name='Files Connect Cloud', sf_read_only=models.NOT_CREATEABLE)
    permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities', sf_read_only=models.NOT_CREATEABLE)
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.NOT_CREATEABLE)
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.NOT_CREATEABLE)
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.NOT_CREATEABLE)
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.NOT_CREATEABLE)
    permissions_content_workspaces = models.BooleanField(verbose_name='Access Libraries', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_work_badge_definition = models.BooleanField(verbose_name='Create custom Badge Definitions', sf_read_only=models.NOT_CREATEABLE)
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_verify_comment = models.BooleanField(verbose_name='Verify Answers to Chatter Questions', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.NOT_CREATEABLE)
    permissions_std_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture Standard', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.NOT_CREATEABLE)
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.NOT_CREATEABLE)
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.NOT_CREATEABLE)
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.NOT_CREATEABLE)
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.NOT_CREATEABLE)
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_audit_fields = models.BooleanField(verbose_name='Set Audit Fields upon Record Creation', sf_read_only=models.NOT_CREATEABLE)
    permissions_update_with_inactive_owner = models.BooleanField(verbose_name='Update Records with Inactive Owners', sf_read_only=models.NOT_CREATEABLE)
    permissions_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture', sf_read_only=models.NOT_CREATEABLE)
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.NOT_CREATEABLE)
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.NOT_CREATEABLE)
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.NOT_CREATEABLE)
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.NOT_CREATEABLE)
    permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users', sf_read_only=models.NOT_CREATEABLE)
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_lightning_login = models.BooleanField(verbose_name='Lightning Login User', sf_read_only=models.NOT_CREATEABLE)
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.NOT_CREATEABLE)
    permissions_remove_direct_message_members = models.BooleanField(verbose_name='Remove People from Direct Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.NOT_CREATEABLE)
    permissions_add_direct_message_members = models.BooleanField(verbose_name='Add People to Direct Messages', sf_read_only=models.NOT_CREATEABLE)
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.NOT_CREATEABLE)
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.NOT_CREATEABLE)
    permissions_access_cmc = models.BooleanField(db_column='PermissionsAccessCMC', verbose_name='Access Community Management', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.NOT_CREATEABLE)
    permissions_packaging2 = models.BooleanField(verbose_name='Create and Update Second-Generation Packages', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_certificates = models.BooleanField(verbose_name='Manage Certificates', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_report_in_lightning = models.BooleanField(verbose_name='Report Builder (Lightning Experience)', sf_read_only=models.NOT_CREATEABLE)
    permissions_prevent_classic_experience = models.BooleanField(verbose_name='Hide Option to Switch to Salesforce Classic', sf_read_only=models.NOT_CREATEABLE)
    permissions_hide_read_by_list = models.BooleanField(verbose_name='Hide the Seen By List', sf_read_only=models.NOT_CREATEABLE)
    permissions_list_email_send = models.BooleanField(verbose_name='Allow sending of List Emails', sf_read_only=models.NOT_CREATEABLE)
    permissions_feed_pinning = models.BooleanField(verbose_name='Pin Posts in Feeds', sf_read_only=models.NOT_CREATEABLE)
    permissions_change_dashboard_colors = models.BooleanField(verbose_name='Change Dashboard Colors', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_recommendation_strategies = models.BooleanField(verbose_name='Manage Next Best Action Strategies', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_propositions = models.BooleanField(verbose_name='Manage Next Best Action Recommendations', sf_read_only=models.NOT_CREATEABLE)
    permissions_close_conversations = models.BooleanField(verbose_name='Close Conversation Threads', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_report_roles_grps = models.BooleanField(verbose_name='Subscribe to Reports: Send to Groups and Roles', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(verbose_name='Subscribe to Dashboards: Send to Groups and Roles', sf_read_only=models.NOT_CREATEABLE)
    permissions_use_web_link = models.BooleanField(verbose_name='Allow Access to Customized Actions', sf_read_only=models.NOT_CREATEABLE)
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_only_embedded_app_user = models.BooleanField(verbose_name='Access to View-Only Licensed Templates and Apps', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_report_to_other_users = models.BooleanField(verbose_name='Subscribe to Reports: Add Recipients', sf_read_only=models.NOT_CREATEABLE)
    permissions_lightning_console_allowed_for_user = models.BooleanField(verbose_name='Lightning Console User', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_reports_run_as_user = models.BooleanField(verbose_name='Subscribe to Reports: Set Running User', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(verbose_name='Subscribe to Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(verbose_name='Subscribe to Dashboards: Add Recipients', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_ltng_temp_in_pub = models.BooleanField(verbose_name='Manage Public Lightning Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_transactional_email_send = models.BooleanField(verbose_name='Send Non-Commercial Email', sf_read_only=models.NOT_CREATEABLE)
    permissions_create_ltng_temp_folder = models.BooleanField(verbose_name='Create Folders for Lightning Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissions_apex_rest_services = models.BooleanField(verbose_name='Apex REST Services', sf_read_only=models.NOT_CREATEABLE)
    permissions_enable_community_app_launcher = models.BooleanField(verbose_name='Show App Launcher in Communities', sf_read_only=models.NOT_CREATEABLE)
    permissions_give_recognition_badge = models.BooleanField(verbose_name='Give Recognition Badges in Lightning Communities', sf_read_only=models.NOT_CREATEABLE)
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(verbose_name='Remain in Salesforce Classic', sf_read_only=models.NOT_CREATEABLE)
    permissions_manage_surveys = models.BooleanField(verbose_name='Manage Surveys', sf_read_only=models.NOT_CREATEABLE)
    permissions_view_roles = models.BooleanField(verbose_name='View Roles and Role Hierarchy', sf_read_only=models.NOT_CREATEABLE)
    permissions_einstein_assistant_user = models.BooleanField(verbose_name='Allows a user to access Einstein Assistant.', sf_read_only=models.NOT_CREATEABLE)
    permissions_modify_data_classification = models.BooleanField(verbose_name='Modify Data Classification', sf_read_only=models.NOT_CREATEABLE)
    permissions_privacy_data_access = models.BooleanField(verbose_name='Allow user to access privacy data', sf_read_only=models.NOT_CREATEABLE)
    permissions_query_all_files = models.BooleanField(verbose_name='Query All Files', sf_read_only=models.NOT_CREATEABLE)
    permissions_modify_metadata = models.BooleanField(verbose_name='Modify Metadata Through Metadata API Functions', sf_read_only=models.NOT_CREATEABLE)
    user_license = models.ForeignKey('UserLicense', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profile_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='profile_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Profile'
        verbose_name = 'Profile'
        verbose_name_plural = 'Profile'
        # keyPrefix = '00e'



class Publisher(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Publisher Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=70, verbose_name='Publisher Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    namespace_prefix = models.CharField(max_length=70, verbose_name='Publisher Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_salesforce = models.BooleanField(verbose_name='Is Salesforce the Publisher?', sf_read_only=models.READ_ONLY, default=False)
    major_version = models.IntegerField(verbose_name='Publisher Major Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    minor_version = models.IntegerField(verbose_name='Publisher Minor Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Publisher'
        verbose_name = 'Publisher'
        verbose_name_plural = 'Publishers'
        # keyPrefix = '4pb'



class PushTopic(models.Model):
    name = models.CharField(max_length=25, verbose_name='Topic Name')
    query = models.CharField(max_length=1300, verbose_name='SOQL Query')
    api_version = models.DecimalField(max_digits=18, decimal_places=1, verbose_name='API Version')
    is_active = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    notify_for_fields = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Select', None), ('Where', None), ('Referenced', None), ('All', None)])
    notify_for_operations = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Create', None), ('Update', None), ('All', None), ('Extended', None)])
    description = models.CharField(max_length=400, blank=True, null=True)
    notify_for_operation_create = models.BooleanField(verbose_name='Create')
    notify_for_operation_update = models.BooleanField(verbose_name='Update')
    notify_for_operation_delete = models.BooleanField(verbose_name='Delete')
    notify_for_operation_undelete = models.BooleanField(verbose_name='Undelete')
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pushtopic_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='pushtopic_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'PushTopic'
        verbose_name = 'Push Topic'
        verbose_name_plural = 'Push Topics'
        # keyPrefix = '0IF'



class QueueSobject(models.Model):
    queue = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('Case', None), ('Class_Offering__c', None), ('ContactRequest', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('Equipment__c', None), ('Image', None), ('Lead', None), ('Macro', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship_Error__c', None), ('npo02__Household__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Level__c', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('Order', None), ('QuickText', None), ('Quote', None), ('Scorecard', None), ('SocialPost', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'QueueSobject'
        verbose_name = 'Queue Sobject'
        verbose_name_plural = 'Queue Sobjects'
        # keyPrefix = '03g'



class QuickText(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Quick Text Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quicktext_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quicktext_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    message = models.TextField()
    category = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Greetings', 'Greetings'), ('FAQ', 'FAQ'), ('Closings', 'Closings')], blank=True, null=True)
    channel = models.CharField(max_length=4099, default=models.DEFAULTED_ON_CREATE, choices=[('Email', 'Email'), ('Portal', 'Portal'), ('Phone', 'Phone'), ('Internal', 'Internal'), ('Event', 'Event'), ('Task', 'Task')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuickText'
        verbose_name = 'Quick Text'
        verbose_name_plural = 'Quick Text'
        # keyPrefix = '574'



class QuickTextHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    quick_text = models.ForeignKey(QuickText, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Category', 'Category'), ('Channel', 'Channel'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Message', 'Message'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Name', 'Quick Text Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextHistory'
        verbose_name = 'Quick Text History'
        verbose_name_plural = 'Quick Text History'
        # keyPrefix = 'None'



class QuickTextShare(models.Model):
    parent = models.ForeignKey(QuickText, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'QuickTextShare'
        verbose_name = 'Quick Text Share'
        verbose_name_plural = 'Quick Text Share'
        # keyPrefix = 'None'



class Quote(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Quote Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quote_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quote_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING)  # Master Detail Relationship *
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    quote_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    is_syncing = models.BooleanField(verbose_name='Syncing', sf_read_only=models.READ_ONLY, default=False)
    shipping_handling = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Shipping and Handling', blank=True, null=True)
    tax = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Draft', 'Draft'), ('Needs Review', 'Needs Review'), ('In Review', 'In Review'), ('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Presented', 'Presented'), ('Accepted', 'Accepted'), ('Denied', 'Denied')], blank=True, null=True)
    expiration_date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    subtotal = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    line_item_count = models.IntegerField(verbose_name='Line Items', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(verbose_name='Bill To Street', blank=True, null=True)
    billing_city = models.CharField(max_length=40, verbose_name='Bill To City', blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Bill To State/Province', blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Bill To Zip/Postal Code', blank=True, null=True)
    billing_country = models.CharField(max_length=80, verbose_name='Bill To Country', blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, verbose_name='Bill To State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, verbose_name='Bill To Country Code', default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Bill To Latitude', blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Bill To Longitude', blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=255, verbose_name='Bill To Geocode Accuracy', choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(verbose_name='Bill To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(verbose_name='Ship To Street', blank=True, null=True)
    shipping_city = models.CharField(max_length=40, verbose_name='Ship To City', blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Ship To State/Province', blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Ship To Zip/Postal Code', blank=True, null=True)
    shipping_country = models.CharField(max_length=80, verbose_name='Ship To Country', blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, verbose_name='Ship To State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, verbose_name='Ship To Country Code', default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Ship To Latitude', blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Ship To Longitude', blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=255, verbose_name='Ship To Geocode Accuracy', choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(verbose_name='Ship To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    billing_name = models.CharField(max_length=255, verbose_name='Bill To Name', blank=True, null=True)
    shipping_name = models.CharField(max_length=255, verbose_name='Ship To Name', blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    fax = models.CharField(max_length=40, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    discount = models.DecimalField(max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    grand_total = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    can_create_quote_line_items = models.BooleanField(verbose_name='CanCreateQuoteLineItems', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'Quote'
        verbose_name = 'Quote'
        verbose_name_plural = 'Quotes'
        # keyPrefix = '0Q0'



class QuoteChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='quotechangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, verbose_name='Quote Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook2 = models.ForeignKey(Pricebook2, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quote_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    is_syncing = models.BooleanField(verbose_name='Syncing', sf_read_only=models.READ_ONLY, default=False)
    shipping_handling = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Shipping and Handling', sf_read_only=models.READ_ONLY, blank=True, null=True)
    tax = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Draft', choices=[('Draft', 'Draft'), ('Needs Review', 'Needs Review'), ('In Review', 'In Review'), ('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Presented', 'Presented'), ('Accepted', 'Accepted'), ('Denied', 'Denied')], blank=True, null=True)
    expiration_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    subtotal = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    line_item_count = models.IntegerField(verbose_name='Line Items', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_street = models.TextField(verbose_name='Bill To Street', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_city = models.CharField(max_length=40, verbose_name='Bill To City', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state = models.CharField(max_length=80, verbose_name='Bill To State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_postal_code = models.CharField(max_length=20, verbose_name='Bill To Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_country = models.CharField(max_length=80, verbose_name='Bill To Country', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_state_code = models.CharField(max_length=10, verbose_name='Bill To State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    billing_country_code = models.CharField(max_length=10, verbose_name='Bill To Country Code', sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    billing_latitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Bill To Latitude', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_longitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Bill To Longitude', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billing_geocode_accuracy = models.CharField(max_length=255, verbose_name='Bill To Geocode Accuracy', sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    billing_address = models.TextField(verbose_name='Bill To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    shipping_street = models.TextField(verbose_name='Ship To Street', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_city = models.CharField(max_length=40, verbose_name='Ship To City', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state = models.CharField(max_length=80, verbose_name='Ship To State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_postal_code = models.CharField(max_length=20, verbose_name='Ship To Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_country = models.CharField(max_length=80, verbose_name='Ship To Country', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_state_code = models.CharField(max_length=10, verbose_name='Ship To State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    shipping_country_code = models.CharField(max_length=10, verbose_name='Ship To Country Code', sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    shipping_latitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Ship To Latitude', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_longitude = models.DecimalField(max_digits=18, decimal_places=15, verbose_name='Ship To Longitude', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_geocode_accuracy = models.CharField(max_length=255, verbose_name='Ship To Geocode Accuracy', sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    shipping_address = models.TextField(verbose_name='Ship To', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    billing_name = models.CharField(max_length=255, verbose_name='Bill To Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    shipping_name = models.CharField(max_length=255, verbose_name='Ship To Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteChangeEvent'
        verbose_name = 'Quote Change Event'
        verbose_name_plural = 'Quote Change Event'
        # keyPrefix = 'None'



class QuoteDocument(models.Model):
    name = models.CharField(max_length=270, sf_read_only=models.READ_ONLY)
    quote = models.ForeignKey(Quote, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    content_version_document = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    document = models.TextField(verbose_name='PDF Document', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    grand_total = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    discount = models.DecimalField(max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotedocument_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotedocument_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'QuoteDocument'
        verbose_name = 'Quote PDF'
        verbose_name_plural = 'Quote PDFs'
        # keyPrefix = '0QD'



class QuoteFeed(models.Model):
    parent = models.ForeignKey(Quote, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotefeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotefeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteFeed'
        verbose_name = 'Quote Feed'
        verbose_name_plural = 'Quote Feed'
        # keyPrefix = 'None'



class QuoteLineItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    line_number = models.CharField(max_length=255, verbose_name='Line Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotelineitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotelineitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    quote = models.ForeignKey(Quote, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    pricebook_entry = models.ForeignKey(PricebookEntry, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    opportunity_line_item = models.ForeignKey(OpportunityLineItem, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Sales Price')
    discount = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Item Description', blank=True, null=True)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    list_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    subtotal = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Subtotal ', sf_read_only=models.READ_ONLY, blank=True, null=True)
    total_price = models.DecimalField(max_digits=18, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteLineItem'
        verbose_name = 'Quote Line Item'
        verbose_name_plural = 'Quote Line Items'
        # keyPrefix = '0QL'



class QuoteLineItemChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    line_number = models.CharField(max_length=255, verbose_name='Line Item Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotelineitemchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotelineitemchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    quote = models.ForeignKey(Quote, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebook_entry = models.ForeignKey(PricebookEntry, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    opportunity_line_item = models.ForeignKey(OpportunityLineItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    quantity = models.DecimalField(max_digits=12, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    unit_price = models.DecimalField(max_digits=18, decimal_places=2, verbose_name='Sales Price', sf_read_only=models.READ_ONLY, blank=True, null=True)
    discount = models.DecimalField(max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, verbose_name='Line Item Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    product2 = models.ForeignKey(Product2, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteLineItemChangeEvent'
        verbose_name = 'Quote Line Item Change Event'
        verbose_name_plural = 'Quote Line Item Change Event'
        # keyPrefix = 'None'



class QuoteShare(models.Model):
    parent = models.ForeignKey(Quote, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'QuoteShare'
        verbose_name = 'Quote Share'
        verbose_name_plural = 'Quote Share'
        # keyPrefix = 'None'



class QuoteTemplateRichTextData(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Quote Template Rich Text Data', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotetemplaterichtextdata_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='quotetemplaterichtextdata_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    data = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'QuoteTemplateRichTextData'
        verbose_name = 'Quote Template Rich Text Data'
        verbose_name_plural = 'Quote Template Rich Text Data'
        # keyPrefix = '0QR'



class RecentlyViewed(models.Model):
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    middle_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Account', None), ('AppAnalyticsQueryRequest', None), ('Asset', None), ('AssetRelationship', None), ('Campaign', None), ('Case', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('CollaborationGroup', None), ('Contact', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContentDocument', None), ('Contract', None), ('Dashboard', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('DuplicateRecordSet', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Event', None), ('Image', None), ('Incident__c', None), ('Individual', None), ('Lead', None), ('ListEmail', None), ('ListView', None), ('Macro', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('Opportunity', None), ('Order', None), ('Pricebook2', None), ('PricebookEntry', None), ('Product2', None), ('Profile', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('Report', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('Survey__c', None), ('Task', None), ('Topic', None), ('User', None), ('UserAppMenuItem', None), ('WorkBadge', None), ('WorkBadgeDefinition', None)], blank=True, null=True)
    alias = models.CharField(max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    profile = models.ForeignKey(Profile, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name_or_alias = models.CharField(max_length=80, verbose_name='Name or Alias', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    language = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'RecentlyViewed'
        verbose_name = 'Recently Viewed'
        verbose_name_plural = 'Recently Viewed'
        # keyPrefix = 'None'



class Recommendation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recommendation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recommendation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    action_reference = models.CharField(max_length=255, verbose_name='Action')
    description = models.CharField(max_length=255)
    image = models.ForeignKey(ContentAsset, models.DO_NOTHING, blank=True, null=True)
    acceptance_label = models.CharField(max_length=80)
    rejection_label = models.CharField(max_length=80)
    is_action_active = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Recommendation'
        verbose_name = 'Recommendation'
        verbose_name_plural = 'Recommendations'
        # keyPrefix = '0pr'



class RecordAction(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordaction_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordaction_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    record = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, CampaignMember, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, Opportunity, Order, Pricebook2, PricebookEntry, Product2, Quote, QuoteLineItem, SocialPersona, SocialPost, Survey__c, User, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    flow_definition = models.CharField(max_length=255, verbose_name='Interaction Definition ID', blank=True, null=True)
    flow_interview = models.ForeignKey(FlowInterview, models.DO_NOTHING, blank=True, null=True)
    order = models.IntegerField()
    status = models.CharField(max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('New', 'New'), ('Paused', 'Paused'), ('Complete', 'Complete'), ('Started', 'Started'), ('Unlinked', 'Unlinked')], blank=True, null=True)
    pinned = models.CharField(max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('None', 'None'), ('Top', 'Top'), ('Bottom', 'Bottom')], blank=True, null=True)
    action_type = models.CharField(max_length=255, default=models.DEFAULTED_ON_CREATE, choices=[('Flow', 'Flow'), ('QuickAction', 'QuickAction')], blank=True, null=True)
    action_definition = models.CharField(max_length=255, choices=[('QuickActionDefinition.Account.Case', None), ('QuickActionDefinition.Account.Log_a_Call', None), ('QuickActionDefinition.Account.npsp__New_Address', None), ('QuickActionDefinition.Account.npsp__New_Affiliation', None), ('QuickActionDefinition.Account.npsp__Quick_Household_Update', None), ('QuickActionDefinition.Account.npsp__Quick_Organization_Update', None), ('QuickActionDefinition.Account.Opportunity', None), ('QuickActionDefinition.Account.Task', None), ('QuickActionDefinition.Campaign.Task', None), ('QuickActionDefinition.Case', None), ('QuickActionDefinition.Case._LightningUpdateCase', None), ('QuickActionDefinition.Case.Event', None), ('QuickActionDefinition.Case.Log_a_Call', None), ('QuickActionDefinition.Case.Task', None), ('QuickActionDefinition.Contact._LightningRelatedContact', None), ('QuickActionDefinition.Contact.Case', None), ('QuickActionDefinition.Contact.Event', None), ('QuickActionDefinition.Contact.Log_a_Call', None), ('QuickActionDefinition.Contact.Maikhanh', None), ('QuickActionDefinition.Contact.npsp__New_Affiliation', None), ('QuickActionDefinition.Contact.npsp__New_Recurring_Donation', None), ('QuickActionDefinition.Contact.npsp__New_Relationship', None), ('QuickActionDefinition.Contact.npsp__Quick_Update', None), ('QuickActionDefinition.Contact.Task', None), ('QuickActionDefinition.Event', None), ('QuickActionDefinition.FeedItem.ContentNote', None), ('QuickActionDefinition.FeedItem.ContentPost', None), ('QuickActionDefinition.FeedItem.LinkPost', None), ('QuickActionDefinition.FeedItem.MobileSmartActions', None), ('QuickActionDefinition.FeedItem.PollPost', None), ('QuickActionDefinition.FeedItem.QuestionPost', None), ('QuickActionDefinition.FeedItem.RypplePost', None), ('QuickActionDefinition.FeedItem.TextPost', None), ('QuickActionDefinition.Lead', None), ('QuickActionDefinition.Lead.Event', None), ('QuickActionDefinition.Lead.Log_a_Call', None), ('QuickActionDefinition.Lead.Task', None), ('QuickActionDefinition.Log_a_Call', None), ('QuickActionDefinition.LogACall', None), ('QuickActionDefinition.New_Household_Account', None), ('QuickActionDefinition.New_Organization', None), ('QuickActionDefinition.NewCase', None), ('QuickActionDefinition.NewEvent', None), ('QuickActionDefinition.NewGroup', None), ('QuickActionDefinition.NewLead', None), ('QuickActionDefinition.NewOpportunity', None), ('QuickActionDefinition.npe03__NewTask', None), ('QuickActionDefinition.npsp__LogACall', None), ('QuickActionDefinition.npsp__New_Recurring_Donation', None), ('QuickActionDefinition.npsp__NewOpportunity', None), ('QuickActionDefinition.npsp__NewTask', None), ('QuickActionDefinition.Opportunity', None), ('QuickActionDefinition.Opportunity.Event', None), ('QuickActionDefinition.Opportunity.Log_a_Call', None), ('QuickActionDefinition.Opportunity.npsp__New_Payment', None), ('QuickActionDefinition.Opportunity.npsp__Quick_Update', None), ('QuickActionDefinition.Opportunity.Task', None), ('QuickActionDefinition.Task', None)], blank=True, null=True)
    is_mandatory = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    is_ui_remove_hidden = models.BooleanField(verbose_name='Hide Remove Action in UI', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'RecordAction'
        verbose_name = 'RecordAction'
        verbose_name_plural = 'RecordActions'
        # keyPrefix = '0Rw'



class RecordActionHistory(models.Model):
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordactionhistory_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordactionhistory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent_record = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, CampaignMember, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, Opportunity, Order, Pricebook2, PricebookEntry, Product2, Quote, QuoteLineItem, SocialPersona, SocialPost, Survey__c, User, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    action_definition_api_name = models.CharField(max_length=255, verbose_name='Action Definition API Name', sf_read_only=models.READ_ONLY)
    action_definition_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    action_type = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='Flow', choices=[('Flow', 'Flow'), ('QuickAction', 'QuickAction')])
    state = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='Started', choices=[('Started', 'Started'), ('Resumed', 'Resumed'), ('Paused', 'Paused'), ('Completed', 'Completed'), ('Unlinked', 'Unlinked')])
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='recordactionhistory_user_set', sf_read_only=models.READ_ONLY)
    record_action_id = models.CharField(max_length=18, verbose_name='RecordAction Id', sf_read_only=models.READ_ONLY)
    logged_time = models.DateTimeField(sf_read_only=models.READ_ONLY)
    pinned = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, default='None', choices=[('None', 'None'), ('Top', 'Top'), ('Bottom', 'Bottom')], blank=True, null=True)
    is_mandatory = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'RecordActionHistory'
        verbose_name = 'RecordActionHistory'
        verbose_name_plural = 'RecordActionHistories'
        # keyPrefix = '0Ub'



class RecordType(models.Model):
    name = models.CharField(max_length=80)
    developer_name = models.CharField(max_length=80, verbose_name='Record Type Name')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=255, blank=True, null=True)
    business_process = models.ForeignKey(BusinessProcess, models.DO_NOTHING, blank=True, null=True)
    sobject_type = models.CharField(max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Announcement', None), ('AppAnalyticsQueryRequest', None), ('Asset', None), ('AssetRelationship', None), ('AssistantProgress', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('Calendar2', None), ('Calendar2Definition', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('CollaborationGroup', None), ('CollaborationGroupRank', None), ('CollaborationGroupRecord', None), ('ComponentResponseCache', None), ('Contact', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContentDocumentListViewMapping', None), ('ContentFolderDistribution', None), ('ContentVersion', None), ('Contract', None), ('CustomSettingNameIndex', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Event', None), ('ExpressionFilter', None), ('ExpressionFilterCriteria', None), ('FileInspectionResult', None), ('FileSearchActivity', None), ('FlowExecutionEventMetric', None), ('FlowRecordRelation', None), ('FlowStageRelation', None), ('Image', None), ('InboundSocialPost', None), ('Incident__c', None), ('Individual', None), ('Lead', None), ('ListEmail', None), ('ListEmailIndividualRecipient', None), ('ListEmailRecipientSource', None), ('ListEmailSentResult', None), ('Macro', None), ('MacroAction', None), ('MacroInstruction', None), ('ManagedContentBlock', None), ('ManagedContentBlockVersion', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('Opportunity', None), ('Order', None), ('OrgDeleteRequest', None), ('PersonalizationResource', None), ('Pricebook2', None), ('Product2', None), ('PromptAction', None), ('QuickText', None), ('Quote', None), ('Recommendation', None), ('RecommendationReaction', None), ('RecordAction', None), ('RecordOrigin', None), ('ReportResultBlob', None), ('RequestsForAccessSIQ', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('SearchActivity', None), ('SearchPromotionRule', None), ('SetupAssistantAnswer', None), ('SetupAssistantProgress', None), ('SetupFlowProgress', None), ('SiqUserBlacklist', None), ('SocialPost', None), ('Solution', None), ('StreamActivityAccess', None), ('Survey__c', None), ('SyncTransactionLog', None), ('Task', None), ('UserEmailPreferredPerson', None), ('UserMetrics', None), ('UserNavItem', None), ('WorkAccess', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.NOT_CREATEABLE, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtype_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='recordtype_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'RecordType'
        verbose_name = 'Record Type'
        verbose_name_plural = 'Record Types'
        # keyPrefix = '012'



class RelationshipDomain(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Relationship Domain Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_info_id = models.CharField(max_length=70, verbose_name='Relationship Info ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relationship_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.TextField(verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'RelationshipDomain'
        verbose_name = 'Relationship Domain'
        verbose_name_plural = 'Relationship Domains'
        # keyPrefix = '0Jv'



class RelationshipInfo(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Relationship Info Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    child_sobject_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_id = models.CharField(max_length=70, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_cascade_delete = models.BooleanField(verbose_name='Is Cascade Delete?', sf_read_only=models.READ_ONLY, default=False)
    is_deprecated_and_hidden = models.BooleanField(verbose_name='Is Deprecated And Hidden?', sf_read_only=models.READ_ONLY, default=False)
    is_restricted_delete = models.BooleanField(verbose_name='Is Restricted Delete?', sf_read_only=models.READ_ONLY, default=False)
    junction_id_list_names = models.TextField(verbose_name='Names of the Junction Id Lists', sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'RelationshipInfo'
        verbose_name = 'Relationship'
        verbose_name_plural = 'Relationships'
        # keyPrefix = '0Ju'



class Report(models.Model):
    owner = models.ForeignKey(Folder, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Reference to tables [Folder, Organization, User]
    folder_name = models.CharField(max_length=256, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='report_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='report_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=40, verbose_name='Report Name', sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    developer_name = models.CharField(max_length=80, verbose_name='Report Unique Name', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_run_date = models.DateTimeField(verbose_name='Last Run', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    format = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Tabular', choices=[('MultiBlock', 'Joined'), ('Matrix', 'Matrix'), ('Summary', 'Summary'), ('Tabular', 'Tabular')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Report'
        verbose_name = 'Report'
        verbose_name_plural = 'Reports'
        # keyPrefix = '00O'



class ReportFeed(models.Model):
    parent = models.ForeignKey(Report, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='reportfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='reportfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'ReportFeed'
        verbose_name = 'Report Feed'
        verbose_name_plural = 'Report Feed'
        # keyPrefix = 'None'



class SamlSsoConfig(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    version = models.CharField(max_length=255, verbose_name='SAML Version', sf_read_only=models.READ_ONLY, choices=[('SAML1_1', None), ('SAML2_0', None)])
    issuer = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    options_sp_init_binding = models.BooleanField(verbose_name='SpInitBinding', sf_read_only=models.READ_ONLY)
    options_user_provisioning = models.BooleanField(verbose_name='UserProvisioning', sf_read_only=models.READ_ONLY)
    attribute_format = models.CharField(max_length=255, verbose_name='Name ID Format', sf_read_only=models.READ_ONLY, blank=True, null=True)
    attribute_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    audience = models.CharField(max_length=255, verbose_name='Entity ID', sf_read_only=models.READ_ONLY)
    identity_mapping = models.CharField(max_length=255, verbose_name='SAML Identity Type', sf_read_only=models.READ_ONLY, choices=[('Username', None), ('FederationId', None), ('UserId', None)])
    identity_location = models.CharField(max_length=255, verbose_name='SAML Identity Location', sf_read_only=models.READ_ONLY, choices=[('SubjectNameId', None), ('Attribute', None)])
    saml_jit_handler = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    execution_user = models.ForeignKey('User', models.DO_NOTHING, related_name='samlssoconfig_executionuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    login_url = models.CharField(max_length=1500, verbose_name='Identity Provider Login URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    logout_url = models.CharField(max_length=1500, verbose_name='Identity Provider Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    error_url = models.CharField(max_length=500, verbose_name='Custom Error URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    validation_cert = models.CharField(max_length=4000, verbose_name='Identity Provider Certificate', sf_read_only=models.READ_ONLY)
    request_signature_method = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('RSA-SHA1', 'RSA-SHA1'), ('RSA-SHA256', 'RSA-SHA256')], blank=True, null=True)
    single_logout_url = models.CharField(max_length=255, verbose_name='Identity Provider Single Logout URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    single_logout_binding = models.CharField(max_length=255, verbose_name='Single Logout Request Binding', sf_read_only=models.READ_ONLY, choices=[('RedirectBinding', None), ('PostBinding', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SamlSsoConfig'
        verbose_name = 'SAML Single Sign-On Setting'
        verbose_name_plural = 'SAML Single Sign-On Settings'
        # keyPrefix = '0LE'



class Scontrol(models.Model):
    name = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.NOT_CREATEABLE)
    developer_name = models.CharField(max_length=80, verbose_name='S-Control Name', sf_read_only=models.NOT_CREATEABLE)
    description = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    encoding_key = models.CharField(max_length=40, verbose_name='Encoding', sf_read_only=models.NOT_CREATEABLE, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    html_wrapper = models.TextField(verbose_name='HTML Body', sf_read_only=models.NOT_CREATEABLE)
    filename = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    body_length = models.IntegerField(verbose_name='Binary Length', sf_read_only=models.READ_ONLY)
    binary = models.TextField(sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    content_source = models.CharField(max_length=40, verbose_name='Type', sf_read_only=models.NOT_CREATEABLE, choices=[('HTML', 'HTML'), ('URL', 'URL'), ('Snippet', 'Snippet')], blank=True, null=True)
    supports_caching = models.BooleanField(verbose_name='Prebuild In Page', sf_read_only=models.NOT_CREATEABLE, default=False)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrol_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='scontrol_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Scontrol'
        verbose_name = 'Custom S-Control'
        verbose_name_plural = 'Custom S-Controls'
        # keyPrefix = '01N'



class SearchActivity(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Search Activity Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchactivity_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='searchactivity_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    search_term = models.CharField(max_length=100, sf_read_only=models.READ_ONLY)
    query_date = models.DateField(verbose_name='Search Date', sf_read_only=models.READ_ONLY)
    count_queries = models.IntegerField(verbose_name='Number of Searches', sf_read_only=models.READ_ONLY)
    count_users = models.IntegerField(verbose_name='Number of Users', sf_read_only=models.READ_ONLY)
    avg_num_results = models.DecimalField(max_digits=18, decimal_places=4, verbose_name='Number of Results', sf_read_only=models.READ_ONLY)
    kb_channel = models.CharField(max_length=255, verbose_name='Channel', sf_read_only=models.READ_ONLY, choices=[('AllChannels', 'All Channels'), ('App', 'Internal App'), ('Pkb', 'Public Knowledge Base'), ('Csp', 'Customer'), ('Prm', 'Partner')])
    period = models.CharField(max_length=255, verbose_name='Duration', sf_read_only=models.READ_ONLY, choices=[('DAY', 'Daily'), ('MONTH', 'Monthly'), ('YEAR', 'Yearly')])
    click_rank = models.DecimalField(max_digits=18, decimal_places=4, verbose_name='Average Click Rank', sf_read_only=models.READ_ONLY, blank=True, null=True)
    query_language = models.CharField(max_length=255, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    clicked_record_name = models.CharField(max_length=255, verbose_name='Clicked Article Title', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SearchActivity'
        verbose_name = 'SearchActivity'
        verbose_name_plural = 'Knowledge Search Activity'
        # keyPrefix = '0JO'



class SearchLayout(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    layout_type = models.CharField(max_length=30, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    entity_definition_id = models.CharField(max_length=70, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fields_displayed = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    buttons_displayed = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    class Meta(models.Model.Meta):
        db_table = 'SearchLayout'
        verbose_name = 'Search Layout'
        verbose_name_plural = 'Search Layouts'
        # keyPrefix = '4co'



class SecureAgentsCluster(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    master_label = models.CharField(max_length=80, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentscluster_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='secureagentscluster_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SecureAgentsCluster'
        verbose_name = 'Secure Agent Cluster'
        verbose_name_plural = 'Secure Agent Clusters'
        # keyPrefix = '0Qy'



class SecurityCustomBaseline(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    developer_name = models.CharField(max_length=80, verbose_name='Name')
    language = models.CharField(max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    master_label = models.CharField(max_length=80, verbose_name='Label')
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='securitycustombaseline_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='securitycustombaseline_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    baseline = models.TextField(blank=True, null=True)
    is_default = models.BooleanField(verbose_name='Is Default Baseline', default=models.DEFAULTED_ON_CREATE)
    class Meta(models.Model.Meta):
        db_table = 'SecurityCustomBaseline'
        verbose_name = 'Security Custom Baseline'
        verbose_name_plural = 'Security Custom Baselines'
        # keyPrefix = '09v'



class SessionPermSetActivation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    auth_session = models.ForeignKey(AuthSession, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    permission_set = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='sessionpermsetactivation_user_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SessionPermSetActivation'
        verbose_name = 'Session Permission Set Activation'
        verbose_name_plural = 'Session Permission Set Activations'
        # keyPrefix = '5Pa'



class SetupAuditTrail(models.Model):
    action = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    section = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    display = models.CharField(max_length=1000, sf_read_only=models.READ_ONLY, blank=True, null=True)
    delegate_user = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responsible_namespace_prefix = models.CharField(max_length=15, verbose_name='Source Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by_context = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by_issuer = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SetupAuditTrail'
        verbose_name = 'Setup Audit Trail Entry'
        verbose_name_plural = 'Setup Audit Trail Entries'
        # keyPrefix = '0Ym'



class SetupEntityAccess(models.Model):
    parent = models.ForeignKey(PermissionSet, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    setup_entity = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [ApexClass, ApexPage, ConnectedApplication, CustomPermission, ExternalDataSource, ExternalSocialAccount, NamedCredential] Master Detail Relationship *
    setup_entity_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('ApexClass', None), ('ApexPage', None), ('ConnectedApplication', None), ('ConnectedApplication', None), ('CustomPermission', None), ('ExternalDataSource', None), ('ExternalSocialAccount', None), ('NamedCredential', None), ('TabSet', None)], blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SetupEntityAccess'
        verbose_name = 'Setup Entity Access'
        verbose_name_plural = 'Setup Entity Access'
        # keyPrefix = '0J0'



class Site(models.Model):
    name = models.CharField(max_length=80, verbose_name='Site Name', sf_read_only=models.READ_ONLY)
    subdomain = models.CharField(max_length=80, verbose_name='Site Subdomain Prefix', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url_path_prefix = models.CharField(max_length=40, verbose_name='Default Web Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    guest_user = models.ForeignKey('User', models.DO_NOTHING, related_name='site_guestuser_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, verbose_name='Site Status', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Inactive', 'In Maintenance')])
    admin = models.ForeignKey('User', models.DO_NOTHING, related_name='site_admin_set', sf_read_only=models.READ_ONLY)
    options_enable_feeds = models.BooleanField(verbose_name='Enable Feeds', sf_read_only=models.READ_ONLY)
    options_require_https = models.BooleanField(verbose_name='Require Secure Connections (HTTPS)', sf_read_only=models.READ_ONLY)
    options_allow_home_page = models.BooleanField(verbose_name='Enable Standard Home Page', sf_read_only=models.READ_ONLY)
    options_allow_standard_ideas_pages = models.BooleanField(verbose_name='Enable Standard Ideas Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_search = models.BooleanField(verbose_name='Enable Standard Lookup Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_lookups = models.BooleanField(verbose_name='Enable Standard Search Pages', sf_read_only=models.READ_ONLY)
    options_allow_standard_answers_pages = models.BooleanField(verbose_name='Enable Standard Answers Pages', sf_read_only=models.READ_ONLY)
    options_allow_guest_support_api = models.BooleanField(verbose_name='Guest Access to the Support API', sf_read_only=models.READ_ONLY)
    options_allow_standard_portal_pages = models.BooleanField(verbose_name='Allow Access to Standard Salesforce Pages', sf_read_only=models.READ_ONLY)
    options_csp_upgrade_insecure_requests = models.BooleanField(verbose_name='Upgrade all requests to HTTPS', sf_read_only=models.READ_ONLY)
    options_content_sniffing_protection = models.BooleanField(verbose_name='Enable Content Sniffing Protection', sf_read_only=models.READ_ONLY)
    options_browser_xss_protection = models.BooleanField(verbose_name='Enable Browser Cross Site Scripting Protection', sf_read_only=models.READ_ONLY)
    options_referrer_policy_origin_when_cross_origin = models.BooleanField(verbose_name='Referrer URL Protection', sf_read_only=models.READ_ONLY)
    description = models.TextField(verbose_name='Site Description', sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=255, verbose_name='Site Label', sf_read_only=models.READ_ONLY)
    analytics_tracking_code = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    site_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Siteforce', 'Site.com'), ('Visualforce', 'Force.com'), ('User', 'User')])
    clickjack_protection_level = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='SameOriginOnly', choices=[('AllowAllFraming', 'Allow framing by any page (No protection)'), ('External', 'Allow framing of site or community pages on external domains (Good protection)'), ('SameOriginOnly', 'Allow framing by the same origin only (Recommended)'), ('NoFraming', "Don't allow framing by any page (Most protection)")])
    daily_bandwidth_limit = models.IntegerField(verbose_name='Daily Bandwidth Limit (MB)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_bandwidth_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_request_time_limit = models.IntegerField(verbose_name='Daily Request Time Limit (min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    daily_request_time_used = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthly_page_views_entitlement = models.IntegerField(verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='site_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='site_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Site'
        verbose_name = 'Site'
        verbose_name_plural = 'Sites'
        # keyPrefix = '0DM'



class SiteDetail(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Site ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_registration_enabled = models.BooleanField(verbose_name='Self-Registration Enabled', sf_read_only=models.READ_ONLY, default=False)
    secure_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteDetail'
        verbose_name = 'Site Detail'
        verbose_name_plural = 'Site Details'
        # keyPrefix = '0GV'



class SiteFeed(models.Model):
    parent = models.ForeignKey(Site, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sitefeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='sitefeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteFeed'
        verbose_name = 'Site'
        verbose_name_plural = 'Site'
        # keyPrefix = 'None'



class SiteHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    site = models.ForeignKey(Site, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('siteActive', 'Active'), ('IndexPage', 'Active Site Home Page'), ('SiteAllowStandardPortalPages', 'Allow Access to Standard Salesforce Pages'), ('AnalyticsTrackingCode', 'Analytics Tracking Code'), ('siteOverride401', 'Authorization Required Page (401)'), ('siteOverrideChangePassword', 'Change Password Page'), ('ClickjackProtectionLevel', 'Clickjack Protection Level'), ('created', 'Created.'), ('SiteDeleteDomain', 'Custom Web Address'), ('siteNewDomain', 'Custom Web Address'), ('TopLevelDomain', 'Custom Web Address'), ('DefaultDomain', 'Default Site Domain'), ('siteSetPrimaryDomain', 'Default Site Domain'), ('UrlPathPrefix', 'Default Web Address'), ('siteBTDisabled', 'Disable Site'), ('siteEnableFeeds', 'Enable Feeds'), ('siteAllowStandardAnswersPages', 'Enable Standard Answers Pages'), ('siteAllowHomePage', 'Enable Standard Home Page'), ('siteAllowStandardIdeasPages', 'Enable Standard Ideas Pages'), ('siteAllowStandardSearch', 'Enable Standard Lookup Pages'), ('siteAllowStandardLookups', 'Enable Standard Search Pages'), ('feedEvent', 'Feed event'), ('siteOverrideForgotPassword', 'Forgot Password Page'), ('siteOverride500', 'Generic Error Page'), ('GuestUser', 'Guest User'), ('siteOverrideInactive', 'Inactive Site Home Page'), ('individualMerged', 'Individual Merged'), ('siteOverride509', 'Limit Exceeded Page (509)'), ('siteOverride503', 'Maintenance Page(500/503)'), ('sitePageLimitExceeded', 'Monthly page view limit exceeded for org'), ('siteOverrideMyProfile', 'My Profile Page'), ('NewPassTemplate', 'New Password Template'), ('NewUserTemplate', 'New User Template'), ('Options', 'Options'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('siteOverride404', 'Page Not Found Page (404)'), ('Portal', 'Portal'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('siteNewRedirect', 'redirection mappings. Created a new mapping'), ('siteDeleteRedirect', 'redirection mappings. Deleted the mapping'), ('siteChangeRedirect', 'redirection mappings. The new mapping value is'), ('siteRequireInsecurePortalAccess', 'Require Non-Secure Connections (HTTP)'), ('siteRequireHttps', 'Require Secure Connections (HTTPS)'), ('siteOverrideSelfReg', 'Self Registration Page'), ('ServerIsDown', 'Service Not Available'), ('Admin', 'Site Contact'), ('Description', 'Site Description'), ('FavoriteIcon', 'Site Favorite Icon'), ('MasterLabel', 'Site Label'), ('Language', 'Site Master Language'), ('Name', 'Site Name'), ('siteOverrideRobotsTxt', 'Site Robots.txt'), ('Status', 'Site Status'), ('Subdomain', 'Site Subdomain Prefix'), ('siteOverrideTemplate', 'Site Template'), ('SiteType', 'Site Type'), ('Guid', 'Unique ID'), ('UrlRewriterClass', 'URL Rewriter Class')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteHistory'
        verbose_name = 'Site History'
        verbose_name_plural = 'Site History'
        # keyPrefix = 'None'



class SiteIframeWhiteListUrl(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='siteiframewhitelisturl_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='siteiframewhitelisturl_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    site = models.ForeignKey(Site, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    url = models.CharField(max_length=255, verbose_name='Domain', help_text='Accepts these formats: example.com, *.example.com, and http://example.com', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SiteIframeWhiteListUrl'
        verbose_name = 'Whitelisted Domains for Inline Frames'
        verbose_name_plural = 'Whitelisted Domains for Inline Frames'
        # keyPrefix = '0Xs'



class SocialPersona(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Social Handle')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpersona_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpersona_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Account, models.DO_NOTHING)  # Reference to tables [Account, Contact, Lead, SocialPost] Master Detail Relationship *
    provider = models.CharField(max_length=255, verbose_name='Social Network', choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('InstagramBusiness', 'InstagramBusiness'), ('GoogleRtc', 'GoogleRTC'), ('Other', 'Other Media Type')])
    external_id = models.CharField(max_length=255, verbose_name='Social Persona Provider External Id', blank=True, null=True)
    is_default = models.BooleanField(verbose_name='Default', default=models.DEFAULTED_ON_CREATE)
    external_picture_url = models.URLField(db_column='ExternalPictureURL', verbose_name='Provider External Picture URL', blank=True, null=True)
    profile_url = models.URLField(verbose_name='Profile URL', blank=True, null=True)
    author_labels = models.CharField(max_length=255, blank=True, null=True)
    is_verified = models.BooleanField(verbose_name='Verified', default=models.DEFAULTED_ON_CREATE)
    influencer_score = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPersona'
        verbose_name = 'Social Persona'
        verbose_name_plural = 'Social Personas'
        # keyPrefix = '0SP'



class SocialPersonaHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    social_persona = models.ForeignKey(SocialPersona, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AreWeFollowing', 'Are we following'), ('AuthorLabels', 'Author Labels'), ('Bio', 'Bio'), ('IsBlacklisted', 'Blacklisted'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Followers', 'Followers'), ('Following', 'Following'), ('individualMerged', 'Individual Merged'), ('InfluencerScore', 'Influencer Score'), ('IsFollowingUs', 'Is following us'), ('Klout', 'Klout Rating'), ('ListedCount', 'Listed Count'), ('NumberOfFriends', 'Number Of Friends'), ('NumberOfTweets', 'Number Of Tweets'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('IsPageScopedIdMigrated', 'Page Scoped Id Migrated'), ('Parent', 'Parent'), ('ProfileType', 'Profile Type'), ('ProfileUrl', 'Profile URL'), ('ExternalPictureURL', 'Provider External Picture URL'), ('RealName', 'Real Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Name', 'Social Handle'), ('Provider', 'Social Network'), ('MediaProvider', 'Social Studio Media Provider'), ('MediaType', 'Social Studio Media Type'), ('R6SourceId', 'Social Studio Source Id'), ('SourceApp', 'Source App'), ('TopicType', 'Topic Type'), ('IsVerified', 'Verified')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPersonaHistory'
        verbose_name = 'Social Persona History'
        verbose_name_plural = 'Social Persona History'
        # keyPrefix = 'None'



class SocialPost(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpost_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpost_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent = models.ForeignKey(Case, models.DO_NOTHING, blank=True, null=True)
    persona = models.ForeignKey(SocialPersona, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    who = models.ForeignKey(Account, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Account, Contact, Lead]
    headline = models.CharField(max_length=255, blank=True, null=True)
    content = models.TextField(verbose_name='Message', blank=True, null=True)
    posted = models.DateTimeField(verbose_name='Posted Date', default=models.DEFAULTED_ON_CREATE)
    post_url = models.URLField(verbose_name='Post URL', blank=True, null=True)
    provider = models.CharField(max_length=255, verbose_name='Social Network', sf_read_only=models.NOT_UPDATEABLE, choices=[('Twitter', 'Twitter'), ('Facebook', 'Facebook'), ('LinkedIn', 'LinkedIn'), ('YouTube', 'YouTube'), ('Klout', 'Klout'), ('Rypple', 'Rypple'), ('GooglePlus', 'Google+'), ('SinaWeibo', 'Sina Weibo'), ('WeChat', 'WeChat'), ('Line', 'Line'), ('WhatsApp', 'WhatsApp'), ('Pinterest', 'Pinterest'), ('Instagram', 'Instagram'), ('vKontakte', 'vKontakte'), ('Azure', 'Azure'), ('Skype', 'Skype'), ('Telegram', 'Telegram'), ('Snapchat', 'Snapchat'), ('Messenger', 'Messenger'), ('Kik', 'Kik'), ('KakaoTalk', 'KakaoTalk'), ('QQ', 'QQ'), ('SMS', 'SMS'), ('Spark', 'Spark'), ('InstagramBusiness', 'InstagramBusiness'), ('GoogleRtc', 'GoogleRTC'), ('Other', 'Other Media Type')], blank=True, null=True)
    handle = models.CharField(max_length=255, verbose_name='Social Handle', blank=True, null=True)
    liked_by = models.CharField(max_length=255, blank=True, null=True)
    review_score = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    review_scale = models.DecimalField(max_digits=18, decimal_places=2, blank=True, null=True)
    hidden_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpost_hiddenby_set', blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    truncated_content = models.CharField(max_length=255, verbose_name='Message Clipping', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPost'
        verbose_name = 'Social Post'
        verbose_name_plural = 'Social Posts'
        # keyPrefix = '0ST'



class SocialPostFeed(models.Model):
    parent = models.ForeignKey(SocialPost, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpostfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='socialpostfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostFeed'
        verbose_name = 'Social Post Feed'
        verbose_name_plural = 'Social Post Feed'
        # keyPrefix = 'None'



class SocialPostHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    social_post = models.ForeignKey(SocialPost, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AnalyzerScore', 'Analyzer Score'), ('AssignedTo', 'Assigned To'), ('AttachmentType', 'Attachment Type'), ('AttachmentUrl', 'Attachment URL'), ('Classification', 'Classification'), ('CommentCount', 'Comment Count'), ('created', 'Created.'), ('DeletedBy', 'Deleted By'), ('EngagementLevel', 'Engagement Level'), ('ExternalPostId', 'External Post Id'), ('feedEvent', 'Feed event'), ('HarvestDate', 'Harvest Date'), ('Headline', 'Headline'), ('HiddenBy', 'Hidden By'), ('InboundLinkCount', 'Inbound Link Count'), ('individualMerged', 'Individual Merged'), ('ReplyTo', 'In Reply To'), ('IsOutbound', 'Is Outbound'), ('KeywordGroupName', 'Keyword Group Name'), ('Language', 'Language'), ('LikedBy', 'Liked By'), ('LikesAndVotes', 'Likes and Votes'), ('OutboundSocialAccount', 'Managed Social Account'), ('Content', 'Message'), ('MessageType', 'Message Type'), ('Name', 'Name'), ('Notes', 'Notes'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', 'Parent'), ('Posted', 'Posted Date'), ('PostPriority', 'Post Priority'), ('PostTags', 'Post Tags'), ('PostUrl', 'Post URL'), ('Recipient', 'Recipient'), ('RecipientType', 'Recipient Type'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ResponseContextExternalId', 'Response Context'), ('ReviewedStatus', 'Reviewed Status'), ('ReviewScale', 'Review Scale'), ('ReviewScore', 'Review Score'), ('Sentiment', 'Sentiment'), ('Shares', 'Shares'), ('Handle', 'Social Handle'), ('Provider', 'Social Network'), ('Persona', 'Social Persona'), ('MediaProvider', 'Social Studio Media Provider'), ('MediaType', 'Social Studio Media Type'), ('R6PostId', 'Social Studio Post Id'), ('R6SourceId', 'Social Studio Source Id'), ('R6TopicId', 'Social Studio Topic Id'), ('SourceTags', 'Source Tags'), ('SpamRating', 'Spam Rating'), ('Status', 'Status'), ('StatusMessage', 'Status Message'), ('ThreadSize', 'Thread Size'), ('TopicProfileName', 'Topic Profile Name'), ('TopicType', 'Topic Type'), ('UniqueCommentors', 'Unique Commentors'), ('ViewCount', 'View Count'), ('Who', 'Who')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostHistory'
        verbose_name = 'Social Post History'
        verbose_name_plural = 'Social Post History'
        # keyPrefix = 'None'



class SocialPostShare(models.Model):
    parent = models.ForeignKey(SocialPost, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'SocialPostShare'
        verbose_name = 'Social Post Share'
        verbose_name_plural = 'Social Post Share'
        # keyPrefix = 'None'



class Solution(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution_number = models.CharField(max_length=30, sf_read_only=models.READ_ONLY)
    solution_name = models.CharField(max_length=255, verbose_name='Title')
    is_published = models.BooleanField(verbose_name='Public', default=models.DEFAULTED_ON_CREATE)
    is_published_in_public_kb = models.BooleanField(verbose_name='Visible in Public Knowledge Base', default=models.DEFAULTED_ON_CREATE)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Draft', 'Draft'), ('Reviewed', 'Reviewed'), ('Duplicate', 'Duplicate')])
    is_reviewed = models.BooleanField(verbose_name='Reviewed', sf_read_only=models.READ_ONLY, default=False)
    solution_note = models.TextField(verbose_name='Description', blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solution_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    times_used = models.IntegerField(verbose_name='Num Related Cases', sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_html = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'Solution'
        verbose_name = 'Solution'
        verbose_name_plural = 'Solutions'
        # keyPrefix = '501'



class SolutionFeed(models.Model):
    parent = models.ForeignKey(Solution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionFeed'
        verbose_name = 'Solution Feed'
        verbose_name_plural = 'Solution Feed'
        # keyPrefix = 'None'



class SolutionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    solution = models.ForeignKey(Solution, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('IsPublished', 'Public'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SolutionNote', 'Solution Details'), ('SolutionName', 'Solution Title'), ('Status', 'Status'), ('IsPublishedInPublicKb', 'Visible in Public Knowledge Base')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'SolutionHistory'
        verbose_name = 'Solution History'
        verbose_name_plural = 'Solution History'
        # keyPrefix = 'None'



class SolutionStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_reviewed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='solutionstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'SolutionStatus'
        verbose_name = 'Solution Status Value'
        verbose_name_plural = 'Solution Status Value'
        # keyPrefix = 'None'



class Stamp(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    master_label = models.CharField(max_length=50, verbose_name='Label', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamp_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stamp_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    description = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Stamp'
        verbose_name = 'Stamp'
        verbose_name_plural = 'Stamps'
        # keyPrefix = '1ST'



class StampAssignment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    stamp = models.ForeignKey(Stamp, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    subject = models.ForeignKey('User', models.DO_NOTHING, related_name='stampassignment_subject_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'StampAssignment'
        verbose_name = 'Stamp Assignment'
        verbose_name_plural = 'Stamp Assignments'
        # keyPrefix = '1SA'



class StaticResource(models.Model):
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255)
    content_type = models.CharField(max_length=120, verbose_name='MIME Type')
    body_length = models.IntegerField(verbose_name='Size', sf_read_only=models.READ_ONLY)
    body = models.TextField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='staticresource_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='staticresource_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    cache_control = models.CharField(max_length=40, choices=[('Private', 'Private'), ('Public', 'Public')])
    class Meta(models.Model.Meta):
        db_table = 'StaticResource'
        verbose_name = 'Static Resource'
        verbose_name_plural = 'Static Resources'
        # keyPrefix = '081'



class StreamingChannel(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Streaming Channel Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='streamingchannel_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='streamingchannel_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_dynamic = models.BooleanField(verbose_name='Is Dynamically Created', sf_read_only=models.READ_ONLY, default=False)
    description = models.CharField(max_length=255, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannel'
        verbose_name = 'Streaming Channel'
        verbose_name_plural = 'Streaming Channels'
        # keyPrefix = '0M6'



class StreamingChannelShare(models.Model):
    parent = models.ForeignKey(StreamingChannel, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'StreamingChannelShare'
        verbose_name = 'Streaming Channel Share'
        verbose_name_plural = 'Streaming Channel Share'
        # keyPrefix = 'None'



class SurveyChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    record_type = models.ForeignKey(RecordType, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='surveychangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='surveychangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class_enrollment = models.ForeignKey(ClassEnrollment, models.DO_NOTHING, db_column='Class_Enrollment__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True)
    survey_date = models.DateField(custom=True, db_column='Survey_Date__c', verbose_name='Survey Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(custom=True, max_length=255, sf_read_only=models.READ_ONLY, choices=[('Pre', 'Pre'), ('Post', 'Post')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Survey__ChangeEvent'
        verbose_name = 'Change Event: Survey'
        verbose_name_plural = 'Change Event: Survey'
        # keyPrefix = 'None'



class SurveyHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Survey', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Class_Enrollment__c', 'Class Enrollment'), ('Contact__c', 'Contact'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('RecordType', 'Record Type'), ('unlocked', 'Record unlocked.'), ('Survey_Date__c', 'Survey Date'), ('Name', 'Survey Number'), ('Type__c', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Survey__History'
        verbose_name = 'History: Survey'
        verbose_name_plural = 'History: Survey'
        # keyPrefix = 'None'



class Survey(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Survey Number', sf_read_only=models.READ_ONLY)
    record_type = models.ForeignKey(RecordType, models.DO_NOTHING, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='survey_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='survey_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    class_enrollment = models.ForeignKey(ClassEnrollment, models.DO_NOTHING, db_column='Class_Enrollment__c', custom=True, blank=True, null=True)
    survey_date = models.DateField(custom=True, db_column='Survey_Date__c', verbose_name='Survey Date', blank=True, null=True)
    type = models.CharField(custom=True, max_length=255, choices=[('Pre', 'Pre'), ('Post', 'Post')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Survey__c'
        verbose_name = 'Survey'
        verbose_name_plural = 'Surveys'
        # keyPrefix = 'a0l'



class TabDefinition(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Tab Definition Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_custom = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    sobject_name = models.CharField(max_length=255, verbose_name='sObject Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    url = models.CharField(max_length=255, verbose_name='URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_available_in_aloha = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_available_in_lightning = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_available_in_mobile = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_available_in_desktop = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    mobile_url = models.CharField(max_length=255, verbose_name='Mobile URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TabDefinition'
        verbose_name = 'Tab Definition'
        verbose_name_plural = 'Tab Definitions'
        # keyPrefix = '0KD'



class Task(models.Model):
    who = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Contact, Lead] Master Detail Relationship *
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='task_what_set', blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Enrollment__c, ContactRequest, Contract, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, npe03__Recurring_Donation__c, npo02__Household__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c] Master Detail Relationship *
    who_count = models.IntegerField(verbose_name='Relation Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    what_count = models.IntegerField(verbose_name='Related To Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(max_length=255, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', blank=True, null=True)
    status = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('Open', 'Open'), ('Completed', 'Completed')])
    priority = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('High', 'High'), ('Normal', 'Normal')])
    is_high_priority = models.BooleanField(verbose_name='High Priority', sf_read_only=models.READ_ONLY, default=False)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='task_owner_set')
    description = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=40, choices=[('Call', 'Call'), ('Meeting', 'Meeting'), ('Email', 'Email'), ('Text', 'Text')], blank=True, null=True)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='task_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='task_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='task_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_archived = models.BooleanField(verbose_name='Archived', sf_read_only=models.READ_ONLY, default=False)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', blank=True, null=True)
    call_type = models.CharField(max_length=40, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', default=models.DEFAULTED_ON_CREATE)
    recurrence_activity = models.ForeignKey('self', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Tasks', sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    recurrence_start_date_only = models.DateField(verbose_name='Recurrence Start', blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    recurrence_regenerated_type = models.CharField(max_length=40, verbose_name='Repeat This Task', choices=[('RecurrenceRegenerateAfterDueDate', 'After due date'), ('RecurrenceRegenerateAfterToday', 'After date completed'), ('RecurrenceRegenerated', '(Task Closed)')], blank=True, null=True)
    task_subtype = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Task', 'Task'), ('Email', 'Email'), ('ListEmail', 'List Email'), ('Cadence', 'Cadence'), ('Call', 'Call')], blank=True, null=True)
    completed_date_time = models.DateTimeField(verbose_name='Completed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Task__c', custom=True, blank=True, null=True) 
    npsp_engagement_plan = models.ForeignKey('NpspEngagementPlan', models.DO_NOTHING, db_column='npsp__Engagement_Plan__c', custom=True, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'Task'
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'
        # keyPrefix = '00T'



class TaskChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    who = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    what = models.ForeignKey(Account, models.DO_NOTHING, related_name='taskchangeevent_what_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, ListEmail, Opportunity, Order, Product2, Quote, Solution, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    who_count = models.IntegerField(verbose_name='Relation Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    what_count = models.IntegerField(verbose_name='Related To Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    subject = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True, null=True)
    activity_date = models.DateField(verbose_name='Due Date Only', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Open', choices=[('Open', 'Open'), ('Completed', 'Completed')], blank=True, null=True)
    priority = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, default='Normal', choices=[('High', 'High'), ('Normal', 'Normal')], blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='taskchangeevent_owner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Meeting', 'Meeting'), ('Email', 'Email'), ('Text', 'Text')], blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='taskchangeevent_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_closed = models.BooleanField(verbose_name='Closed', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_duration_in_seconds = models.IntegerField(verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True, null=True)
    call_disposition = models.CharField(max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_object = models.CharField(max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reminder_date_time = models.DateTimeField(verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reminder_set = models.BooleanField(verbose_name='Reminder Set', sf_read_only=models.READ_ONLY, default=False)
    recurrence_activity = models.ForeignKey(Task, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_recurrence = models.BooleanField(verbose_name='Create Recurring Series of Tasks', sf_read_only=models.READ_ONLY, default=False)
    recurrence_start_date_only = models.DateField(verbose_name='Recurrence Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_end_date_only = models.DateField(verbose_name='Recurrence End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_time_zone_sid_key = models.CharField(max_length=40, verbose_name='Recurrence Time Zone', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    recurrence_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True, null=True)
    recurrence_interval = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_day_of_week_mask = models.IntegerField(verbose_name='Recurrence Day of Week Mask', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_day_of_month = models.IntegerField(verbose_name='Recurrence Day of Month', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recurrence_instance = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True, null=True)
    recurrence_month_of_year = models.CharField(max_length=40, verbose_name='Recurrence Month of Year', sf_read_only=models.READ_ONLY, choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True, null=True)
    recurrence_regenerated_type = models.CharField(max_length=40, verbose_name='Repeat This Task', sf_read_only=models.READ_ONLY, choices=[('RecurrenceRegenerateAfterDueDate', 'After due date'), ('RecurrenceRegenerateAfterToday', 'After date completed'), ('RecurrenceRegenerated', '(Task Closed)')], blank=True, null=True)
    completed_date_time = models.DateTimeField(verbose_name='Completed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Task__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_engagement_plan = models.ForeignKey('NpspEngagementPlan', models.DO_NOTHING, db_column='npsp__Engagement_Plan__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'TaskChangeEvent'
        verbose_name = 'Task Change Event'
        verbose_name_plural = 'Task Change Event'
        # keyPrefix = 'None'



class TaskFeed(models.Model):
    parent = models.ForeignKey(Task, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TaskFeed'
        verbose_name = 'Task Feed'
        verbose_name_plural = 'Task Feed'
        # keyPrefix = 'None'



class TaskPriority(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_high_priority = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskpriority_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskpriority_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskPriority'
        verbose_name = 'Task Priority Value'
        verbose_name_plural = 'Task Priority Value'
        # keyPrefix = 'None'



class TaskRelation(models.Model):
    relation = models.ForeignKey(Account, models.DO_NOTHING, related_name='taskrelation_relation_set', sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, ListEmail, Opportunity, Order, Product2, Quote, Solution, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    task = models.ForeignKey(Task, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    is_what = models.BooleanField(sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='taskrelation_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'TaskRelation'
        verbose_name = 'Task Relation'
        verbose_name_plural = 'Task Relations'
        # keyPrefix = '0RT'



class TaskRelationChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    relation = models.ForeignKey(Account, models.DO_NOTHING, related_name='taskrelationchangeevent_relation_set', sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Account, Asset, AssetRelationship, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContactRequest, Contract, Equipment_Assignment__c, Equipment__c, Incident__c, Lead, ListEmail, Opportunity, Order, Product2, Quote, Solution, Survey__c, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c]
    task = models.ForeignKey(Task, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_what = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='taskrelationchangeevent_account_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskrelationchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskrelationchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TaskRelationChangeEvent'
        verbose_name = 'Task Relation Change Event'
        verbose_name_plural = 'Task Relation Change Event'
        # keyPrefix = 'None'



class TaskStatus(models.Model):
    master_label = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    api_name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_default = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_closed = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskstatus_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskstatus_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TaskStatus'
        verbose_name = 'Task Status Value'
        verbose_name_plural = 'Task Status Value'
        # keyPrefix = 'None'



class TaskWhoRelation(models.Model):
    relation = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Contact, Lead]
    task = models.ForeignKey(Task, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskwhorelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='taskwhorelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TaskWhoRelation'
        verbose_name = 'Task Who Relation'
        verbose_name_plural = 'Task Who Relations'
        # keyPrefix = 'None'



class TenantSecret(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantsecret_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantsecret_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    secret_value_hash = models.TextField(verbose_name='Secret Hash', sf_read_only=models.NOT_UPDATEABLE)
    description = models.TextField(blank=True, null=True)
    secret_value = models.TextField(verbose_name='Secret', blank=True, null=True)
    version = models.IntegerField(verbose_name='Seed Number', sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=255, sf_read_only=models.NOT_CREATEABLE, choices=[('ACTIVE', None), ('ARCHIVED', None), ('DESTROYED', None)], blank=True, null=True)
    type = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('Data', None), ('SearchIndex', None), ('Analytics', None), ('DeterministicData', None), ('EventBus', None)])
    source = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('HSM', None), ('UPLOADED', None)])
    secret_value_certificate = models.CharField(max_length=255, verbose_name='Secret Value Encryption Certificate', blank=True, null=True)
    key_derivation_mode = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE, choices=[('PBKDF2', None), ('NONE', None)])
    class Meta(models.Model.Meta):
        db_table = 'TenantSecret'
        verbose_name = 'Tenant Secret'
        verbose_name_plural = 'Tenant Secret'
        # keyPrefix = '02G'



class TenantUsageEntitlement(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantusageentitlement_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='tenantusageentitlement_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    resource_group_key = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    setting = models.CharField(max_length=120, sf_read_only=models.READ_ONLY)
    start_date = models.DateField(sf_read_only=models.READ_ONLY)
    end_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    current_amount_allowed = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY)
    frequency = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Weekly', 'Weekly'), ('Fortnightly', 'Fortnightly'), ('Monthly', 'Monthly'), ('Once', 'Once'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly')], blank=True, null=True)
    is_persistent_resource = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_rollover = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    overage_grace = models.DecimalField(max_digits=5, decimal_places=2, sf_read_only=models.READ_ONLY, blank=True, null=True)
    amount_used = models.DecimalField(max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, blank=True, null=True)
    usage_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    master_label = models.CharField(max_length=255, verbose_name='Setting Label', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TenantUsageEntitlement'
        verbose_name = 'Tenant Usage Entitlement'
        verbose_name_plural = 'Tenant Usage Entitlements'
        # keyPrefix = '0UT'



class TestSuiteMembership(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='testsuitemembership_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='testsuitemembership_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    apex_test_suite = models.ForeignKey(ApexTestSuite, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    apex_class = models.ForeignKey(ApexClass, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'TestSuiteMembership'
        verbose_name = 'Test Suite Membership'
        verbose_name_plural = 'Test Suite Memberships'
        # keyPrefix = '0Hd'



class ThirdPartyAccountLink(models.Model):
    third_party_account_link_key = models.CharField(max_length=255, verbose_name='Third Party Account Link Unique Key', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider = models.ForeignKey(AuthProvider, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    handle = models.CharField(max_length=375, verbose_name='External User Handle', sf_read_only=models.READ_ONLY, blank=True, null=True)
    remote_identifier = models.CharField(max_length=128, verbose_name='External User Id', sf_read_only=models.READ_ONLY, blank=True, null=True)
    provider = models.CharField(max_length=128, sf_read_only=models.READ_ONLY, blank=True, null=True)
    sso_provider_name = models.CharField(max_length=255, verbose_name='Single Sign-On Provider Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_not_sso_usable = models.BooleanField(verbose_name='Is Not SSO Usable', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'ThirdPartyAccountLink'
        verbose_name = 'Third Party Account Link'
        verbose_name_plural = 'Third Party Account Links'
        # keyPrefix = '0Jr'



class TodayGoal(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    value = models.DecimalField(max_digits=18, decimal_places=0, blank=True, null=True)
    user = models.ForeignKey('User', models.DO_NOTHING, related_name='todaygoal_user_set', unique=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'TodayGoal'
        verbose_name = 'Goal'
        verbose_name_plural = 'Goals'
        # keyPrefix = '0Jz'



class TodayGoalShare(models.Model):
    parent = models.ForeignKey(TodayGoal, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'TodayGoalShare'
        verbose_name = 'Goal Share'
        verbose_name_plural = 'Goal Share'
        # keyPrefix = 'None'



class Topic(models.Model):
    name = models.CharField(max_length=99)
    description = models.CharField(max_length=1000, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    talking_about = models.IntegerField(sf_read_only=models.READ_ONLY)
    managed_topic_type = models.CharField(max_length=99, verbose_name='Enabled For', sf_read_only=models.READ_ONLY, blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Topic'
        verbose_name = 'Topic'
        verbose_name_plural = 'Topics'
        # keyPrefix = '0TO'



class TopicAssignment(models.Model):
    topic = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    entity = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Account, Asset, Campaign, Case, Class_Attendance__c, Class_Enrollment__c, Class_Meeting__c, Class_Offering__c, Contact, ContentDocument, Contract, Equipment_Assignment__c, Equipment__c, Event, FeedItem, Incident__c, Lead, Opportunity, Order, Solution, Survey__c, Task, dlrs__DeclarativeLookupRollupSummaries__c, dlrs__LookupChildAReallyReallyReallyBigBigName__c, dlrs__LookupChild__c, dlrs__LookupParent__c, dlrs__LookupRollupCalculateJob__c, dlrs__LookupRollupSummaryLog__c, dlrs__LookupRollupSummaryScheduleItems__c, dlrs__LookupRollupSummary__c, npe01__Contacts_And_Orgs_Settings__c, npe01__OppPayment__c, npe01__Payment_Field_Mapping_Settings__c, npe03__Custom_Field_Mapping__c, npe03__Custom_Installment_Settings__c, npe03__Recurring_Donation__c, npe03__Recurring_Donations_Settings__c, npe4__Relationship_Auto_Create__c, npe4__Relationship_Error__c, npe4__Relationship_Lookup__c, npe4__Relationship_Settings__c, npe4__Relationship__c, npe5__Affiliation__c, npe5__Affiliations_Settings__c, npo02__Household__c, npo02__Households_Settings__c, npo02__Opportunity_Rollup_Error__c, npo02__User_Rollup_Field_Settings__c, npsp__Account_Soft_Credit__c, npsp__Address_Verification_Settings__c, npsp__Address__c, npsp__Allocation__c, npsp__Allocations_Settings__c, npsp__Batch_Data_Entry_Settings__c, npsp__Batch__c, npsp__Customizable_Rollup_Settings__c, npsp__DataImportBatch__c, npsp__DataImport__c, npsp__Data_Import_Settings__c, npsp__Engagement_Plan_Task__c, npsp__Engagement_Plan_Template__c, npsp__Engagement_Plan__c, npsp__Error_Settings__c, npsp__Error__c, npsp__Fund__c, npsp__General_Accounting_Unit__c, npsp__Grant_Deadline__c, npsp__Household_Naming_Settings__c, npsp__Level__c, npsp__Levels_Settings__c, npsp__Opportunity_Naming_Settings__c, npsp__Partial_Soft_Credit__c, npsp__Relationship_Sync_Excluded_Fields__c, npsp__Schedulable__c, npsp__Trigger_Handler__c] Master Detail Relationship *
    entity_key_prefix = models.CharField(max_length=3, verbose_name='Record Key Prefix', sf_read_only=models.READ_ONLY)
    entity_type = models.CharField(max_length=80, verbose_name='Object Type', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TopicAssignment'
        verbose_name = 'Topic Assignment'
        verbose_name_plural = 'Topic Assignments'
        # keyPrefix = '0FT'



class TopicFeed(models.Model):
    parent = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topicfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey('User', models.DO_NOTHING, related_name='topicfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'TopicFeed'
        verbose_name = 'Topic Feed'
        verbose_name_plural = 'Topic Feed'
        # keyPrefix = 'None'



class TopicUserEvent(models.Model):
    user = models.ForeignKey('User', models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    topic = models.ForeignKey(Topic, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    action_enum = models.CharField(max_length=40, verbose_name='Action', sf_read_only=models.READ_ONLY, choices=[('like', None), ('comment', None), ('post', None), ('assign', None), ('shared', None), ('favorite', None), ('unfavorite', None), ('atmention', None), ('bangmention', None), ('commentlike', None), ('userEndorsement', None), ('skillPeerEndorsement', None), ('skillSelfEndorsement', None), ('bestAnswer', None)])
    created_date = models.DateTimeField(verbose_name='Create Date', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'TopicUserEvent'
        verbose_name = 'Topic User Event'
        verbose_name_plural = 'Topic User Events'
        # keyPrefix = '0te'



class UndecidedEventRelation(models.Model):
    relation = models.ForeignKey(Calendar, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Calendar, Contact, Lead, User]
    event = models.ForeignKey(Event, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    responded_date = models.DateTimeField(verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='undecidedeventrelation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='undecidedeventrelation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    type = models.CharField(max_length=50, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UndecidedEventRelation'
        verbose_name = 'Undecided Event Relation'
        verbose_name_plural = 'Undecided Event Relations'
        # keyPrefix = 'None'



class User(models.Model):
    username = models.CharField(max_length=80)
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    middle_name = models.CharField(max_length=40, blank=True, null=True)
    suffix = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    company_name = models.CharField(max_length=80, blank=True, null=True)
    division = models.CharField(max_length=80, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    title = models.CharField(max_length=80, blank=True, null=True)
    street = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=40, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', blank=True, null=True)
    country = models.CharField(max_length=80, blank=True, null=True)
    state_code = models.CharField(max_length=10, verbose_name='State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    email = models.EmailField()
    email_preferences_auto_bcc = models.BooleanField(verbose_name='AutoBcc')
    email_preferences_auto_bcc_stay_in_touch = models.BooleanField(verbose_name='AutoBccStayInTouch')
    email_preferences_stay_in_touch_reminder = models.BooleanField(verbose_name='StayInTouchReminder')
    sender_email = models.EmailField(verbose_name='Email Sender Address', blank=True, null=True)
    sender_name = models.CharField(max_length=80, verbose_name='Email Sender Name', blank=True, null=True)
    signature = models.TextField(verbose_name='Email Signature', blank=True, null=True)
    stay_in_touch_subject = models.CharField(max_length=80, verbose_name='Stay-in-Touch Email Subject', blank=True, null=True)
    stay_in_touch_signature = models.TextField(verbose_name='Stay-in-Touch Email Signature', blank=True, null=True)
    stay_in_touch_note = models.CharField(max_length=512, verbose_name='Stay-in-Touch Email Note', blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    fax = models.CharField(max_length=40, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Mobile', blank=True, null=True)
    alias = models.CharField(max_length=8)
    community_nickname = models.CharField(max_length=40, verbose_name='Nickname')
    badge_text = models.CharField(max_length=80, verbose_name='User Photo badge text overlay', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, blank=True, null=True)
    locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', choices=[('af_ZA', 'Afrikaans (South Africa)'), ('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('bn_BD', 'Bangla (Bangladesh)'), ('bn_IN', 'Bangla (India)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czechia)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_SZ', 'English (Swaziland)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_BE', 'German (Belgium)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('gu_IN', 'Gujarati (India)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kn_IN', 'Kannada (India)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('ml_IN', 'Malayalam (India)'), ('mt_MT', 'Maltese (Malta)'), ('mr_IN', 'Marathi (India)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_KZ', 'Russian (Kazakhstan)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Cyrillic) (Bosnia and Herzegovina)'), ('sr_CS', 'Serbian (Cyrillic) (Serbia)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sw_KE', 'Swahili (Kenya)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('te_IN', 'Telugu (India)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('xh_ZA', 'Xhosa (South Africa)'), ('yo_BJ', 'Yoruba (Benin)'), ('zu_ZA', 'Zulu (South Africa)')])
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', default=models.DEFAULTED_ON_CREATE)
    receives_admin_info_emails = models.BooleanField(verbose_name='Admin Info Emails', default=models.DEFAULTED_ON_CREATE)
    email_encoding_key = models.CharField(max_length=40, verbose_name='Email Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    profile = models.ForeignKey(Profile, models.DO_NOTHING)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    employee_number = models.CharField(max_length=20, blank=True, null=True)
    delegated_approver = models.ForeignKey(Group, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Group, User]
    manager = models.ForeignKey('self', models.DO_NOTHING, related_name='user_manager_set', blank=True, null=True)
    last_login_date = models.DateTimeField(verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_password_change_date = models.DateTimeField(verbose_name='Last Password Change or Reset', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('self', models.DO_NOTHING, related_name='user_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    offline_trial_expiration_date = models.DateTimeField(verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_pda_trial_expiration_date = models.DateTimeField(verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_permissions_marketing_user = models.BooleanField(verbose_name='Marketing User')
    user_permissions_offline_user = models.BooleanField(verbose_name='Offline User')
    user_permissions_avantgo_user = models.BooleanField(verbose_name='AvantGo User')
    user_permissions_call_center_auto_login = models.BooleanField(verbose_name='Auto-login To Call Center')
    user_permissions_mobile_user = models.BooleanField(verbose_name='Apex Mobile User')
    user_permissions_sfcontent_user = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User')
    user_permissions_interaction_user = models.BooleanField(verbose_name='Flow User')
    user_permissions_support_user = models.BooleanField(verbose_name='Service Cloud User')
    user_permissions_chatter_answers_user = models.BooleanField(verbose_name='Chatter Answers User')
    forecast_enabled = models.BooleanField(verbose_name='Allow Forecasting', default=models.DEFAULTED_ON_CREATE)
    user_preferences_activity_reminders_popup = models.BooleanField(verbose_name='ActivityRemindersPopup')
    user_preferences_event_reminders_checkbox_default = models.BooleanField(verbose_name='EventRemindersCheckboxDefault')
    user_preferences_task_reminders_checkbox_default = models.BooleanField(verbose_name='TaskRemindersCheckboxDefault')
    user_preferences_reminder_sound_off = models.BooleanField(verbose_name='ReminderSoundOff')
    user_preferences_disable_all_feeds_email = models.BooleanField(verbose_name='DisableAllFeedsEmail')
    user_preferences_disable_followers_email = models.BooleanField(verbose_name='DisableFollowersEmail')
    user_preferences_disable_profile_post_email = models.BooleanField(verbose_name='DisableProfilePostEmail')
    user_preferences_disable_change_comment_email = models.BooleanField(verbose_name='DisableChangeCommentEmail')
    user_preferences_disable_later_comment_email = models.BooleanField(verbose_name='DisableLaterCommentEmail')
    user_preferences_dis_prof_post_comment_email = models.BooleanField(verbose_name='DisProfPostCommentEmail')
    user_preferences_apex_pages_developer_mode = models.BooleanField(verbose_name='ApexPagesDeveloperMode')
    user_preferences_hide_csnget_chatter_mobile_task = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask')
    user_preferences_disable_mentions_post_email = models.BooleanField(verbose_name='DisableMentionsPostEmail')
    user_preferences_dis_mentions_comment_email = models.BooleanField(verbose_name='DisMentionsCommentEmail')
    user_preferences_hide_csndesktop_task = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask')
    user_preferences_hide_chatter_onboarding_splash = models.BooleanField(verbose_name='HideChatterOnboardingSplash')
    user_preferences_hide_second_chatter_onboarding_splash = models.BooleanField(verbose_name='HideSecondChatterOnboardingSplash')
    user_preferences_dis_comment_after_like_email = models.BooleanField(verbose_name='DisCommentAfterLikeEmail')
    user_preferences_disable_like_email = models.BooleanField(verbose_name='DisableLikeEmail')
    user_preferences_sort_feed_by_comment = models.BooleanField(verbose_name='SortFeedByComment')
    user_preferences_disable_message_email = models.BooleanField(verbose_name='DisableMessageEmail')
    user_preferences_disable_bookmark_email = models.BooleanField(verbose_name='DisableBookmarkEmail')
    user_preferences_disable_share_post_email = models.BooleanField(verbose_name='DisableSharePostEmail')
    user_preferences_enable_auto_sub_for_feeds = models.BooleanField(verbose_name='EnableAutoSubForFeeds')
    user_preferences_disable_file_share_notifications_for_api = models.BooleanField(verbose_name='DisableFileShareNotificationsForApi')
    user_preferences_show_title_to_external_users = models.BooleanField(verbose_name='ShowTitleToExternalUsers')
    user_preferences_show_manager_to_external_users = models.BooleanField(verbose_name='ShowManagerToExternalUsers')
    user_preferences_show_email_to_external_users = models.BooleanField(verbose_name='ShowEmailToExternalUsers')
    user_preferences_show_work_phone_to_external_users = models.BooleanField(verbose_name='ShowWorkPhoneToExternalUsers')
    user_preferences_show_mobile_phone_to_external_users = models.BooleanField(verbose_name='ShowMobilePhoneToExternalUsers')
    user_preferences_show_fax_to_external_users = models.BooleanField(verbose_name='ShowFaxToExternalUsers')
    user_preferences_show_street_address_to_external_users = models.BooleanField(verbose_name='ShowStreetAddressToExternalUsers')
    user_preferences_show_city_to_external_users = models.BooleanField(verbose_name='ShowCityToExternalUsers')
    user_preferences_show_state_to_external_users = models.BooleanField(verbose_name='ShowStateToExternalUsers')
    user_preferences_show_postal_code_to_external_users = models.BooleanField(verbose_name='ShowPostalCodeToExternalUsers')
    user_preferences_show_country_to_external_users = models.BooleanField(verbose_name='ShowCountryToExternalUsers')
    user_preferences_show_profile_pic_to_guest_users = models.BooleanField(verbose_name='ShowProfilePicToGuestUsers')
    user_preferences_show_title_to_guest_users = models.BooleanField(verbose_name='ShowTitleToGuestUsers')
    user_preferences_show_city_to_guest_users = models.BooleanField(verbose_name='ShowCityToGuestUsers')
    user_preferences_show_state_to_guest_users = models.BooleanField(verbose_name='ShowStateToGuestUsers')
    user_preferences_show_postal_code_to_guest_users = models.BooleanField(verbose_name='ShowPostalCodeToGuestUsers')
    user_preferences_show_country_to_guest_users = models.BooleanField(verbose_name='ShowCountryToGuestUsers')
    user_preferences_pipeline_view_hide_help_popover = models.BooleanField(verbose_name='PipelineViewHideHelpPopover')
    user_preferences_hide_s1_browser_ui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI')
    user_preferences_disable_endorsement_email = models.BooleanField(verbose_name='DisableEndorsementEmail')
    user_preferences_path_assistant_collapsed = models.BooleanField(verbose_name='PathAssistantCollapsed')
    user_preferences_cache_diagnostics = models.BooleanField(verbose_name='CacheDiagnostics')
    user_preferences_show_email_to_guest_users = models.BooleanField(verbose_name='ShowEmailToGuestUsers')
    user_preferences_show_manager_to_guest_users = models.BooleanField(verbose_name='ShowManagerToGuestUsers')
    user_preferences_show_work_phone_to_guest_users = models.BooleanField(verbose_name='ShowWorkPhoneToGuestUsers')
    user_preferences_show_mobile_phone_to_guest_users = models.BooleanField(verbose_name='ShowMobilePhoneToGuestUsers')
    user_preferences_show_fax_to_guest_users = models.BooleanField(verbose_name='ShowFaxToGuestUsers')
    user_preferences_show_street_address_to_guest_users = models.BooleanField(verbose_name='ShowStreetAddressToGuestUsers')
    user_preferences_lightning_experience_preferred = models.BooleanField(verbose_name='LightningExperiencePreferred')
    user_preferences_preview_lightning = models.BooleanField(verbose_name='PreviewLightning')
    user_preferences_hide_end_user_onboarding_assistant_modal = models.BooleanField(verbose_name='HideEndUserOnboardingAssistantModal')
    user_preferences_hide_lightning_migration_modal = models.BooleanField(verbose_name='HideLightningMigrationModal')
    user_preferences_hide_sfx_welcome_mat = models.BooleanField(verbose_name='HideSfxWelcomeMat')
    user_preferences_hide_bigger_photo_callout = models.BooleanField(verbose_name='HideBiggerPhotoCallout')
    user_preferences_global_nav_bar_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavBarWTShown', verbose_name='GlobalNavBarWTShown')
    user_preferences_global_nav_grid_menu_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavGridMenuWTShown', verbose_name='GlobalNavGridMenuWTShown')
    user_preferences_create_lexapps_wtshown = models.BooleanField(db_column='UserPreferencesCreateLEXAppsWTShown', verbose_name='CreateLEXAppsWTShown')
    user_preferences_favorites_wtshown = models.BooleanField(db_column='UserPreferencesFavoritesWTShown', verbose_name='FavoritesWTShown')
    user_preferences_record_home_section_collapse_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeSectionCollapseWTShown', verbose_name='RecordHomeSectionCollapseWTShown')
    user_preferences_record_home_reserved_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeReservedWTShown', verbose_name='RecordHomeReservedWTShown')
    user_preferences_favorites_show_top_favorites = models.BooleanField(verbose_name='FavoritesShowTopFavorites')
    user_preferences_exclude_mail_app_attachments = models.BooleanField(verbose_name='ExcludeMailAppAttachments')
    user_preferences_suppress_task_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressTaskSFXReminders', verbose_name='SuppressTaskSFXReminders')
    user_preferences_suppress_event_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressEventSFXReminders', verbose_name='SuppressEventSFXReminders')
    user_preferences_preview_custom_theme = models.BooleanField(verbose_name='PreviewCustomTheme')
    user_preferences_has_celebration_badge = models.BooleanField(verbose_name='HasCelebrationBadge')
    user_preferences_user_debug_mode_pref = models.BooleanField(verbose_name='UserDebugModePref')
    user_preferences_new_lightning_report_run_page_enabled = models.BooleanField(verbose_name='NewLightningReportRunPageEnabled')
    contact = models.ForeignKey(Contact, models.DO_NOTHING, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_center = models.ForeignKey(CallCenter, models.DO_NOTHING, blank=True, null=True)
    extension = models.CharField(max_length=40, blank=True, null=True)
    federation_identifier = models.CharField(max_length=512, verbose_name='SAML Federation ID', blank=True, null=True)
    about_me = models.TextField(blank=True, null=True)
    full_photo_url = models.URLField(verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_photo_url = models.URLField(verbose_name='Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_ext_indicator_visible = models.BooleanField(verbose_name='Show external indicator', sf_read_only=models.READ_ONLY, default=False)
    out_of_office_message = models.CharField(max_length=40, verbose_name='Out of office message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_photo_url = models.URLField(verbose_name='Url for medium profile photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    digest_frequency = models.CharField(max_length=40, verbose_name='Chatter Email Highlights Frequency', default=models.DEFAULTED_ON_CREATE, choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')])
    default_group_notification_frequency = models.CharField(max_length=40, verbose_name='Default Notification Frequency when Joining Groups', default=models.DEFAULTED_ON_CREATE, choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')])
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    banner_photo_url = models.URLField(verbose_name='Url for banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    small_banner_photo_url = models.URLField(verbose_name='Url for IOS banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    medium_banner_photo_url = models.URLField(verbose_name='Url for Android banner photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_profile_photo_active = models.BooleanField(verbose_name='Has Profile Photo', sf_read_only=models.READ_ONLY, default=False)
    individual = models.ForeignKey(Individual, models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'



class UserAppInfo(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userappinfo_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    form_factor = models.CharField(max_length=255, choices=[('Small', 'Phone'), ('Medium', 'Tablet'), ('Large', 'Desktop')])
    app_definition = models.ForeignKey(AppDefinition, models.DO_NOTHING, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserAppInfo'
        verbose_name = 'Last Used App'
        verbose_name_plural = 'Last Used App'
        # keyPrefix = '0Ds'



class UserAppMenuCustomization(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappmenucustomization_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userappmenucustomization_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    application = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, blank=True, null=True)  # Master Detail Relationship *
    sort_order = models.IntegerField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomization'
        verbose_name = 'UserAppMenuCustomization'
        verbose_name_plural = 'UserAppMenuCustomizations'
        # keyPrefix = '0Nw'



class UserAppMenuCustomizationShare(models.Model):
    parent = models.ForeignKey(UserAppMenuCustomization, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuCustomizationShare'
        verbose_name = 'UserAppMenuCustomization Share'
        verbose_name_plural = 'UserAppMenuCustomization Share'
        # keyPrefix = 'None'



class UserAppMenuItem(models.Model):
    app_menu_item_id = models.CharField(max_length=255, verbose_name='AppMenuItem ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    application_id = models.CharField(max_length=18, verbose_name='Application ID', sf_read_only=models.READ_ONLY, blank=True, null=True)  # No Reference table
    label = models.CharField(max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(max_length=250, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=250, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    sort_order = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True, null=True)
    logo_url = models.URLField(verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    icon_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    info_url = models.URLField(verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_start_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_visible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_using_admin_authorization = models.BooleanField(verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserAppMenuItem'
        verbose_name = 'Application'
        verbose_name_plural = 'Applications'
        # keyPrefix = '07p'



class UserChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    username = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    first_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    middle_name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    suffix = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    company_name = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    division = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    department = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    street = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    city = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(max_length=80, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True)
    postal_code = models.CharField(max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True)
    country = models.CharField(max_length=80, sf_read_only=models.READ_ONLY, blank=True, null=True)
    state_code = models.CharField(max_length=10, verbose_name='State/Province Code', sf_read_only=models.READ_ONLY, choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    country_code = models.CharField(max_length=10, sf_read_only=models.READ_ONLY, default='US', choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    latitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(max_digits=18, decimal_places=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    geocode_accuracy = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    email = models.EmailField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_preferences_auto_bcc = models.BooleanField(verbose_name='AutoBcc', sf_read_only=models.READ_ONLY)
    email_preferences_auto_bcc_stay_in_touch = models.BooleanField(verbose_name='AutoBccStayInTouch', sf_read_only=models.READ_ONLY)
    email_preferences_stay_in_touch_reminder = models.BooleanField(verbose_name='StayInTouchReminder', sf_read_only=models.READ_ONLY)
    sender_email = models.EmailField(verbose_name='Email Sender Address', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sender_name = models.CharField(max_length=80, verbose_name='Email Sender Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    signature = models.TextField(verbose_name='Email Signature', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stay_in_touch_subject = models.CharField(max_length=80, verbose_name='Stay-in-Touch Email Subject', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stay_in_touch_signature = models.TextField(verbose_name='Stay-in-Touch Email Signature', sf_read_only=models.READ_ONLY, blank=True, null=True)
    stay_in_touch_note = models.CharField(max_length=512, verbose_name='Stay-in-Touch Email Note', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    fax = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, verbose_name='Mobile', sf_read_only=models.READ_ONLY, blank=True, null=True)
    alias = models.CharField(max_length=8, sf_read_only=models.READ_ONLY, blank=True, null=True)
    community_nickname = models.CharField(max_length=40, verbose_name='Nickname', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    time_zone_sid_key = models.CharField(max_length=40, verbose_name='Time Zone', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Standard Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Standard Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Standard Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Island Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Standard Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Standard Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Standard Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Standard Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Standard Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Standard Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Standard Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Standard Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Standard Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Europe/Istanbul'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Standard Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Standard Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Standard Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Standard Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Standard Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Standard Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Standard Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Standard Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Standard Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mexican Pacific Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True, null=True)
    user_role = models.ForeignKey('UserRole', models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    locale_sid_key = models.CharField(max_length=40, verbose_name='Locale', sf_read_only=models.READ_ONLY, choices=[('af_ZA', 'Afrikaans (South Africa)'), ('sq_AL', 'Albanian (Albania)'), ('ar_DZ', 'Arabic (Algeria)'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_IQ', 'Arabic (Iraq)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_LY', 'Arabic (Libya)'), ('ar_MA', 'Arabic (Morocco)'), ('ar_OM', 'Arabic (Oman)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_SD', 'Arabic (Sudan)'), ('ar_SY', 'Arabic (Syria)'), ('ar_TN', 'Arabic (Tunisia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('ar_YE', 'Arabic (Yemen)'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('bn_BD', 'Bangla (Bangladesh)'), ('bn_IN', 'Bangla (India)'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bs_BA', 'Bosnian (Bosnia & Herzegovina)'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('my_MM', 'Burmese (Myanmar (Burma))'), ('ca_ES', 'Catalan (Spain)'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr_HR', 'Croatian (Croatia)'), ('cs_CZ', 'Czech (Czechia)'), ('da_DK', 'Danish (Denmark)'), ('nl_AW', 'Dutch (Aruba)'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('dz_BT', 'Dzongkha (Bhutan)'), ('en_AG', 'English (Antigua & Barbuda)'), ('en_AU', 'English (Australia)'), ('en_BS', 'English (Bahamas)'), ('en_BB', 'English (Barbados)'), ('en_BZ', 'English (Belize)'), ('en_BM', 'English (Bermuda)'), ('en_BW', 'English (Botswana)'), ('en_CM', 'English (Cameroon)'), ('en_CA', 'English (Canada)'), ('en_KY', 'English (Cayman Islands)'), ('en_ER', 'English (Eritrea)'), ('en_FK', 'English (Falkland Islands)'), ('en_FJ', 'English (Fiji)'), ('en_GM', 'English (Gambia)'), ('en_GH', 'English (Ghana)'), ('en_GI', 'English (Gibraltar)'), ('en_GY', 'English (Guyana)'), ('en_HK', 'English (Hong Kong SAR China)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE', 'English (Ireland)'), ('en_JM', 'English (Jamaica)'), ('en_KE', 'English (Kenya)'), ('en_LR', 'English (Liberia)'), ('en_MG', 'English (Madagascar)'), ('en_MW', 'English (Malawi)'), ('en_MY', 'English (Malaysia)'), ('en_MU', 'English (Mauritius)'), ('en_NA', 'English (Namibia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PG', 'English (Papua New Guinea)'), ('en_PH', 'English (Philippines)'), ('en_RW', 'English (Rwanda)'), ('en_WS', 'English (Samoa)'), ('en_SC', 'English (Seychelles)'), ('en_SL', 'English (Sierra Leone)'), ('en_SG', 'English (Singapore)'), ('en_SX', 'English (Sint Maarten)'), ('en_SB', 'English (Solomon Islands)'), ('en_ZA', 'English (South Africa)'), ('en_SH', 'English (St. Helena)'), ('en_SZ', 'English (Swaziland)'), ('en_TZ', 'English (Tanzania)'), ('en_TO', 'English (Tonga)'), ('en_TT', 'English (Trinidad & Tobago)'), ('en_UG', 'English (Uganda)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('en_VU', 'English (Vanuatu)'), ('et_EE', 'Estonian (Estonia)'), ('fi_FI', 'Finnish (Finland)'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_KM', 'French (Comoros)'), ('fr_FR', 'French (France)'), ('fr_GN', 'French (Guinea)'), ('fr_HT', 'French (Haiti)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MR', 'French (Mauritania)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('fr_WF', 'French (Wallis & Futuna)'), ('ka_GE', 'Georgian (Georgia)'), ('de_AT', 'German (Austria)'), ('de_BE', 'German (Belgium)'), ('de_DE', 'German (Germany)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el_GR', 'Greek (Greece)'), ('gu_IN', 'Gujarati (India)'), ('iw_IL', 'Hebrew (Israel)'), ('hi_IN', 'Hindi (India)'), ('hu_HU', 'Hungarian (Hungary)'), ('is_IS', 'Icelandic (Iceland)'), ('in_ID', 'Indonesian (Indonesia)'), ('ga_IE', 'Irish (Ireland)'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja_JP', 'Japanese (Japan)'), ('kn_IN', 'Kannada (India)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ko_KP', 'Korean (North Korea)'), ('ko_KR', 'Korean (South Korea)'), ('ky_KG', 'Kyrgyz (Kyrgyzstan)'), ('lo_LA', 'Lao (Laos)'), ('lv_LV', 'Latvian (Latvia)'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lu_CD', 'Luba-Katanga (Congo - Kinshasa)'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('ml_IN', 'Malayalam (India)'), ('mt_MT', 'Maltese (Malta)'), ('mr_IN', 'Marathi (India)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('ne_NP', 'Nepali (Nepal)'), ('no_NO', 'Norwegian (Norway)'), ('ps_AF', 'Pashto (Afghanistan)'), ('fa_IR', 'Persian (Iran)'), ('pl_PL', 'Polish (Poland)'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_CV', 'Portuguese (Cape Verde)'), ('pt_MZ', 'Portuguese (Mozambique)'), ('pt_PT', 'Portuguese (Portugal)'), ('pt_ST', 'Portuguese (São Tomé & Príncipe)'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm_CH', 'Romansh (Switzerland)'), ('rn_BI', 'Rundi (Burundi)'), ('ru_KZ', 'Russian (Kazakhstan)'), ('ru_RU', 'Russian (Russia)'), ('sr_BA', 'Serbian (Cyrillic) (Bosnia and Herzegovina)'), ('sr_CS', 'Serbian (Cyrillic) (Serbia)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_RS', 'Serbian (Serbia)'), ('sk_SK', 'Slovak (Slovakia)'), ('sl_SI', 'Slovenian (Slovenia)'), ('so_DJ', 'Somali (Djibouti)'), ('so_SO', 'Somali (Somalia)'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_CU', 'Spanish (Cuba)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_NI', 'Spanish (Nicaragua)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES', 'Spanish (Spain)'), ('es_US', 'Spanish (United States)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sw_KE', 'Swahili (Kenya)'), ('sv_SE', 'Swedish (Sweden)'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('ta_IN', 'Tamil (India)'), ('ta_LK', 'Tamil (Sri Lanka)'), ('te_IN', 'Telugu (India)'), ('th_TH', 'Thai (Thailand)'), ('ti_ET', 'Tigrinya (Ethiopia)'), ('tr_TR', 'Turkish (Turkey)'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur_PK', 'Urdu (Pakistan)'), ('uz_LATN_UZ', 'Uzbek (LATN,UZ)'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy_GB', 'Welsh (United Kingdom)'), ('xh_ZA', 'Xhosa (South Africa)'), ('yo_BJ', 'Yoruba (Benin)'), ('zu_ZA', 'Zulu (South Africa)')], blank=True, null=True)
    receives_info_emails = models.BooleanField(verbose_name='Info Emails', sf_read_only=models.READ_ONLY, default=False)
    receives_admin_info_emails = models.BooleanField(verbose_name='Admin Info Emails', sf_read_only=models.READ_ONLY, default=False)
    email_encoding_key = models.CharField(max_length=40, verbose_name='Email Encoding', sf_read_only=models.READ_ONLY, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')], blank=True, null=True)
    profile = models.ForeignKey(Profile, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_type = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True, null=True)
    language_locale_key = models.CharField(max_length=40, verbose_name='Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')], blank=True, null=True)
    employee_number = models.CharField(max_length=20, sf_read_only=models.READ_ONLY, blank=True, null=True)
    delegated_approver = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    manager = models.ForeignKey(User, models.DO_NOTHING, related_name='userchangeevent_manager_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_login_date = models.DateTimeField(verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_password_change_date = models.DateTimeField(verbose_name='Last Password Change or Reset', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_trial_expiration_date = models.DateTimeField(verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offline_pda_trial_expiration_date = models.DateTimeField(verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user_permissions_marketing_user = models.BooleanField(verbose_name='Marketing User', sf_read_only=models.READ_ONLY)
    user_permissions_offline_user = models.BooleanField(verbose_name='Offline User', sf_read_only=models.READ_ONLY)
    user_permissions_avantgo_user = models.BooleanField(verbose_name='AvantGo User', sf_read_only=models.READ_ONLY)
    user_permissions_call_center_auto_login = models.BooleanField(verbose_name='Auto-login To Call Center', sf_read_only=models.READ_ONLY)
    user_permissions_mobile_user = models.BooleanField(verbose_name='Apex Mobile User', sf_read_only=models.READ_ONLY)
    user_permissions_sfcontent_user = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User', sf_read_only=models.READ_ONLY)
    user_permissions_interaction_user = models.BooleanField(verbose_name='Flow User', sf_read_only=models.READ_ONLY)
    user_permissions_support_user = models.BooleanField(verbose_name='Service Cloud User', sf_read_only=models.READ_ONLY)
    user_permissions_chatter_answers_user = models.BooleanField(verbose_name='Chatter Answers User', sf_read_only=models.READ_ONLY)
    forecast_enabled = models.BooleanField(verbose_name='Allow Forecasting', sf_read_only=models.READ_ONLY, default=False)
    user_preferences_activity_reminders_popup = models.BooleanField(verbose_name='ActivityRemindersPopup', sf_read_only=models.READ_ONLY)
    user_preferences_event_reminders_checkbox_default = models.BooleanField(verbose_name='EventRemindersCheckboxDefault', sf_read_only=models.READ_ONLY)
    user_preferences_task_reminders_checkbox_default = models.BooleanField(verbose_name='TaskRemindersCheckboxDefault', sf_read_only=models.READ_ONLY)
    user_preferences_reminder_sound_off = models.BooleanField(verbose_name='ReminderSoundOff', sf_read_only=models.READ_ONLY)
    user_preferences_disable_all_feeds_email = models.BooleanField(verbose_name='DisableAllFeedsEmail', sf_read_only=models.READ_ONLY)
    user_preferences_disable_followers_email = models.BooleanField(verbose_name='DisableFollowersEmail', sf_read_only=models.READ_ONLY)
    user_preferences_disable_profile_post_email = models.BooleanField(verbose_name='DisableProfilePostEmail', sf_read_only=models.READ_ONLY)
    user_preferences_disable_change_comment_email = models.BooleanField(verbose_name='DisableChangeCommentEmail', sf_read_only=models.READ_ONLY)
    user_preferences_disable_later_comment_email = models.BooleanField(verbose_name='DisableLaterCommentEmail', sf_read_only=models.READ_ONLY)
    user_preferences_dis_prof_post_comment_email = models.BooleanField(verbose_name='DisProfPostCommentEmail', sf_read_only=models.READ_ONLY)
    user_preferences_apex_pages_developer_mode = models.BooleanField(verbose_name='ApexPagesDeveloperMode', sf_read_only=models.READ_ONLY)
    user_preferences_hide_csnget_chatter_mobile_task = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask', sf_read_only=models.READ_ONLY)
    user_preferences_disable_mentions_post_email = models.BooleanField(verbose_name='DisableMentionsPostEmail', sf_read_only=models.READ_ONLY)
    user_preferences_dis_mentions_comment_email = models.BooleanField(verbose_name='DisMentionsCommentEmail', sf_read_only=models.READ_ONLY)
    user_preferences_hide_csndesktop_task = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask', sf_read_only=models.READ_ONLY)
    user_preferences_hide_chatter_onboarding_splash = models.BooleanField(verbose_name='HideChatterOnboardingSplash', sf_read_only=models.READ_ONLY)
    user_preferences_hide_second_chatter_onboarding_splash = models.BooleanField(verbose_name='HideSecondChatterOnboardingSplash', sf_read_only=models.READ_ONLY)
    user_preferences_dis_comment_after_like_email = models.BooleanField(verbose_name='DisCommentAfterLikeEmail', sf_read_only=models.READ_ONLY)
    user_preferences_disable_like_email = models.BooleanField(verbose_name='DisableLikeEmail', sf_read_only=models.READ_ONLY)
    user_preferences_sort_feed_by_comment = models.BooleanField(verbose_name='SortFeedByComment', sf_read_only=models.READ_ONLY)
    user_preferences_disable_message_email = models.BooleanField(verbose_name='DisableMessageEmail', sf_read_only=models.READ_ONLY)
    user_preferences_disable_bookmark_email = models.BooleanField(verbose_name='DisableBookmarkEmail', sf_read_only=models.READ_ONLY)
    user_preferences_disable_share_post_email = models.BooleanField(verbose_name='DisableSharePostEmail', sf_read_only=models.READ_ONLY)
    user_preferences_enable_auto_sub_for_feeds = models.BooleanField(verbose_name='EnableAutoSubForFeeds', sf_read_only=models.READ_ONLY)
    user_preferences_disable_file_share_notifications_for_api = models.BooleanField(verbose_name='DisableFileShareNotificationsForApi', sf_read_only=models.READ_ONLY)
    user_preferences_show_title_to_external_users = models.BooleanField(verbose_name='ShowTitleToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_manager_to_external_users = models.BooleanField(verbose_name='ShowManagerToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_email_to_external_users = models.BooleanField(verbose_name='ShowEmailToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_work_phone_to_external_users = models.BooleanField(verbose_name='ShowWorkPhoneToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_mobile_phone_to_external_users = models.BooleanField(verbose_name='ShowMobilePhoneToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_fax_to_external_users = models.BooleanField(verbose_name='ShowFaxToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_street_address_to_external_users = models.BooleanField(verbose_name='ShowStreetAddressToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_city_to_external_users = models.BooleanField(verbose_name='ShowCityToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_state_to_external_users = models.BooleanField(verbose_name='ShowStateToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_postal_code_to_external_users = models.BooleanField(verbose_name='ShowPostalCodeToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_country_to_external_users = models.BooleanField(verbose_name='ShowCountryToExternalUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_profile_pic_to_guest_users = models.BooleanField(verbose_name='ShowProfilePicToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_title_to_guest_users = models.BooleanField(verbose_name='ShowTitleToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_city_to_guest_users = models.BooleanField(verbose_name='ShowCityToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_state_to_guest_users = models.BooleanField(verbose_name='ShowStateToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_postal_code_to_guest_users = models.BooleanField(verbose_name='ShowPostalCodeToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_country_to_guest_users = models.BooleanField(verbose_name='ShowCountryToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_pipeline_view_hide_help_popover = models.BooleanField(verbose_name='PipelineViewHideHelpPopover', sf_read_only=models.READ_ONLY)
    user_preferences_hide_s1_browser_ui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI', sf_read_only=models.READ_ONLY)
    user_preferences_disable_endorsement_email = models.BooleanField(verbose_name='DisableEndorsementEmail', sf_read_only=models.READ_ONLY)
    user_preferences_path_assistant_collapsed = models.BooleanField(verbose_name='PathAssistantCollapsed', sf_read_only=models.READ_ONLY)
    user_preferences_cache_diagnostics = models.BooleanField(verbose_name='CacheDiagnostics', sf_read_only=models.READ_ONLY)
    user_preferences_show_email_to_guest_users = models.BooleanField(verbose_name='ShowEmailToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_manager_to_guest_users = models.BooleanField(verbose_name='ShowManagerToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_work_phone_to_guest_users = models.BooleanField(verbose_name='ShowWorkPhoneToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_mobile_phone_to_guest_users = models.BooleanField(verbose_name='ShowMobilePhoneToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_fax_to_guest_users = models.BooleanField(verbose_name='ShowFaxToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_show_street_address_to_guest_users = models.BooleanField(verbose_name='ShowStreetAddressToGuestUsers', sf_read_only=models.READ_ONLY)
    user_preferences_lightning_experience_preferred = models.BooleanField(verbose_name='LightningExperiencePreferred', sf_read_only=models.READ_ONLY)
    user_preferences_preview_lightning = models.BooleanField(verbose_name='PreviewLightning', sf_read_only=models.READ_ONLY)
    user_preferences_hide_end_user_onboarding_assistant_modal = models.BooleanField(verbose_name='HideEndUserOnboardingAssistantModal', sf_read_only=models.READ_ONLY)
    user_preferences_hide_lightning_migration_modal = models.BooleanField(verbose_name='HideLightningMigrationModal', sf_read_only=models.READ_ONLY)
    user_preferences_hide_sfx_welcome_mat = models.BooleanField(verbose_name='HideSfxWelcomeMat', sf_read_only=models.READ_ONLY)
    user_preferences_hide_bigger_photo_callout = models.BooleanField(verbose_name='HideBiggerPhotoCallout', sf_read_only=models.READ_ONLY)
    user_preferences_global_nav_bar_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavBarWTShown', verbose_name='GlobalNavBarWTShown', sf_read_only=models.READ_ONLY)
    user_preferences_global_nav_grid_menu_wtshown = models.BooleanField(db_column='UserPreferencesGlobalNavGridMenuWTShown', verbose_name='GlobalNavGridMenuWTShown', sf_read_only=models.READ_ONLY)
    user_preferences_create_lexapps_wtshown = models.BooleanField(db_column='UserPreferencesCreateLEXAppsWTShown', verbose_name='CreateLEXAppsWTShown', sf_read_only=models.READ_ONLY)
    user_preferences_favorites_wtshown = models.BooleanField(db_column='UserPreferencesFavoritesWTShown', verbose_name='FavoritesWTShown', sf_read_only=models.READ_ONLY)
    user_preferences_record_home_section_collapse_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeSectionCollapseWTShown', verbose_name='RecordHomeSectionCollapseWTShown', sf_read_only=models.READ_ONLY)
    user_preferences_record_home_reserved_wtshown = models.BooleanField(db_column='UserPreferencesRecordHomeReservedWTShown', verbose_name='RecordHomeReservedWTShown', sf_read_only=models.READ_ONLY)
    user_preferences_favorites_show_top_favorites = models.BooleanField(verbose_name='FavoritesShowTopFavorites', sf_read_only=models.READ_ONLY)
    user_preferences_exclude_mail_app_attachments = models.BooleanField(verbose_name='ExcludeMailAppAttachments', sf_read_only=models.READ_ONLY)
    user_preferences_suppress_task_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressTaskSFXReminders', verbose_name='SuppressTaskSFXReminders', sf_read_only=models.READ_ONLY)
    user_preferences_suppress_event_sfxreminders = models.BooleanField(db_column='UserPreferencesSuppressEventSFXReminders', verbose_name='SuppressEventSFXReminders', sf_read_only=models.READ_ONLY)
    user_preferences_preview_custom_theme = models.BooleanField(verbose_name='PreviewCustomTheme', sf_read_only=models.READ_ONLY)
    user_preferences_has_celebration_badge = models.BooleanField(verbose_name='HasCelebrationBadge', sf_read_only=models.READ_ONLY)
    user_preferences_user_debug_mode_pref = models.BooleanField(verbose_name='UserDebugModePref', sf_read_only=models.READ_ONLY)
    user_preferences_new_lightning_report_run_page_enabled = models.BooleanField(verbose_name='NewLightningReportRunPageEnabled', sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey(Contact, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    call_center = models.ForeignKey(CallCenter, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    extension = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    federation_identifier = models.CharField(max_length=512, verbose_name='SAML Federation ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    about_me = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    digest_frequency = models.CharField(max_length=40, verbose_name='Chatter Email Highlights Frequency', sf_read_only=models.READ_ONLY, default='N', choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')], blank=True, null=True)
    default_group_notification_frequency = models.CharField(max_length=40, verbose_name='Default Notification Frequency when Joining Groups', sf_read_only=models.READ_ONLY, default='N', choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')], blank=True, null=True)
    is_profile_photo_active = models.BooleanField(verbose_name='Has Profile Photo', sf_read_only=models.READ_ONLY, default=False)
    individual = models.ForeignKey(Individual, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserChangeEvent'
        verbose_name = 'User Change Event'
        verbose_name_plural = 'User Change Event'
        # keyPrefix = 'None'



class UserEmailPreferredPerson(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='User Email Preferred Person Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='useremailpreferredperson_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='useremailpreferredperson_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    email = models.EmailField()
    person_record = models.ForeignKey(Contact, models.DO_NOTHING)  # Reference to tables [Contact, Lead, User] Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'UserEmailPreferredPerson'
        verbose_name = 'User Email Preferred Person'
        verbose_name_plural = 'User Email Preferred People'
        # keyPrefix = '0UV'



class UserEmailPreferredPersonShare(models.Model):
    parent = models.ForeignKey(UserEmailPreferredPerson, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserEmailPreferredPersonShare'
        verbose_name = 'User Email Preferred Person Share'
        verbose_name_plural = 'User Email Preferred Person Share'
        # keyPrefix = 'None'



class UserEntityAccess(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_mergeable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_updatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_activateable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_readable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_editable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_deletable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_undeletable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_fls_updatable = models.BooleanField(verbose_name='Is Field-level Security Updatable?', sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserEntityAccess'
        verbose_name = 'User Entity Access'
        verbose_name_plural = 'User Entity Access'
        # keyPrefix = '07u'



class UserFeed(models.Model):
    parent = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_parent_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFeed'
        verbose_name = 'User Feed'
        verbose_name_plural = 'User Feed'
        # keyPrefix = 'None'



class UserFieldAccess(models.Model):
    durable_id = models.CharField(max_length=255, verbose_name='Durable ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_updatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_creatable = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    is_accessible = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    entity_definition_id = models.CharField(max_length=150, verbose_name='Entity Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    field_definition_id = models.CharField(max_length=150, verbose_name='Field Definition ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserFieldAccess'
        verbose_name = 'User Field Access'
        verbose_name_plural = 'User Field Access'
        # keyPrefix = '4fp'



class UserLicense(models.Model):
    license_definition_key = models.CharField(max_length=40, verbose_name='License Def. ID', sf_read_only=models.READ_ONLY)
    total_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    status = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    used_licenses = models.IntegerField(sf_read_only=models.READ_ONLY)
    used_licenses_last_updated = models.DateTimeField(sf_read_only=models.READ_ONLY)
    name = models.CharField(max_length=40, sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=80, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLicense'
        verbose_name = 'User License'
        verbose_name_plural = 'User Licenses'
        # keyPrefix = '100'



class UserListView(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistview_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    list_view = models.ForeignKey(ListView, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sobject_type = models.CharField(max_length=255, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('ActionApex', None), ('ActionChatterPost', None), ('ActionEmail', None), ('ActionFieldUpdate', None), ('ActionLinkGroupTemplate', None), ('ActionLinkTemplate', None), ('ActionOverrideMetrics', None), ('ActionQuickCreate', None), ('ActionSend', None), ('ActionTask', None), ('Activity', None), ('AdditionalNumber', None), ('AddressableEventInterface', None), ('AllInstalledPackageVersion', None), ('AllOrganization', None), ('AllPackage', None), ('AllPackageVersion', None), ('AllUsersBasic', None), ('Announcement', None), ('ApexClass', None), ('ApexComponent', None), ('ApexLog', None), ('ApexPage', None), ('ApexPageInfo', None), ('ApexTestResult', None), ('ApexTestRunResult', None), ('ApexTestRunResultMetrics', None), ('ApexTrigger', None), ('AppAnalyticsQueryRequest', None), ('AppDefinition', None), ('AppIpRange', None), ('AppMenuItem', None), ('AppNotifTypeUserSetting', None), ('Approval', None), ('AppTabMember', None), ('Asset', None), ('AssociationQueueItem', None), ('AsyncApexJob', None), ('AsyncApiBatch', None), ('AsyncApiBatchOptions', None), ('AsyncApiChunkResults', None), ('AsyncApiJobOptions', None), ('AsyncApiTransformationSpec', None), ('Attachment', None), ('Auditable', None), ('AuraDefinitionBundle', None), ('AuraDefinitionBundleInfo', None), ('AuraDefinitionInfo', None), ('AuthProvider', None), ('AuthSession', None), ('AutoActivityCaptureMetrics', None), ('BackgroundOperation', None), ('BaseEventInterface', None), ('BaseEventPackageInterface', None), ('BaseSessionInterface', None), ('BatchApexErrorEvent', None), ('BigObjectsRecordMetrics', None), ('BotSessionsMetrics', None), ('BrandTemplate', None), ('BusinessHours', None), ('C2CPermissionBinding', None), ('Calendar', None), ('CallCenter', None), ('Campaign', None), ('CampaignMember', None), ('CampaignMemberStatus', None), ('Case', None), ('CaseEscalation', None), ('Certificate', None), ('CertificateIp', None), ('ChatterActivityDailyMetrics', None), ('ChatterGroupConMetrics', None), ('ChatterMetrics', None), ('ChatterOrgWideMetrics', None), ('ChatterUniqueContributorDailyMetrics', None), ('ChatterUserNetworkMetrics', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('CleanRule', None), ('ClientBrowser', None), ('CollaborationGroup', None), ('CollaborationGroupRecord', None), ('ColorDefinition', None), ('Community', None), ('CompactLayoutInfo', None), ('CompactLayoutItemInfo', None), ('ConnectedApplication', None), ('ConnectedApplication2', None), ('ConnectivityAttributes', None), ('Contact', None), ('ContactRequest', None), ('ContentAsset', None), ('ContentDistribution', None), ('ContentDistributionView', None), ('ContentDocument', None), ('ContentFolderItem', None), ('ContentHubItem', None), ('ContentLogMetricsByFileType', None), ('ContentLogMetricsByOrg', None), ('ContentMetrics', None), ('ContentNote', None), ('ContentOrgMetrics', None), ('ContentVersion', None), ('ContentWorkspace', None), ('ContextFieldAttributes', None), ('Contract', None), ('CooperSettingsMetrics', None), ('CronTrigger', None), ('CspTrustedSite', None), ('CustomAppMetrics', None), ('CustomConsoleComponent', None), ('CustomEntityDefinition', None), ('CustomHttpHeader', None), ('CustomIndex', None), ('CustomObjectUsageMetrics', None), ('CustomObjectUserLicenseMetrics', None), ('CustomObjTeamMemberMetric', None), ('CustomPermission', None), ('CustomPermissionDependency', None), ('CustomPermissionSet', None), ('CustomReportType', None), ('Dashboard', None), ('DashboardComponent', None), ('DataAssessmentBIMetrics', None), ('DatacloudAddress', None), ('DatacloudIndustry', None), ('DatacloudIndustryChapter', None), ('DatacloudIndustryCode', None), ('DatacloudIndustryContent', None), ('DatacloudIndustrySubChapter', None), ('DataDotComListPoolMetrics', None), ('DataExportEventInterface', None), ('DataIntegrationRecordPurchasePermission', None), ('DataStatistics', None), ('DataType', None), ('DebugLevel', None), ('DeclarativePlatformMetrics', None), ('DialerMinutesMetrics', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('Document', None), ('Domain', None), ('DomainSite', None), ('DuplicateErrorLog', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('DuplicateRule', None), ('EaasEvent', None), ('EmailBrand', None), ('EmailDomainFilter', None), ('EmailDomainKey', None), ('EmailMessage', None), ('EmailMessageRelation', None), ('EmailRelay', None), ('EmailRoutingAddress', None), ('EmailServicesAddress', None), ('EmailServicesFunction', None), ('EmailStatus', None), ('EmailTemplate', None), ('EmbeddedServiceConfig', None), ('EmbeddedServiceDetail', None), ('EmbeddedServiceLabel', None), ('EngagementEvent', None), ('EnhancedEmailTemplate', None), ('EnhancedLetterhead', None), ('EntityDefinition', None), ('EntityEventInterface', None), ('EntityHistory', None), ('EntityLimit', None), ('EntityParticle', None), ('EntitySubscription', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Event', None), ('EventAssociationItem', None), ('EventBusSubscriber', None), ('EventLogFile', None), ('EventLogFileMetrics', None), ('EventType', None), ('EventTypeDefinition', None), ('EventTypeFieldDefinition', None), ('EventTypeParameter', None), ('ExternalCredential', None), ('ExternalDataSource', None), ('ExternalDataUserAuth', None), ('ExternalServiceDataType', None), ('ExternalSocialAccount', None), ('ExternalString', None), ('ExtIdentityLoginMetrics', None), ('FeatureLicense', None), ('FeedPostTemplate', None), ('FieldDefinition', None), ('FlexiPage', None), ('FlexipageComponentMetrics', None), ('FlexipagePageTypeMetrics', None), ('FlexQueueItem', None), ('FlowApexClassDescriptor', None), ('FlowApexClassPropertyDesc', None), ('FlowDefinition', None), ('FlowDefinitionView', None), ('FlowInterview', None), ('FlowLightningComponent', None), ('FlowLightningComponentParam', None), ('FlowVariableView', None), ('FlowVersionView', None), ('Folder', None), ('ForecastingItemPivot', None), ('ForecastingTypeMetrics', None), ('FormulaFunction', None), ('FormulaFunctionCategory', None), ('FormulaOperator', None), ('FormulaParticle', None), ('FTestGenBodyInterface', None), ('FTestGenInterface', None), ('FTestMetadataCatalogEntity', None), ('FTestSystemCatalogEntity', None), ('GenericContentFolder', None), ('GenericContentFolderItem', None), ('GenericContentFolderMember', None), ('GlobalVariable', None), ('GlobalVariableType', None), ('Group', None), ('HammerResultStatus', None), ('Holiday', None), ('IconDefinition', None), ('IdeaMetrics', None), ('IframeWhiteListUrl', None), ('Image', None), ('InboundSocialPost', None), ('Incident__c', None), ('Individual', None), ('InteractionDefinitionVersion', None), ('InteractionLanguageMetrics', None), ('InteractionLayoutDetail', None), ('InteractionLCMetrics', None), ('InteractionTranslMetrics', None), ('InteractionUsageMetrics', None), ('InvocableAction', None), ('InvocableActionParameter', None), ('InvocableActionPicklist', None), ('IpWhitelist', None), ('LayoutParticle', None), ('LbpmMetrics', None), ('Lead', None), ('LicensedCustomPermission', None), ('LicenseDefinition', None), ('LightningComponentBundle', None), ('LightningComponentMetrics', None), ('LightningSchedulerUsageMetrics', None), ('LightningServiceMetrics', None), ('ListColumn', None), ('ListEmail', None), ('ListEmailSentResult', None), ('ListPoolUsage', None), ('ListView', None), ('ListViewChartInstance', None), ('LocalizedValue', None), ('LocalNamespace', None), ('LoginBrand', None), ('LoginBrandAsset', None), ('LoginFlow', None), ('LoginHistory', None), ('LoginIp', None), ('Macro', None), ('MailAssociationItem', None), ('MailmergeTemplate', None), ('MassMail', None), ('MatchIndexValue', None), ('MatchingRule', None), ('MenuItem', None), ('MessagingAggregatedMetrics', None), ('MessagingMetrics', None), ('MetadataChangeTemplate', None), ('MetadataContainerMember', None), ('MetadataContainerMemberWithBinaryBody', None), ('MetadataContainerMemberWithBody', None), ('MetadataContainerMemberWithSymbolTable', None), ('MetricsDataFile', None), ('MetricsInMQMetrics', None), ('MobileConfig', None), ('MobileDevice', None), ('MobilePushServiceDevice', None), ('MultiCurrency', None), ('Nameable', None), ('NamedCredential', None), ('NetworkCustomerDailyLoginMetrics', None), ('NetworkCustomerLoginMetrics', None), ('NetworkLEADailyLoginMetrics', None), ('NetworkLEAPlusDailyLoginMetrics', None), ('NetworkPartnerDailyLoginMetrics', None), ('NetworkPartnerLoginMetrics', None), ('NetworkPCustDailyLoginMetrics', None), ('NetworkPowerCustomerLoginMetrics', None), ('NextBestActionUsageMetrics', None), ('Note', None), ('NotifTypeUserSetting', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Filter_Group__mdt', None), ('npsp__Filter_Rule__mdt', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Rollup__mdt', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('OauthConsumer', None), ('OauthCustomScope', None), ('ObjectPermissions', None), ('Opportunity', None), ('OpportunityLineItem', None), ('OpportunityMetrics', None), ('OpportunitySplitMetrics', None), ('OpptyAndPricingMetrics', None), ('Order', None), ('OrderItem', None), ('Organization', None), ('OrganizationValueInfo', None), ('OrgObjectsMetrics', None), ('OrgStandardObjectsMetrics', None), ('OwnerChangeOptionInfo', None), ('Package2Member', None), ('PackageBooleanValue', None), ('PackageDateValue', None), ('PackageIntegerValue', None), ('PackageLicense', None), ('PackageOperationError', None), ('ParallelJobStatus', None), ('PathAssistant', None), ('PendingChange', None), ('PendingChangeContainer', None), ('PermissionSet', None), ('PermissionSetAssignment', None), ('PermissionSetLicense', None), ('PermissionSetLicenseAssign', None), ('PermissionSetLicenseMetrics', None), ('PermissionSetMetricsByOrg', None), ('PermissionSetProfileMetrics', None), ('PersonAccountMetrics', None), ('PicklistValueInfo', None), ('PlatformAction', None), ('PlatformCachePartition', None), ('PlatformCachePartitionType', None), ('PlatformEventConduitMetrics', None), ('PlatformOrgObjectMetrics', None), ('PlatformStatusAlertEvent', None), ('Pricebook2', None), ('PricebookEntry', None), ('ProcessDefinition', None), ('ProcessInstanceStep', None), ('ProcessInstanceWorkitem', None), ('ProcessMetrics', None), ('ProcessPluginParameter', None), ('ProcessTimeQueue', None), ('ProcessTypeDefinition', None), ('Product2', None), ('Profile', None), ('ProfileIpRestrictionMetrics', None), ('Publisher', None), ('PushUpgradeJob', None), ('PushUpgradeJobError', None), ('PushUpgradeRequest', None), ('QoptimizerOption', None), ('QuickActionDefinition', None), ('QuickActionMetrics', None), ('QuickText', None), ('Quote', None), ('QuoteDocument', None), ('QuoteLineItem', None), ('RateLimitingNotification', None), ('Recommendation', None), ('RecordUserAccessInterface', None), ('RelatedEntity', None), ('RelationshipDomain', None), ('RelationshipInfo', None), ('RemoteProxy', None), ('Report', None), ('ReportJob', None), ('SamlSsoConfig', None), ('SandboxDimensionMetrics', None), ('SandboxOrgDimensionMetrics', None), ('SchemaBuilderLayout', None), ('SchemaBuilderLayoutItem', None), ('Scontrol', None), ('Scorecard', None), ('ScorecardAssociation', None), ('SecureAgent', None), ('SecureAgentPlugin', None), ('SecureAgentPluginProperty', None), ('SecureAgentsCluster', None), ('SecurityHealthCheck', None), ('SecurityHealthCheckRisks', None), ('Service', None), ('ServiceDataType', None), ('ServiceFieldDataType', None), ('ServiceVersion', None), ('SessionPermSetActivation', None), ('SettingsTemplate', None), ('SetupNode', None), ('ShareInterface', None), ('SharingMetrics', None), ('SharingPortalMetrics', None), ('SharingRowCauseMetrics', None), ('SharingUserMetrics', None), ('SiteDetail', None), ('SiteIframeWhiteListUrl', None), ('SocialPersona', None), ('SocialPost', None), ('SoftDeletable', None), ('SoftphoneLayout', None), ('Solution', None), ('SPSamlAttributes', None), ('StandardValueSet', None), ('StaticResource', None), ('StreamingChannel', None), ('SupportOrgWideMetrics', None), ('Survey__c', None), ('SurveyResponseUsageMetrics', None), ('TabDefinition', None), ('Task', None), ('TaskAssociationItem', None), ('TenantAddOnLicense', None), ('TenantEditionLicense', None), ('TenantLicensingRequest', None), ('TenantPlatformLicense', None), ('TenantSecret', None), ('TenantUsageEntitlement', None), ('TenantUserLicense', None), ('Topic', None), ('Training', None), ('TransactionSecurityEventInterface', None), ('TwoFactorMetrics', None), ('TwoFactorTempCode', None), ('User', None), ('UserAppMenuItem', None), ('UserDimMetrics', None), ('UserEntityAccess', None), ('UserFieldAccess', None), ('UserLicense', None), ('UserLicenseMetrics', None), ('UserListPreference', None), ('UserRole', None), ('UtilityBarMetrics', None), ('ValidationRuleInfo', None), ('VerificationHistory', None), ('VerificationMessageCreditMetrics', None), ('VisualforceMetrics', None), ('Vote', None), ('WebServiceDefinition', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkflowRule', None), ('WorkflowTimeQueue', None), ('WorkThanks', None), ('WsdlDataType', None), ('XCleanMatchRateMetrics', None), ('XmlSchema', None)], blank=True, null=True)
    last_viewed_chart = models.CharField(max_length=255, verbose_name='List View Chart ID', choices=[('AccountsByIndustry', None), ('CampaignsByNumberOfResponses', None), ('CampaignsByStatus', None), ('CampaignsByType', None), ('ContactsByAccount', None), ('ContactsByLeadSource', None), ('LeadsBySource', None), ('PipelineByAccount', None), ('PipelineByFiscalPeriod', None), ('PipelineByStage', None)], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListView'
        verbose_name = 'User List View'
        verbose_name_plural = 'User List View'
        # keyPrefix = '0Na'



class UserListViewCriterion(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistviewcriterion_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlistviewcriterion_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    user_list_view = models.ForeignKey(UserListView, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    sort_order = models.IntegerField()
    column_name = models.CharField(max_length=40)
    operation = models.CharField(max_length=255, choices=[('equals', 'equals'), ('startsWith', 'starts with'), ('contains', 'contains'), ('rangeInclusive', 'range inclusive'), ('includes', 'includes')])
    value = models.CharField(max_length=85, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserListViewCriterion'
        verbose_name = 'User List View Criteria'
        verbose_name_plural = 'User List View Criteria'
        # keyPrefix = '0JU'



class UserLogin(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userlogin_user_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_frozen = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    is_password_locked = models.BooleanField(sf_read_only=models.NOT_CREATEABLE, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userlogin_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserLogin'
        verbose_name = 'User Login'
        verbose_name_plural = 'User Login'
        # keyPrefix = '0Yw'



class UserPackageLicense(models.Model):
    package_license = models.ForeignKey(PackageLicense, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userpackagelicense_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPackageLicense'
        verbose_name = 'User Package License'
        verbose_name_plural = 'User Package License'
        # keyPrefix = '051'



class UserPermissionAccess(models.Model):
    last_cache_update = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    permissions_email_single = models.BooleanField(verbose_name='Send Email', sf_read_only=models.READ_ONLY)
    permissions_email_mass = models.BooleanField(verbose_name='Mass Email', sf_read_only=models.READ_ONLY)
    permissions_edit_task = models.BooleanField(verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    permissions_edit_event = models.BooleanField(verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    permissions_export_report = models.BooleanField(verbose_name='Export Reports', sf_read_only=models.READ_ONLY)
    permissions_import_personal = models.BooleanField(verbose_name='Import Personal Contacts', sf_read_only=models.READ_ONLY)
    permissions_data_export = models.BooleanField(verbose_name='Weekly Data Export', sf_read_only=models.READ_ONLY)
    permissions_manage_users = models.BooleanField(verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    permissions_edit_public_filters = models.BooleanField(verbose_name='Manage Public List Views', sf_read_only=models.READ_ONLY)
    permissions_edit_public_templates = models.BooleanField(verbose_name='Manage Public Classic Email Templates', sf_read_only=models.READ_ONLY)
    permissions_modify_all_data = models.BooleanField(verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    permissions_manage_cases = models.BooleanField(verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    permissions_mass_inline_edit = models.BooleanField(verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    permissions_manage_solutions = models.BooleanField(verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    permissions_customize_application = models.BooleanField(verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    permissions_edit_readonly_fields = models.BooleanField(verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    permissions_run_reports = models.BooleanField(verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    permissions_view_setup = models.BooleanField(verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_entity = models.BooleanField(verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    permissions_new_report_builder = models.BooleanField(verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    permissions_activate_contract = models.BooleanField(verbose_name='Activate Contracts', sf_read_only=models.READ_ONLY)
    permissions_activate_order = models.BooleanField(verbose_name='Activate Orders', sf_read_only=models.READ_ONLY)
    permissions_import_leads = models.BooleanField(verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    permissions_manage_leads = models.BooleanField(verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_lead = models.BooleanField(verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    permissions_view_all_data = models.BooleanField(verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    permissions_edit_public_documents = models.BooleanField(verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    permissions_view_encrypted_data = models.BooleanField(verbose_name='View Encrypted Data', sf_read_only=models.READ_ONLY)
    permissions_edit_brand_templates = models.BooleanField(verbose_name='Manage Letterheads', sf_read_only=models.READ_ONLY)
    permissions_edit_html_templates = models.BooleanField(verbose_name='Edit HTML Templates', sf_read_only=models.READ_ONLY)
    permissions_chatter_internal_user = models.BooleanField(verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    permissions_delete_activated_contract = models.BooleanField(verbose_name='Delete Activated Contracts', sf_read_only=models.READ_ONLY)
    permissions_chatter_invite_external_users = models.BooleanField(verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    permissions_send_sit_requests = models.BooleanField(verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    permissions_override_forecasts = models.BooleanField(verbose_name='Override Forecasts', sf_read_only=models.READ_ONLY)
    permissions_view_all_forecasts = models.BooleanField(verbose_name='View All Forecasts', sf_read_only=models.READ_ONLY)
    permissions_api_user_only = models.BooleanField(verbose_name='Api Only User', sf_read_only=models.READ_ONLY)
    permissions_manage_remote_access = models.BooleanField(verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    permissions_can_use_new_dashboard_builder = models.BooleanField(verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    permissions_manage_categories = models.BooleanField(verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    permissions_convert_leads = models.BooleanField(verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    permissions_password_never_expires = models.BooleanField(verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    permissions_use_team_reassign_wizards = models.BooleanField(verbose_name='Use Team Reassignment Wizards', sf_read_only=models.READ_ONLY)
    permissions_edit_activated_orders = models.BooleanField(verbose_name='Edit Activated Orders', sf_read_only=models.READ_ONLY)
    permissions_install_packaging = models.BooleanField(verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_publish_packaging = models.BooleanField(verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_chatter_own_groups = models.BooleanField(verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    permissions_edit_opp_line_item_unit_price = models.BooleanField(verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    permissions_create_packaging = models.BooleanField(verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    permissions_bulk_api_hard_delete = models.BooleanField(verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    permissions_inbound_migration_tools_user = models.BooleanField(verbose_name='Deploy Change Sets', sf_read_only=models.READ_ONLY)
    permissions_solution_import = models.BooleanField(verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    permissions_manage_call_centers = models.BooleanField(verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    permissions_manage_synonyms = models.BooleanField(verbose_name='Manage Synonyms', sf_read_only=models.READ_ONLY)
    permissions_outbound_migration_tools_user = models.BooleanField(verbose_name='Create and Upload Change Sets', sf_read_only=models.READ_ONLY)
    permissions_view_content = models.BooleanField(verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    permissions_manage_email_client_config = models.BooleanField(verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    permissions_enable_notifications = models.BooleanField(verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    permissions_manage_data_integrations = models.BooleanField(verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    permissions_distribute_from_pers_wksp = models.BooleanField(verbose_name='Create Content Deliveries', sf_read_only=models.READ_ONLY)
    permissions_view_data_categories = models.BooleanField(verbose_name='View Data Categories in Setup', sf_read_only=models.READ_ONLY)
    permissions_manage_data_categories = models.BooleanField(verbose_name='Manage Data Categories', sf_read_only=models.READ_ONLY)
    permissions_author_apex = models.BooleanField(verbose_name='Author Apex', sf_read_only=models.READ_ONLY)
    permissions_manage_mobile = models.BooleanField(verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    permissions_api_enabled = models.BooleanField(verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    permissions_manage_custom_report_types = models.BooleanField(verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    permissions_edit_case_comments = models.BooleanField(verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    permissions_transfer_any_case = models.BooleanField(verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    permissions_content_administrator = models.BooleanField(verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    permissions_create_workspaces = models.BooleanField(verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    permissions_manage_content_permissions = models.BooleanField(verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    permissions_manage_content_properties = models.BooleanField(verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    permissions_manage_content_types = models.BooleanField(verbose_name='Manage record types and layouts for Files', sf_read_only=models.READ_ONLY)
    permissions_schedule_job = models.BooleanField(verbose_name='Schedule Dashboards', sf_read_only=models.READ_ONLY)
    permissions_manage_exchange_config = models.BooleanField(verbose_name='Manage Lightning Sync', sf_read_only=models.READ_ONLY)
    permissions_manage_analytic_snapshots = models.BooleanField(verbose_name='Manage Reporting Snapshots', sf_read_only=models.READ_ONLY)
    permissions_schedule_reports = models.BooleanField(verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    permissions_manage_business_hour_holidays = models.BooleanField(verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    permissions_manage_interaction = models.BooleanField(verbose_name='Manage Flow', sf_read_only=models.READ_ONLY)
    permissions_view_my_teams_dashboards = models.BooleanField(verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    permissions_moderate_chatter = models.BooleanField(verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    permissions_reset_passwords = models.BooleanField(verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    permissions_flow_uflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Flow User Feature License', sf_read_only=models.READ_ONLY)
    permissions_can_insert_feed_system_fields = models.BooleanField(verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    permissions_activities_access = models.BooleanField(verbose_name='Access Activities', sf_read_only=models.READ_ONLY)
    permissions_email_template_management = models.BooleanField(verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    permissions_email_administration = models.BooleanField(verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    permissions_manage_chatter_messages = models.BooleanField(verbose_name='Manage Chatter Messages and Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_chatter_file_link = models.BooleanField(verbose_name='Create Public Links', sf_read_only=models.READ_ONLY)
    permissions_force_two_factor = models.BooleanField(verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    permissions_view_event_log_files = models.BooleanField(verbose_name='View Event Log Files', sf_read_only=models.READ_ONLY)
    permissions_manage_networks = models.BooleanField(verbose_name='Create and Set Up Communities', sf_read_only=models.READ_ONLY)
    permissions_view_case_interaction = models.BooleanField(verbose_name='Use Case Feed', sf_read_only=models.READ_ONLY)
    permissions_manage_auth_providers = models.BooleanField(verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    permissions_run_flow = models.BooleanField(verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    permissions_manage_quotas = models.BooleanField(verbose_name='Manage Quotas', sf_read_only=models.READ_ONLY)
    permissions_create_customize_dashboards = models.BooleanField(verbose_name='Create and Customize Dashboards', sf_read_only=models.READ_ONLY)
    permissions_create_dashboard_folders = models.BooleanField(verbose_name='Create Dashboard Folders', sf_read_only=models.READ_ONLY)
    permissions_view_public_dashboards = models.BooleanField(verbose_name='View Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_manage_dashbds_in_pub_folders = models.BooleanField(verbose_name='Manage Dashboards in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_create_customize_reports = models.BooleanField(verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    permissions_create_report_folders = models.BooleanField(verbose_name='Create Report Folders', sf_read_only=models.READ_ONLY)
    permissions_view_public_reports = models.BooleanField(verbose_name='View Reports in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_manage_reports_in_pub_folders = models.BooleanField(verbose_name='Manage Reports in Public Folders', sf_read_only=models.READ_ONLY)
    permissions_edit_my_dashboards = models.BooleanField(verbose_name='Edit My Dashboards', sf_read_only=models.READ_ONLY)
    permissions_edit_my_reports = models.BooleanField(verbose_name='Edit My Reports', sf_read_only=models.READ_ONLY)
    permissions_view_all_users = models.BooleanField(verbose_name='View All Users', sf_read_only=models.READ_ONLY)
    permissions_connect_org_to_environment_hub = models.BooleanField(verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    permissions_create_customize_filters = models.BooleanField(verbose_name='Create and Customize List Views', sf_read_only=models.READ_ONLY)
    permissions_content_hub_user = models.BooleanField(verbose_name='Files Connect Cloud', sf_read_only=models.READ_ONLY)
    permissions_govern_networks = models.BooleanField(verbose_name='Manage Communities', sf_read_only=models.READ_ONLY)
    permissions_sales_console = models.BooleanField(verbose_name='Sales Console', sf_read_only=models.READ_ONLY)
    permissions_two_factor_api = models.BooleanField(verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    permissions_delete_topics = models.BooleanField(verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    permissions_edit_topics = models.BooleanField(verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    permissions_create_topics = models.BooleanField(verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    permissions_assign_topics = models.BooleanField(verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    permissions_identity_enabled = models.BooleanField(verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    permissions_identity_connect = models.BooleanField(verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    permissions_content_workspaces = models.BooleanField(verbose_name='Access Libraries', sf_read_only=models.READ_ONLY)
    permissions_create_work_badge_definition = models.BooleanField(verbose_name='Create custom Badge Definitions', sf_read_only=models.READ_ONLY)
    permissions_custom_mobile_apps_access = models.BooleanField(verbose_name='Access Custom Mobile Apps', sf_read_only=models.READ_ONLY)
    permissions_view_help_link = models.BooleanField(verbose_name='View Help Link', sf_read_only=models.READ_ONLY)
    permissions_manage_profiles_permissionsets = models.BooleanField(verbose_name='Manage Profiles and Permission Sets', sf_read_only=models.READ_ONLY)
    permissions_assign_permission_sets = models.BooleanField(verbose_name='Assign Permission Sets', sf_read_only=models.READ_ONLY)
    permissions_manage_roles = models.BooleanField(verbose_name='Manage Roles', sf_read_only=models.READ_ONLY)
    permissions_manage_ip_addresses = models.BooleanField(verbose_name='Manage IP Addresses', sf_read_only=models.READ_ONLY)
    permissions_manage_sharing = models.BooleanField(verbose_name='Manage Sharing', sf_read_only=models.READ_ONLY)
    permissions_manage_internal_users = models.BooleanField(verbose_name='Manage Internal Users', sf_read_only=models.READ_ONLY)
    permissions_manage_password_policies = models.BooleanField(verbose_name='Manage Password Policies', sf_read_only=models.READ_ONLY)
    permissions_manage_login_access_policies = models.BooleanField(verbose_name='Manage Login Access Policies', sf_read_only=models.READ_ONLY)
    permissions_manage_custom_permissions = models.BooleanField(verbose_name='Manage Custom Permissions', sf_read_only=models.READ_ONLY)
    permissions_can_verify_comment = models.BooleanField(verbose_name='Verify Answers to Chatter Questions', sf_read_only=models.READ_ONLY)
    permissions_manage_unlisted_groups = models.BooleanField(verbose_name='Manage Unlisted Groups', sf_read_only=models.READ_ONLY)
    permissions_std_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture Standard', sf_read_only=models.READ_ONLY)
    permissions_manage_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in API', sf_read_only=models.READ_ONLY)
    permissions_lightning_experience_user = models.BooleanField(verbose_name='Lightning Experience User', sf_read_only=models.READ_ONLY)
    permissions_config_custom_recs = models.BooleanField(verbose_name='Configure Custom Recommendations', sf_read_only=models.READ_ONLY)
    permissions_submit_macros_allowed = models.BooleanField(verbose_name="Manage Macros Users Can't Undo", sf_read_only=models.READ_ONLY)
    permissions_bulk_macros_allowed = models.BooleanField(verbose_name='Run Macros on Multiple Records', sf_read_only=models.READ_ONLY)
    permissions_manage_session_permission_sets = models.BooleanField(verbose_name='Manage Session Permission Set Activations', sf_read_only=models.READ_ONLY)
    permissions_send_announcement_emails = models.BooleanField(verbose_name='Send announcement emails', sf_read_only=models.READ_ONLY)
    permissions_chatter_edit_own_post = models.BooleanField(verbose_name='Edit My Own Posts', sf_read_only=models.READ_ONLY)
    permissions_chatter_edit_own_record_post = models.BooleanField(verbose_name='Edit Posts on Records I Own', sf_read_only=models.READ_ONLY)
    permissions_create_audit_fields = models.BooleanField(verbose_name='Set Audit Fields upon Record Creation', sf_read_only=models.READ_ONLY)
    permissions_update_with_inactive_owner = models.BooleanField(verbose_name='Update Records with Inactive Owners', sf_read_only=models.READ_ONLY)
    permissions_automatic_activity_capture = models.BooleanField(verbose_name='Use Einstein Activity Capture', sf_read_only=models.READ_ONLY)
    permissions_import_custom_objects = models.BooleanField(verbose_name='Import Custom Objects', sf_read_only=models.READ_ONLY)
    permissions_delegated_two_factor = models.BooleanField(verbose_name='Manage Two-Factor Authentication in User Interface', sf_read_only=models.READ_ONLY)
    permissions_chatter_compose_ui_codesnippet = models.BooleanField(verbose_name='Allow Inclusion of Code Snippets from UI', sf_read_only=models.READ_ONLY)
    permissions_select_files_from_salesforce = models.BooleanField(verbose_name='Select Files from Salesforce', sf_read_only=models.READ_ONLY)
    permissions_moderate_network_users = models.BooleanField(verbose_name='Moderate Community Users', sf_read_only=models.READ_ONLY)
    permissions_merge_topics = models.BooleanField(verbose_name='Merge Topics', sf_read_only=models.READ_ONLY)
    permissions_subscribe_to_lightning_reports = models.BooleanField(verbose_name='Subscribe to Reports', sf_read_only=models.READ_ONLY)
    permissions_manage_pvt_rpts_and_dashbds = models.BooleanField(verbose_name='Manage All Private Reports and Dashboards', sf_read_only=models.READ_ONLY)
    permissions_allow_lightning_login = models.BooleanField(verbose_name='Lightning Login User', sf_read_only=models.READ_ONLY)
    permissions_campaign_influence2 = models.BooleanField(verbose_name='Campaign Influence', sf_read_only=models.READ_ONLY)
    permissions_view_data_assessment = models.BooleanField(verbose_name='Access to view Data Assessment', sf_read_only=models.READ_ONLY)
    permissions_remove_direct_message_members = models.BooleanField(verbose_name='Remove People from Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_can_approve_feed_post = models.BooleanField(verbose_name='Can Approve Feed Post and Comment', sf_read_only=models.READ_ONLY)
    permissions_add_direct_message_members = models.BooleanField(verbose_name='Add People to Direct Messages', sf_read_only=models.READ_ONLY)
    permissions_allow_view_edit_converted_leads = models.BooleanField(verbose_name='View and Edit Converted Leads', sf_read_only=models.READ_ONLY)
    permissions_show_company_name_as_user_badge = models.BooleanField(verbose_name='Show Company Name as Community Role', sf_read_only=models.READ_ONLY)
    permissions_access_cmc = models.BooleanField(db_column='PermissionsAccessCMC', verbose_name='Access Community Management', sf_read_only=models.READ_ONLY)
    permissions_view_health_check = models.BooleanField(verbose_name='View Health Check', sf_read_only=models.READ_ONLY)
    permissions_manage_health_check = models.BooleanField(verbose_name='Manage Health Check', sf_read_only=models.READ_ONLY)
    permissions_packaging2 = models.BooleanField(verbose_name='Create and Update Second-Generation Packages', sf_read_only=models.READ_ONLY)
    permissions_manage_certificates = models.BooleanField(verbose_name='Manage Certificates', sf_read_only=models.READ_ONLY)
    permissions_create_report_in_lightning = models.BooleanField(verbose_name='Report Builder (Lightning Experience)', sf_read_only=models.READ_ONLY)
    permissions_prevent_classic_experience = models.BooleanField(verbose_name='Hide Option to Switch to Salesforce Classic', sf_read_only=models.READ_ONLY)
    permissions_hide_read_by_list = models.BooleanField(verbose_name='Hide the Seen By List', sf_read_only=models.READ_ONLY)
    permissions_list_email_send = models.BooleanField(verbose_name='Allow sending of List Emails', sf_read_only=models.READ_ONLY)
    permissions_feed_pinning = models.BooleanField(verbose_name='Pin Posts in Feeds', sf_read_only=models.READ_ONLY)
    permissions_change_dashboard_colors = models.BooleanField(verbose_name='Change Dashboard Colors', sf_read_only=models.READ_ONLY)
    permissions_manage_recommendation_strategies = models.BooleanField(verbose_name='Manage Next Best Action Strategies', sf_read_only=models.READ_ONLY)
    permissions_manage_propositions = models.BooleanField(verbose_name='Manage Next Best Action Recommendations', sf_read_only=models.READ_ONLY)
    permissions_close_conversations = models.BooleanField(verbose_name='Close Conversation Threads', sf_read_only=models.READ_ONLY)
    permissions_subscribe_report_roles_grps = models.BooleanField(verbose_name='Subscribe to Reports: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    permissions_subscribe_dashboard_roles_grps = models.BooleanField(verbose_name='Subscribe to Dashboards: Send to Groups and Roles', sf_read_only=models.READ_ONLY)
    permissions_use_web_link = models.BooleanField(verbose_name='Allow Access to Customized Actions', sf_read_only=models.READ_ONLY)
    permissions_has_unlimited_nbaexecutions = models.BooleanField(db_column='PermissionsHasUnlimitedNBAExecutions', verbose_name='User Has Unlimited Next Best Action Strategy Executions', sf_read_only=models.READ_ONLY)
    permissions_view_only_embedded_app_user = models.BooleanField(verbose_name='Access to View-Only Licensed Templates and Apps', sf_read_only=models.READ_ONLY)
    permissions_view_all_activities = models.BooleanField(verbose_name='View All Activities', sf_read_only=models.READ_ONLY)
    permissions_subscribe_report_to_other_users = models.BooleanField(verbose_name='Subscribe to Reports: Add Recipients', sf_read_only=models.READ_ONLY)
    permissions_lightning_console_allowed_for_user = models.BooleanField(verbose_name='Lightning Console User', sf_read_only=models.READ_ONLY)
    permissions_subscribe_reports_run_as_user = models.BooleanField(verbose_name='Subscribe to Reports: Set Running User', sf_read_only=models.READ_ONLY)
    permissions_subscribe_to_lightning_dashboards = models.BooleanField(verbose_name='Subscribe to Dashboards', sf_read_only=models.READ_ONLY)
    permissions_subscribe_dashboard_to_other_users = models.BooleanField(verbose_name='Subscribe to Dashboards: Add Recipients', sf_read_only=models.READ_ONLY)
    permissions_create_ltng_temp_in_pub = models.BooleanField(verbose_name='Manage Public Lightning Email Templates', sf_read_only=models.READ_ONLY)
    permissions_transactional_email_send = models.BooleanField(verbose_name='Send Non-Commercial Email', sf_read_only=models.READ_ONLY)
    permissions_create_ltng_temp_folder = models.BooleanField(verbose_name='Create Folders for Lightning Email Templates', sf_read_only=models.READ_ONLY)
    permissions_apex_rest_services = models.BooleanField(verbose_name='Apex REST Services', sf_read_only=models.READ_ONLY)
    permissions_enable_community_app_launcher = models.BooleanField(verbose_name='Show App Launcher in Communities', sf_read_only=models.READ_ONLY)
    permissions_give_recognition_badge = models.BooleanField(verbose_name='Give Recognition Badges in Lightning Communities', sf_read_only=models.READ_ONLY)
    permissions_ltng_promo_reserved01_user_perm = models.BooleanField(verbose_name='Remain in Salesforce Classic', sf_read_only=models.READ_ONLY)
    permissions_manage_surveys = models.BooleanField(verbose_name='Manage Surveys', sf_read_only=models.READ_ONLY)
    permissions_view_roles = models.BooleanField(verbose_name='View Roles and Role Hierarchy', sf_read_only=models.READ_ONLY)
    permissions_einstein_assistant_user = models.BooleanField(verbose_name='Allows a user to access Einstein Assistant.', sf_read_only=models.READ_ONLY)
    permissions_modify_data_classification = models.BooleanField(verbose_name='Modify Data Classification', sf_read_only=models.READ_ONLY)
    permissions_privacy_data_access = models.BooleanField(verbose_name='Allow user to access privacy data', sf_read_only=models.READ_ONLY)
    permissions_query_all_files = models.BooleanField(verbose_name='Query All Files', sf_read_only=models.READ_ONLY)
    permissions_modify_metadata = models.BooleanField(verbose_name='Modify Metadata Through Metadata API Functions', sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPermissionAccess'
        verbose_name = 'User Permission Access'
        verbose_name_plural = 'User Permission Access'
        # keyPrefix = '0up'



class UserPreference(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING)  # Master Detail Relationship *
    preference = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('57', 'Event Reminder Default Lead Time'), ('58', 'Task Reminder Default Time'), ('91', 'Prevent Logs on Load'), ('92', 'Autocomplete Apex After Key Press'), ('93', 'Visualforce Viewstate Inspector'), ('94', 'Forecasting Displayed Type'), ('96', 'Editor Theme'), ('97', 'Editor Font Size'), ('98', 'Pinned Folders'), ('99', 'Enable Query Plan'), ('100', 'Enable New Open Dialog'), ('101', 'Email Transport Type'), ('102', 'Pinned Wave Folders'), ('108', 'Density'), ('109', 'Lightning Flow Builder preferences'), ('111', 'Format With Tabs'), ('112', 'Format Tab Width'), ('113', 'Format Print Width'), ('114', 'Record Page Activities Display')])
    value = models.TextField(blank=True, null=True)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'UserPreference'
        verbose_name = 'User Preference'
        verbose_name_plural = 'User Preferences'
        # keyPrefix = '03u'



class UserRecordAccess(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    record_id = models.CharField(max_length=40, verbose_name='Record ID', sf_read_only=models.READ_ONLY)
    has_read_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_edit_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_delete_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_transfer_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    has_all_access = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    max_access_level = models.CharField(max_length=40, verbose_name='Maximum Access Level', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('Delete', 'Delete'), ('Transfer', 'Read/Write/Transfer'), ('All', 'Owner')], blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRecordAccess'
        verbose_name = 'User Record Access'
        verbose_name_plural = 'User Record Access'
        # keyPrefix = 'None'



class UserRole(models.Model):
    name = models.CharField(max_length=80)
    parent_role = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
    rollup_description = models.CharField(max_length=80, verbose_name='Description', blank=True, null=True)
    opportunity_access_for_account_owner = models.CharField(max_length=40, verbose_name='Opportunity Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    case_access_for_account_owner = models.CharField(max_length=40, verbose_name='Case Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    contact_access_for_account_owner = models.CharField(max_length=40, verbose_name='Contact Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True, null=True)
    forecast_user = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_forecastuser_set', blank=True, null=True)
    may_forecast_manager_share = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    developer_name = models.CharField(max_length=80, blank=True, null=True)
    portal_account = models.ForeignKey(Account, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    portal_type = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('None', 'None'), ('CustomerPortal', 'Customer Portal'), ('Partner', 'Partner Portal')], blank=True, null=True)
    portal_account_owner = models.ForeignKey(User, models.DO_NOTHING, related_name='userrole_portalaccountowner_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'UserRole'
        verbose_name = 'Role'
        verbose_name_plural = 'Role'
        # keyPrefix = '00E'



class UserShare(models.Model):
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='usershare_user_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    user_access_level = models.CharField(max_length=40, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='usershare_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    is_active = models.BooleanField(verbose_name='Active', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'UserShare'
        verbose_name = 'User Share'
        verbose_name_plural = 'User Share'
        # keyPrefix = '0N2'



class VerificationHistory(models.Model):
    event_group = models.IntegerField(verbose_name='Verification Attempt', sf_read_only=models.READ_ONLY)
    verification_time = models.DateTimeField(verbose_name='Time', sf_read_only=models.READ_ONLY)
    verification_method = models.CharField(max_length=255, verbose_name='Method', sf_read_only=models.READ_ONLY, choices=[('Totp', 'One-time password'), ('Sms', 'Text message'), ('Email', 'Email message'), ('SalesforceAuthenticator', 'Salesforce Authenticator'), ('TempCode', 'Temporary code'), ('U2F', 'U2F security key'), ('LL', 'Lightning Login'), ('EnableLL', 'Lightning Login'), ('Password', 'Password')], blank=True, null=True)
    user = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_user_set', sf_read_only=models.READ_ONLY)
    activity = models.CharField(max_length=255, verbose_name='User Activity', sf_read_only=models.READ_ONLY, choices=[('Registration', 'Register for verification'), ('ExtraVerification', 'Perform an operation that requires extra verification'), ('Login', 'Log in to Salesforce'), ('AccessReports', 'Access reports'), ('ExportPrintReports', 'Export and print reports'), ('ConnectedApp', 'Access a connected app'), ('Apex', 'Apex-defined activity'), ('TempCode', 'Generate a temporary verification code'), ('EnableLL', 'Enroll in Lightning Login'), ('ConnectTotp', 'Connect a One-Time Password Generator'), ('ConnectToopher', 'Connect Salesforce Authenticator'), ('ConnectU2F', 'Connect a U2F Security Key'), ('ChangeEmail', 'Change your email address'), ('ListView', 'Access the list view')])
    status = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, choices=[('Initiated', 'Initiated'), ('InProgress', 'User challenged; waiting for response'), ('Succeeded', 'Succeeded'), ('Denied', 'Access denied'), ('RecoverableError', 'Failed: Recoverable error'), ('FailedGeneralError', 'Failed: General error'), ('FailedInvalidCode', 'Failed: Invalid verification code'), ('FailedTooManyAttempts', 'Failed: Too many attempts'), ('AutomatedSuccess', 'Succeeded: Automated response'), ('ReportedDenied', 'Access denied: Flagged by user'), ('FailedPasswordLockout', 'Failed: Password Lockout'), ('FailedInvalidPassword', 'Failed: Invalid Password')])
    login_history = models.ForeignKey(LoginHistory, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    source_ip = models.CharField(max_length=200, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    login_geo = models.ForeignKey(LoginGeo, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    remarks = models.CharField(max_length=255, verbose_name='Activity Message', sf_read_only=models.READ_ONLY, blank=True, null=True)
    resource = models.ForeignKey(ConnectedApplication, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    policy = models.CharField(max_length=255, verbose_name='Triggered By', sf_read_only=models.READ_ONLY, choices=[('HighAssurance', 'High assurance session required'), ('PageAccess', 'Access a protected page'), ('ProfilePolicy', 'Profile session level policy'), ('TwoFactorAuthentication', 'Two-factor authentication required'), ('DeviceActivation', 'Activation'), ('ExtraVerification', 'Extra Verification'), ('LightningLogin', 'Lightning Login'), ('EnableLightningLogin', 'Enroll in Lightning Login'), ('CustomApex', 'Apex method'), ('PasswordlessLogin', 'Passwordless Login')])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='verificationhistory_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'VerificationHistory'
        verbose_name = 'Identity Verification History'
        verbose_name_plural = 'Identity Verification History'
        # keyPrefix = '0Qt'



class VisualforceAccessMetrics(models.Model):
    metrics_date = models.DateField(sf_read_only=models.READ_ONLY)
    apex_page = models.ForeignKey(ApexPage, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    profile = models.ForeignKey(Profile, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    daily_page_view_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    log_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'VisualforceAccessMetrics'
        verbose_name = 'Visualforce Access Metric'
        verbose_name_plural = 'Visualforce Access Metrics'
        # keyPrefix = '0OP'



class Vote(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey(Solution, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Vote Type', choices=[('Up', None), ('Down', None), ('1', None), ('2', None), ('3', None), ('4', None), ('5', None)])
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='vote_createdby_set', sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='vote_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'Vote'
        verbose_name = 'Vote'
        verbose_name_plural = 'Votes'
        # keyPrefix = '083'



class WaveAutoInstallRequest(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Request Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='waveautoinstallrequest_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='waveautoinstallrequest_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    template_api_name = models.CharField(max_length=255, verbose_name='Wave Template Api Name', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    template_version = models.CharField(max_length=50, verbose_name='Wave Template Version', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    folder = models.ForeignKey(Folder, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)  # Master Detail Relationship *
    request_type = models.CharField(max_length=255, sf_read_only=models.NOT_UPDATEABLE)
    request_status = models.CharField(max_length=255)
    failed_reason = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    configuration = models.TextField(sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    request_log = models.TextField(blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WaveAutoInstallRequest'
        verbose_name = 'Wave Auto Install Request'
        verbose_name_plural = 'Wave Auto Install Requests'
        # keyPrefix = '0UZ'



class WaveCompatibilityCheckItem(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Checklist Item Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='wavecompatibilitycheckitem_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='wavecompatibilitycheckitem_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    task_name = models.CharField(max_length=255, verbose_name='Checklist Item Task Name', sf_read_only=models.READ_ONLY)
    task_result = models.CharField(max_length=255, verbose_name='Checklist Item Result', sf_read_only=models.READ_ONLY)
    template_api_name = models.CharField(max_length=255, verbose_name='Wave Template Api Name', sf_read_only=models.READ_ONLY)
    template_version = models.CharField(max_length=50, verbose_name='Wave Template Version', sf_read_only=models.READ_ONLY, blank=True, null=True)
    payload = models.TextField(verbose_name='Checklist Task Payload', sf_read_only=models.READ_ONLY, blank=True, null=True)
    wave_auto_install_request = models.ForeignKey(WaveAutoInstallRequest, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Master Detail Relationship *
    class Meta(models.Model.Meta):
        db_table = 'WaveCompatibilityCheckItem'
        verbose_name = 'Wave Compatibility Check Item'
        verbose_name_plural = 'Wave Compatibility Check Items'
        # keyPrefix = '0OZ'



class WebLink(models.Model):
    page_or_sobject_type = models.CharField(max_length=40, verbose_name='Page Or sObject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Activity', None), ('Asset', None), ('AssetRelationship', None), ('AuthorizationForm', None), ('AuthorizationFormConsent', None), ('AuthorizationFormDataUse', None), ('AuthorizationFormText', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Class_Attendance__c', None), ('Class_Enrollment__c', None), ('Class_Meeting__c', None), ('Class_Offering__c', None), ('Contact', None), ('ContactPointTypeConsent', None), ('ContactRequest', None), ('ContentVersion', None), ('Contract', None), ('CustomPageItem', None), ('DashboardComponent', None), ('DataUseLegalBasis', None), ('DataUsePurpose', None), ('dlrs__LookupChild__c', None), ('dlrs__LookupChildAReallyReallyReallyBigBigName__c', None), ('dlrs__LookupParent__c', None), ('dlrs__LookupRollupCalculateJob__c', None), ('dlrs__LookupRollupSummary__c', None), ('dlrs__LookupRollupSummary2__mdt', None), ('dlrs__LookupRollupSummaryLog__c', None), ('dlrs__LookupRollupSummaryScheduleItems__c', None), ('DuplicateRecordItem', None), ('DuplicateRecordSet', None), ('EmailMessage', None), ('Equipment__c', None), ('Equipment_Assignment__c', None), ('Event', None), ('Image', None), ('Incident__c', None), ('Individual', None), ('Lead', None), ('Macro', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('npsp__Account_Soft_Credit__c', None), ('npsp__Address__c', None), ('npsp__Allocation__c', None), ('npsp__Batch__c', None), ('npsp__DataImport__c', None), ('npsp__DataImportBatch__c', None), ('npsp__Engagement_Plan__c', None), ('npsp__Engagement_Plan_Task__c', None), ('npsp__Engagement_Plan_Template__c', None), ('npsp__Error__c', None), ('npsp__Filter_Group__mdt', None), ('npsp__Filter_Rule__mdt', None), ('npsp__Fund__c', None), ('npsp__General_Accounting_Unit__c', None), ('npsp__Grant_Deadline__c', None), ('npsp__Level__c', None), ('npsp__Partial_Soft_Credit__c', None), ('npsp__Rollup__mdt', None), ('npsp__Schedulable__c', None), ('npsp__Trigger_Handler__c', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Order', None), ('OrderItem', None), ('Product2', None), ('QuickText', None), ('Quote', None), ('QuoteLineItem', None), ('Recommendation', None), ('RecordAction', None), ('Scorecard', None), ('ScorecardAssociation', None), ('ScorecardMetric', None), ('SocialPersona', None), ('SocialPost', None), ('Solution', None), ('Survey__c', None), ('Task', None), ('User', None), ('WorkBadge', None), ('WorkBadgeDefinition', None), ('WorkThanks', None)])
    name = models.CharField(max_length=240)
    is_protected = models.BooleanField(verbose_name='Protected Component', default=models.DEFAULTED_ON_CREATE)
    url = models.TextField(verbose_name='URL', blank=True, null=True)
    encoding_key = models.CharField(max_length=40, verbose_name='Link Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    link_type = models.CharField(max_length=40, verbose_name='Content Source', choices=[('url', 'URL'), ('sControl', 'Custom S-Control'), ('javascript', 'OnClick JavaScript'), ('page', 'Visualforce Page'), ('flow', 'Flow Definition')])
    open_type = models.CharField(max_length=40, verbose_name='Behavior', choices=[('newWindow', 'Display in new window'), ('sidebar', 'Display in existing window with sidebar'), ('noSidebar', 'Display in existing window without sidebar'), ('replace', 'Display in existing window without sidebar or header'), ('onClickJavaScript', 'Execute JavaScript')])
    height = models.IntegerField(verbose_name='Height (in pixels)', blank=True, null=True)
    width = models.IntegerField(verbose_name='Width (in pixels)', blank=True, null=True)
    shows_location = models.BooleanField(verbose_name='Show Address Bar', default=models.DEFAULTED_ON_CREATE)
    has_scrollbars = models.BooleanField(verbose_name='Show Scrollbars', default=models.DEFAULTED_ON_CREATE)
    has_toolbar = models.BooleanField(verbose_name='Show Toolbars', default=models.DEFAULTED_ON_CREATE)
    has_menubar = models.BooleanField(verbose_name='Show Menu Bar', default=models.DEFAULTED_ON_CREATE)
    shows_status = models.BooleanField(verbose_name='Show Status Bar', default=models.DEFAULTED_ON_CREATE)
    is_resizable = models.BooleanField(verbose_name='Resizeable', default=models.DEFAULTED_ON_CREATE)
    position = models.CharField(max_length=40, verbose_name='Window Position', choices=[('fullScreen', None), ('none', None), ('topLeft', None)], blank=True, null=True)
    scontrol = models.ForeignKey(ApexPage, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [ApexPage, Scontrol]
    master_label = models.CharField(max_length=240, verbose_name='Label', blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    display_type = models.CharField(max_length=40, default=models.DEFAULTED_ON_CREATE, choices=[('L', 'Detail Page Link'), ('B', 'Detail Page Button'), ('M', 'List Button')])
    require_row_selection = models.BooleanField(default=models.DEFAULTED_ON_CREATE)
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblink_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='weblink_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'WebLink'
        verbose_name = 'Custom Button or Link'
        verbose_name_plural = 'Custom Buttons or Links'
        # keyPrefix = '00b'



class WorkAccess(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workaccess_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workaccess_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('WorkBadgeDefinition', models.DO_NOTHING)  # Master Detail Relationship *
    access_type = models.CharField(max_length=255, verbose_name='Work Access type', choices=[('Give', 'Give')])
    class Meta(models.Model.Meta):
        db_table = 'WorkAccess'
        verbose_name = 'Access'
        verbose_name_plural = 'Access'
        # keyPrefix = '0W5'



class WorkAccessShare(models.Model):
    parent = models.ForeignKey(WorkAccess, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkAccessShare'
        verbose_name = 'Access Share'
        verbose_name_plural = 'Access Share'
        # keyPrefix = 'None'



class WorkBadge(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    source = models.ForeignKey('WorkThanks', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    definition = models.ForeignKey('WorkBadgeDefinition', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    recipient = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_recipient_set', sf_read_only=models.NOT_UPDATEABLE)
    giver = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadge_giver_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    image_url = models.URLField(verbose_name='Image', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    message = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadge'
        verbose_name = 'Badge Received'
        verbose_name_plural = 'Badges Received'
        # keyPrefix = '0W2'



class WorkBadgeDefinition(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=255, verbose_name='Badge Name')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinition_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinition_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_company_wide = models.BooleanField(verbose_name='Company Badge', default=models.DEFAULTED_ON_CREATE)
    description = models.TextField()
    image_url = models.URLField(verbose_name='Image URL')
    is_active = models.BooleanField(verbose_name='Active', default=models.DEFAULTED_ON_CREATE)
    limit_number = models.IntegerField(blank=True, null=True)
    is_limit_per_user = models.BooleanField(verbose_name='Limit Per User', default=models.DEFAULTED_ON_CREATE)
    limit_start_date = models.DateField(blank=True, null=True)
    given_badge_count = models.IntegerField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_reward_badge = models.BooleanField(verbose_name='Reward Badge', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinition'
        verbose_name = 'Badge'
        verbose_name_plural = 'Badges'
        # keyPrefix = '0W1'



class WorkBadgeDefinitionFeed(models.Model):
    parent = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinitionfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workbadgedefinitionfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionFeed'
        verbose_name = 'Badge Feed'
        verbose_name_plural = 'Badge Feed'
        # keyPrefix = 'None'



class WorkBadgeDefinitionHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    work_badge_definition = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('IsActive', 'Active'), ('Name', 'Badge Name'), ('IsCompanyWide', 'Company Badge'), ('created', 'Created.'), ('Description', 'Description'), ('feedEvent', 'Feed event'), ('ImageUrl', 'Image URL'), ('individualMerged', 'Individual Merged'), ('LimitNumber', 'Limit Number'), ('IsLimitPerUser', 'Limit Per User'), ('LimitStartDate', 'Limit Start Date'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Owner', 'Owner Name'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionHistory'
        verbose_name = 'Badge History'
        verbose_name_plural = 'Badge History'
        # keyPrefix = 'None'



class WorkBadgeDefinitionShare(models.Model):
    parent = models.ForeignKey(WorkBadgeDefinition, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkBadgeDefinitionShare'
        verbose_name = 'Badge Share'
        verbose_name_plural = 'Badge Share'
        # keyPrefix = 'None'



class WorkThanks(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workthanks_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='workthanks_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    giver = models.ForeignKey(User, models.DO_NOTHING, related_name='workthanks_giver_set', sf_read_only=models.NOT_UPDATEABLE)
    message = models.TextField(sf_read_only=models.NOT_UPDATEABLE)
    feed_item = models.ForeignKey(FeedItem, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'WorkThanks'
        verbose_name = 'Thanks'
        verbose_name_plural = 'Thanks'
        # keyPrefix = '0W0'



class WorkThanksShare(models.Model):
    parent = models.ForeignKey(WorkThanks, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'WorkThanksShare'
        verbose_name = 'Thanks Share'
        verbose_name_plural = 'Thanks Share'
        # keyPrefix = 'None'



class DlrsDeclarativeLookupRollupSummariesChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrsdeclarativelookuprollupsummarieschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrsdeclarativelookuprollupsummarieschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_calculate_job_scope_size = models.DecimalField(db_column='dlrs__CalculateJobScopeSize__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Calculate Job Scope Size', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_hide_manage_lookup_rollup_summaries_info = models.BooleanField(db_column='dlrs__HideManageLookupRollupSummariesInfo__c', custom=True, verbose_name='Hide Manage Lookup Rollup Summaries Info', sf_read_only=models.READ_ONLY, default=False) 
    dlrs_scheduled_job_scope_size = models.DecimalField(db_column='dlrs__ScheduledJobScopeSize__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Scheduled Job Scope Size', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__DeclarativeLookupRollupSummaries__ChangeEvent'
        verbose_name = 'Change Event: Declarative Lookup Rollup Summaries'
        verbose_name_plural = 'Change Event: Declarative Lookup Rollup Summaries'
        # keyPrefix = 'None'



class DlrsDeclarativeLookupRollupSummaries(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrsdeclarativelookuprollupsummaries_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrsdeclarativelookuprollupsummaries_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_calculate_job_scope_size = models.DecimalField(db_column='dlrs__CalculateJobScopeSize__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Calculate Job Scope Size', default=models.DEFAULTED_ON_CREATE) 
    dlrs_hide_manage_lookup_rollup_summaries_info = models.BooleanField(db_column='dlrs__HideManageLookupRollupSummariesInfo__c', custom=True, verbose_name='Hide Manage Lookup Rollup Summaries Info', default=models.DEFAULTED_ON_CREATE) 
    dlrs_scheduled_job_scope_size = models.DecimalField(db_column='dlrs__ScheduledJobScopeSize__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Scheduled Job Scope Size', default=models.DEFAULTED_ON_CREATE) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__DeclarativeLookupRollupSummaries__c'
        verbose_name = 'Declarative Lookup Rollup Summaries'
        verbose_name_plural = 'Declarative Lookup Rollup Summaries'
        # keyPrefix = 'a0n'



class DlrsLookupChildAreallyReallyReallyBigBigNameChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildareallyreallyreallybigbignamechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildareallyreallyreallybigbignamechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_amount = models.DecimalField(db_column='dlrs__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_lookup_parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChildAReallyReallyReallyBigBigName__ChangeEvent'
        verbose_name = 'Change Event: Lookup Child Big'
        verbose_name_plural = 'Change Event: Lookup Child Big'
        # keyPrefix = 'None'



class DlrsLookupChildAreallyReallyReallyBigBigName(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Child Big Name Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildareallyreallyreallybigbigname_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildareallyreallyreallybigbigname_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_amount = models.DecimalField(db_column='dlrs__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', blank=True, null=True) 
    dlrs_lookup_parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent__c', custom=True, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChildAReallyReallyReallyBigBigName__c'
        verbose_name = 'Lookup Child Big'
        verbose_name_plural = 'Lookup Child Big'
        # keyPrefix = 'a0o'



class DlrsLookupChildChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchildchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_amount = models.DecimalField(db_column='dlrs__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_color = models.CharField(db_column='dlrs__Color__c', custom=True, max_length=255, verbose_name='Color', sf_read_only=models.READ_ONLY, choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Green', 'Green'), ('Blue', 'Blue')], blank=True, null=True) 
    dlrs_description2 = models.CharField(db_column='dlrs__Description2__c', custom=True, max_length=255, verbose_name='Description 2', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_description = models.CharField(db_column='dlrs__Description__c', custom=True, max_length=255, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_lookup_parent2 = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent2__c', custom=True, related_name='dlrslookupchildchangeevent_dlrslookupparent2_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_lookup_parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent__c', custom=True, related_name='dlrslookupchildchangeevent_dlrslookupparent_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChild__ChangeEvent'
        verbose_name = 'Change Event: Lookup Child'
        verbose_name_plural = 'Change Event: Lookup Child'
        # keyPrefix = 'None'



class DlrsLookupChildShare(models.Model):
    parent = models.ForeignKey('DlrsLookupChild', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChild__Share'
        verbose_name = 'Share: Lookup Child'
        verbose_name_plural = 'Share: Lookup Child'
        # keyPrefix = 'None'



class DlrsLookupChild(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Child Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchild_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupchild_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_amount = models.DecimalField(db_column='dlrs__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', blank=True, null=True) 
    dlrs_color = models.CharField(db_column='dlrs__Color__c', custom=True, max_length=255, verbose_name='Color', choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Green', 'Green'), ('Blue', 'Blue')], blank=True, null=True) 
    dlrs_description2 = models.CharField(db_column='dlrs__Description2__c', custom=True, max_length=255, verbose_name='Description 2', blank=True, null=True) 
    dlrs_description = models.CharField(db_column='dlrs__Description__c', custom=True, max_length=255, verbose_name='Description', blank=True, null=True) 
    dlrs_lookup_parent2 = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent2__c', custom=True, related_name='dlrslookupchild_dlrslookupparent2_set', blank=True, null=True) 
    dlrs_lookup_parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, db_column='dlrs__LookupParent__c', custom=True, related_name='dlrslookupchild_dlrslookupparent_set', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupChild__c'
        verbose_name = 'Lookup Child'
        verbose_name_plural = 'Lookup Children'
        # keyPrefix = 'a0p'



class DlrsLookupParentChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupparentchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupparentchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_colours = models.CharField(db_column='dlrs__Colours__c', custom=True, max_length=4099, verbose_name='Colours', sf_read_only=models.READ_ONLY, choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Green', 'Green'), ('Blue', 'Blue')], blank=True, null=True) 
    dlrs_descriptions2 = models.CharField(db_column='dlrs__Descriptions2__c', custom=True, max_length=255, verbose_name='Descriptions 2', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_descriptions = models.CharField(db_column='dlrs__Descriptions__c', custom=True, max_length=255, verbose_name='Descriptions', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_total2 = models.DecimalField(db_column='dlrs__Total2__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total 2', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_total = models.DecimalField(db_column='dlrs__Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupParent__ChangeEvent'
        verbose_name = 'Change Event: Lookup Parent'
        verbose_name_plural = 'Change Event: Lookup Parent'
        # keyPrefix = 'None'



class DlrsLookupParentShare(models.Model):
    parent = models.ForeignKey('DlrsLookupParent', models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship *
    user_or_group = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.NOT_UPDATEABLE)  # Reference to tables [Group, User] Master Detail Relationship *
    access_level = models.CharField(max_length=40, verbose_name='Custom Object Access', choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    row_cause = models.CharField(max_length=40, sf_read_only=models.NOT_UPDATEABLE, default=models.DEFAULTED_ON_CREATE, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('ImplicitPerson', 'Person Contact'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('Territory2AssociationManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule'), ('Territory2Forecast', 'Territory assignment for forecasting and reporting')], blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupParent__Share'
        verbose_name = 'Share: Lookup Parent'
        verbose_name_plural = 'Share: Lookup Parent'
        # keyPrefix = 'None'



class DlrsLookupParent(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Parent Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupparent_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookupparent_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    dlrs_colours = models.CharField(db_column='dlrs__Colours__c', custom=True, max_length=4099, verbose_name='Colours', choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Green', 'Green'), ('Blue', 'Blue')], blank=True, null=True) 
    dlrs_descriptions2 = models.CharField(db_column='dlrs__Descriptions2__c', custom=True, max_length=255, verbose_name='Descriptions 2', blank=True, null=True) 
    dlrs_descriptions = models.CharField(db_column='dlrs__Descriptions__c', custom=True, max_length=255, verbose_name='Descriptions', blank=True, null=True) 
    dlrs_total2 = models.DecimalField(db_column='dlrs__Total2__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total 2', blank=True, null=True) 
    dlrs_total = models.DecimalField(db_column='dlrs__Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupParent__c'
        verbose_name = 'Lookup Parent'
        verbose_name_plural = 'Lookup Parents'
        # keyPrefix = 'a0q'



class DlrsLookupRollupCalculateJobChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupcalculatejobchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupcalculatejobchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_lookup_rollup_summary_id = models.CharField(db_column='dlrs__LookupRollupSummaryId__c', custom=True, max_length=80, verbose_name='Lookup Rollup Summary Id', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupCalculateJob__ChangeEvent'
        verbose_name = 'Change Event: Lookup Rollup Calculate Job'
        verbose_name_plural = 'Change Event: Lookup Rollup Calculate Job'
        # keyPrefix = 'None'



class DlrsLookupRollupCalculateJob(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Calculate Job Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupcalculatejob_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupcalculatejob_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_lookup_rollup_summary_id = models.CharField(db_column='dlrs__LookupRollupSummaryId__c', custom=True, unique=True, max_length=80, verbose_name='Lookup Rollup Summary Id') 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupCalculateJob__c'
        verbose_name = 'Lookup Rollup Calculate Job'
        verbose_name_plural = 'Lookup Rollup Calculate Jobs'
        # keyPrefix = 'a0r'



class DlrsLookupRollupSummary2Mdt(models.Model):
    developer_name = models.CharField(max_length=40, verbose_name='Custom Metadata Record Name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=40, verbose_name='Label', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_active = models.BooleanField(db_column='dlrs__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=False, help_text='For Realtime rollups can only be set when the Child Apex Trigger has been deployed.') 
    dlrs_aggregate_all_rows = models.BooleanField(db_column='dlrs__AggregateAllRows__c', custom=True, verbose_name='Aggregate All Rows', sf_read_only=models.READ_ONLY, default=False, help_text='Includes child records that have been archived by the system and/or placed in the recycle bin.') 
    dlrs_aggregate_operation = models.CharField(db_column='dlrs__AggregateOperation__c', custom=True, max_length=32, verbose_name='Aggregate Operation', sf_read_only=models.READ_ONLY, help_text='Rollup operation.', blank=True, null=True) 
    dlrs_aggregate_result_field = models.CharField(db_column='dlrs__AggregateResultField__c', custom=True, max_length=80, verbose_name='Aggregate Result Field', sf_read_only=models.READ_ONLY, help_text='API name of the field that will store the result of the rollup on the Parent Object, e.g. AnnualRevenue') 
    dlrs_calculation_mode = models.CharField(db_column='dlrs__CalculationMode__c', custom=True, max_length=32, verbose_name='Calculation Mode', sf_read_only=models.READ_ONLY, help_text='Realtime and Schedule modes require an Apex Trigger to be deployed for the Child Object. Click Manage Child Trigger button to deploy.', blank=True, null=True) 
    dlrs_calculation_sharing_mode = models.CharField(db_column='dlrs__CalculationSharingMode__c', custom=True, max_length=32, verbose_name='Calculation Sharing Mode', sf_read_only=models.READ_ONLY, help_text='Determines if the Sharing Rules defined on the Child Object are considered when calculating the rollup. Default is User.', blank=True, null=True) 
    dlrs_child_object = models.CharField(db_column='dlrs__ChildObject__c', custom=True, max_length=80, verbose_name='Child Object', sf_read_only=models.READ_ONLY, help_text='API name of the Child Object, e.g. Opportunity') 
    dlrs_concatenate_delimiter = models.CharField(db_column='dlrs__ConcatenateDelimiter__c', custom=True, max_length=32, verbose_name='Concatenate Delimiter', sf_read_only=models.READ_ONLY, help_text='Enter the character or characters to delimit values in the Field to Aggregate when rolling up text values into the Aggregate Result Field, enter BR() for new line. Only applies when using Concatenate operation.', blank=True, null=True) 
    dlrs_description = models.TextField(db_column='dlrs__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_field_to_aggregate = models.CharField(db_column='dlrs__FieldToAggregate__c', custom=True, max_length=80, verbose_name='Field to Aggregate', sf_read_only=models.READ_ONLY, help_text='API name of the field on the Child Object that contains the value to rollup, e.g. Amount') 
    dlrs_field_to_order_by = models.CharField(db_column='dlrs__FieldToOrderBy__c', custom=True, max_length=255, verbose_name='Field to Order By', sf_read_only=models.READ_ONLY, help_text='Only applicable when using the Concatenate, Concatenate Distinct, Last and First aggregate operations. Supports multiple fields (comma separated) with optional ASC/DESC and/or NULLS FIRST/LAST.', blank=True, null=True) 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=80, verbose_name='Parent Object', sf_read_only=models.READ_ONLY, help_text='API name of the Parent Object, e.g. Account') 
    dlrs_relationship_criteria_fields = models.TextField(db_column='dlrs__RelationshipCriteriaFields__c', custom=True, verbose_name='Relationship Criteria Fields', sf_read_only=models.READ_ONLY, help_text="If you have specified a relationship criteria, you must confirm the fields referenced by it here on separate lines, for example for criteria StageName = 'Won' list StageName in this field. You do not need to specify the Field to Aggregate field however.", blank=True, null=True) 
    dlrs_relationship_criteria = models.CharField(db_column='dlrs__RelationshipCriteria__c', custom=True, max_length=255, verbose_name='Relationship Criteria', sf_read_only=models.READ_ONLY, help_text='SOQL WHERE clause applied when querying Child Object records, e.g. Amount > 200', blank=True, null=True) 
    dlrs_relationship_field = models.CharField(db_column='dlrs__RelationshipField__c', custom=True, max_length=80, verbose_name='Relationship Field', sf_read_only=models.READ_ONLY, help_text='API name of the Lookup field on the Child Object relating to the Parent Object, e.g. AccountId') 
    dlrs_row_limit = models.DecimalField(db_column='dlrs__RowLimit__c', custom=True, max_digits=5, decimal_places=0, verbose_name='Row Limit', sf_read_only=models.READ_ONLY, help_text='Limits the number of rows used in the rollup. Applies only to the Last and Concatenate operators.', blank=True, null=True) 
    dlrs_test_code2 = models.TextField(db_column='dlrs__TestCode2__c', custom=True, verbose_name='Test Code', sf_read_only=models.READ_ONLY, help_text='This tool utilises a dynamically generated Apex Trigger and by default a generated Apex Test. Use this field if instructed by a developer to replace the generated test code. See Wiki on GitHub.', blank=True, null=True) 
    dlrs_test_code_see_all_data = models.BooleanField(db_column='dlrs__TestCodeSeeAllData__c', custom=True, verbose_name='Test Code See All Data', sf_read_only=models.READ_ONLY, default=False, help_text='Only use this option as a last resort to get the generated test or custom test code working. It is generally considered bad practice to make your test dependent on org data. Always try to create test data in the test code if possible.') 
    dlrs_test_code = models.TextField(db_column='dlrs__TestCode__c', custom=True, verbose_name='Test Code (Deprecated)', sf_read_only=models.READ_ONLY, help_text='This tool utilises a dynamically generated Apex Trigger and by default a generated Apex Test. Use this field if instructed by a developer to replace the generated test code. See Wiki on GitHub.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummary2__mdt'
        verbose_name = 'Lookup Rollup Summary'
        verbose_name_plural = 'Lookup Rollup Summaries'
        # keyPrefix = 'm00'



class DlrsLookupRollupSummaryLogChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarylogchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarylogchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_error_message = models.TextField(db_column='dlrs__ErrorMessage__c', custom=True, verbose_name='Error Message', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_parent_id = models.CharField(db_column='dlrs__ParentId__c', custom=True, max_length=18, verbose_name='Parent Id', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=60, verbose_name='Parent Object', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_parent_record = models.CharField(db_column='dlrs__ParentRecord__c', custom=True, max_length=3900, verbose_name='Parent Record', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummaryLog__ChangeEvent'
        verbose_name = 'Change Event: Lookup Rollup Summary Log'
        verbose_name_plural = 'Change Event: Lookup Rollup Summary Log'
        # keyPrefix = 'None'



class DlrsLookupRollupSummaryLog(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Summary Log Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarylog_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarylog_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_error_message = models.TextField(db_column='dlrs__ErrorMessage__c', custom=True, verbose_name='Error Message', blank=True, null=True) 
    dlrs_parent_id = models.CharField(db_column='dlrs__ParentId__c', custom=True, unique=True, max_length=18, verbose_name='Parent Id') 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=60, verbose_name='Parent Object', blank=True, null=True) 
    dlrs_parent_record = models.CharField(db_column='dlrs__ParentRecord__c', custom=True, max_length=1300, verbose_name='Parent Record', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummaryLog__c'
        verbose_name = 'Lookup Rollup Summary Log'
        verbose_name_plural = 'Lookup Rollup Summary Logs'
        # keyPrefix = 'a0s'



class DlrsLookupRollupSummaryScheduleItemsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummaryscheduleitemschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummaryscheduleitemschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_lookup_rollup_summary = models.ForeignKey('DlrsLookupRollupSummary', models.DO_NOTHING, db_column='dlrs__LookupRollupSummary__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_lookup_rollup_summary2 = models.CharField(db_column='dlrs__LookupRollupSummary2__c', custom=True, max_length=80, verbose_name='Lookup Rollup Summary 2', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_parent_id = models.CharField(db_column='dlrs__ParentId__c', custom=True, max_length=18, verbose_name='Parent Id', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_parent_record = models.CharField(db_column='dlrs__ParentRecord__c', custom=True, max_length=3900, verbose_name='Parent Record', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_qualified_parent_id = models.CharField(db_column='dlrs__QualifiedParentID__c', custom=True, max_length=40, verbose_name='Qualified Parent ID', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummaryScheduleItems__ChangeEvent'
        verbose_name = 'Change Event: Lookup Rollup Summary Schedule Item'
        verbose_name_plural = 'Change Event: Lookup Rollup Summary Schedule Item'
        # keyPrefix = 'None'



class DlrsLookupRollupSummaryScheduleItems(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Summary Schedule Item Id', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummaryscheduleitems_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummaryscheduleitems_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_lookup_rollup_summary = models.ForeignKey('DlrsLookupRollupSummary', models.DO_NOTHING, db_column='dlrs__LookupRollupSummary__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    dlrs_lookup_rollup_summary2 = models.CharField(db_column='dlrs__LookupRollupSummary2__c', custom=True, max_length=80, verbose_name='Lookup Rollup Summary 2', blank=True, null=True) 
    dlrs_parent_id = models.CharField(db_column='dlrs__ParentId__c', custom=True, max_length=18, verbose_name='Parent Id', blank=True, null=True) 
    dlrs_parent_record = models.CharField(db_column='dlrs__ParentRecord__c', custom=True, max_length=1300, verbose_name='Parent Record', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_qualified_parent_id = models.CharField(db_column='dlrs__QualifiedParentID__c', custom=True, unique=True, max_length=40, verbose_name='Qualified Parent ID') 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummaryScheduleItems__c'
        verbose_name = 'Lookup Rollup Summary Schedule Item'
        verbose_name_plural = 'Lookup Rollup Summary Schedule Items'
        # keyPrefix = 'a0t'



class DlrsLookupRollupSummaryChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarychangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummarychangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_active = models.BooleanField(db_column='dlrs__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=False, help_text='For Realtime rollups can only be set when the Child Apex Trigger has been deployed.') 
    dlrs_aggregate_all_rows = models.BooleanField(db_column='dlrs__AggregateAllRows__c', custom=True, verbose_name='Aggregate All Rows', sf_read_only=models.READ_ONLY, default=False, help_text='Includes child records that have been archived by the system and/or placed in the recycle bin.') 
    dlrs_aggregate_operation = models.CharField(db_column='dlrs__AggregateOperation__c', custom=True, max_length=255, verbose_name='Aggregate Operation', sf_read_only=models.READ_ONLY, default='Sum', help_text='Rollup operation.', choices=[('Sum', 'Sum'), ('Max', 'Max'), ('Min', 'Min'), ('Avg', 'Avg'), ('Count', 'Count'), ('Count Distinct', 'Count Distinct'), ('Concatenate', 'Concatenate'), ('Concatenate Distinct', 'Concatenate Distinct'), ('First', 'First'), ('Last', 'Last')], blank=True, null=True) 
    dlrs_aggregate_result_field = models.CharField(db_column='dlrs__AggregateResultField__c', custom=True, max_length=80, verbose_name='Aggregate Result Field', sf_read_only=models.READ_ONLY, help_text='API name of the field that will store the result of the rollup on the Parent Object, e.g. AnnualRevenue', blank=True, null=True) 
    dlrs_calculate_job_id = models.CharField(db_column='dlrs__CalculateJobId__c', custom=True, max_length=18, verbose_name='Calculate Job Id', sf_read_only=models.READ_ONLY, help_text='This field is used by the system when using the Calculate button to track if a calculation job is already running. Clear this field if the system reports the calculate job is already running and you known this is not the case.', blank=True, null=True) 
    dlrs_calculation_mode = models.CharField(db_column='dlrs__CalculationMode__c', custom=True, max_length=255, verbose_name='Calculation Mode', sf_read_only=models.READ_ONLY, default='Realtime', help_text='Realtime and Schedule modes require an Apex Trigger to be deployed for the Child Object. Click Manage Child Trigger button to deploy.', choices=[('Realtime', 'Realtime'), ('Scheduled', 'Scheduled'), ('Developer', 'Developer'), ('Process Builder', 'Process Builder')], blank=True, null=True) 
    dlrs_calculation_sharing_mode = models.CharField(db_column='dlrs__CalculationSharingMode__c', custom=True, max_length=255, verbose_name='Calculation Sharing Mode', sf_read_only=models.READ_ONLY, default='User', help_text='Determines if the Sharing Rules defined on the Child Object are considered when calculating the rollup. Default is User.', choices=[('User', 'User'), ('System', 'System')], blank=True, null=True) 
    dlrs_child_object = models.CharField(db_column='dlrs__ChildObject__c', custom=True, max_length=80, verbose_name='Child Object', sf_read_only=models.READ_ONLY, help_text='API name of the Child Object, e.g. Opportunity', blank=True, null=True) 
    dlrs_concatenate_delimiter = models.CharField(db_column='dlrs__ConcatenateDelimiter__c', custom=True, max_length=32, verbose_name='Concatenate Delimiter', sf_read_only=models.READ_ONLY, help_text='Enter the character or characters to delimit values in the Field to Aggregate when rolling up text values into the Aggregate Result Field, enter BR() for new line. Only applies when using Concatenate operation.', blank=True, null=True) 
    dlrs_description = models.TextField(db_column='dlrs__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    dlrs_field_to_aggregate = models.CharField(db_column='dlrs__FieldToAggregate__c', custom=True, max_length=80, verbose_name='Field to Aggregate', sf_read_only=models.READ_ONLY, help_text='API name of the field on the Child Object that contains the value to rollup, e.g. Amount', blank=True, null=True) 
    dlrs_field_to_order_by = models.CharField(db_column='dlrs__FieldToOrderBy__c', custom=True, max_length=255, verbose_name='Field to Order By', sf_read_only=models.READ_ONLY, help_text='Only applicable when using the Concatenate, Concatenate Distinct, Last and First aggregate operations. Supports multiple fields (comma separated) with optional ASC/DESC and/or NULLS FIRST/LAST.', blank=True, null=True) 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=80, verbose_name='Parent Object', sf_read_only=models.READ_ONLY, help_text='API name of the Parent Object, e.g. Account', blank=True, null=True) 
    dlrs_relationship_criteria_fields = models.TextField(db_column='dlrs__RelationshipCriteriaFields__c', custom=True, verbose_name='Relationship Criteria Fields', sf_read_only=models.READ_ONLY, help_text="If you have specified a relationship criteria, you must confirm the fields referenced by it here on separate lines, for example for criteria StageName = 'Won' list StageName in this field. You do not need to specify the Field to Aggregate field however.", blank=True, null=True) 
    dlrs_relationship_criteria = models.CharField(db_column='dlrs__RelationshipCriteria__c', custom=True, max_length=255, verbose_name='Relationship Criteria', sf_read_only=models.READ_ONLY, help_text='SOQL WHERE clause applied when querying Child Object records, e.g. Amount > 200', blank=True, null=True) 
    dlrs_relationship_field = models.CharField(db_column='dlrs__RelationshipField__c', custom=True, max_length=80, verbose_name='Relationship Field', sf_read_only=models.READ_ONLY, help_text='API name of the Lookup field on the Child Object relating to the Parent Object, e.g. AccountId', blank=True, null=True) 
    dlrs_row_limit = models.DecimalField(db_column='dlrs__RowLimit__c', custom=True, max_digits=5, decimal_places=0, verbose_name='Row Limit', sf_read_only=models.READ_ONLY, help_text='Limits the number of rows used in the rollup. Applies only to the Last and Concatenate operators.', blank=True, null=True) 
    dlrs_test_code_see_all_data = models.BooleanField(db_column='dlrs__TestCodeSeeAllData__c', custom=True, verbose_name='Test Code See All Data', sf_read_only=models.READ_ONLY, default=False, help_text='Only use this option as a last resort to get the generated test or custom test code working. It is generally considered bad practice to make your test dependent on org data. Always try to create test data in the test code if possible.') 
    dlrs_test_code = models.TextField(db_column='dlrs__TestCode__c', custom=True, verbose_name='Test Code', sf_read_only=models.READ_ONLY, help_text='This tool utilises a dynamically generated Apex Trigger and by default a generated Apex Test. Use this field if instructed by a developer to replace the generated test code. For more information see the tools Wiki on GitHub.', blank=True, null=True) 
    dlrs_unique_name = models.CharField(db_column='dlrs__UniqueName__c', custom=True, max_length=80, verbose_name='Lookup Rollup Summary Unique Name', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummary__ChangeEvent'
        verbose_name = 'Change Event: Lookup Rollup Summary'
        verbose_name_plural = 'Change Event: Lookup Rollup Summary'
        # keyPrefix = 'None'



class DlrsLookupRollupSummary(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Lookup Rollup Summary Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummary_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='dlrslookuprollupsummary_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    dlrs_active = models.BooleanField(db_column='dlrs__Active__c', custom=True, verbose_name='Active', default=models.DEFAULTED_ON_CREATE, help_text='For Realtime rollups can only be set when the Child Apex Trigger has been deployed.') 
    dlrs_aggregate_all_rows = models.BooleanField(db_column='dlrs__AggregateAllRows__c', custom=True, verbose_name='Aggregate All Rows', default=models.DEFAULTED_ON_CREATE, help_text='Includes child records that have been archived by the system and/or placed in the recycle bin.') 
    dlrs_aggregate_operation = models.CharField(db_column='dlrs__AggregateOperation__c', custom=True, max_length=255, verbose_name='Aggregate Operation', default=models.DEFAULTED_ON_CREATE, help_text='Rollup operation.', choices=[('Sum', 'Sum'), ('Max', 'Max'), ('Min', 'Min'), ('Avg', 'Avg'), ('Count', 'Count'), ('Count Distinct', 'Count Distinct'), ('Concatenate', 'Concatenate'), ('Concatenate Distinct', 'Concatenate Distinct'), ('First', 'First'), ('Last', 'Last')], blank=True, null=True) 
    dlrs_aggregate_result_field = models.CharField(db_column='dlrs__AggregateResultField__c', custom=True, max_length=80, verbose_name='Aggregate Result Field', help_text='API name of the field that will store the result of the rollup on the Parent Object, e.g. AnnualRevenue') 
    dlrs_calculate_job_id = models.CharField(db_column='dlrs__CalculateJobId__c', custom=True, max_length=18, verbose_name='Calculate Job Id', help_text='This field is used by the system when using the Calculate button to track if a calculation job is already running. Clear this field if the system reports the calculate job is already running and you known this is not the case.', blank=True, null=True) 
    dlrs_calculation_mode = models.CharField(db_column='dlrs__CalculationMode__c', custom=True, max_length=255, verbose_name='Calculation Mode', default=models.DEFAULTED_ON_CREATE, help_text='Realtime and Schedule modes require an Apex Trigger to be deployed for the Child Object. Click Manage Child Trigger button to deploy.', choices=[('Realtime', 'Realtime'), ('Scheduled', 'Scheduled'), ('Developer', 'Developer'), ('Process Builder', 'Process Builder')], blank=True, null=True) 
    dlrs_calculation_sharing_mode = models.CharField(db_column='dlrs__CalculationSharingMode__c', custom=True, max_length=255, verbose_name='Calculation Sharing Mode', default=models.DEFAULTED_ON_CREATE, help_text='Determines if the Sharing Rules defined on the Child Object are considered when calculating the rollup. Default is User.', choices=[('User', 'User'), ('System', 'System')], blank=True, null=True) 
    dlrs_child_object = models.CharField(db_column='dlrs__ChildObject__c', custom=True, max_length=80, verbose_name='Child Object', help_text='API name of the Child Object, e.g. Opportunity') 
    dlrs_concatenate_delimiter = models.CharField(db_column='dlrs__ConcatenateDelimiter__c', custom=True, max_length=32, verbose_name='Concatenate Delimiter', help_text='Enter the character or characters to delimit values in the Field to Aggregate when rolling up text values into the Aggregate Result Field, enter BR() for new line. Only applies when using Concatenate operation.', blank=True, null=True) 
    dlrs_description = models.TextField(db_column='dlrs__Description__c', custom=True, verbose_name='Description', blank=True, null=True) 
    dlrs_field_to_aggregate = models.CharField(db_column='dlrs__FieldToAggregate__c', custom=True, max_length=80, verbose_name='Field to Aggregate', help_text='API name of the field on the Child Object that contains the value to rollup, e.g. Amount') 
    dlrs_field_to_order_by = models.CharField(db_column='dlrs__FieldToOrderBy__c', custom=True, max_length=255, verbose_name='Field to Order By', help_text='Only applicable when using the Concatenate, Concatenate Distinct, Last and First aggregate operations. Supports multiple fields (comma separated) with optional ASC/DESC and/or NULLS FIRST/LAST.', blank=True, null=True) 
    dlrs_parent_object = models.CharField(db_column='dlrs__ParentObject__c', custom=True, max_length=80, verbose_name='Parent Object', help_text='API name of the Parent Object, e.g. Account') 
    dlrs_relationship_criteria_fields = models.TextField(db_column='dlrs__RelationshipCriteriaFields__c', custom=True, verbose_name='Relationship Criteria Fields', help_text="If you have specified a relationship criteria, you must confirm the fields referenced by it here on separate lines, for example for criteria StageName = 'Won' list StageName in this field. You do not need to specify the Field to Aggregate field however.", blank=True, null=True) 
    dlrs_relationship_criteria = models.CharField(db_column='dlrs__RelationshipCriteria__c', custom=True, max_length=255, verbose_name='Relationship Criteria', help_text='SOQL WHERE clause applied when querying Child Object records, e.g. Amount > 200', blank=True, null=True) 
    dlrs_relationship_field = models.CharField(db_column='dlrs__RelationshipField__c', custom=True, max_length=80, verbose_name='Relationship Field', help_text='API name of the Lookup field on the Child Object relating to the Parent Object, e.g. AccountId') 
    dlrs_row_limit = models.DecimalField(db_column='dlrs__RowLimit__c', custom=True, max_digits=5, decimal_places=0, verbose_name='Row Limit', help_text='Limits the number of rows used in the rollup. Applies only to the Last and Concatenate operators.', blank=True, null=True) 
    dlrs_test_code_see_all_data = models.BooleanField(db_column='dlrs__TestCodeSeeAllData__c', custom=True, verbose_name='Test Code See All Data', default=models.DEFAULTED_ON_CREATE, help_text='Only use this option as a last resort to get the generated test or custom test code working. It is generally considered bad practice to make your test dependent on org data. Always try to create test data in the test code if possible.') 
    dlrs_test_code = models.TextField(db_column='dlrs__TestCode__c', custom=True, verbose_name='Test Code', help_text='This tool utilises a dynamically generated Apex Trigger and by default a generated Apex Test. Use this field if instructed by a developer to replace the generated test code. For more information see the tools Wiki on GitHub.', blank=True, null=True) 
    dlrs_unique_name = models.CharField(db_column='dlrs__UniqueName__c', custom=True, unique=True, max_length=80, verbose_name='Lookup Rollup Summary Unique Name', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'dlrs__LookupRollupSummary__c'
        verbose_name = 'Lookup Rollup Summary'
        verbose_name_plural = 'Lookup Rollup Summaries'
        # keyPrefix = 'a0u'



class Npe01ContactsAndOrgsSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01contactsandorgssettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01contactsandorgssettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_account_processor = models.CharField(db_column='npe01__Account_Processor__c', custom=True, max_length=255, verbose_name='Account Model', sf_read_only=models.READ_ONLY, help_text='Setting for the Account model. Should be "Household Account", "One-to-One", or "Individual". Replaces the custom field Contact.SystemAccountProcessor__c.  "Household Account" is the recommended model.', blank=True, null=True) 
    npe01_disable_individual_accounts_trigger = models.BooleanField(db_column='npe01__DISABLE_IndividualAccounts_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_IndividualAcc_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_disable_opportunity_account_trigger = models.BooleanField(db_column='npe01__DISABLE_OpportunityAccount_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OppAccount_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_disable_opportunity_contact_roles_trigger = models.BooleanField(db_column='npe01__DISABLE_OpportunityContactRoles_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OCR_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_disable_opportunity_payments_trigger = models.BooleanField(db_column='npe01__DISABLE_OpportunityPayments_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OppPayments_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_default_opp_on_convert = models.BooleanField(db_column='npe01__Default_Opp_on_Convert__c', custom=True, verbose_name='Create Opportunity on Lead Convert', sf_read_only=models.READ_ONLY, default=False, help_text='Specifies whether to create an Opportunity during Lead conversion.') 
    npe01_disable_account_model_trigger = models.BooleanField(db_column='npe01__Disable_Account_Model_Trigger__c', custom=True, verbose_name='DEPRECATED-Disable Account Model Trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_enable_opportunity_contact_role_trigger = models.BooleanField(db_column='npe01__Enable_Opportunity_Contact_Role_Trigger__c', custom=True, verbose_name='DEPRECATED-Enable OppContactRole Trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_enable_update_check = models.BooleanField(db_column='npe01__Enable_Update_Check__c', custom=True, verbose_name='DEPRECATED-Enable Update Check', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.') 
    npe01_hh_account_record_type_id = models.CharField(db_column='npe01__HH_Account_RecordTypeID__c', custom=True, max_length=18, verbose_name='Household Account Record Type', sf_read_only=models.READ_ONLY, help_text="The ID of the Account Record Type to be used for Household Accounts. If none is selected, the Account will default to the user's default Account Record Type.", blank=True, null=True) 
    npe01_has_package_update = models.CharField(db_column='npe01__Has_Package_Update__c', custom=True, max_length=40, verbose_name='DEPRECATED-Has Package Update', sf_read_only=models.READ_ONLY, help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_last_update_check = models.DateTimeField(db_column='npe01__Last_Update_Check__c', custom=True, verbose_name='DEPRECATED-Last Update Check', sf_read_only=models.READ_ONLY, help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_max_package_version = models.CharField(db_column='npe01__Max_Package_Version__c', custom=True, max_length=10, verbose_name='DEPRECATED-Max Package Version', sf_read_only=models.READ_ONLY, help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_one_to_one_record_type_id = models.CharField(db_column='npe01__One_to_One_RecordTypeID__c', custom=True, max_length=18, verbose_name='One-to-One Record Type', sf_read_only=models.READ_ONLY, help_text="The ID of the Account Record Type to be used for One-to-One Accounts.  If none is selected, the Account will default to the user's default Account Record Type.", blank=True, null=True) 
    npe01_opportunity_contact_role_default_role = models.CharField(db_column='npe01__Opportunity_Contact_Role_Default_role__c', custom=True, max_length=255, verbose_name='Contact Role for Individual Opps', sf_read_only=models.READ_ONLY, help_text='The default Contact Role automatically assigned to the Primary Contact for the Opportunity.', blank=True, null=True) 
    npe01_package_update_url = models.URLField(db_column='npe01__Package_Update_URL__c', custom=True, verbose_name='DEPRECATED-Package Update URL', sf_read_only=models.READ_ONLY, help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_payments_enabled = models.BooleanField(db_column='npe01__Payments_Enabled__c', custom=True, verbose_name='Automatic Payment Creation', sf_read_only=models.READ_ONLY, default=False, help_text='If enabled, Salesforce automatically creates Payments for new Opportunities (Donations).') 
    npe01_update_check_interval = models.DecimalField(db_column='npe01__Update_Check_Interval__c', custom=True, max_digits=18, decimal_places=0, verbose_name='DEPRECATED-Update Check Interval', sf_read_only=models.READ_ONLY, help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npsp_automatic_campaign_member_management = models.BooleanField(db_column='npsp__Automatic_Campaign_Member_Management__c', custom=True, verbose_name='Automatic Campaign Member Management', sf_read_only=models.READ_ONLY, default=False, help_text='Automatically creates a Campaign Member when you create an Opportunity that has a Primary Contact and a Primary Campaign source associated with it, or update that Opportunity with a Closed/Won stage.') 
    npsp_campaign_member_non_responded_status = models.CharField(db_column='npsp__Campaign_Member_Non_Responded_Status__c', custom=True, max_length=255, verbose_name='Campaign Member Non Responded Status', sf_read_only=models.READ_ONLY, help_text='The automatic Status of a Campaign Member for Open or Closed/Lost opportunities that have a Primary Contact and a Primary Campaign Source associated with them. If left blank, Salesforce uses the first non-Responded status.', blank=True, null=True) 
    npsp_campaign_member_responded_status = models.CharField(db_column='npsp__Campaign_Member_Responded_Status__c', custom=True, max_length=255, verbose_name='Campaign Member Responded Status', sf_read_only=models.READ_ONLY, help_text='The automatic Status of the Campaign Member for Closed/Won opportunities that have a Primary Contact and a Primary Campaign Source associated with them. If left blank, Salesforce uses the first Responded status.', blank=True, null=True) 
    npsp_honoree_opportunity_contact_role = models.CharField(db_column='npsp__Honoree_Opportunity_Contact_Role__c', custom=True, max_length=255, verbose_name='Honoree Opportunity Contact Role', sf_read_only=models.READ_ONLY, help_text='Populating this setting will automatically create a Contact Role for Opportunities with an honoree Contact. Leaving this field blank will disable automatic Contact Role creation for the honoree.', blank=True, null=True) 
    npsp_household_account_addresses_disabled = models.BooleanField(db_column='npsp__Household_Account_Addresses_Disabled__c', custom=True, verbose_name='Household Account Addresses Disabled', sf_read_only=models.READ_ONLY, default=False, help_text='Disables Address management for Household Accounts when selected.') 
    npsp_max_payments = models.DecimalField(db_column='npsp__Max_Payments__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Max Payments', sf_read_only=models.READ_ONLY, help_text='Determines the maximum number of payments available in the Payment Creation Wizard.', blank=True, null=True) 
    npsp_notification_recipient_opp_contact_role = models.CharField(db_column='npsp__Notification_Recipient_Opp_Contact_Role__c', custom=True, max_length=255, verbose_name='Notification Recipient Opp Contact Role', sf_read_only=models.READ_ONLY, help_text='Populating this setting will automatically create a Contact Role for Opportunities with a notification recipient Contact. Leaving this field blank will disable automatic Contact Role creation for the notification recipient.', blank=True, null=True) 
    npsp_opp_rec_types_excluded_for_payments = models.CharField(db_column='npsp__Opp_RecTypes_Excluded_for_Payments__c', custom=True, max_length=255, verbose_name='Excluded Opp Record Types', sf_read_only=models.READ_ONLY, help_text="Salesforce won't automatically create Payments for the selected Opportunity record types. Control or Command click to select more than one record type.", blank=True, null=True) 
    npsp_opp_types_excluded_for_payments = models.CharField(db_column='npsp__Opp_Types_Excluded_for_Payments__c', custom=True, max_length=255, verbose_name='Excluded Opp Types', sf_read_only=models.READ_ONLY, help_text="Salesforce won't automatically create Payments for Opportunities that have this value in the Type picklist.", blank=True, null=True) 
    npsp_organizational_account_addresses_enabled = models.BooleanField(db_column='npsp__Organizational_Account_Addresses_Enabled__c', custom=True, verbose_name='Organizational Account Addresses Enabled', sf_read_only=models.READ_ONLY, default=False, help_text='Enables Address management for Organizational Accounts when selected.') 
    npsp_payments_auto_close_stage_name = models.CharField(db_column='npsp__Payments_Auto_Close_Stage_Name__c', custom=True, max_length=255, verbose_name='Opportunity Stage for When Fully Paid', sf_read_only=models.READ_ONLY, help_text="Salesforce automatically sets an Opportunity's Stage to this value when the Payment Amount Received is equal to the Opportunity Amount. If no stage is selected, the Opportunity Stage won't change when payments are complete.", blank=True, null=True) 
    npsp_simple_address_change_treated_as_update = models.BooleanField(db_column='npsp__Simple_Address_Change_Treated_as_Update__c', custom=True, verbose_name='Simple Address Change Treated as Update', sf_read_only=models.READ_ONLY, default=False, help_text='If checked, changes to a single Contact or Account address field update the existing Address, rather than creating a new Address.') 
    npsp_advancement_namespace = models.CharField(db_column='npsp__Advancement_Namespace__c', custom=True, max_length=10, verbose_name='GEM Namespace', sf_read_only=models.READ_ONLY, help_text='For system use only: Namespace for cross package functionality.', blank=True, null=True) 
    npsp_contact_role_for_organizational_opps = models.CharField(db_column='npsp__Contact_Role_for_Organizational_Opps__c', custom=True, max_length=255, verbose_name='Contact Role for Organizational Opps', sf_read_only=models.READ_ONLY, help_text="The default Contact Role automatically assigned to the Opportunity's Primary Contact when the Opportunity's Account is NOT a Household, One-to-One, or Individual Account.", blank=True, null=True) 
    npsp_enforce_accounting_data_consistency = models.BooleanField(db_column='npsp__Enforce_Accounting_Data_Consistency__c', custom=True, verbose_name='Enforce Accounting Data Consistency', sf_read_only=models.READ_ONLY, default=False, help_text='Enables multiple rules and automations on payments and opportunities to ensure that accounting data is complete and consistent.') 
    class Meta(models.Model.Meta):
        db_table = 'npe01__Contacts_And_Orgs_Settings__ChangeEvent'
        verbose_name = 'Change Event: Contacts And Orgs Settings'
        verbose_name_plural = 'Change Event: Contacts And Orgs Settings'
        # keyPrefix = 'None'



class Npe01ContactsAndOrgsSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01contactsandorgssettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01contactsandorgssettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe01_account_processor = models.CharField(db_column='npe01__Account_Processor__c', custom=True, max_length=255, verbose_name='Account Model', help_text='Setting for the Account model. Should be "Household Account", "One-to-One", or "Individual". Replaces the custom field Contact.SystemAccountProcessor__c.  "Household Account" is the recommended model.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npe01_disable_individual_accounts_trigger = models.BooleanField(db_column='npe01__DISABLE_IndividualAccounts_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_IndividualAcc_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_disable_opportunity_account_trigger = models.BooleanField(db_column='npe01__DISABLE_OpportunityAccount_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OppAccount_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_disable_opportunity_contact_roles_trigger = models.BooleanField(db_column='npe01__DISABLE_OpportunityContactRoles_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OCR_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_disable_opportunity_payments_trigger = models.BooleanField(db_column='npe01__DISABLE_OpportunityPayments_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OppPayments_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_default_opp_on_convert = models.BooleanField(db_column='npe01__Default_Opp_on_Convert__c', custom=True, verbose_name='Create Opportunity on Lead Convert', default=models.DEFAULTED_ON_CREATE, help_text='Specifies whether to create an Opportunity during Lead conversion.') 
    npe01_disable_account_model_trigger = models.BooleanField(db_column='npe01__Disable_Account_Model_Trigger__c', custom=True, verbose_name='DEPRECATED-Disable Account Model Trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_enable_opportunity_contact_role_trigger = models.BooleanField(db_column='npe01__Enable_Opportunity_Contact_Role_Trigger__c', custom=True, verbose_name='DEPRECATED-Enable OppContactRole Trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe01_enable_update_check = models.BooleanField(db_column='npe01__Enable_Update_Check__c', custom=True, verbose_name='DEPRECATED-Enable Update Check', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.') 
    npe01_hh_account_record_type_id = models.CharField(db_column='npe01__HH_Account_RecordTypeID__c', custom=True, max_length=18, verbose_name='Household Account Record Type', help_text="The ID of the Account Record Type to be used for Household Accounts. If none is selected, the Account will default to the user's default Account Record Type.", blank=True, null=True) 
    npe01_has_package_update = models.CharField(db_column='npe01__Has_Package_Update__c', custom=True, max_length=40, verbose_name='DEPRECATED-Has Package Update', help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_last_update_check = models.DateTimeField(db_column='npe01__Last_Update_Check__c', custom=True, verbose_name='DEPRECATED-Last Update Check', help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_max_package_version = models.CharField(db_column='npe01__Max_Package_Version__c', custom=True, max_length=10, verbose_name='DEPRECATED-Max Package Version', help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_one_to_one_record_type_id = models.CharField(db_column='npe01__One_to_One_RecordTypeID__c', custom=True, max_length=18, verbose_name='One-to-One Record Type', help_text="The ID of the Account Record Type to be used for One-to-One Accounts.  If none is selected, the Account will default to the user's default Account Record Type.", blank=True, null=True) 
    npe01_opportunity_contact_role_default_role = models.CharField(db_column='npe01__Opportunity_Contact_Role_Default_role__c', custom=True, max_length=255, verbose_name='Contact Role for Individual Opps', help_text='The default Contact Role automatically assigned to the Primary Contact for the Opportunity.', blank=True, null=True) 
    npe01_package_update_url = models.URLField(db_column='npe01__Package_Update_URL__c', custom=True, verbose_name='DEPRECATED-Package Update URL', help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npe01_payments_enabled = models.BooleanField(db_column='npe01__Payments_Enabled__c', custom=True, verbose_name='Automatic Payment Creation', default=models.DEFAULTED_ON_CREATE, help_text='If enabled, Salesforce automatically creates Payments for new Opportunities (Donations).') 
    npe01_update_check_interval = models.DecimalField(db_column='npe01__Update_Check_Interval__c', custom=True, max_digits=18, decimal_places=0, verbose_name='DEPRECATED-Update Check Interval', help_text='DEPRECATED.  New versions of the Nonprofit Success Pack will be automatically installed.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_automatic_campaign_member_management = models.BooleanField(db_column='npsp__Automatic_Campaign_Member_Management__c', custom=True, verbose_name='Automatic Campaign Member Management', default=models.DEFAULTED_ON_CREATE, help_text='Automatically creates a Campaign Member when you create an Opportunity that has a Primary Contact and a Primary Campaign source associated with it, or update that Opportunity with a Closed/Won stage.') 
    npsp_campaign_member_non_responded_status = models.CharField(db_column='npsp__Campaign_Member_Non_Responded_Status__c', custom=True, max_length=255, verbose_name='Campaign Member Non Responded Status', help_text='The automatic Status of a Campaign Member for Open or Closed/Lost opportunities that have a Primary Contact and a Primary Campaign Source associated with them. If left blank, Salesforce uses the first non-Responded status.', blank=True, null=True) 
    npsp_campaign_member_responded_status = models.CharField(db_column='npsp__Campaign_Member_Responded_Status__c', custom=True, max_length=255, verbose_name='Campaign Member Responded Status', help_text='The automatic Status of the Campaign Member for Closed/Won opportunities that have a Primary Contact and a Primary Campaign Source associated with them. If left blank, Salesforce uses the first Responded status.', blank=True, null=True) 
    npsp_honoree_opportunity_contact_role = models.CharField(db_column='npsp__Honoree_Opportunity_Contact_Role__c', custom=True, max_length=255, verbose_name='Honoree Opportunity Contact Role', help_text='Populating this setting will automatically create a Contact Role for Opportunities with an honoree Contact. Leaving this field blank will disable automatic Contact Role creation for the honoree.', blank=True, null=True) 
    npsp_household_account_addresses_disabled = models.BooleanField(db_column='npsp__Household_Account_Addresses_Disabled__c', custom=True, verbose_name='Household Account Addresses Disabled', default=models.DEFAULTED_ON_CREATE, help_text='Disables Address management for Household Accounts when selected.') 
    npsp_max_payments = models.DecimalField(db_column='npsp__Max_Payments__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Max Payments', help_text='Determines the maximum number of payments available in the Payment Creation Wizard.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_notification_recipient_opp_contact_role = models.CharField(db_column='npsp__Notification_Recipient_Opp_Contact_Role__c', custom=True, max_length=255, verbose_name='Notification Recipient Opp Contact Role', help_text='Populating this setting will automatically create a Contact Role for Opportunities with a notification recipient Contact. Leaving this field blank will disable automatic Contact Role creation for the notification recipient.', blank=True, null=True) 
    npsp_opp_rec_types_excluded_for_payments = models.CharField(db_column='npsp__Opp_RecTypes_Excluded_for_Payments__c', custom=True, max_length=255, verbose_name='Excluded Opp Record Types', help_text="Salesforce won't automatically create Payments for the selected Opportunity record types. Control or Command click to select more than one record type.", blank=True, null=True) 
    npsp_opp_types_excluded_for_payments = models.CharField(db_column='npsp__Opp_Types_Excluded_for_Payments__c', custom=True, max_length=255, verbose_name='Excluded Opp Types', help_text="Salesforce won't automatically create Payments for Opportunities that have this value in the Type picklist.", blank=True, null=True) 
    npsp_organizational_account_addresses_enabled = models.BooleanField(db_column='npsp__Organizational_Account_Addresses_Enabled__c', custom=True, verbose_name='Organizational Account Addresses Enabled', default=models.DEFAULTED_ON_CREATE, help_text='Enables Address management for Organizational Accounts when selected.') 
    npsp_payments_auto_close_stage_name = models.CharField(db_column='npsp__Payments_Auto_Close_Stage_Name__c', custom=True, max_length=255, verbose_name='Opportunity Stage for When Fully Paid', help_text="Salesforce automatically sets an Opportunity's Stage to this value when the Payment Amount Received is equal to the Opportunity Amount. If no stage is selected, the Opportunity Stage won't change when payments are complete.", blank=True, null=True) 
    npsp_simple_address_change_treated_as_update = models.BooleanField(db_column='npsp__Simple_Address_Change_Treated_as_Update__c', custom=True, verbose_name='Simple Address Change Treated as Update', default=models.DEFAULTED_ON_CREATE, help_text='If checked, changes to a single Contact or Account address field update the existing Address, rather than creating a new Address.') 
    npsp_advancement_namespace = models.CharField(db_column='npsp__Advancement_Namespace__c', custom=True, max_length=10, verbose_name='GEM Namespace', help_text='For system use only: Namespace for cross package functionality.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_contact_role_for_organizational_opps = models.CharField(db_column='npsp__Contact_Role_for_Organizational_Opps__c', custom=True, max_length=255, verbose_name='Contact Role for Organizational Opps', help_text="The default Contact Role automatically assigned to the Opportunity's Primary Contact when the Opportunity's Account is NOT a Household, One-to-One, or Individual Account.", blank=True, null=True) 
    npsp_enforce_accounting_data_consistency = models.BooleanField(db_column='npsp__Enforce_Accounting_Data_Consistency__c', custom=True, verbose_name='Enforce Accounting Data Consistency', default=models.DEFAULTED_ON_CREATE, help_text='Enables multiple rules and automations on payments and opportunities to ensure that accounting data is complete and consistent.') 
    class Meta(models.Model.Meta):
        db_table = 'npe01__Contacts_And_Orgs_Settings__c'
        verbose_name = 'Contacts And Orgs Settings'
        verbose_name_plural = 'Contacts And Orgs Settings'
        # keyPrefix = 'a00'



class Npe01OppPaymentChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01opppaymentchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01opppaymentchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npe01__Opportunity__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_check_reference_number = models.CharField(db_column='npe01__Check_Reference_Number__c', custom=True, max_length=255, verbose_name='Check/Reference Number', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_custom_payment_field = models.CharField(db_column='npe01__Custom_Payment_Field__c', custom=True, max_length=15, verbose_name='Custom Payment Field', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_paid = models.BooleanField(db_column='npe01__Paid__c', custom=True, verbose_name='Paid', sf_read_only=models.READ_ONLY, default=False) 
    npe01_payment_amount = models.DecimalField(db_column='npe01__Payment_Amount__c', custom=True, max_digits=14, decimal_places=2, verbose_name='Payment Amount', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_payment_date = models.DateField(db_column='npe01__Payment_Date__c', custom=True, verbose_name='Payment Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_payment_method = models.CharField(db_column='npe01__Payment_Method__c', custom=True, max_length=255, verbose_name='Payment Method', sf_read_only=models.READ_ONLY, choices=[('Cash', 'Cash'), ('Check', 'Check'), ('Credit Card', 'Credit Card')], blank=True, null=True) 
    npe01_scheduled_date = models.DateField(db_column='npe01__Scheduled_Date__c', custom=True, verbose_name='Scheduled Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_written_off = models.BooleanField(db_column='npe01__Written_Off__c', custom=True, verbose_name='Written Off', sf_read_only=models.READ_ONLY, default=False) 
    npsp_payment_acknowledged_date = models.DateField(db_column='npsp__Payment_Acknowledged_Date__c', custom=True, verbose_name='Payment Acknowledged Date', sf_read_only=models.READ_ONLY, help_text='Date of acknowledgment', blank=True, null=True) 
    npsp_payment_acknowledgment_status = models.CharField(db_column='npsp__Payment_Acknowledgment_Status__c', custom=True, max_length=255, verbose_name='Payment Acknowledgment Status', sf_read_only=models.READ_ONLY, help_text='Status of Acknowledgment of this payment.', choices=[('To Be Acknowledged', 'To Be Acknowledged'), ('Acknowledged', 'Acknowledged'), ('Do Not Acknowledge', 'Do Not Acknowledge')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe01__OppPayment__ChangeEvent'
        verbose_name = 'Change Event: Payment'
        verbose_name_plural = 'Change Event: Payment'
        # keyPrefix = 'None'



class Npe01OppPayment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Payment Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01opppayment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01opppayment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npe01__Opportunity__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    npe01_check_reference_number = models.CharField(db_column='npe01__Check_Reference_Number__c', custom=True, max_length=255, verbose_name='Check/Reference Number', blank=True, null=True) 
    npe01_custom_payment_field = models.CharField(db_column='npe01__Custom_Payment_Field__c', custom=True, max_length=15, verbose_name='Custom Payment Field', blank=True, null=True) 
    npe01_paid = models.BooleanField(db_column='npe01__Paid__c', custom=True, verbose_name='Paid', default=models.DEFAULTED_ON_CREATE) 
    npe01_payment_amount = models.DecimalField(db_column='npe01__Payment_Amount__c', custom=True, max_digits=14, decimal_places=2, verbose_name='Payment Amount', blank=True, null=True) 
    npe01_payment_date = models.DateField(db_column='npe01__Payment_Date__c', custom=True, verbose_name='Payment Date', blank=True, null=True) 
    npe01_payment_method = models.CharField(db_column='npe01__Payment_Method__c', custom=True, max_length=255, verbose_name='Payment Method', choices=[('Cash', 'Cash'), ('Check', 'Check'), ('Credit Card', 'Credit Card')], blank=True, null=True) 
    npe01_scheduled_date = models.DateField(db_column='npe01__Scheduled_Date__c', custom=True, verbose_name='Scheduled Date', blank=True, null=True) 
    npe01_written_off = models.BooleanField(db_column='npe01__Written_Off__c', custom=True, verbose_name='Written Off', default=models.DEFAULTED_ON_CREATE) 
    npsp_payment_acknowledged_date = models.DateField(db_column='npsp__Payment_Acknowledged_Date__c', custom=True, verbose_name='Payment Acknowledged Date', help_text='Date of acknowledgment', blank=True, null=True) 
    npsp_payment_acknowledgment_status = models.CharField(db_column='npsp__Payment_Acknowledgment_Status__c', custom=True, max_length=255, verbose_name='Payment Acknowledgment Status', help_text='Status of Acknowledgment of this payment.', choices=[('To Be Acknowledged', 'To Be Acknowledged'), ('Acknowledged', 'Acknowledged'), ('Do Not Acknowledge', 'Do Not Acknowledge')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe01__OppPayment__c'
        verbose_name = 'Payment'
        verbose_name_plural = 'Payments'
        # keyPrefix = 'a01'



class Npe01PaymentFieldMappingSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01paymentfieldmappingsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01paymentfieldmappingsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_opportunity_field = models.CharField(db_column='npe01__Opportunity_Field__c', custom=True, max_length=255, verbose_name='Opportunity Field', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe01_payment_field = models.CharField(db_column='npe01__Payment_Field__c', custom=True, max_length=255, verbose_name='Payment Field', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe01__Payment_Field_Mapping_Settings__ChangeEvent'
        verbose_name = 'Change Event: Payment Field Mapping Settings'
        verbose_name_plural = 'Change Event: Payment Field Mapping Settings'
        # keyPrefix = 'None'



class Npe01PaymentFieldMappingSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01paymentfieldmappingsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe01paymentfieldmappingsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe01_opportunity_field = models.CharField(db_column='npe01__Opportunity_Field__c', custom=True, max_length=255, verbose_name='Opportunity Field') 
    npe01_payment_field = models.CharField(db_column='npe01__Payment_Field__c', custom=True, max_length=255, verbose_name='Payment Field') 
    class Meta(models.Model.Meta):
        db_table = 'npe01__Payment_Field_Mapping_Settings__c'
        verbose_name = 'Payment Field Mapping Settings'
        verbose_name_plural = 'Payment Field Mapping Settings'
        # keyPrefix = 'a02'



class Npe03CustomFieldMappingChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03customfieldmappingchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03customfieldmappingchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_opportunity_field = models.CharField(db_column='npe03__Opportunity_Field__c', custom=True, max_length=255, verbose_name='Opportunity Field', sf_read_only=models.READ_ONLY, help_text='The Opportunity field to receive the value from the Recurring Donation field.  Note that these fields must have the same data type.', blank=True, null=True) 
    npe03_recurring_donation_field = models.CharField(db_column='npe03__Recurring_Donation_Field__c', custom=True, max_length=255, verbose_name='Recurring Donation Field', sf_read_only=models.READ_ONLY, help_text='The Recurring Donation field to copy to the Opportunity field.  Note that these fields must have the same data type.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Custom_Field_Mapping__ChangeEvent'
        verbose_name = 'Change Event: Custom Field Mapping'
        verbose_name_plural = 'Change Event: Custom Field Mapping'
        # keyPrefix = 'None'



class Npe03CustomFieldMapping(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03customfieldmapping_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03customfieldmapping_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe03_opportunity_field = models.CharField(db_column='npe03__Opportunity_Field__c', custom=True, max_length=255, verbose_name='Opportunity Field', help_text='The Opportunity field to receive the value from the Recurring Donation field.  Note that these fields must have the same data type.', blank=True, null=True) 
    npe03_recurring_donation_field = models.CharField(db_column='npe03__Recurring_Donation_Field__c', custom=True, max_length=255, verbose_name='Recurring Donation Field', help_text='The Recurring Donation field to copy to the Opportunity field.  Note that these fields must have the same data type.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Custom_Field_Mapping__c'
        verbose_name = 'Custom Field Mapping'
        verbose_name_plural = 'Custom Field Mapping'
        # keyPrefix = 'a07'



class Npe03CustomInstallmentSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03custominstallmentsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03custominstallmentsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_increment = models.CharField(db_column='npe03__Increment__c', custom=True, max_length=50, verbose_name='Time Period Type', sf_read_only=models.READ_ONLY, help_text='The type of time period the Custom Installment Period covers.', blank=True, null=True) 
    npe03_value = models.DecimalField(db_column='npe03__Value__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Time Period Frequency', sf_read_only=models.READ_ONLY, help_text='The amount of time the Custom Installment Period covers.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Custom_Installment_Settings__ChangeEvent'
        verbose_name = 'Change Event: Custom Installment Settings'
        verbose_name_plural = 'Change Event: Custom Installment Settings'
        # keyPrefix = 'None'



class Npe03CustomInstallmentSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03custominstallmentsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03custominstallmentsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe03_increment = models.CharField(db_column='npe03__Increment__c', custom=True, max_length=50, verbose_name='Time Period Type', help_text='The type of time period the Custom Installment Period covers.') 
    npe03_value = models.DecimalField(db_column='npe03__Value__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Time Period Frequency', help_text='The amount of time the Custom Installment Period covers.') 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Custom_Installment_Settings__c'
        verbose_name = 'Custom Installment Settings'
        verbose_name_plural = 'Custom Installment Settings'
        # keyPrefix = 'a08'



class Npe03RecurringDonationChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonationchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonationchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_amount = models.DecimalField(db_column='npe03__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe03__Contact__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_date_established = models.DateField(db_column='npe03__Date_Established__c', custom=True, verbose_name='Date Established', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_donor_name = models.CharField(db_column='npe03__Donor_Name__c', custom=True, max_length=3900, verbose_name='Donor Name', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_installment_amount = models.DecimalField(db_column='npe03__Installment_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Installment Amount', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_installment_period = models.CharField(db_column='npe03__Installment_Period__c', custom=True, max_length=255, verbose_name='Installment Period', sf_read_only=models.READ_ONLY, help_text='How often you’ll receive the donations. NOTE: Changing the installment period for an existing Fixed-Length Recurring Donation may result in the loss and re-creation of open opportunities. Any data associated with those opportunities may be lost.', choices=[('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly'), ('Weekly', 'Weekly'), ('1st and 15th', '1st and 15th')], blank=True, null=True) 
    npe03_installments = models.DecimalField(db_column='npe03__Installments__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Installments', sf_read_only=models.READ_ONLY, help_text='Number of installments (donations) you expect to receive. For Fixed-Length Recurring Donations only.', blank=True, null=True) 
    npe03_last_payment_date = models.DateField(db_column='npe03__Last_Payment_Date__c', custom=True, verbose_name='Last Donation Date', sf_read_only=models.READ_ONLY, help_text='Do Not Enter. The NPSP calculates this value automatically based on the last time a child donation was marked Posted.', blank=True, null=True) 
    npe03_next_payment_date = models.DateField(db_column='npe03__Next_Payment_Date__c', custom=True, verbose_name='Next Donation Date', sf_read_only=models.READ_ONLY, help_text='The date on which you want the next donation to occur. This date also determines the date of all future donations.', blank=True, null=True) 
    npe03_open_ended_status = models.CharField(db_column='npe03__Open_Ended_Status__c', custom=True, max_length=255, verbose_name='Open Ended Status', sf_read_only=models.READ_ONLY, default='None', help_text='Choose Open for an Open-Ended Recurring Donation.  Choose None for a Fixed Length Recurring Donation.  Choose Closed to close a Recurring Donation.', choices=[('Open', 'Open'), ('Closed', 'Closed'), ('None', 'None')], blank=True, null=True) 
    npe03_organization = models.ForeignKey(Account, models.DO_NOTHING, db_column='npe03__Organization__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_paid_amount = models.DecimalField(db_column='npe03__Paid_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Paid Amount', sf_read_only=models.READ_ONLY, help_text='Do Not Enter. The NPSP calculates this value automatically as donations are made and marked Posted.', blank=True, null=True) 
    npe03_recurring_donation_campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='npe03__Recurring_Donation_Campaign__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_schedule_type = models.CharField(db_column='npe03__Schedule_Type__c', custom=True, max_length=255, verbose_name='Schedule Type', sf_read_only=models.READ_ONLY, help_text="Tells Salesforce how to compute the amount for each child opportunity, based on what you've entered in the Amount field. For Fixed-Length Recurring Donations only.", choices=[('Multiply By', 'Multiply By'), ('Divide By', 'Divide By')], blank=True, null=True) 
    npe03_total_paid_installments = models.DecimalField(db_column='npe03__Total_Paid_Installments__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Paid Installments', sf_read_only=models.READ_ONLY, help_text='Do Not Enter. The NPSP calculates this value automatically as donations are made and marked Posted.', blank=True, null=True) 
    npe03_total = models.DecimalField(db_column='npe03__Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total', sf_read_only=models.READ_ONLY, help_text='For Non-Open Ended Recurring Donations, the total amount of all Opportunities.', blank=True, null=True) 
    npsp_always_use_last_day_of_month = models.BooleanField(db_column='npsp__Always_Use_Last_Day_Of_Month__c', custom=True, verbose_name='Always use last day of month', sf_read_only=models.READ_ONLY, default=False, help_text='When checked, all future monthly or quarterly donation installments will be set to the last day of the month, regardless of the actual date in the "Next Donation Date" field. This is ignored when the installment period is not set to Monthly or Quarterly.') 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Recurring_Donation__ChangeEvent'
        verbose_name = 'Change Event: Recurring Donations'
        verbose_name_plural = 'Change Event: Recurring Donations'
        # keyPrefix = 'None'



class Npe03RecurringDonationHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Npe03RecurringDonation', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npsp__Always_Use_Last_Day_Of_Month__c', 'Always use last day of month'), ('npe03__Amount__c', 'Amount'), ('npe03__Recurring_Donation_Campaign__c', 'Campaign'), ('npe03__Contact__c', 'Contact'), ('created', 'Created.'), ('npe03__Date_Established__c', 'Date Established'), ('npsp__Day_of_Month__c', 'Day of Month'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('npe03__Installment_Period__c', 'Installment Period'), ('npe03__Installments__c', 'Installments'), ('npe03__Last_Payment_Date__c', 'Last Donation Date'), ('npe03__Next_Payment_Date__c', 'Next Donation Date'), ('npe03__Open_Ended_Status__c', 'Open Ended Status'), ('npe03__Organization__c', 'Organization'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('npe03__Paid_Amount__c', 'Paid Amount'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Name', 'Recurring Donation Name'), ('npe03__Schedule_Type__c', 'Schedule Type'), ('npe03__Total_Paid_Installments__c', 'Total Paid Installments')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npe03__Recurring_Donation__History'
        verbose_name = 'History: Recurring Donations'
        verbose_name_plural = 'History: Recurring Donations'
        # keyPrefix = 'None'



class Npe03RecurringDonation(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Recurring Donation Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_amount = models.DecimalField(db_column='npe03__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', blank=True, null=True) 
    npe03_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe03__Contact__c', custom=True, blank=True, null=True) 
    npe03_date_established = models.DateField(db_column='npe03__Date_Established__c', custom=True, verbose_name='Date Established', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npe03_donor_name = models.CharField(db_column='npe03__Donor_Name__c', custom=True, max_length=1300, verbose_name='Donor Name', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_installment_amount = models.DecimalField(db_column='npe03__Installment_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Installment Amount', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe03_installment_period = models.CharField(db_column='npe03__Installment_Period__c', custom=True, max_length=255, verbose_name='Installment Period', help_text='How often you’ll receive the donations. NOTE: Changing the installment period for an existing Fixed-Length Recurring Donation may result in the loss and re-creation of open opportunities. Any data associated with those opportunities may be lost.', choices=[('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly'), ('Weekly', 'Weekly'), ('1st and 15th', '1st and 15th')], blank=True, null=True) 
    npe03_installments = models.DecimalField(db_column='npe03__Installments__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Installments', help_text='Number of installments (donations) you expect to receive. For Fixed-Length Recurring Donations only.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npe03_last_payment_date = models.DateField(db_column='npe03__Last_Payment_Date__c', custom=True, verbose_name='Last Donation Date', help_text='Do Not Enter. The NPSP calculates this value automatically based on the last time a child donation was marked Posted.', blank=True, null=True) 
    npe03_next_payment_date = models.DateField(db_column='npe03__Next_Payment_Date__c', custom=True, verbose_name='Next Donation Date', help_text='The date on which you want the next donation to occur. This date also determines the date of all future donations.', blank=True, null=True) 
    npe03_open_ended_status = models.CharField(db_column='npe03__Open_Ended_Status__c', custom=True, max_length=255, verbose_name='Open Ended Status', default=models.DEFAULTED_ON_CREATE, help_text='Choose Open for an Open-Ended Recurring Donation.  Choose None for a Fixed Length Recurring Donation.  Choose Closed to close a Recurring Donation.', choices=[('Open', 'Open'), ('Closed', 'Closed'), ('None', 'None')], blank=True, null=True) 
    npe03_organization = models.ForeignKey(Account, models.DO_NOTHING, db_column='npe03__Organization__c', custom=True, blank=True, null=True) 
    npe03_paid_amount = models.DecimalField(db_column='npe03__Paid_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Paid Amount', help_text='Do Not Enter. The NPSP calculates this value automatically as donations are made and marked Posted.', blank=True, null=True) 
    npe03_recurring_donation_campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='npe03__Recurring_Donation_Campaign__c', custom=True, blank=True, null=True) 
    npe03_schedule_type = models.CharField(db_column='npe03__Schedule_Type__c', custom=True, max_length=255, verbose_name='Schedule Type', help_text="Tells Salesforce how to compute the amount for each child opportunity, based on what you've entered in the Amount field. For Fixed-Length Recurring Donations only.", choices=[('Multiply By', 'Multiply By'), ('Divide By', 'Divide By')], blank=True, null=True) 
    npe03_total_paid_installments = models.DecimalField(db_column='npe03__Total_Paid_Installments__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Paid Installments', help_text='Do Not Enter. The NPSP calculates this value automatically as donations are made and marked Posted.', blank=True, null=True) 
    npe03_total = models.DecimalField(db_column='npe03__Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total', sf_read_only=models.READ_ONLY, help_text='For Non-Open Ended Recurring Donations, the total amount of all Opportunities.', blank=True, null=True) 
    npsp_always_use_last_day_of_month = models.BooleanField(db_column='npsp__Always_Use_Last_Day_Of_Month__c', custom=True, verbose_name='Always use last day of month', default=models.DEFAULTED_ON_CREATE, help_text='When checked, all future monthly or quarterly donation installments will be set to the last day of the month, regardless of the actual date in the "Next Donation Date" field. This is ignored when the installment period is not set to Monthly or Quarterly.') 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Recurring_Donation__c'
        verbose_name = 'Recurring Donations'
        verbose_name_plural = 'Recurring Donations'
        # keyPrefix = 'a09'



class Npe03RecurringDonationsSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonationssettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonationssettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_add_campaign_to_all_opportunites = models.BooleanField(db_column='npe03__Add_Campaign_to_All_Opportunites__c', custom=True, verbose_name='Add Campaign to All Opportunites', sf_read_only=models.READ_ONLY, default=False, help_text='If selected, all Opportunities for Recurring Donations will use the Campaign on the Recurring Donation. Otherwise, only the first Opportunity will have the Campaign.') 
    npe03_disable_donations_trigger = models.BooleanField(db_column='npe03__DISABLE_Donations_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Donations_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe03_disable_recurring_donations_trigger = models.BooleanField(db_column='npe03__DISABLE_RecurringDonations_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_RD_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe03_enable_update_check = models.BooleanField(db_column='npe03__Enable_Update_Check__c', custom=True, verbose_name='DEPRECATED-Enable Update Check', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.') 
    npe03_error_email_notifications = models.CharField(db_column='npe03__Error_Email_Notifications__c', custom=True, max_length=255, verbose_name='DEPRECATED-Error Email Notifications', sf_read_only=models.READ_ONLY, help_text='DEPRECATED.  Replaced by the notification settings in the System Error settings panel.', blank=True, null=True) 
    npe03_last_batch_run = models.DateTimeField(db_column='npe03__Last_Batch_Run__c', custom=True, verbose_name='Last Batch Run', sf_read_only=models.READ_ONLY, help_text='The date and time of the last batch update of Recurring Donations.', blank=True, null=True) 
    npe03_maximum_donations = models.DecimalField(db_column='npe03__Maximum_Donations__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Maximum Donations', sf_read_only=models.READ_ONLY, help_text='Restricts the total number of donations created for non-open-ended Recurring Donations. Default is 50.  Larger values may result in DML errors.', blank=True, null=True) 
    npe03_number_of_failures = models.DecimalField(db_column='npe03__Number_of_Failures__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Failures', sf_read_only=models.READ_ONLY, help_text='Number of Recurring Donations unsuccessfully updated in the last batch operation.', blank=True, null=True) 
    npe03_number_of_successes = models.DecimalField(db_column='npe03__Number_of_Successes__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Successes', sf_read_only=models.READ_ONLY, help_text='Number of Recurring Donations successfully updated in the last batch run.', blank=True, null=True) 
    npe03_open_opportunity_behavior = models.CharField(db_column='npe03__Open_Opportunity_Behavior__c', custom=True, max_length=50, verbose_name='Open Opportunity Behavior on RD Close', sf_read_only=models.READ_ONLY, help_text='Determines the behavior of any remaining open Opportunities when an open-ended Recurring Donation is moved to a closed status.', blank=True, null=True) 
    npe03_opportunity_forecast_months = models.DecimalField(db_column='npe03__Opportunity_Forecast_Months__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Opportunity Forecast Months', sf_read_only=models.READ_ONLY, help_text='Number of months from today worth of open Opportunities to be created when using open-ended Recurring Donations. WARNING: Reducing this value will result in extra Opportunities being deleted.  Increasing it will launch a batch process to add Opportunities', blank=True, null=True) 
    npe03_record_type = models.CharField(db_column='npe03__Record_Type__c', custom=True, max_length=18, verbose_name='Opportunity Record Type', sf_read_only=models.READ_ONLY, help_text='Opportunity Record Type used when Recurring Donation Opportunities are created.', blank=True, null=True) 
    npe03_update_check_interval = models.DecimalField(db_column='npe03__Update_Check_Interval__c', custom=True, max_digits=18, decimal_places=0, verbose_name='DEPRECATED-Update Check Interval', sf_read_only=models.READ_ONLY, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npsp_recurring_donation_batch_size = models.DecimalField(db_column='npsp__Recurring_Donation_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Recurring Donation Batch Size', sf_read_only=models.READ_ONLY, help_text='The number of records to process at a time when running the Recurring Donations batch job. The default size is 50. Reduce to a smaller number if the Recurring Donations batch job is failing due to system limits.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Recurring_Donations_Settings__ChangeEvent'
        verbose_name = 'Change Event: Recurring Donations Settings'
        verbose_name_plural = 'Change Event: Recurring Donations Settings'
        # keyPrefix = 'None'



class Npe03RecurringDonationsSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonationssettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe03recurringdonationssettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe03_add_campaign_to_all_opportunites = models.BooleanField(db_column='npe03__Add_Campaign_to_All_Opportunites__c', custom=True, verbose_name='Add Campaign to All Opportunites', default=models.DEFAULTED_ON_CREATE, help_text='If selected, all Opportunities for Recurring Donations will use the Campaign on the Recurring Donation. Otherwise, only the first Opportunity will have the Campaign.') 
    npe03_disable_donations_trigger = models.BooleanField(db_column='npe03__DISABLE_Donations_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Donations_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe03_disable_recurring_donations_trigger = models.BooleanField(db_column='npe03__DISABLE_RecurringDonations_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_RD_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe03_enable_update_check = models.BooleanField(db_column='npe03__Enable_Update_Check__c', custom=True, verbose_name='DEPRECATED-Enable Update Check', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.') 
    npe03_error_email_notifications = models.CharField(db_column='npe03__Error_Email_Notifications__c', custom=True, max_length=255, verbose_name='DEPRECATED-Error Email Notifications', help_text='DEPRECATED.  Replaced by the notification settings in the System Error settings panel.', blank=True, null=True) 
    npe03_last_batch_run = models.DateTimeField(db_column='npe03__Last_Batch_Run__c', custom=True, verbose_name='Last Batch Run', help_text='The date and time of the last batch update of Recurring Donations.', blank=True, null=True) 
    npe03_maximum_donations = models.DecimalField(db_column='npe03__Maximum_Donations__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Maximum Donations', help_text='Restricts the total number of donations created for non-open-ended Recurring Donations. Default is 50.  Larger values may result in DML errors.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npe03_number_of_failures = models.DecimalField(db_column='npe03__Number_of_Failures__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Failures', help_text='Number of Recurring Donations unsuccessfully updated in the last batch operation.', blank=True, null=True) 
    npe03_number_of_successes = models.DecimalField(db_column='npe03__Number_of_Successes__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Successes', help_text='Number of Recurring Donations successfully updated in the last batch run.', blank=True, null=True) 
    npe03_open_opportunity_behavior = models.CharField(db_column='npe03__Open_Opportunity_Behavior__c', custom=True, max_length=50, verbose_name='Open Opportunity Behavior on RD Close', help_text='Determines the behavior of any remaining open Opportunities when an open-ended Recurring Donation is moved to a closed status.', blank=True, null=True) 
    npe03_opportunity_forecast_months = models.DecimalField(db_column='npe03__Opportunity_Forecast_Months__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Opportunity Forecast Months', help_text='Number of months from today worth of open Opportunities to be created when using open-ended Recurring Donations. WARNING: Reducing this value will result in extra Opportunities being deleted.  Increasing it will launch a batch process to add Opportunities', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npe03_record_type = models.CharField(db_column='npe03__Record_Type__c', custom=True, max_length=18, verbose_name='Opportunity Record Type', help_text='Opportunity Record Type used when Recurring Donation Opportunities are created.', blank=True, null=True) 
    npe03_update_check_interval = models.DecimalField(db_column='npe03__Update_Check_Interval__c', custom=True, max_digits=18, decimal_places=0, verbose_name='DEPRECATED-Update Check Interval', help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npsp_recurring_donation_batch_size = models.DecimalField(db_column='npsp__Recurring_Donation_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Recurring Donation Batch Size', help_text='The number of records to process at a time when running the Recurring Donations batch job. The default size is 50. Reduce to a smaller number if the Recurring Donations batch job is failing due to system limits.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe03__Recurring_Donations_Settings__c'
        verbose_name = 'Recurring Donations Settings'
        verbose_name_plural = 'Recurring Donations Settings'
        # keyPrefix = 'a0A'



class Npe4RelationshipAutoCreateChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipautocreatechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipautocreatechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe4_campaign_types = models.TextField(db_column='npe4__Campaign_Types__c', custom=True, verbose_name='Campaign Types', sf_read_only=models.READ_ONLY, help_text='Eligible Campaign types for this Campaign Member auto-create. (Will be blank for Contact auto-create)', blank=True, null=True) 
    npe4_field = models.CharField(db_column='npe4__Field__c', custom=True, max_length=255, verbose_name='Field', sf_read_only=models.READ_ONLY, help_text='The field insert or update that triggers the creation of this Relationship', blank=True, null=True) 
    npe4_object = models.CharField(db_column='npe4__Object__c', custom=True, max_length=50, verbose_name='Object', sf_read_only=models.READ_ONLY, help_text='The object this Auto-Relationship is associated with', blank=True, null=True) 
    npe4_relationship_type = models.CharField(db_column='npe4__Relationship_Type__c', custom=True, max_length=255, verbose_name='Relationship Type', sf_read_only=models.READ_ONLY, help_text='The Relationship type to be created between the base object and the lookup object.  The lookup object will receive the reciprocal Relationship, if one is available.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Auto_Create__ChangeEvent'
        verbose_name = 'Change Event: Relationship Auto-Create'
        verbose_name_plural = 'Change Event: Relationship Auto-Create'
        # keyPrefix = 'None'



class Npe4RelationshipAutoCreate(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipautocreate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipautocreate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe4_campaign_types = models.TextField(db_column='npe4__Campaign_Types__c', custom=True, verbose_name='Campaign Types', help_text='Eligible Campaign types for this Campaign Member auto-create. (Will be blank for Contact auto-create)', blank=True, null=True) 
    npe4_field = models.CharField(db_column='npe4__Field__c', custom=True, max_length=255, verbose_name='Field', help_text='The field insert or update that triggers the creation of this Relationship', blank=True, null=True) 
    npe4_object = models.CharField(db_column='npe4__Object__c', custom=True, max_length=50, verbose_name='Object', help_text='The object this Auto-Relationship is associated with', blank=True, null=True) 
    npe4_relationship_type = models.CharField(db_column='npe4__Relationship_Type__c', custom=True, max_length=255, verbose_name='Relationship Type', help_text='The Relationship type to be created between the base object and the lookup object.  The lookup object will receive the reciprocal Relationship, if one is available.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Auto_Create__c'
        verbose_name = 'Relationship Auto-Create'
        verbose_name_plural = 'Relationship Auto-Create'
        # keyPrefix = 'a0B'



class Npe4RelationshipErrorChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiperrorchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiperrorchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe4_error_date_time = models.DateTimeField(db_column='npe4__Error_Date_Time__c', custom=True, verbose_name='Error Date/Time', sf_read_only=models.READ_ONLY, help_text='Date & time the error occurred', blank=True, null=True) 
    npe4_error_record_link = models.URLField(db_column='npe4__Error_Record_Link__c', custom=True, verbose_name='Error Record Link', sf_read_only=models.READ_ONLY, help_text='A link to the record which caused the error, if available.', blank=True, null=True) 
    npe4_error_stack_trace = models.TextField(db_column='npe4__Error_Stack_Trace__c', custom=True, verbose_name='Error Stack Trace', sf_read_only=models.READ_ONLY, help_text='Stack trace for the thrown error, if available at run time.', blank=True, null=True) 
    npe4_error_type = models.TextField(db_column='npe4__Error_Type__c', custom=True, verbose_name='Error Type', sf_read_only=models.READ_ONLY, help_text='Type of error that occurred', blank=True, null=True) 
    npe4_full_error_message = models.TextField(db_column='npe4__Full_Error_Message__c', custom=True, verbose_name='Full Error Message', sf_read_only=models.READ_ONLY, help_text='Full text of the error message', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Error__ChangeEvent'
        verbose_name = 'Change Event: DEPRECATED-Relationship Error'
        verbose_name_plural = 'Change Event: DEPRECATED-Relationship Error'
        # keyPrefix = 'None'



class Npe4RelationshipError(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Relationship Error Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiperror_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiperror_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe4_error_date_time = models.DateTimeField(db_column='npe4__Error_Date_Time__c', custom=True, verbose_name='Error Date/Time', help_text='Date & time the error occurred', blank=True, null=True) 
    npe4_error_record_link = models.URLField(db_column='npe4__Error_Record_Link__c', custom=True, verbose_name='Error Record Link', help_text='A link to the record which caused the error, if available.', blank=True, null=True) 
    npe4_error_stack_trace = models.TextField(db_column='npe4__Error_Stack_Trace__c', custom=True, verbose_name='Error Stack Trace', help_text='Stack trace for the thrown error, if available at run time.', blank=True, null=True) 
    npe4_error_type = models.TextField(db_column='npe4__Error_Type__c', custom=True, verbose_name='Error Type', help_text='Type of error that occurred', blank=True, null=True) 
    npe4_full_error_message = models.TextField(db_column='npe4__Full_Error_Message__c', custom=True, verbose_name='Full Error Message', help_text='Full text of the error message', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Error__c'
        verbose_name = 'DEPRECATED-Relationship Error'
        verbose_name_plural = 'Relationship Errors'
        # keyPrefix = 'a0C'



class Npe4RelationshipLookupChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiplookupchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiplookupchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe4_active = models.BooleanField(db_column='npe4__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=True, help_text='Indicates if this reciprocal lookup is active.') 
    npe4_female = models.CharField(db_column='npe4__Female__c', custom=True, max_length=255, verbose_name='Female', sf_read_only=models.READ_ONLY, help_text="The value used if the Contact's gender field matches the values in the Female Custom Label or the Contact's Salutation indicates gender.", blank=True, null=True) 
    npe4_male = models.CharField(db_column='npe4__Male__c', custom=True, max_length=255, verbose_name='Male', sf_read_only=models.READ_ONLY, help_text="The value used if the Contact's gender field matches the values in the Male Custom Label or the Contact's Salutation indicates gender.", blank=True, null=True) 
    npe4_neutral = models.CharField(db_column='npe4__Neutral__c', custom=True, max_length=255, verbose_name='Neutral', sf_read_only=models.READ_ONLY, help_text="The value used if the Contact's gender field does not match either the Male or Female Custom Labels, and the Contact's Salutation does not infer gender.", blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Lookup__ChangeEvent'
        verbose_name = 'Change Event: Relationship Lookup'
        verbose_name_plural = 'Change Event: Relationship Lookup'
        # keyPrefix = 'None'



class Npe4RelationshipLookup(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiplookup_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshiplookup_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe4_active = models.BooleanField(db_column='npe4__Active__c', custom=True, verbose_name='Active', default=models.DEFAULTED_ON_CREATE, help_text='Indicates if this reciprocal lookup is active.') 
    npe4_female = models.CharField(db_column='npe4__Female__c', custom=True, max_length=255, verbose_name='Female', help_text="The value used if the Contact's gender field matches the values in the Female Custom Label or the Contact's Salutation indicates gender.", blank=True, null=True) 
    npe4_male = models.CharField(db_column='npe4__Male__c', custom=True, max_length=255, verbose_name='Male', help_text="The value used if the Contact's gender field matches the values in the Male Custom Label or the Contact's Salutation indicates gender.", blank=True, null=True) 
    npe4_neutral = models.CharField(db_column='npe4__Neutral__c', custom=True, max_length=255, verbose_name='Neutral', help_text="The value used if the Contact's gender field does not match either the Male or Female Custom Labels, and the Contact's Salutation does not infer gender.", blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Lookup__c'
        verbose_name = 'Relationship Lookup'
        verbose_name_plural = 'Relationship Lookup'
        # keyPrefix = 'a0D'



class Npe4RelationshipSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe4_allow_auto_created_duplicates = models.BooleanField(db_column='npe4__Allow_AutoCreated_Duplicates__c', custom=True, verbose_name='Allow Auto-Created Duplicate Relations', sf_read_only=models.READ_ONLY, default=False, help_text='Auto-created Relationships are auto-deduplicated to prevent duplicate Relationship records from being created between two Contacts.  Check this box to disable this behavior & allow multiple Relationships of the same Type to be created between two Contacts') 
    npe4_disable_relationship_cm_trigger = models.BooleanField(db_column='npe4__DISABLE_RelationshipCM_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_RelCM_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe4_disable_relationship_contacts_trigger = models.BooleanField(db_column='npe4__DISABLE_RelationshipContacts_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_RelContacts_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe4_disable_relationships_trigger = models.BooleanField(db_column='npe4__DISABLE_Relationships_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Relationships_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe4_force_synchronous_auto_create = models.BooleanField(db_column='npe4__Force_Synchronous_Auto_Create__c', custom=True, verbose_name='DEPRECATED-Force Synchronous Auto Create', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED.  This setting is not used.') 
    npe4_gender_field = models.CharField(db_column='npe4__Gender_Field__c', custom=True, max_length=255, verbose_name='Gender Field', sf_read_only=models.READ_ONLY, help_text='The custom field used to define the gender of a Contact for determining reciprocal relationships', blank=True, null=True) 
    npe4_reciprocal_method = models.CharField(db_column='npe4__Reciprocal_Method__c', custom=True, max_length=255, verbose_name='Reciprocal Method', sf_read_only=models.READ_ONLY, help_text='Determines method used to generate the reciprocal relationship.  Either List Setting which uses custom settings by gender (see Reciprocal Relationships tab), or Value Inversion, which inverts the type if appropriate ("Parent-Child" to "Child-Parent")', blank=True, null=True) 
    npe4_relationship_name_field_id = models.CharField(db_column='npe4__Relationship_Name_Field_Id__c', custom=True, max_length=25, verbose_name='Relationship Name Field Id', sf_read_only=models.READ_ONLY, help_text='Populating this value will allow the field to pre-populate when creating new Relationships from the Relationship Viewer (see description for more information)', blank=True, null=True) 
    npe4_relationship_name_id_field_id = models.CharField(db_column='npe4__Relationship_Name_Id_Field_Id__c', custom=True, max_length=25, verbose_name='Relationship Name Id Field Id', sf_read_only=models.READ_ONLY, help_text='Populating this value will allow the field to pre-populate when creating new Relationships from the Relationship Viewer (see description for more information)', blank=True, null=True) 
    npsp_enable_custom_field_sync = models.BooleanField(db_column='npsp__Enable_Custom_Field_Sync__c', custom=True, verbose_name='Enable Custom Field Sync', sf_read_only=models.READ_ONLY, default=False, help_text='If TRUE, then synchronization of custom Relationship fields is enabled.') 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Settings__ChangeEvent'
        verbose_name = 'Change Event: Relationship Settings'
        verbose_name_plural = 'Change Event: Relationship Settings'
        # keyPrefix = 'None'



class Npe4RelationshipSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe4_allow_auto_created_duplicates = models.BooleanField(db_column='npe4__Allow_AutoCreated_Duplicates__c', custom=True, verbose_name='Allow Auto-Created Duplicate Relations', default=models.DEFAULTED_ON_CREATE, help_text='Auto-created Relationships are auto-deduplicated to prevent duplicate Relationship records from being created between two Contacts.  Check this box to disable this behavior & allow multiple Relationships of the same Type to be created between two Contacts') 
    npe4_disable_relationship_cm_trigger = models.BooleanField(db_column='npe4__DISABLE_RelationshipCM_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_RelCM_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe4_disable_relationship_contacts_trigger = models.BooleanField(db_column='npe4__DISABLE_RelationshipContacts_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_RelContacts_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe4_disable_relationships_trigger = models.BooleanField(db_column='npe4__DISABLE_Relationships_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Relationships_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npe4_force_synchronous_auto_create = models.BooleanField(db_column='npe4__Force_Synchronous_Auto_Create__c', custom=True, verbose_name='DEPRECATED-Force Synchronous Auto Create', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED.  This setting is not used.') 
    npe4_gender_field = models.CharField(db_column='npe4__Gender_Field__c', custom=True, max_length=255, verbose_name='Gender Field', help_text='The custom field used to define the gender of a Contact for determining reciprocal relationships', blank=True, null=True) 
    npe4_reciprocal_method = models.CharField(db_column='npe4__Reciprocal_Method__c', custom=True, max_length=255, verbose_name='Reciprocal Method', help_text='Determines method used to generate the reciprocal relationship.  Either List Setting which uses custom settings by gender (see Reciprocal Relationships tab), or Value Inversion, which inverts the type if appropriate ("Parent-Child" to "Child-Parent")', blank=True, null=True) 
    npe4_relationship_name_field_id = models.CharField(db_column='npe4__Relationship_Name_Field_Id__c', custom=True, max_length=25, verbose_name='Relationship Name Field Id', help_text='Populating this value will allow the field to pre-populate when creating new Relationships from the Relationship Viewer (see description for more information)', blank=True, null=True) 
    npe4_relationship_name_id_field_id = models.CharField(db_column='npe4__Relationship_Name_Id_Field_Id__c', custom=True, max_length=25, verbose_name='Relationship Name Id Field Id', help_text='Populating this value will allow the field to pre-populate when creating new Relationships from the Relationship Viewer (see description for more information)', blank=True, null=True) 
    npsp_enable_custom_field_sync = models.BooleanField(db_column='npsp__Enable_Custom_Field_Sync__c', custom=True, verbose_name='Enable Custom Field Sync', default=models.DEFAULTED_ON_CREATE, help_text='If TRUE, then synchronization of custom Relationship fields is enabled.') 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship_Settings__c'
        verbose_name = 'Relationship Settings'
        verbose_name_plural = 'Relationship Settings'
        # keyPrefix = 'a0E'



class Npe4RelationshipChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationshipchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe4_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe4__Contact__c', custom=True, related_name='npe4relationshipchangeevent_npe4contact_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe4_description = models.TextField(db_column='npe4__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, help_text='Additional information about this Relationship', blank=True, null=True) 
    npe4_reciprocal_relationship = models.ForeignKey('Npe4Relationship', models.DO_NOTHING, db_column='npe4__ReciprocalRelationship__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe4_related_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe4__RelatedContact__c', custom=True, related_name='npe4relationshipchangeevent_npe4relatedcontact_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe4_relationship_explanation = models.CharField(db_column='npe4__Relationship_Explanation__c', custom=True, max_length=3900, verbose_name='Relationship Explanation', sf_read_only=models.READ_ONLY, help_text='Text formula that constructs a sentence explaining the relationship between the two Contacts', blank=True, null=True) 
    npe4_system_system_created = models.BooleanField(db_column='npe4__SYSTEM_SystemCreated__c', custom=True, verbose_name='_SYSTEM: SystemCreated', sf_read_only=models.READ_ONLY, default=False, help_text='System field that indicates if this Relationship was created automatically as the reciprocal to another Relationships.') 
    npe4_status = models.CharField(db_column='npe4__Status__c', custom=True, max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, default='Current', help_text='Status of the Relationship.', choices=[('Current', 'Current'), ('Former', 'Former')], blank=True, null=True) 
    npe4_type = models.CharField(db_column='npe4__Type__c', custom=True, max_length=255, verbose_name='Type', sf_read_only=models.READ_ONLY, help_text='Field that describes how the Related Contact is connected to the Contact.', choices=[('Friend', 'Friend'), ('Family', 'Family'), ('Coworker', 'Coworker'), ('Father', 'Father'), ('Mother', 'Mother'), ('Parent', 'Parent'), ('Son', 'Son'), ('Daughter', 'Daughter'), ('Child', 'Child'), ('Aunt', 'Aunt'), ('Uncle', 'Uncle'), ('Husband', 'Husband'), ('Wife', 'Wife'), ('Partner', 'Partner'), ('Cousin', 'Cousin'), ('Grandmother', 'Grandmother'), ('Grandfather', 'Grandfather'), ('Grandparent', 'Grandparent'), ('Grandson', 'Grandson'), ('Granddaughter', 'Granddaughter'), ('Grandchild', 'Grandchild'), ('Employer', 'Employer'), ('Employee', 'Employee'), ('Sister', 'Sister'), ('Brother', 'Brother')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship__ChangeEvent'
        verbose_name = 'Change Event: Relationship'
        verbose_name_plural = 'Change Event: Relationship'
        # keyPrefix = 'None'



class Npe4RelationshipHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Npe4Relationship', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npe4__SYSTEM_SystemCreated__c', '_SYSTEM: SystemCreated'), ('npe4__Contact__c', 'Contact'), ('created', 'Created.'), ('npe4__Description__c', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('npe4__ReciprocalRelationship__c', 'Reciprocal Relationship'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('npe4__RelatedContact__c', 'Related Contact'), ('npsp__Related_Opportunity_Contact_Role__c', 'Related Opportunity Contact Role'), ('Name', 'Relationship Number'), ('npe4__Status__c', 'Status'), ('npe4__Type__c', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship__History'
        verbose_name = 'History: Relationship'
        verbose_name_plural = 'History: Relationship'
        # keyPrefix = 'None'



class Npe4Relationship(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Relationship Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationship_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe4relationship_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe4_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe4__Contact__c', custom=True, related_name='npe4relationship_npe4contact_set', sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    npe4_description = models.TextField(db_column='npe4__Description__c', custom=True, verbose_name='Description', help_text='Additional information about this Relationship', blank=True, null=True) 
    npe4_reciprocal_relationship = models.ForeignKey('self', models.DO_NOTHING, db_column='npe4__ReciprocalRelationship__c', custom=True, blank=True, null=True) 
    npe4_related_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe4__RelatedContact__c', custom=True, related_name='npe4relationship_npe4relatedcontact_set', blank=True, null=True) 
    npe4_relationship_explanation = models.CharField(db_column='npe4__Relationship_Explanation__c', custom=True, max_length=1300, verbose_name='Relationship Explanation', sf_read_only=models.READ_ONLY, help_text='Text formula that constructs a sentence explaining the relationship between the two Contacts', blank=True, null=True) 
    npe4_system_system_created = models.BooleanField(db_column='npe4__SYSTEM_SystemCreated__c', custom=True, verbose_name='_SYSTEM: SystemCreated', default=models.DEFAULTED_ON_CREATE, help_text='System field that indicates if this Relationship was created automatically as the reciprocal to another Relationships.') 
    npe4_status = models.CharField(db_column='npe4__Status__c', custom=True, max_length=255, verbose_name='Status', default=models.DEFAULTED_ON_CREATE, help_text='Status of the Relationship.', choices=[('Current', 'Current'), ('Former', 'Former')], blank=True, null=True) 
    npe4_type = models.CharField(db_column='npe4__Type__c', custom=True, max_length=255, verbose_name='Type', help_text='Field that describes how the Related Contact is connected to the Contact.', choices=[('Friend', 'Friend'), ('Family', 'Family'), ('Coworker', 'Coworker'), ('Father', 'Father'), ('Mother', 'Mother'), ('Parent', 'Parent'), ('Son', 'Son'), ('Daughter', 'Daughter'), ('Child', 'Child'), ('Aunt', 'Aunt'), ('Uncle', 'Uncle'), ('Husband', 'Husband'), ('Wife', 'Wife'), ('Partner', 'Partner'), ('Cousin', 'Cousin'), ('Grandmother', 'Grandmother'), ('Grandfather', 'Grandfather'), ('Grandparent', 'Grandparent'), ('Grandson', 'Grandson'), ('Granddaughter', 'Granddaughter'), ('Grandchild', 'Grandchild'), ('Employer', 'Employer'), ('Employee', 'Employee'), ('Sister', 'Sister'), ('Brother', 'Brother')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe4__Relationship__c'
        verbose_name = 'Relationship'
        verbose_name_plural = 'Relationships'
        # keyPrefix = 'a0F'



class Npe5AffiliationChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliationchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliationchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe5_organization = models.ForeignKey(Account, models.DO_NOTHING, db_column='npe5__Organization__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe5_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe5__Contact__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe5_description = models.TextField(db_column='npe5__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe5_end_date = models.DateField(db_column='npe5__EndDate__c', custom=True, verbose_name='End Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe5_primary = models.BooleanField(db_column='npe5__Primary__c', custom=True, verbose_name='Primary', sf_read_only=models.READ_ONLY, default=False, help_text="If checked, the Affiliation's Organization will be stored on the Contact record.") 
    npe5_role = models.CharField(db_column='npe5__Role__c', custom=True, max_length=255, verbose_name='Role', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe5_start_date = models.DateField(db_column='npe5__StartDate__c', custom=True, verbose_name='Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npe5_status = models.CharField(db_column='npe5__Status__c', custom=True, max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, default='Current', choices=[('Current', 'Current'), ('Former', 'Former')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe5__Affiliation__ChangeEvent'
        verbose_name = 'Change Event: Affiliation'
        verbose_name_plural = 'Change Event: Affiliation'
        # keyPrefix = 'None'



class Npe5AffiliationHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Npe5Affiliation', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Name', 'Affiliation Name'), ('npe5__Contact__c', 'Contact'), ('created', 'Created.'), ('npe5__Description__c', 'Description'), ('npe5__EndDate__c', 'End Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('npe5__Organization__c', 'Organization'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('npe5__Primary__c', 'Primary'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('npsp__Related_Opportunity_Contact_Role__c', 'Related Opportunity Contact Role'), ('npe5__Role__c', 'Role'), ('npe5__StartDate__c', 'Start Date'), ('npe5__Status__c', 'Status')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npe5__Affiliation__History'
        verbose_name = 'History: Affiliation'
        verbose_name_plural = 'History: Affiliation'
        # keyPrefix = 'None'



class Npe5Affiliation(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Affiliation Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe5_organization = models.ForeignKey(Account, models.DO_NOTHING, db_column='npe5__Organization__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    npe5_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npe5__Contact__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 1
    npe5_description = models.TextField(db_column='npe5__Description__c', custom=True, verbose_name='Description', blank=True, null=True) 
    npe5_end_date = models.DateField(db_column='npe5__EndDate__c', custom=True, verbose_name='End Date', blank=True, null=True) 
    npe5_primary = models.BooleanField(db_column='npe5__Primary__c', custom=True, verbose_name='Primary', default=models.DEFAULTED_ON_CREATE, help_text="If checked, the Affiliation's Organization will be stored on the Contact record.") 
    npe5_role = models.CharField(db_column='npe5__Role__c', custom=True, max_length=255, verbose_name='Role', blank=True, null=True) 
    npe5_start_date = models.DateField(db_column='npe5__StartDate__c', custom=True, verbose_name='Start Date', blank=True, null=True) 
    npe5_status = models.CharField(db_column='npe5__Status__c', custom=True, max_length=255, verbose_name='Status', default=models.DEFAULTED_ON_CREATE, choices=[('Current', 'Current'), ('Former', 'Former')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npe5__Affiliation__c'
        verbose_name = 'Affiliation'
        verbose_name_plural = 'Affiliations'
        # keyPrefix = 'a0G'



class Npe5AffiliationsSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliationssettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliationssettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe5_automatic_affiliation_creation_turned_on = models.BooleanField(db_column='npe5__Automatic_Affiliation_Creation_Turned_On__c', custom=True, verbose_name='Automatic Affiliation Management', sf_read_only=models.READ_ONLY, default=False, help_text='Create or update Affiliations for Contacts connected to Organization Accounts when their Organization field or Primary Affiliation field is changed.') 
    class Meta(models.Model.Meta):
        db_table = 'npe5__Affiliations_Settings__ChangeEvent'
        verbose_name = 'Change Event: Affiliations Settings'
        verbose_name_plural = 'Change Event: Affiliations Settings'
        # keyPrefix = 'None'



class Npe5AffiliationsSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliationssettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npe5affiliationssettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npe5_automatic_affiliation_creation_turned_on = models.BooleanField(db_column='npe5__Automatic_Affiliation_Creation_Turned_On__c', custom=True, verbose_name='Automatic Affiliation Management', default=models.DEFAULTED_ON_CREATE, help_text='Create or update Affiliations for Contacts connected to Organization Accounts when their Organization field or Primary Affiliation field is changed.') 
    class Meta(models.Model.Meta):
        db_table = 'npe5__Affiliations_Settings__c'
        verbose_name = 'Affiliations Settings'
        verbose_name_plural = 'Affiliations Settings'
        # keyPrefix = 'a0H'



class Npo02HouseholdChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02householdchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02householdchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_addressee = models.CharField(db_column='npo02__Addressee__c', custom=True, max_length=255, verbose_name='Addressee', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npo02_always_anonymous = models.BooleanField(db_column='npo02__Always_Anonymous__c', custom=True, verbose_name='Always Anonymous', sf_read_only=models.READ_ONLY, default=False, help_text='Used to set the Household name and other fields using anonymous information.') 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', sf_read_only=models.READ_ONLY, help_text='Average amount of won Opportunities related to this Household by a related Contact with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', sf_read_only=models.READ_ONLY, help_text='The sum of won Opportunity amounts in the Best Gift Year for this Household via Contacts with primary Opportunity Contact Role.  See also Best Gift Year.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', sf_read_only=models.READ_ONLY, help_text='The year in which the largest total amount of won Opportunities related to this Household via Contacts with primary Opportunity Contact Role occurred.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', sf_read_only=models.READ_ONLY, help_text='The earliest Close Date of a won Opportunity related to this Household via Contacts with primary Contact Role.', blank=True, null=True) 
    npo02_formal_greeting = models.TextField(db_column='npo02__Formal_Greeting__c', custom=True, verbose_name='Formal Greeting', sf_read_only=models.READ_ONLY, help_text='Uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_formula_mailing_address = models.CharField(db_column='npo02__Formula_MailingAddress__c', custom=True, max_length=3900, verbose_name='Mailing Address', sf_read_only=models.READ_ONLY, help_text='Formula: Concatenation of other Mailing fields for this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_household_email = models.EmailField(db_column='npo02__HouseholdEmail__c', custom=True, verbose_name='Household Email', sf_read_only=models.READ_ONLY, help_text='Set by the original Contact which created this Household. Can be edited in Household, but does not update Contact.', blank=True, null=True) 
    npo02_household_phone = models.CharField(db_column='npo02__HouseholdPhone__c', custom=True, max_length=40, verbose_name='Household Phone', sf_read_only=models.READ_ONLY, help_text='Set by the original Contact which created this Household. Can be edited in Household, but does not update Contact.', blank=True, null=True) 
    npo02_household_id = models.DecimalField(db_column='npo02__Household_ID__c', custom=True, max_digits=7, decimal_places=0, verbose_name='Household ID', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npo02_informal_greeting = models.TextField(db_column='npo02__Informal_Greeting__c', custom=True, verbose_name='Informal Greeting', sf_read_only=models.READ_ONLY, help_text='Uses fields of non-excluded, ordered related Contacts.  Generated automatically.', blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', sf_read_only=models.READ_ONLY, help_text='The largest won Opportunity amount for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', sf_read_only=models.READ_ONLY, help_text='Most recent Close Date of a won Opportunity for this Household via related Contacts with primary Contact Role.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', sf_read_only=models.READ_ONLY, help_text='The most recent won Membership Opportunity (Record Type) amount for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', sf_read_only=models.READ_ONLY, help_text='The most recent Close Date of a won Membership Opportunity for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', sf_read_only=models.READ_ONLY, help_text='The Membership Level of the most recent won Membership Opportunity for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', sf_read_only=models.READ_ONLY, help_text='The Origin (new, renew...) of the most recent won Membership Opportunity for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', sf_read_only=models.READ_ONLY, help_text='The most recent won Opportunity amount for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_mailing_city = models.CharField(db_column='npo02__MailingCity__c', custom=True, max_length=255, verbose_name='Mailing City', sf_read_only=models.READ_ONLY, help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_country = models.CharField(db_column='npo02__MailingCountry__c', custom=True, max_length=255, verbose_name='Mailing Country', sf_read_only=models.READ_ONLY, help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_postal_code = models.CharField(db_column='npo02__MailingPostalCode__c', custom=True, max_length=10, verbose_name='Mailing Zip/Postal Code', sf_read_only=models.READ_ONLY, help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_state = models.CharField(db_column='npo02__MailingState__c', custom=True, max_length=255, verbose_name='Mailing State/Province', sf_read_only=models.READ_ONLY, help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_street = models.CharField(db_column='npo02__MailingStreet__c', custom=True, max_length=255, verbose_name='Mailing Street', sf_read_only=models.READ_ONLY, help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', sf_read_only=models.READ_ONLY, help_text='The Membership End Date of the most recent won Membership Opportunity for his Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', sf_read_only=models.READ_ONLY, help_text='The earliest Membership Join Date of the oldest Membership Opportunity (Close Date, Record Type) for his Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_span = models.DecimalField(db_column='npo02__Membership_Span__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Membership Span', sf_read_only=models.READ_ONLY, help_text='Formula: The number of years for which this Household has had a Member.', blank=True, null=True) 
    npo02_membership_status = models.CharField(db_column='npo02__Membership_Status__c', custom=True, max_length=3900, verbose_name='Membership Status', sf_read_only=models.READ_ONLY, help_text='Formula: Current, expired, or grace period.  Default grace period set in Household Settings.', blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', sf_read_only=models.READ_ONLY, help_text='The total number of gifts related to this Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', sf_read_only=models.READ_ONLY, help_text='The total amount of won Membership Opportunities (Record Type) related to this Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', sf_read_only=models.READ_ONLY, help_text='Total Gifts Two Years Ago on Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', sf_read_only=models.READ_ONLY, help_text='The total amount of won Opportunities related to this Household, closed in the last number of days defined in Household Settings, related by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='Total Gifts Last Year on Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', sf_read_only=models.READ_ONLY, help_text='Total Gifts This Year on Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', sf_read_only=models.READ_ONLY, help_text='The number of won Opportunities with Close Date in the last 2 years related to this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', sf_read_only=models.READ_ONLY, help_text='The number of won Opportunities with Close Date in the last N days (Household Settings) related to this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='The number of won Opportunities with Close Date in the last year related to this Household via related Contacts with primary Contact Role.', blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', sf_read_only=models.READ_ONLY, help_text='The number of won Opportunities with Close Date this year related to this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_system_custom_naming = models.CharField(db_column='npo02__SYSTEM_CUSTOM_NAMING__c', custom=True, max_length=4099, verbose_name='_SYSTEM: CUSTOM NAMING', sf_read_only=models.READ_ONLY, help_text='Name, Formal Greeting, or Informal Greeting', choices=[('Name', 'Name'), ('Formal_Greeting__c', 'Formal_Greeting__c'), ('Informal_Greeting__c', 'Informal_Greeting__c')], blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', sf_read_only=models.READ_ONLY, help_text='The smallest amount of a won Opportunity related to this Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', sf_read_only=models.READ_ONLY, help_text='The total amount of won Membership Opportunities (Record Type) related to this Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', sf_read_only=models.READ_ONLY, help_text='The sum of won Opportunity Amounts related to this Household by Contact and primary Opportunity Contact Role.', blank=True, null=True) 
    npsp_number_of_household_members = models.DecimalField(db_column='npsp__Number_of_Household_Members__c', custom=True, max_digits=10, decimal_places=0, verbose_name='Number of Household Members', sf_read_only=models.READ_ONLY, help_text='the number of Contacts in the Household.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npo02__Household__ChangeEvent'
        verbose_name = 'Change Event: Household'
        verbose_name_plural = 'Change Event: Household'
        # keyPrefix = 'None'



class Npo02HouseholdHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('Npo02Household', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npo02__SYSTEM_CUSTOM_NAMING__c', '_SYSTEM: CUSTOM NAMING'), ('npo02__Addressee__c', 'Addressee'), ('npo02__Always_Anonymous__c', 'Always Anonymous'), ('npo02__AverageAmount__c', 'Average Gift'), ('npo02__Best_Gift_Year__c', 'Best Gift Year'), ('npo02__Best_Gift_Year_Total__c', 'Best Gift Year Total'), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('npo02__FirstCloseDate__c', 'First Gift Date'), ('npo02__Formal_Greeting__c', 'Formal Greeting'), ('npo02__HouseholdEmail__c', 'Household Email'), ('npo02__Household_ID__c', 'Household ID'), ('Name', 'Household Name'), ('npo02__HouseholdPhone__c', 'Household Phone'), ('individualMerged', 'Individual Merged'), ('npo02__Informal_Greeting__c', 'Informal Greeting'), ('npo02__LargestAmount__c', 'Largest Gift'), ('npo02__LastOppAmount__c', 'Last Gift Amount'), ('npo02__LastCloseDate__c', 'Last Gift Date'), ('npo02__LastMembershipAmount__c', 'Last Membership Amount'), ('npo02__LastMembershipDate__c', 'Last Membership Date'), ('npo02__LastMembershipLevel__c', 'Last Membership Level'), ('npo02__LastMembershipOrigin__c', 'Last Membership Origin'), ('npo02__MailingCity__c', 'Mailing City'), ('npo02__MailingCountry__c', 'Mailing Country'), ('npo02__MailingState__c', 'Mailing State/Province'), ('npo02__MailingStreet__c', 'Mailing Street'), ('npo02__MailingPostalCode__c', 'Mailing Zip/Postal Code'), ('npo02__MembershipEndDate__c', 'Membership End Date'), ('npo02__MembershipJoinDate__c', 'Membership Join Date'), ('npo02__OppsClosedLastNDays__c', 'Number of Gifts Last N Days'), ('npo02__OppsClosedLastYear__c', 'Number of Gifts Last Year'), ('npo02__OppsClosedThisYear__c', 'Number of Gifts This Year'), ('npo02__OppsClosed2YearsAgo__c', 'Number of Gifts Two Years Ago'), ('npsp__Number_of_Household_Members__c', 'Number of Household Members'), ('npo02__NumberOfMembershipOpps__c', 'Number of Memberships'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('npo02__SmallestAmount__c', 'Smallest Gift'), ('npo02__TotalOppAmount__c', 'Total Gifts'), ('npo02__OppAmountLastNDays__c', 'Total Gifts Last N Days'), ('npo02__OppAmountLastYear__c', 'Total Gifts Last Year'), ('npo02__OppAmountThisYear__c', 'Total Gifts This Year'), ('npo02__OppAmount2YearsAgo__c', 'Total Gifts Two Years Ago'), ('npo02__TotalMembershipOppAmount__c', 'Total Membership Amount'), ('npo02__NumberOfClosedOpps__c', 'Total Number of Gifts')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npo02__Household__History'
        verbose_name = 'History: Household'
        verbose_name_plural = 'History: Household'
        # keyPrefix = 'None'



class Npo02Household(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Household Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02household_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02household_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_addressee = models.CharField(db_column='npo02__Addressee__c', custom=True, max_length=255, verbose_name='Addressee', blank=True, null=True) 
    npo02_always_anonymous = models.BooleanField(db_column='npo02__Always_Anonymous__c', custom=True, verbose_name='Always Anonymous', default=models.DEFAULTED_ON_CREATE, help_text='Used to set the Household name and other fields using anonymous information.') 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', help_text='Average amount of won Opportunities related to this Household by a related Contact with primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', help_text='The sum of won Opportunity amounts in the Best Gift Year for this Household via Contacts with primary Opportunity Contact Role.  See also Best Gift Year.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', help_text='The year in which the largest total amount of won Opportunities related to this Household via Contacts with primary Opportunity Contact Role occurred.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', help_text='The earliest Close Date of a won Opportunity related to this Household via Contacts with primary Contact Role.', blank=True, null=True) 
    npo02_formal_greeting = models.TextField(db_column='npo02__Formal_Greeting__c', custom=True, verbose_name='Formal Greeting', help_text='Uses fields of non-excluded, ordered related Contacts. Generated automatically.', blank=True, null=True) 
    npo02_formula_mailing_address = models.CharField(db_column='npo02__Formula_MailingAddress__c', custom=True, max_length=1300, verbose_name='Mailing Address', sf_read_only=models.READ_ONLY, help_text='Formula: Concatenation of other Mailing fields for this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_household_email = models.EmailField(db_column='npo02__HouseholdEmail__c', custom=True, verbose_name='Household Email', help_text='Set by the original Contact which created this Household. Can be edited in Household, but does not update Contact.', blank=True, null=True) 
    npo02_household_phone = models.CharField(db_column='npo02__HouseholdPhone__c', custom=True, max_length=40, verbose_name='Household Phone', help_text='Set by the original Contact which created this Household. Can be edited in Household, but does not update Contact.', blank=True, null=True) 
    npo02_household_id = models.DecimalField(db_column='npo02__Household_ID__c', custom=True, max_digits=7, decimal_places=0, verbose_name='Household ID', blank=True, null=True) 
    npo02_informal_greeting = models.TextField(db_column='npo02__Informal_Greeting__c', custom=True, verbose_name='Informal Greeting', help_text='Uses fields of non-excluded, ordered related Contacts.  Generated automatically.', blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', help_text='The largest won Opportunity amount for this Household via related Contacts with primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', help_text='Most recent Close Date of a won Opportunity for this Household via related Contacts with primary Contact Role.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', help_text='The most recent won Membership Opportunity (Record Type) amount for this Household via related Contacts with primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', help_text='The most recent Close Date of a won Membership Opportunity for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', help_text='The Membership Level of the most recent won Membership Opportunity for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', help_text='The Origin (new, renew...) of the most recent won Membership Opportunity for this Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', help_text='The most recent won Opportunity amount for this Household via related Contacts with primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_mailing_city = models.CharField(db_column='npo02__MailingCity__c', custom=True, max_length=255, verbose_name='Mailing City', help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_country = models.CharField(db_column='npo02__MailingCountry__c', custom=True, max_length=255, verbose_name='Mailing Country', help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_postal_code = models.CharField(db_column='npo02__MailingPostalCode__c', custom=True, max_length=10, verbose_name='Mailing Zip/Postal Code', help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_state = models.CharField(db_column='npo02__MailingState__c', custom=True, max_length=255, verbose_name='Mailing State/Province', help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_mailing_street = models.CharField(db_column='npo02__MailingStreet__c', custom=True, max_length=255, verbose_name='Mailing Street', help_text='Set by the original Contact which created this Household. Can be updated in Household Edit page but does not update Contact unless "Copy Household Address to Contacts" button is pushed.', blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', help_text='The Membership End Date of the most recent won Membership Opportunity for his Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', help_text='The earliest Membership Join Date of the oldest Membership Opportunity (Close Date, Record Type) for his Household via related Contacts with primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_span = models.DecimalField(db_column='npo02__Membership_Span__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Membership Span', sf_read_only=models.READ_ONLY, help_text='Formula: The number of years for which this Household has had a Member.', blank=True, null=True) 
    npo02_membership_status = models.CharField(db_column='npo02__Membership_Status__c', custom=True, max_length=1300, verbose_name='Membership Status', sf_read_only=models.READ_ONLY, help_text='Formula: Current, expired, or grace period.  Default grace period set in Household Settings.', blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', help_text='The total number of gifts related to this Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', help_text='The total amount of won Membership Opportunities (Record Type) related to this Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', help_text='Total Gifts Two Years Ago on Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', help_text='The total amount of won Opportunities related to this Household, closed in the last number of days defined in Household Settings, related by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', help_text='Total Gifts Last Year on Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', help_text='Total Gifts This Year on Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', help_text='The number of won Opportunities with Close Date in the last 2 years related to this Household via related Contacts with primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', help_text='The number of won Opportunities with Close Date in the last N days (Household Settings) related to this Household via related Contacts with primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', help_text='The number of won Opportunities with Close Date in the last year related to this Household via related Contacts with primary Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', help_text='The number of won Opportunities with Close Date this year related to this Household via related Contacts with primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_system_custom_naming = models.CharField(db_column='npo02__SYSTEM_CUSTOM_NAMING__c', custom=True, max_length=4099, verbose_name='_SYSTEM: CUSTOM NAMING', help_text='Name, Formal Greeting, or Informal Greeting', choices=[('Name', 'Name'), ('Formal_Greeting__c', 'Formal_Greeting__c'), ('Informal_Greeting__c', 'Informal_Greeting__c')], blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', help_text='The smallest amount of a won Opportunity related to this Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', help_text='The total amount of won Membership Opportunities (Record Type) related to this Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', help_text='The sum of won Opportunity Amounts related to this Household by Contact and primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_number_of_household_members = models.DecimalField(db_column='npsp__Number_of_Household_Members__c', custom=True, max_digits=10, decimal_places=0, verbose_name='Number of Household Members', help_text='the number of Contacts in the Household.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npo02__Household__c'
        verbose_name = 'Household'
        verbose_name_plural = 'Households'
        # keyPrefix = 'a03'



class Npo02HouseholdsSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02householdssettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02householdssettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_advanced_household_naming = models.BooleanField(db_column='npo02__Advanced_Household_Naming__c', custom=True, verbose_name='Automatic Household Naming', sf_read_only=models.READ_ONLY, default=True, help_text='If checked, the system will provide automatic naming for Household Names, Informal and Formal Greetings.') 
    npo02_always_rollup_to_primary_contact = models.BooleanField(db_column='npo02__Always_Rollup_to_Primary_Contact__c', custom=True, verbose_name='Always Rollup to Primary Contact Role', sf_read_only=models.READ_ONLY, default=False, help_text="When selected, Salesforce will ALWAYS roll up donor data to the Opportunity's Primary Contact, and corresponding Household Account or record, even if the Opportunity is not from an individual. If left unselected, only the organization will receive credit.") 
    npo02_async_household_naming = models.BooleanField(db_column='npo02__Async_Household_Naming__c', custom=True, verbose_name='Async Household Naming', sf_read_only=models.READ_ONLY, default=False, help_text='This is a non-exposed setting to toggle household naming code to use an asynchronous version instead of the standard version.') 
    npo02_batch_size = models.DecimalField(db_column='npo02__Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Rollup Batch Size', sf_read_only=models.READ_ONLY, help_text='The number of records processed at a time when calculating donor statistics.  The default size is 200.  Reduce to a smaller number if the Opportunity Rollups are failing due to system limits.', blank=True, null=True) 
    npo02_disable_household_after_trigger = models.BooleanField(db_column='npo02__DISABLE_HouseholdAfter_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_HHAfter_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_household_before_trigger = models.BooleanField(db_column='npo02__DISABLE_HouseholdBefore_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_HHBefore_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_household_opportunity_trigger = models.BooleanField(db_column='npo02__DISABLE_Household_Opportunity_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Household_Opp_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_households_trigger = models.BooleanField(db_column='npo02__DISABLE_Households_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Households_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_opportunity_rollup_trigger = models.BooleanField(db_column='npo02__DISABLE_OpportunityRollup_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OppRollup_trigger', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_enable_opp_rollup_triggers = models.BooleanField(db_column='npo02__Enable_Opp_Rollup_Triggers__c', custom=True, verbose_name='DEPRECATED-Enable_Opp_Rollup_Triggers', sf_read_only=models.READ_ONLY, default=True, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_enable_soft_credit_rollups = models.BooleanField(db_column='npo02__Enable_Soft_Credit_Rollups__c', custom=True, verbose_name='Enable Soft Credit Rollups', sf_read_only=models.READ_ONLY, default=False, help_text='Rolls up Closed/Won Opportunity totals to Contact records based on assigned Opportunity Contact Roles. Soft credit rollups only happen in nightly batches, but you can run them manually from the Rollup Donations Batch settings.') 
    npo02_enable_update_check = models.BooleanField(db_column='npo02__Enable_Update_Check__c', custom=True, verbose_name='DEPRECATED-Enable Update Check', sf_read_only=models.READ_ONLY, default=False, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.') 
    npo02_excluded_account_opp_rectypes = models.CharField(db_column='npo02__Excluded_Account_Opp_Rectypes__c', custom=True, max_length=255, verbose_name='Opp RecTypes Excluded for Account Rollup', sf_read_only=models.READ_ONLY, help_text='Names of Opportunity Record Types to exclude from statistics when rolling up Account Opportunities.', blank=True, null=True) 
    npo02_excluded_account_opp_types = models.CharField(db_column='npo02__Excluded_Account_Opp_Types__c', custom=True, max_length=255, verbose_name='Opp Types Excluded for Account Rollup', sf_read_only=models.READ_ONLY, help_text="Opportunities that have this value in the Type picklist won't be included in rollups to the Account.", blank=True, null=True) 
    npo02_excluded_contact_opp_rectypes = models.CharField(db_column='npo02__Excluded_Contact_Opp_Rectypes__c', custom=True, max_length=255, verbose_name='Opp RecTypes Excluded for Contact Rollup', sf_read_only=models.READ_ONLY, help_text="Opportunities with the selected record types won't be included in rollups to the Contact. Control or Command click to select more than one record type.", blank=True, null=True) 
    npo02_excluded_contact_opp_types = models.CharField(db_column='npo02__Excluded_Contact_Opp_Types__c', custom=True, max_length=255, verbose_name='Opp Types Excluded for Contact Rollup', sf_read_only=models.READ_ONLY, help_text="Opportunities that have this value in the Type picklist won't be included in rollups to the Contact.", blank=True, null=True) 
    npo02_force_fiscal_year = models.BooleanField(db_column='npo02__Force_Fiscal_Year__c', custom=True, verbose_name='Force Fiscal Year', sf_read_only=models.READ_ONLY, default=False, help_text="The NPSP automatically checks for the presence of custom fiscal years, and disabled FY settings if they're found to avoid errors.  This setting overrides that safety-check for users who have accidentally enabled custom fiscal years.") 
    npo02_has_package_update = models.CharField(db_column='npo02__Has_Package_Update__c', custom=True, max_length=40, verbose_name='DEPRECATED-Has Package Update', sf_read_only=models.READ_ONLY, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_household_contact_roles_on = models.BooleanField(db_column='npo02__Household_Contact_Roles_On__c', custom=True, verbose_name='Household Contact Roles On', sf_read_only=models.READ_ONLY, default=False, help_text="Automatically creates Contact Roles for Household members of the Opportunity's Primary Contact.") 
    npo02_household_creation_excluded_recordtypes = models.CharField(db_column='npo02__Household_Creation_Excluded_Recordtypes__c', custom=True, max_length=255, verbose_name='Household Creation Excluded Record Types', sf_read_only=models.READ_ONLY, help_text='Contact Record Types excluded from Household creation.  This setting is ignored if you are using the Household Account model.', blank=True, null=True) 
    npo02_household_mailing_list_id = models.CharField(db_column='npo02__Household_Mailing_List_ID__c', custom=True, max_length=18, verbose_name='Household Mailing List Report', sf_read_only=models.READ_ONLY, help_text="The report ID of the Household Mailing List Report used for Household-deduplicated Campaign mailing lists.  Report should be of Campaigns with Contacts, where Member Status does not contain 'Duplicate'", blank=True, null=True) 
    npo02_household_member_contact_role = models.CharField(db_column='npo02__Household_Member_Contact_Role__c', custom=True, max_length=255, verbose_name='Household Member Contact Role', sf_read_only=models.READ_ONLY, help_text='The Contact Role you want to use for Household Members.', blank=True, null=True) 
    npo02_household_ocr_excluded_recordtypes = models.CharField(db_column='npo02__Household_OCR_Excluded_Recordtypes__c', custom=True, max_length=255, verbose_name='Household OCR Excluded Record Types', sf_read_only=models.READ_ONLY, help_text='The Contact Record Types you want to exclude from automatic Household Member Contact Role creation. Salesforce would then exclude those Contacts from receiving the Household Member Contact Role when the Opportunity is created.', blank=True, null=True) 
    npo02_household_rules = models.CharField(db_column='npo02__Household_Rules__c', custom=True, max_length=255, verbose_name='Household Object Rules', sf_read_only=models.READ_ONLY, help_text='Specifies which Contacts will have Households objects automatically created for them.  Note that this is only used for Contacts using the One-to-One or Individual Account Model.  This is ignored for Contacts with the Household Account Model.', blank=True, null=True) 
    npo02_last_update_check = models.DateTimeField(db_column='npo02__Last_Update_Check__c', custom=True, verbose_name='DEPRECATED-Last Update Check', sf_read_only=models.READ_ONLY, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_max_package_version = models.CharField(db_column='npo02__Max_Package_Version__c', custom=True, max_length=12, verbose_name='DEPRECATED-Max Package Version', sf_read_only=models.READ_ONLY, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_membership_grace_period = models.DecimalField(db_column='npo02__Membership_Grace_Period__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Membership Grace Period', sf_read_only=models.READ_ONLY, help_text="The length of the grace period (in days) after a membership expires (last end date) before the status moves from 'Grace Period' to 'Expired'.  Defaults to 30 days.", blank=True, null=True) 
    npo02_membership_record_types = models.CharField(db_column='npo02__Membership_Record_Types__c', custom=True, max_length=255, verbose_name='Membership Record Type Names', sf_read_only=models.READ_ONLY, help_text='Names of Opportunity Record Types, such as Membership, that you want to roll up separately from other Opportunity Record Types.', blank=True, null=True) 
    npo02_opp_rollup_scheduled_job_id = models.CharField(db_column='npo02__Opp_Rollup_Scheduled_Job_Id__c', custom=True, max_length=255, verbose_name='Opp Rollup Scheduled Job Id', sf_read_only=models.READ_ONLY, help_text='Id for the currently scheduled Opportunity Rollup Job', blank=True, null=True) 
    npo02_package_update_url = models.URLField(db_column='npo02__Package_Update_URL__c', custom=True, verbose_name='DEPRECATED-Package Update URL', sf_read_only=models.READ_ONLY, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_rollup_n_day_value = models.DecimalField(db_column='npo02__Rollup_N_Day_Value__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Rollup N Day Value', sf_read_only=models.READ_ONLY, help_text="Provide a value for 'N day' rollups, where 'N' is the number of days from today into the past.  This value defaults to rollup over the past 365 days.", blank=True, null=True) 
    npo02_schedule_job_limit = models.DecimalField(db_column='npo02__Schedule_Job_Limit__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Schedule Job Limit', sf_read_only=models.READ_ONLY, help_text='The number of active scheduled Apex Jobs to look at when scheduling new jobs.', blank=True, null=True) 
    npo02_soft_credit_roles = models.CharField(db_column='npo02__Soft_Credit_Roles__c', custom=True, max_length=255, verbose_name='Soft Credit Roles', sf_read_only=models.READ_ONLY, help_text='Opportunity Contact Roles you want to include in Soft Credit rollups. Control or Command click to select multiple roles.', blank=True, null=True) 
    npo02_update_check_interval = models.DecimalField(db_column='npo02__Update_Check_Interval__c', custom=True, max_digits=18, decimal_places=0, verbose_name='DEPRECATED-Update Check Interval', sf_read_only=models.READ_ONLY, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_use_fiscal_year_for_rollups = models.BooleanField(db_column='npo02__Use_Fiscal_Year_for_Rollups__c', custom=True, verbose_name='Use Fiscal Year for Rollups', sf_read_only=models.READ_ONLY, default=False, help_text='Checking this box will cause Opportunity rollup totals to respect fiscal year, instead of calendar years settings. To set Fiscal Year information, go to Setup->Company Profile->Fiscal Year.  NOTE: Custom Fiscal Year Settings are NOT supported.') 
    npsp_matched_donor_role = models.CharField(db_column='npsp__Matched_Donor_Role__c', custom=True, max_length=255, verbose_name='Matched Donor Role', sf_read_only=models.READ_ONLY, help_text='The Contact Role you want to use for matched donors. We recommend using "Matched Donor."', blank=True, null=True) 
    npsp_use_dated_conversion_rates = models.BooleanField(db_column='npsp__Use_Dated_Conversion_Rates__c', custom=True, verbose_name='Use Dated Conversion Rates if available', sf_read_only=models.READ_ONLY, default=False, help_text='Check this box to use Dated Conversion Rates when Advanced Currency Management is enabled in this Organization. If unchecked and ACM is enabled, all NPSP roll-ups will use the default exchange rate for by currency.') 
    class Meta(models.Model.Meta):
        db_table = 'npo02__Households_Settings__ChangeEvent'
        verbose_name = 'Change Event: Households Settings'
        verbose_name_plural = 'Change Event: Households Settings'
        # keyPrefix = 'None'



class Npo02HouseholdsSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02householdssettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02householdssettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npo02_advanced_household_naming = models.BooleanField(db_column='npo02__Advanced_Household_Naming__c', custom=True, verbose_name='Automatic Household Naming', default=models.DEFAULTED_ON_CREATE, help_text='If checked, the system will provide automatic naming for Household Names, Informal and Formal Greetings.') 
    npo02_always_rollup_to_primary_contact = models.BooleanField(db_column='npo02__Always_Rollup_to_Primary_Contact__c', custom=True, verbose_name='Always Rollup to Primary Contact Role', default=models.DEFAULTED_ON_CREATE, help_text="When selected, Salesforce will ALWAYS roll up donor data to the Opportunity's Primary Contact, and corresponding Household Account or record, even if the Opportunity is not from an individual. If left unselected, only the organization will receive credit.") 
    npo02_async_household_naming = models.BooleanField(db_column='npo02__Async_Household_Naming__c', custom=True, verbose_name='Async Household Naming', default=models.DEFAULTED_ON_CREATE, help_text='This is a non-exposed setting to toggle household naming code to use an asynchronous version instead of the standard version.') 
    npo02_batch_size = models.DecimalField(db_column='npo02__Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Rollup Batch Size', help_text='The number of records processed at a time when calculating donor statistics.  The default size is 200.  Reduce to a smaller number if the Opportunity Rollups are failing due to system limits.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_disable_household_after_trigger = models.BooleanField(db_column='npo02__DISABLE_HouseholdAfter_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_HHAfter_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_household_before_trigger = models.BooleanField(db_column='npo02__DISABLE_HouseholdBefore_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_HHBefore_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_household_opportunity_trigger = models.BooleanField(db_column='npo02__DISABLE_Household_Opportunity_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Household_Opp_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_households_trigger = models.BooleanField(db_column='npo02__DISABLE_Households_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_Households_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_disable_opportunity_rollup_trigger = models.BooleanField(db_column='npo02__DISABLE_OpportunityRollup_trigger__c', custom=True, verbose_name='DEPRECATED-Disable_OppRollup_trigger', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_enable_opp_rollup_triggers = models.BooleanField(db_column='npo02__Enable_Opp_Rollup_Triggers__c', custom=True, verbose_name='DEPRECATED-Enable_Opp_Rollup_Triggers', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. Trigger behavior now controlled in the Trigger Configuration page of NPSP Settings.') 
    npo02_enable_soft_credit_rollups = models.BooleanField(db_column='npo02__Enable_Soft_Credit_Rollups__c', custom=True, verbose_name='Enable Soft Credit Rollups', default=models.DEFAULTED_ON_CREATE, help_text='Rolls up Closed/Won Opportunity totals to Contact records based on assigned Opportunity Contact Roles. Soft credit rollups only happen in nightly batches, but you can run them manually from the Rollup Donations Batch settings.') 
    npo02_enable_update_check = models.BooleanField(db_column='npo02__Enable_Update_Check__c', custom=True, verbose_name='DEPRECATED-Enable Update Check', default=models.DEFAULTED_ON_CREATE, help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.') 
    npo02_excluded_account_opp_rectypes = models.CharField(db_column='npo02__Excluded_Account_Opp_Rectypes__c', custom=True, max_length=255, verbose_name='Opp RecTypes Excluded for Account Rollup', help_text='Names of Opportunity Record Types to exclude from statistics when rolling up Account Opportunities.', blank=True, null=True) 
    npo02_excluded_account_opp_types = models.CharField(db_column='npo02__Excluded_Account_Opp_Types__c', custom=True, max_length=255, verbose_name='Opp Types Excluded for Account Rollup', help_text="Opportunities that have this value in the Type picklist won't be included in rollups to the Account.", blank=True, null=True) 
    npo02_excluded_contact_opp_rectypes = models.CharField(db_column='npo02__Excluded_Contact_Opp_Rectypes__c', custom=True, max_length=255, verbose_name='Opp RecTypes Excluded for Contact Rollup', help_text="Opportunities with the selected record types won't be included in rollups to the Contact. Control or Command click to select more than one record type.", blank=True, null=True) 
    npo02_excluded_contact_opp_types = models.CharField(db_column='npo02__Excluded_Contact_Opp_Types__c', custom=True, max_length=255, verbose_name='Opp Types Excluded for Contact Rollup', help_text="Opportunities that have this value in the Type picklist won't be included in rollups to the Contact.", blank=True, null=True) 
    npo02_force_fiscal_year = models.BooleanField(db_column='npo02__Force_Fiscal_Year__c', custom=True, verbose_name='Force Fiscal Year', default=models.DEFAULTED_ON_CREATE, help_text="The NPSP automatically checks for the presence of custom fiscal years, and disabled FY settings if they're found to avoid errors.  This setting overrides that safety-check for users who have accidentally enabled custom fiscal years.") 
    npo02_has_package_update = models.CharField(db_column='npo02__Has_Package_Update__c', custom=True, max_length=40, verbose_name='DEPRECATED-Has Package Update', help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_household_contact_roles_on = models.BooleanField(db_column='npo02__Household_Contact_Roles_On__c', custom=True, verbose_name='Household Contact Roles On', default=models.DEFAULTED_ON_CREATE, help_text="Automatically creates Contact Roles for Household members of the Opportunity's Primary Contact.") 
    npo02_household_creation_excluded_recordtypes = models.CharField(db_column='npo02__Household_Creation_Excluded_Recordtypes__c', custom=True, max_length=255, verbose_name='Household Creation Excluded Record Types', help_text='Contact Record Types excluded from Household creation.  This setting is ignored if you are using the Household Account model.', blank=True, null=True) 
    npo02_household_mailing_list_id = models.CharField(db_column='npo02__Household_Mailing_List_ID__c', custom=True, max_length=18, verbose_name='Household Mailing List Report', help_text="The report ID of the Household Mailing List Report used for Household-deduplicated Campaign mailing lists.  Report should be of Campaigns with Contacts, where Member Status does not contain 'Duplicate'", blank=True, null=True) 
    npo02_household_member_contact_role = models.CharField(db_column='npo02__Household_Member_Contact_Role__c', custom=True, max_length=255, verbose_name='Household Member Contact Role', help_text='The Contact Role you want to use for Household Members.', blank=True, null=True) 
    npo02_household_ocr_excluded_recordtypes = models.CharField(db_column='npo02__Household_OCR_Excluded_Recordtypes__c', custom=True, max_length=255, verbose_name='Household OCR Excluded Record Types', help_text='The Contact Record Types you want to exclude from automatic Household Member Contact Role creation. Salesforce would then exclude those Contacts from receiving the Household Member Contact Role when the Opportunity is created.', blank=True, null=True) 
    npo02_household_rules = models.CharField(db_column='npo02__Household_Rules__c', custom=True, max_length=255, verbose_name='Household Object Rules', help_text='Specifies which Contacts will have Households objects automatically created for them.  Note that this is only used for Contacts using the One-to-One or Individual Account Model.  This is ignored for Contacts with the Household Account Model.', blank=True, null=True) 
    npo02_last_update_check = models.DateTimeField(db_column='npo02__Last_Update_Check__c', custom=True, verbose_name='DEPRECATED-Last Update Check', help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_max_package_version = models.CharField(db_column='npo02__Max_Package_Version__c', custom=True, max_length=12, verbose_name='DEPRECATED-Max Package Version', help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_membership_grace_period = models.DecimalField(db_column='npo02__Membership_Grace_Period__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Membership Grace Period', help_text="The length of the grace period (in days) after a membership expires (last end date) before the status moves from 'Grace Period' to 'Expired'.  Defaults to 30 days.", default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_membership_record_types = models.CharField(db_column='npo02__Membership_Record_Types__c', custom=True, max_length=255, verbose_name='Membership Record Type Names', help_text='Names of Opportunity Record Types, such as Membership, that you want to roll up separately from other Opportunity Record Types.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_rollup_scheduled_job_id = models.CharField(db_column='npo02__Opp_Rollup_Scheduled_Job_Id__c', custom=True, max_length=255, verbose_name='Opp Rollup Scheduled Job Id', help_text='Id for the currently scheduled Opportunity Rollup Job', blank=True, null=True) 
    npo02_package_update_url = models.URLField(db_column='npo02__Package_Update_URL__c', custom=True, verbose_name='DEPRECATED-Package Update URL', help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_rollup_n_day_value = models.DecimalField(db_column='npo02__Rollup_N_Day_Value__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Rollup N Day Value', help_text="Provide a value for 'N day' rollups, where 'N' is the number of days from today into the past.  This value defaults to rollup over the past 365 days.", default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_schedule_job_limit = models.DecimalField(db_column='npo02__Schedule_Job_Limit__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Schedule Job Limit', help_text='The number of active scheduled Apex Jobs to look at when scheduling new jobs.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_soft_credit_roles = models.CharField(db_column='npo02__Soft_Credit_Roles__c', custom=True, max_length=255, verbose_name='Soft Credit Roles', help_text='Opportunity Contact Roles you want to include in Soft Credit rollups. Control or Command click to select multiple roles.', blank=True, null=True) 
    npo02_update_check_interval = models.DecimalField(db_column='npo02__Update_Check_Interval__c', custom=True, max_digits=18, decimal_places=0, verbose_name='DEPRECATED-Update Check Interval', help_text='DEPRECATED. New versions of the Nonprofit Success Pack will be automatically installed.', blank=True, null=True) 
    npo02_use_fiscal_year_for_rollups = models.BooleanField(db_column='npo02__Use_Fiscal_Year_for_Rollups__c', custom=True, verbose_name='Use Fiscal Year for Rollups', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will cause Opportunity rollup totals to respect fiscal year, instead of calendar years settings. To set Fiscal Year information, go to Setup->Company Profile->Fiscal Year.  NOTE: Custom Fiscal Year Settings are NOT supported.') 
    npsp_matched_donor_role = models.CharField(db_column='npsp__Matched_Donor_Role__c', custom=True, max_length=255, verbose_name='Matched Donor Role', help_text='The Contact Role you want to use for matched donors. We recommend using "Matched Donor."', blank=True, null=True) 
    npsp_use_dated_conversion_rates = models.BooleanField(db_column='npsp__Use_Dated_Conversion_Rates__c', custom=True, verbose_name='Use Dated Conversion Rates if available', default=models.DEFAULTED_ON_CREATE, help_text='Check this box to use Dated Conversion Rates when Advanced Currency Management is enabled in this Organization. If unchecked and ACM is enabled, all NPSP roll-ups will use the default exchange rate for by currency.') 
    class Meta(models.Model.Meta):
        db_table = 'npo02__Households_Settings__c'
        verbose_name = 'Households Settings'
        verbose_name_plural = 'Households Settings'
        # keyPrefix = 'a04'



class Npo02OpportunityRollupErrorChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02opportunityrolluperrorchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02opportunityrolluperrorchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_error_datetime = models.DateTimeField(db_column='npo02__Error_Datetime__c', custom=True, verbose_name='Error Datetime', sf_read_only=models.READ_ONLY, help_text='Datetime of the error', blank=True, null=True) 
    npo02_error_message = models.CharField(db_column='npo02__Error_Message__c', custom=True, max_length=255, verbose_name='Error Message', sf_read_only=models.READ_ONLY, help_text='Full text of the error message', blank=True, null=True) 
    npo02_error_object_type = models.CharField(db_column='npo02__Error_Object_Type__c', custom=True, max_length=50, verbose_name='Error Object Type', sf_read_only=models.READ_ONLY, help_text='The object type to which this error refers', blank=True, null=True) 
    npo02_error_record_link = models.CharField(db_column='npo02__Error_Record_Link__c', custom=True, max_length=255, verbose_name='Error Record Link', sf_read_only=models.READ_ONLY, help_text='Link to the record on which the error occurred', blank=True, null=True) 
    npo02_error_type = models.CharField(db_column='npo02__Error_Type__c', custom=True, max_length=255, verbose_name='Error Type', sf_read_only=models.READ_ONLY, help_text='Type of error that occurred', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npo02__Opportunity_Rollup_Error__ChangeEvent'
        verbose_name = 'Change Event: DEPRECATED-Opportunity Rollup Errors'
        verbose_name_plural = 'Change Event: DEPRECATED-Opportunity Rollup Errors'
        # keyPrefix = 'None'



class Npo02OpportunityRollupError(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02opportunityrolluperror_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02opportunityrolluperror_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npo02_error_datetime = models.DateTimeField(db_column='npo02__Error_Datetime__c', custom=True, verbose_name='Error Datetime', help_text='Datetime of the error', blank=True, null=True) 
    npo02_error_message = models.CharField(db_column='npo02__Error_Message__c', custom=True, max_length=255, verbose_name='Error Message', help_text='Full text of the error message', blank=True, null=True) 
    npo02_error_object_type = models.CharField(db_column='npo02__Error_Object_Type__c', custom=True, max_length=50, verbose_name='Error Object Type', help_text='The object type to which this error refers', blank=True, null=True) 
    npo02_error_record_link = models.CharField(db_column='npo02__Error_Record_Link__c', custom=True, max_length=255, verbose_name='Error Record Link', help_text='Link to the record on which the error occurred', blank=True, null=True) 
    npo02_error_type = models.CharField(db_column='npo02__Error_Type__c', custom=True, max_length=255, verbose_name='Error Type', help_text='Type of error that occurred', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npo02__Opportunity_Rollup_Error__c'
        verbose_name = 'DEPRECATED-Opportunity Rollup Errors'
        verbose_name_plural = 'Opportunity Rollup Errors'
        # keyPrefix = 'a05'



class Npo02UserRollupFieldSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02userrollupfieldsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02userrollupfieldsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_field_action = models.CharField(db_column='npo02__Field_Action__c', custom=True, max_length=50, verbose_name='Field Action', sf_read_only=models.READ_ONLY, help_text='The rollup action (MIN, MAX, SUM, COUNT) to be performed on the source field', blank=True, null=True) 
    npo02_object_name = models.CharField(db_column='npo02__Object_Name__c', custom=True, max_length=50, verbose_name='Object Name', sf_read_only=models.READ_ONLY, help_text='The object this user rollup is mapped to', blank=True, null=True) 
    npo02_source_field = models.CharField(db_column='npo02__Source_Field__c', custom=True, max_length=50, verbose_name='Source Field', sf_read_only=models.READ_ONLY, help_text='The source field and action from the object for this user rollup', blank=True, null=True) 
    npo02_target_field = models.CharField(db_column='npo02__Target_Field__c', custom=True, max_length=50, verbose_name='Target Field', sf_read_only=models.READ_ONLY, help_text='The target field for placing the rolled-up value for this user defined rollup', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npo02__User_Rollup_Field_Settings__ChangeEvent'
        verbose_name = 'Change Event: User Rollup Field Settings'
        verbose_name_plural = 'Change Event: User Rollup Field Settings'
        # keyPrefix = 'None'



class Npo02UserRollupFieldSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02userrollupfieldsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npo02userrollupfieldsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npo02_field_action = models.CharField(db_column='npo02__Field_Action__c', custom=True, max_length=50, verbose_name='Field Action', help_text='The rollup action (MIN, MAX, SUM, COUNT) to be performed on the source field') 
    npo02_object_name = models.CharField(db_column='npo02__Object_Name__c', custom=True, max_length=50, verbose_name='Object Name', help_text='The object this user rollup is mapped to') 
    npo02_source_field = models.CharField(db_column='npo02__Source_Field__c', custom=True, max_length=50, verbose_name='Source Field', help_text='The source field and action from the object for this user rollup') 
    npo02_target_field = models.CharField(db_column='npo02__Target_Field__c', custom=True, max_length=50, verbose_name='Target Field', help_text='The target field for placing the rolled-up value for this user defined rollup') 
    class Meta(models.Model.Meta):
        db_table = 'npo02__User_Rollup_Field_Settings__c'
        verbose_name = 'User Rollup Field Settings'
        verbose_name_plural = 'User Rollup Field Settings'
        # keyPrefix = 'a06'



class NpspAccountSoftCreditChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaccountsoftcreditchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaccountsoftcreditchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Account_Soft_Credit__ChangeEvent'
        verbose_name = 'Change Event: Account Soft Credit'
        verbose_name_plural = 'Change Event: Account Soft Credit'
        # keyPrefix = 'None'



class NpspAccountSoftCredit(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Account Soft Credit Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaccountsoftcredit_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaccountsoftcredit_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    npsp_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account__c', custom=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Account_Soft_Credit__c'
        verbose_name = 'Account Soft Credit'
        verbose_name_plural = 'Account Soft Credits'
        # keyPrefix = 'a0y'



class NpspAddressVerificationSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddressverificationsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddressverificationsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_address_verification_endpoint = models.URLField(db_column='npsp__Address_Verification_Endpoint__c', custom=True, verbose_name='Address Verification Endpoint-DEPRECATED', sf_read_only=models.READ_ONLY, help_text='URL used for address verification.', blank=True, null=True) 
    npsp_auth_id = models.CharField(db_column='npsp__Auth_ID__c', custom=True, max_length=124, verbose_name='Auth ID-DEPRECATED', sf_read_only=models.READ_ONLY, help_text='The Auth ID from your Secret Pair Key.', blank=True, null=True) 
    npsp_auth_token = models.CharField(db_column='npsp__Auth_Token__c', custom=True, max_length=200, verbose_name='Auth Token-DEPRECATED', sf_read_only=models.READ_ONLY, help_text='The Auth Token from your Secret Pair Key.', blank=True, null=True) 
    npsp_auto_update_addresses = models.BooleanField(db_column='npsp__Auto_Update_Addresses__c', custom=True, verbose_name='Auto-Update Addresses-DEPRECATED', sf_read_only=models.READ_ONLY, default=False, help_text='If checked, changed addresses get updated automatically with the response from the service (when there is one verified result).') 
    npsp_class = models.CharField(db_column='npsp__Class__c', custom=True, max_length=124, verbose_name='Class-DEPRECATED', sf_read_only=models.READ_ONLY, help_text='Salesforce class responsible for contacting the SmartyStreets API and verifying addresses.', blank=True, null=True) 
    npsp_clear_invalid_addresses = models.BooleanField(db_column='npsp__Clear_Invalid_Addresses__c', custom=True, verbose_name='Clear Invalid Addresses-DEPRECATED', sf_read_only=models.READ_ONLY, default=False, help_text='If checked, any US account address that the service marks undeliverable will automatically get cleared out. (You can review the invalid entry in the Address record.)') 
    npsp_enable_automatic_verification = models.BooleanField(db_column='npsp__Enable_Automatic_Verification__c', custom=True, verbose_name='Enable Automatic Verification-DEPRECATED', sf_read_only=models.READ_ONLY, default=False, help_text='Enables automatic address verification for new addresses.') 
    npsp_reject_ambiguous_addresses = models.BooleanField(db_column='npsp__Reject_Ambiguous_Addresses__c', custom=True, verbose_name='Reject Ambiguous Addresses-DEPRECATED', sf_read_only=models.READ_ONLY, default=True, help_text='Marks ambiguous addresses as invalid, when the API returns more than one address. If left unselected, Salesforce will accept the first suggested address as the valid address.') 
    npsp_timeout = models.DecimalField(db_column='npsp__Timeout__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Timeout-DEPRECATED', sf_read_only=models.READ_ONLY, help_text='Callout timeout in seconds', blank=True, null=True) 
    npsp_using_smarty_streets = models.BooleanField(db_column='npsp__Using_SmartyStreets__c', custom=True, verbose_name='Using SmartyStreets-DEPRECATED', sf_read_only=models.READ_ONLY, default=True, help_text='Specifies whether or not you are using the SmartyStreets address verification service.') 
    npsp_zipcode_verification_endpoint = models.URLField(db_column='npsp__Zipcode_Verification_Endpoint__c', custom=True, verbose_name='Zipcode Verification Endpoint-DEPRECATED', sf_read_only=models.READ_ONLY, help_text='URL used for zip code verification.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Address_Verification_Settings__ChangeEvent'
        verbose_name = 'Change Event: Address Verification Settings-DEPRECATED'
        verbose_name_plural = 'Change Event: Address Verification Settings-DEPRECATED'
        # keyPrefix = 'None'



class NpspAddressVerificationSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddressverificationsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddressverificationsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_address_verification_endpoint = models.URLField(db_column='npsp__Address_Verification_Endpoint__c', custom=True, verbose_name='Address Verification Endpoint-DEPRECATED', help_text='URL used for address verification.', blank=True, null=True) 
    npsp_auth_id = models.CharField(db_column='npsp__Auth_ID__c', custom=True, max_length=124, verbose_name='Auth ID-DEPRECATED', help_text='The Auth ID from your Secret Pair Key.', blank=True, null=True) 
    npsp_auth_token = models.CharField(db_column='npsp__Auth_Token__c', custom=True, max_length=200, verbose_name='Auth Token-DEPRECATED', help_text='The Auth Token from your Secret Pair Key.', blank=True, null=True) 
    npsp_auto_update_addresses = models.BooleanField(db_column='npsp__Auto_Update_Addresses__c', custom=True, verbose_name='Auto-Update Addresses-DEPRECATED', default=models.DEFAULTED_ON_CREATE, help_text='If checked, changed addresses get updated automatically with the response from the service (when there is one verified result).') 
    npsp_class = models.CharField(db_column='npsp__Class__c', custom=True, max_length=124, verbose_name='Class-DEPRECATED', help_text='Salesforce class responsible for contacting the SmartyStreets API and verifying addresses.', blank=True, null=True) 
    npsp_clear_invalid_addresses = models.BooleanField(db_column='npsp__Clear_Invalid_Addresses__c', custom=True, verbose_name='Clear Invalid Addresses-DEPRECATED', default=models.DEFAULTED_ON_CREATE, help_text='If checked, any US account address that the service marks undeliverable will automatically get cleared out. (You can review the invalid entry in the Address record.)') 
    npsp_enable_automatic_verification = models.BooleanField(db_column='npsp__Enable_Automatic_Verification__c', custom=True, verbose_name='Enable Automatic Verification-DEPRECATED', default=models.DEFAULTED_ON_CREATE, help_text='Enables automatic address verification for new addresses.') 
    npsp_reject_ambiguous_addresses = models.BooleanField(db_column='npsp__Reject_Ambiguous_Addresses__c', custom=True, verbose_name='Reject Ambiguous Addresses-DEPRECATED', default=models.DEFAULTED_ON_CREATE, help_text='Marks ambiguous addresses as invalid, when the API returns more than one address. If left unselected, Salesforce will accept the first suggested address as the valid address.') 
    npsp_timeout = models.DecimalField(db_column='npsp__Timeout__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Timeout-DEPRECATED', help_text='Callout timeout in seconds', blank=True, null=True) 
    npsp_using_smarty_streets = models.BooleanField(db_column='npsp__Using_SmartyStreets__c', custom=True, verbose_name='Using SmartyStreets-DEPRECATED', default=models.DEFAULTED_ON_CREATE, help_text='Specifies whether or not you are using the SmartyStreets address verification service.') 
    npsp_zipcode_verification_endpoint = models.URLField(db_column='npsp__Zipcode_Verification_Endpoint__c', custom=True, verbose_name='Zipcode Verification Endpoint-DEPRECATED', help_text='URL used for zip code verification.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Address_Verification_Settings__c'
        verbose_name = 'Address Verification Settings-DEPRECATED'
        verbose_name_plural = 'Address Verification Settings-DEPRECATED'
        # keyPrefix = 'a0J'



class NpspAddressChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddresschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddresschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_household_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Household_Account__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_api_response = models.TextField(db_column='npsp__API_Response__c', custom=True, verbose_name='API Response', sf_read_only=models.READ_ONLY, help_text='Contains the raw response or an error message.', blank=True, null=True) 
    npsp_address_type = models.CharField(db_column='npsp__Address_Type__c', custom=True, max_length=255, verbose_name='Address Type', sf_read_only=models.READ_ONLY, default='Home', choices=[('Home', 'Home'), ('Work', 'Work'), ('Vacation Residence', 'Vacation Residence'), ('Other', 'Other')], blank=True, null=True) 
    npsp_administrative_area = models.CharField(db_column='npsp__Administrative_Area__c', custom=True, max_length=255, verbose_name='Administrative Area', sf_read_only=models.READ_ONLY, help_text='Depending on the country and area, could be a city, township, municipality or other civic region associated with this address.', blank=True, null=True) 
    npsp_ambiguous = models.BooleanField(db_column='npsp__Ambiguous__c', custom=True, verbose_name='Ambiguous', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates whether more than on valid address was found when attempting to validate it through an external service.') 
    npsp_congressional_district = models.CharField(db_column='npsp__Congressional_District__c', custom=True, max_length=255, verbose_name='Congressional District', sf_read_only=models.READ_ONLY, help_text='The congressional district to which the address belongs pertains.', blank=True, null=True) 
    npsp_county_name = models.CharField(db_column='npsp__County_Name__c', custom=True, max_length=50, verbose_name='County Name', sf_read_only=models.READ_ONLY, help_text='Name of the county the address is located at.', blank=True, null=True) 
    npsp_default_address = models.BooleanField(db_column='npsp__Default_Address__c', custom=True, verbose_name='Default Address', sf_read_only=models.READ_ONLY, default=False, help_text='Is this the Default Address to use for the Household and its Contacts?') 
    npsp_formula_mailing_address = models.CharField(db_column='npsp__Formula_MailingAddress__c', custom=True, max_length=3900, verbose_name='Mailing Address', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_formula_mailing_street_address = models.CharField(db_column='npsp__Formula_MailingStreetAddress__c', custom=True, max_length=3900, verbose_name='Mailing Street Address', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_geolocation_latitude_s = models.DecimalField(db_column='npsp__Geolocation__Latitude__s', max_digits=9, decimal_places=6, verbose_name='Geolocation (Latitude)', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_geolocation_longitude_s = models.DecimalField(db_column='npsp__Geolocation__Longitude__s', max_digits=9, decimal_places=6, verbose_name='Geolocation (Longitude)', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_geolocation = models.TextField(db_column='npsp__Geolocation__c', custom=True, verbose_name='Geolocation', sf_read_only=models.READ_ONLY, help_text='Location expressed as latitude and longitude.', blank=True, null=True)  # This field type is a guess.
    npsp_latest_end_date = models.DateField(db_column='npsp__Latest_End_Date__c', custom=True, verbose_name='Latest End Date', sf_read_only=models.READ_ONLY, help_text="The most recent ending date that this address was used. Generally used with Latest Start Date to track a date range for an address that's no longer in use.", blank=True, null=True) 
    npsp_latest_start_date = models.DateField(db_column='npsp__Latest_Start_Date__c', custom=True, verbose_name='Latest Start Date', sf_read_only=models.READ_ONLY, help_text="The most recent starting date that this address was used. Generally used with Latest End Date to track a date range for an address that's no longer in use.", blank=True, null=True) 
    npsp_mailing_city = models.CharField(db_column='npsp__MailingCity__c', custom=True, max_length=255, verbose_name='Mailing City', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_mailing_country = models.CharField(db_column='npsp__MailingCountry__c', custom=True, max_length=255, verbose_name='Mailing Country', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_mailing_postal_code = models.CharField(db_column='npsp__MailingPostalCode__c', custom=True, max_length=255, verbose_name='Mailing Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_mailing_state = models.CharField(db_column='npsp__MailingState__c', custom=True, max_length=255, verbose_name='Mailing State/Province', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_mailing_street2 = models.TextField(db_column='npsp__MailingStreet2__c', custom=True, verbose_name='Mailing Street2', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_mailing_street = models.CharField(db_column='npsp__MailingStreet__c', custom=True, max_length=255, verbose_name='Mailing Street', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_pre_verification_address = models.TextField(db_column='npsp__Pre_Verification_Address__c', custom=True, verbose_name='Pre-Verification Address', sf_read_only=models.READ_ONLY, help_text='Stores the address as entered before verification with a remote service, in case any information is lost in the verification process.', blank=True, null=True) 
    npsp_seasonal_end_day = models.CharField(db_column='npsp__Seasonal_End_Day__c', custom=True, max_length=255, verbose_name='Seasonal End Day', sf_read_only=models.READ_ONLY, help_text='The day of the month when this address no longer replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12'), ('13', '13'), ('14', '14'), ('15', '15'), ('16', '16'), ('17', '17'), ('18', '18'), ('19', '19'), ('20', '20'), ('21', '21'), ('22', '22'), ('23', '23'), ('24', '24'), ('25', '25'), ('26', '26'), ('27', '27'), ('28', '28'), ('29', '29'), ('30', '30'), ('31', '31')], blank=True, null=True) 
    npsp_seasonal_end_month = models.CharField(db_column='npsp__Seasonal_End_Month__c', custom=True, max_length=255, verbose_name='Seasonal End Month', sf_read_only=models.READ_ONLY, help_text='The month of the year when this address no longer replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12')], blank=True, null=True) 
    npsp_seasonal_start_day = models.CharField(db_column='npsp__Seasonal_Start_Day__c', custom=True, max_length=255, verbose_name='Seasonal Start Day', sf_read_only=models.READ_ONLY, help_text='The day of the month when this address replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12'), ('13', '13'), ('14', '14'), ('15', '15'), ('16', '16'), ('17', '17'), ('18', '18'), ('19', '19'), ('20', '20'), ('21', '21'), ('22', '22'), ('23', '23'), ('24', '24'), ('25', '25'), ('26', '26'), ('27', '27'), ('28', '28'), ('29', '29'), ('30', '30'), ('31', '31')], blank=True, null=True) 
    npsp_seasonal_start_month = models.CharField(db_column='npsp__Seasonal_Start_Month__c', custom=True, max_length=255, verbose_name='Seasonal Start Month', sf_read_only=models.READ_ONLY, help_text='The month of the year when this address replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12')], blank=True, null=True) 
    npsp_state_lower_district = models.CharField(db_column='npsp__State_Lower_District__c', custom=True, max_length=255, verbose_name='State Lower District', sf_read_only=models.READ_ONLY, help_text='The state lower district (such as a state assembly district) this address belongs to.', blank=True, null=True) 
    npsp_state_upper_district = models.CharField(db_column='npsp__State_Upper_District__c', custom=True, max_length=255, verbose_name='State Upper District', sf_read_only=models.READ_ONLY, help_text='The state upper district (such as state senate district) this address belongs to.', blank=True, null=True) 
    npsp_verification_status = models.CharField(db_column='npsp__Verification_Status__c', custom=True, max_length=255, verbose_name='Verification Status', sf_read_only=models.READ_ONLY, help_text='If this address requires verification, click the Verify Address button at the top of this page. Consult the Help documentation in the Power of Us Hub for more information.', blank=True, null=True) 
    npsp_verified = models.BooleanField(db_column='npsp__Verified__c', custom=True, verbose_name='Verified', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates whether the address has been verified by an external address verification service.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Address__ChangeEvent'
        verbose_name = 'Change Event: Address'
        verbose_name_plural = 'Change Event: Address'
        # keyPrefix = 'None'



class NpspAddressFeed(models.Model):
    parent = models.ForeignKey('NpspAddress', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    type = models.CharField(max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('AdvancedTextPost', 'Advanced Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('ProfileSkillPost', 'Profile Skill Post'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddressfeed_createdby_set', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    comment_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    like_count = models.IntegerField(sf_read_only=models.READ_ONLY)
    title = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    link_url = models.URLField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    is_rich_text = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    related_record = models.ForeignKey(ContentVersion, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [ContentVersion, WorkThanks]
    inserted_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddressfeed_insertedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    best_comment = models.ForeignKey(FeedComment, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Address__Feed'
        verbose_name = 'Feed: Address'
        verbose_name_plural = 'Feed: Address'
        # keyPrefix = 'None'



class NpspAddress(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Address ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddress_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspaddress_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_household_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Household_Account__c', custom=True)  # Master Detail Relationship 0
    npsp_api_response = models.TextField(db_column='npsp__API_Response__c', custom=True, verbose_name='API Response', help_text='Contains the raw response or an error message.', blank=True, null=True) 
    npsp_address_type = models.CharField(db_column='npsp__Address_Type__c', custom=True, max_length=255, verbose_name='Address Type', default=models.DEFAULTED_ON_CREATE, choices=[('Home', 'Home'), ('Work', 'Work'), ('Vacation Residence', 'Vacation Residence'), ('Other', 'Other')], blank=True, null=True) 
    npsp_administrative_area = models.CharField(db_column='npsp__Administrative_Area__c', custom=True, max_length=255, verbose_name='Administrative Area', help_text='Depending on the country and area, could be a city, township, municipality or other civic region associated with this address.', blank=True, null=True) 
    npsp_ambiguous = models.BooleanField(db_column='npsp__Ambiguous__c', custom=True, verbose_name='Ambiguous', default=models.DEFAULTED_ON_CREATE, help_text='Indicates whether more than on valid address was found when attempting to validate it through an external service.') 
    npsp_congressional_district = models.CharField(db_column='npsp__Congressional_District__c', custom=True, max_length=255, verbose_name='Congressional District', help_text='The congressional district to which the address belongs pertains.', blank=True, null=True) 
    npsp_county_name = models.CharField(db_column='npsp__County_Name__c', custom=True, max_length=50, verbose_name='County Name', help_text='Name of the county the address is located at.', blank=True, null=True) 
    npsp_default_address = models.BooleanField(db_column='npsp__Default_Address__c', custom=True, verbose_name='Default Address', default=models.DEFAULTED_ON_CREATE, help_text='Is this the Default Address to use for the Household and its Contacts?') 
    npsp_formula_mailing_address = models.CharField(db_column='npsp__Formula_MailingAddress__c', custom=True, max_length=1300, verbose_name='Mailing Address', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_formula_mailing_street_address = models.CharField(db_column='npsp__Formula_MailingStreetAddress__c', custom=True, max_length=1300, verbose_name='Mailing Street Address', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_geolocation_latitude_s = models.DecimalField(db_column='npsp__Geolocation__Latitude__s', max_digits=9, decimal_places=6, verbose_name='Geolocation (Latitude)', blank=True, null=True) 
    npsp_geolocation_longitude_s = models.DecimalField(db_column='npsp__Geolocation__Longitude__s', max_digits=9, decimal_places=6, verbose_name='Geolocation (Longitude)', blank=True, null=True) 
    npsp_geolocation = models.TextField(db_column='npsp__Geolocation__c', custom=True, verbose_name='Geolocation', sf_read_only=models.READ_ONLY, help_text='Location expressed as latitude and longitude.', blank=True, null=True)  # This field type is a guess.
    npsp_latest_end_date = models.DateField(db_column='npsp__Latest_End_Date__c', custom=True, verbose_name='Latest End Date', help_text="The most recent ending date that this address was used. Generally used with Latest Start Date to track a date range for an address that's no longer in use.", blank=True, null=True) 
    npsp_latest_start_date = models.DateField(db_column='npsp__Latest_Start_Date__c', custom=True, verbose_name='Latest Start Date', help_text="The most recent starting date that this address was used. Generally used with Latest End Date to track a date range for an address that's no longer in use.", blank=True, null=True) 
    npsp_mailing_city = models.CharField(db_column='npsp__MailingCity__c', custom=True, max_length=255, verbose_name='Mailing City', blank=True, null=True) 
    npsp_mailing_country = models.CharField(db_column='npsp__MailingCountry__c', custom=True, max_length=255, verbose_name='Mailing Country', blank=True, null=True) 
    npsp_mailing_postal_code = models.CharField(db_column='npsp__MailingPostalCode__c', custom=True, max_length=255, verbose_name='Mailing Zip/Postal Code', blank=True, null=True) 
    npsp_mailing_state = models.CharField(db_column='npsp__MailingState__c', custom=True, max_length=255, verbose_name='Mailing State/Province', blank=True, null=True) 
    npsp_mailing_street2 = models.TextField(db_column='npsp__MailingStreet2__c', custom=True, verbose_name='Mailing Street2', blank=True, null=True) 
    npsp_mailing_street = models.CharField(db_column='npsp__MailingStreet__c', custom=True, max_length=255, verbose_name='Mailing Street', blank=True, null=True) 
    npsp_pre_verification_address = models.TextField(db_column='npsp__Pre_Verification_Address__c', custom=True, verbose_name='Pre-Verification Address', help_text='Stores the address as entered before verification with a remote service, in case any information is lost in the verification process.', blank=True, null=True) 
    npsp_seasonal_end_day = models.CharField(db_column='npsp__Seasonal_End_Day__c', custom=True, max_length=255, verbose_name='Seasonal End Day', help_text='The day of the month when this address no longer replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12'), ('13', '13'), ('14', '14'), ('15', '15'), ('16', '16'), ('17', '17'), ('18', '18'), ('19', '19'), ('20', '20'), ('21', '21'), ('22', '22'), ('23', '23'), ('24', '24'), ('25', '25'), ('26', '26'), ('27', '27'), ('28', '28'), ('29', '29'), ('30', '30'), ('31', '31')], blank=True, null=True) 
    npsp_seasonal_end_month = models.CharField(db_column='npsp__Seasonal_End_Month__c', custom=True, max_length=255, verbose_name='Seasonal End Month', help_text='The month of the year when this address no longer replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12')], blank=True, null=True) 
    npsp_seasonal_start_day = models.CharField(db_column='npsp__Seasonal_Start_Day__c', custom=True, max_length=255, verbose_name='Seasonal Start Day', help_text='The day of the month when this address replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12'), ('13', '13'), ('14', '14'), ('15', '15'), ('16', '16'), ('17', '17'), ('18', '18'), ('19', '19'), ('20', '20'), ('21', '21'), ('22', '22'), ('23', '23'), ('24', '24'), ('25', '25'), ('26', '26'), ('27', '27'), ('28', '28'), ('29', '29'), ('30', '30'), ('31', '31')], blank=True, null=True) 
    npsp_seasonal_start_month = models.CharField(db_column='npsp__Seasonal_Start_Month__c', custom=True, max_length=255, verbose_name='Seasonal Start Month', help_text='The month of the year when this address replaces the default address.', choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11', '11'), ('12', '12')], blank=True, null=True) 
    npsp_state_lower_district = models.CharField(db_column='npsp__State_Lower_District__c', custom=True, max_length=255, verbose_name='State Lower District', help_text='The state lower district (such as a state assembly district) this address belongs to.', blank=True, null=True) 
    npsp_state_upper_district = models.CharField(db_column='npsp__State_Upper_District__c', custom=True, max_length=255, verbose_name='State Upper District', help_text='The state upper district (such as state senate district) this address belongs to.', blank=True, null=True) 
    npsp_verification_status = models.CharField(db_column='npsp__Verification_Status__c', custom=True, max_length=255, verbose_name='Verification Status', help_text='If this address requires verification, click the Verify Address button at the top of this page. Consult the Help documentation in the Power of Us Hub for more information.', blank=True, null=True) 
    npsp_verified = models.BooleanField(db_column='npsp__Verified__c', custom=True, verbose_name='Verified', default=models.DEFAULTED_ON_CREATE, help_text='Indicates whether the address has been verified by an external address verification service.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Address__c'
        verbose_name = 'Address'
        verbose_name_plural = 'Addresses'
        # keyPrefix = 'a0K'



class NpspAllocationChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocationchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocationchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_amount = models.DecimalField(db_column='npsp__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', sf_read_only=models.READ_ONLY, help_text='Amount of the opportunity to allocate to this general accounting unit. Leave blank for percent based allocations.', blank=True, null=True) 
    npsp_campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='npsp__Campaign__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_general_accounting_unit = models.ForeignKey('NpspGeneralAccountingUnit', models.DO_NOTHING, db_column='npsp__General_Accounting_Unit__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_percent = models.DecimalField(db_column='npsp__Percent__c', custom=True, max_digits=9, decimal_places=6, verbose_name='Percent', sf_read_only=models.READ_ONLY, help_text='Percent of opportunity amount to allocate to this general accounting unit. Modifying an opportunity amount of a percent based allocation will modify the allocation amount.', blank=True, null=True) 
    npsp_recurring_donation = models.ForeignKey(Npe03RecurringDonation, models.DO_NOTHING, db_column='npsp__Recurring_Donation__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Allocation__ChangeEvent'
        verbose_name = 'Change Event: GAU Allocation'
        verbose_name_plural = 'Change Event: GAU Allocation'
        # keyPrefix = 'None'



class NpspAllocation(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='GAU Allocation Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocation_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocation_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_amount = models.DecimalField(db_column='npsp__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', help_text='Amount of the opportunity to allocate to this general accounting unit. Leave blank for percent based allocations.', blank=True, null=True) 
    npsp_campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='npsp__Campaign__c', custom=True, blank=True, null=True) 
    npsp_general_accounting_unit = models.ForeignKey('NpspGeneralAccountingUnit', models.DO_NOTHING, db_column='npsp__General_Accounting_Unit__c', custom=True) 
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, blank=True, null=True) 
    npsp_percent = models.DecimalField(db_column='npsp__Percent__c', custom=True, max_digits=9, decimal_places=6, verbose_name='Percent', help_text='Percent of opportunity amount to allocate to this general accounting unit. Modifying an opportunity amount of a percent based allocation will modify the allocation amount.', blank=True, null=True) 
    npsp_recurring_donation = models.ForeignKey(Npe03RecurringDonation, models.DO_NOTHING, db_column='npsp__Recurring_Donation__c', custom=True, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Allocation__c'
        verbose_name = 'GAU Allocation'
        verbose_name_plural = 'GAU Allocations'
        # keyPrefix = 'a0L'



class NpspAllocationsSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocationssettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocationssettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_default_allocations_enabled = models.BooleanField(db_column='npsp__Default_Allocations_Enabled__c', custom=True, verbose_name='Default Allocations Enabled', sf_read_only=models.READ_ONLY, default=False, help_text='Enabling Default Allocations creates an Allocation object for each Opportunity. This enables reporting on allocations to a default General Accounting Unit, but uses more data storage.') 
    npsp_default = models.CharField(db_column='npsp__Default__c', custom=True, max_length=255, verbose_name='Default General Accounting Unit', sf_read_only=models.READ_ONLY, help_text='Holds the ID of the default General Accounting Unit for creation of default allocations or for the allocation of non allocated amounts.', blank=True, null=True) 
    npsp_excluded_opp_rec_types = models.CharField(db_column='npsp__Excluded_Opp_RecTypes__c', custom=True, max_length=255, verbose_name='Excluded Opp RecTypes', sf_read_only=models.READ_ONLY, help_text='Opportunity Record Types to exclude from calculations of Allocations rollups.', blank=True, null=True) 
    npsp_excluded_opp_types = models.CharField(db_column='npsp__Excluded_Opp_Types__c', custom=True, max_length=255, verbose_name='Excluded Opp Types', sf_read_only=models.READ_ONLY, help_text='Excluded Opportunity Types from Allocations rollups.', blank=True, null=True) 
    npsp_rollup_n_day_value = models.DecimalField(db_column='npsp__Rollup_N_Day_Value__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Rollup N Day Value', sf_read_only=models.READ_ONLY, help_text='This value affects the number of days to count for N Days Allocations rollup fields.', blank=True, null=True) 
    npsp_use_fiscal_year_for_rollups = models.BooleanField(db_column='npsp__Use_Fiscal_Year_for_Rollups__c', custom=True, verbose_name='Use Fiscal Year for Rollups', sf_read_only=models.READ_ONLY, default=False, help_text='Checking this box will cause Allocation rollup totals to respect fiscal year, instead of calendar years settings. To set Fiscal Year information, go to Setup->Company Profile->Fiscal Year. NOTE: Custom Fiscal Year Settings are NOT supported.') 
    npsp_payment_allocations_enabled = models.BooleanField(db_column='npsp__Payment_Allocations_Enabled__c', custom=True, verbose_name='Payment Allocations Enabled', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates whether Allocations can be set at the Payment level. Review the documentation about Payment-level Allocations before changing this setting.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Allocations_Settings__ChangeEvent'
        verbose_name = 'Change Event: Allocations Settings'
        verbose_name_plural = 'Change Event: Allocations Settings'
        # keyPrefix = 'None'



class NpspAllocationsSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocationssettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspallocationssettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_default_allocations_enabled = models.BooleanField(db_column='npsp__Default_Allocations_Enabled__c', custom=True, verbose_name='Default Allocations Enabled', default=models.DEFAULTED_ON_CREATE, help_text='Enabling Default Allocations creates an Allocation object for each Opportunity. This enables reporting on allocations to a default General Accounting Unit, but uses more data storage.') 
    npsp_default = models.CharField(db_column='npsp__Default__c', custom=True, max_length=255, verbose_name='Default General Accounting Unit', help_text='Holds the ID of the default General Accounting Unit for creation of default allocations or for the allocation of non allocated amounts.', blank=True, null=True) 
    npsp_excluded_opp_rec_types = models.CharField(db_column='npsp__Excluded_Opp_RecTypes__c', custom=True, max_length=255, verbose_name='Excluded Opp RecTypes', help_text='Opportunity Record Types to exclude from calculations of Allocations rollups.', blank=True, null=True) 
    npsp_excluded_opp_types = models.CharField(db_column='npsp__Excluded_Opp_Types__c', custom=True, max_length=255, verbose_name='Excluded Opp Types', help_text='Excluded Opportunity Types from Allocations rollups.', blank=True, null=True) 
    npsp_rollup_n_day_value = models.DecimalField(db_column='npsp__Rollup_N_Day_Value__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Rollup N Day Value', help_text='This value affects the number of days to count for N Days Allocations rollup fields.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_use_fiscal_year_for_rollups = models.BooleanField(db_column='npsp__Use_Fiscal_Year_for_Rollups__c', custom=True, verbose_name='Use Fiscal Year for Rollups', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will cause Allocation rollup totals to respect fiscal year, instead of calendar years settings. To set Fiscal Year information, go to Setup->Company Profile->Fiscal Year. NOTE: Custom Fiscal Year Settings are NOT supported.') 
    npsp_payment_allocations_enabled = models.BooleanField(db_column='npsp__Payment_Allocations_Enabled__c', custom=True, verbose_name='Payment Allocations Enabled', default=models.DEFAULTED_ON_CREATE, help_text='Indicates whether Allocations can be set at the Payment level. Review the documentation about Payment-level Allocations before changing this setting.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Allocations_Settings__c'
        verbose_name = 'Allocations Settings'
        verbose_name_plural = 'Allocations Settings'
        # keyPrefix = 'a0M'



class NpspBatchDataEntrySettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatchdataentrysettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatchdataentrysettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_allow_blank_opportunity_names = models.BooleanField(db_column='npsp__Allow_Blank_Opportunity_Names__c', custom=True, verbose_name='Allow Blank Opportunity Names', sf_read_only=models.READ_ONLY, default=False, help_text='If set, then Batch Data Entry will never name Opportunities, even if they are blank (not included on the BDE page).') 
    npsp_opportunity_naming = models.BooleanField(db_column='npsp__Opportunity_Naming__c', custom=True, verbose_name='Opportunity Naming', sf_read_only=models.READ_ONLY, default=False, help_text='This setting automatically generates the record name for batch entered Opportunity records based on the value of the entered fields.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Batch_Data_Entry_Settings__ChangeEvent'
        verbose_name = 'Change Event: Batch Data Entry Settings'
        verbose_name_plural = 'Change Event: Batch Data Entry Settings'
        # keyPrefix = 'None'



class NpspBatchDataEntrySettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatchdataentrysettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatchdataentrysettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_allow_blank_opportunity_names = models.BooleanField(db_column='npsp__Allow_Blank_Opportunity_Names__c', custom=True, verbose_name='Allow Blank Opportunity Names', default=models.DEFAULTED_ON_CREATE, help_text='If set, then Batch Data Entry will never name Opportunities, even if they are blank (not included on the BDE page).') 
    npsp_opportunity_naming = models.BooleanField(db_column='npsp__Opportunity_Naming__c', custom=True, verbose_name='Opportunity Naming', default=models.DEFAULTED_ON_CREATE, help_text='This setting automatically generates the record name for batch entered Opportunity records based on the value of the entered fields.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Batch_Data_Entry_Settings__c'
        verbose_name = 'Batch Data Entry Settings'
        verbose_name_plural = 'Batch Data Entry Settings'
        # keyPrefix = 'a0N'



class NpspBatchChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatchchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatchchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_batch_status = models.CharField(db_column='npsp__Batch_Status__c', custom=True, max_length=255, verbose_name='Batch Status', sf_read_only=models.READ_ONLY, default='In Progress', choices=[('In Progress', 'In Progress'), ('Complete', 'Complete')], blank=True, null=True) 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_number_of_items = models.DecimalField(db_column='npsp__Number_of_Items__c', custom=True, max_digits=4, decimal_places=0, verbose_name='Number of Items', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_object_name = models.CharField(db_column='npsp__Object_Name__c', custom=True, max_length=100, verbose_name='Object Name', sf_read_only=models.READ_ONLY, help_text='API Name of the object of which this is a batch.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Batch__ChangeEvent'
        verbose_name = 'Change Event: Batch'
        verbose_name_plural = 'Change Event: Batch'
        # keyPrefix = 'None'



class NpspBatchHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('NpspBatch', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Name', 'Batch Name'), ('npsp__Batch_Status__c', 'Batch Status'), ('created', 'Created.'), ('npsp__Description__c', 'Description'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('npsp__Number_of_Items__c', 'Number of Items'), ('npsp__Object_Name__c', 'Object Name'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Batch__History'
        verbose_name = 'History: Batch'
        verbose_name_plural = 'History: Batch'
        # keyPrefix = 'None'



class NpspBatch(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Batch Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatch_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspbatch_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_batch_status = models.CharField(db_column='npsp__Batch_Status__c', custom=True, max_length=255, verbose_name='Batch Status', default=models.DEFAULTED_ON_CREATE, choices=[('In Progress', 'In Progress'), ('Complete', 'Complete')], blank=True, null=True) 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', blank=True, null=True) 
    npsp_number_of_items = models.DecimalField(db_column='npsp__Number_of_Items__c', custom=True, max_digits=4, decimal_places=0, verbose_name='Number of Items', blank=True, null=True) 
    npsp_object_name = models.CharField(db_column='npsp__Object_Name__c', custom=True, max_length=100, verbose_name='Object Name', help_text='API Name of the object of which this is a batch.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Batch__c'
        verbose_name = 'Batch'
        verbose_name_plural = 'Batches'
        # keyPrefix = 'a0O'



class NpspCustomizableRollupSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspcustomizablerollupsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspcustomizablerollupsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_cmt_api_status = models.TextField(db_column='npsp__CMT_API_Status__c', custom=True, verbose_name='CMT API Deployment Result', sf_read_only=models.READ_ONLY, help_text='JSON for the CMT deployment result\n{ "jobId": "repsonse" }', blank=True, null=True) 
    npsp_customizable_rollups_enabled = models.BooleanField(db_column='npsp__Customizable_Rollups_Enabled__c', custom=True, verbose_name='Enable Customizable Rollups', sf_read_only=models.READ_ONLY, default=False, help_text='Check this box to enable the new NPSP Customizable Rollup Engine') 
    npsp_disable_related_records_filter = models.BooleanField(db_column='npsp__Disable_Related_Records_Filter__c', custom=True, verbose_name='Disable Related Records Filter', sf_read_only=models.READ_ONLY, default=False, help_text='Check this box to prevent hard credit and soft credit rollups on Accounts and Contacts from only processing Account and Contact records that have existing related Opportunity or Opportunity Contact Role records.') 
    npsp_rollups_account_batch_size = models.DecimalField(db_column='npsp__Rollups_Account_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Account Hard Credit Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating donor rollups to the Account object.', blank=True, null=True) 
    npsp_rollups_account_skew_mode_batch_size = models.DecimalField(db_column='npsp__Rollups_Account_SkewMode_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Account Skew Mode Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating donor rollups to the Account object using Skew Mode.', blank=True, null=True) 
    npsp_rollups_account_soft_credit_batch_size = models.DecimalField(db_column='npsp__Rollups_Account_Soft_Credit_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Account Soft Credit Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating soft credit donor rollups to the Account object.', blank=True, null=True) 
    npsp_rollups_contact_batch_size = models.DecimalField(db_column='npsp__Rollups_Contact_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Contact Hard Credit Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating hard credit donor rollups to the Contact object.', blank=True, null=True) 
    npsp_rollups_contact_skew_mode_batch_size = models.DecimalField(db_column='npsp__Rollups_Contact_SkewMode_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Contact Skew Mode Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating donor rollups to the Contact object using Skew Mode.', blank=True, null=True) 
    npsp_rollups_contact_soft_credit_batch_size = models.DecimalField(db_column='npsp__Rollups_Contact_Soft_Credit_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Contact Soft Credit Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating soft credit donor rollups to the Contact object.', blank=True, null=True) 
    npsp_rollups_gau_batch_size = models.DecimalField(db_column='npsp__Rollups_GAU_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='GAU Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating donor rollups to the General Accounting Unit object.', blank=True, null=True) 
    npsp_rollups_limit_on_attached_opps_for_skew = models.DecimalField(db_column='npsp__Rollups_Limit_on_Attached_Opps_for_Skew__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Skew Mode Threshold', sf_read_only=models.READ_ONLY, help_text='The maximum number of related Opportunities on an Account or Contact allowed in non-Skew Mode Rollup Batch Jobs. An Account or Contact with more than this number of related Opportunities will always be rolled up using Skew Mode.', blank=True, null=True) 
    npsp_rollups_skew_dispatcher_batch_size = models.DecimalField(db_column='npsp__Rollups_Skew_Dispatcher_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Skew Mode Dispatcher Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of Account, Contact, or GAU records per batch to select for Skew Mode processing.', blank=True, null=True) 
    npsp_account_hard_credit_non_skew_incremental = models.BooleanField(db_column='npsp__AccountHardCreditNonSkew_Incremental__c', custom=True, verbose_name='Incremental Account Hard Credit Non-Skew', sf_read_only=models.READ_ONLY, default=True, help_text='When checked, the Account Hard Credit (Non-Skew) nightly job limits the number of Accounts selected for recalculation by looking for recently updated Opportunities on those Accounts. This helps to improve Customizable Rollup nightly job performance.') 
    npsp_contact_hard_credit_non_skew_incremental = models.BooleanField(db_column='npsp__ContactHardCreditNonSkew_Incremental__c', custom=True, verbose_name='Incremental Contact Hard Credit Non-Skew', sf_read_only=models.READ_ONLY, default=True, help_text='When checked, the Contact Hard Credit (Non-Skew) nightly job limits the number of Contacts selected for recalculation by looking for those Contacts recently updated Opportunities. This helps to improve Customizable Rollup nightly job performance.') 
    npsp_rollups_incremental_last_ndays_fld_override = models.CharField(db_column='npsp__Rollups_IncrementalLastNDays_FldOverride__c', custom=True, max_length=43, verbose_name='Incremental: Last N Days Field Override', sf_read_only=models.READ_ONLY, help_text='For Incremental Rollups Override Use Only. This value overrides the field used to filter related Opportunities to determine which Accounts, Contacts, GAUs or RDs are recalculated during a nightly scheduled job. Defaults to SystemModStamp.', blank=True, null=True) 
    npsp_rollups_incremental_last_ndays_val_override = models.DecimalField(db_column='npsp__Rollups_IncrementalLastNDays_ValOverride__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Incremental: Last N Days Value Override', sf_read_only=models.READ_ONLY, help_text='For Incremental Rollups Override Use Only. This value overrides the calculated number of days used to filter related Opportunities to determine which Accounts, Contacts, GAUs or RDs are recalculated during a nightly scheduled job.', blank=True, null=True) 
    npsp_chunk_size_account_hard_credit = models.DecimalField(db_column='npsp__ChunkSize_Account_HardCredit__c', custom=True, max_digits=8, decimal_places=0, verbose_name='LDV: Account Hard Credit Chunk Size', sf_read_only=models.READ_ONLY, help_text='FOR LDV ORGS ONLY WITH SFDO GUIDANCE. To avoid a Query Timeout in the rollup batch job in orgs with many millions of Accounts, this specifies the maximum number of Accounts processed in each batch.', blank=True, null=True) 
    npsp_chunk_size_contact_hard_credit = models.DecimalField(db_column='npsp__ChunkSize_Contact_HardCredit__c', custom=True, max_digits=8, decimal_places=0, verbose_name='LDV: Contact Hard Credit Chunk Size', sf_read_only=models.READ_ONLY, help_text='FOR LDV ORGS ONLY WITH SFDO GUIDANCE. To avoid a Query Timeout in the rollup batch job in orgs with many millions of Contacts, this specifies the maximum number of Contacts processed in each batch.', blank=True, null=True) 
    npsp_chunk_size_contact_soft_credit = models.DecimalField(db_column='npsp__ChunkSize_Contact_SoftCredit__c', custom=True, max_digits=8, decimal_places=0, verbose_name='LDV: Contact Soft Credit Chunk Size', sf_read_only=models.READ_ONLY, help_text='FOR LDV ORGS ONLY WITH SFDO GUIDANCE. To avoid a Query Timeout in the rollup batch job in orgs with many millions of Contacts, this specifies the maximum number of Contacts processed in each batch.', blank=True, null=True) 
    npsp_rollups_acct_contact_soft_credit_batch_size = models.DecimalField(db_column='npsp__Rollups_AcctContactSoftCredit_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Contact Soft Credit to Acct Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating soft credit donor rollups to the Account object.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Customizable_Rollup_Settings__ChangeEvent'
        verbose_name = 'Change Event: Customizable Rollup Settings'
        verbose_name_plural = 'Change Event: Customizable Rollup Settings'
        # keyPrefix = 'None'



class NpspCustomizableRollupSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspcustomizablerollupsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspcustomizablerollupsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_cmt_api_status = models.TextField(db_column='npsp__CMT_API_Status__c', custom=True, verbose_name='CMT API Deployment Result', help_text='JSON for the CMT deployment result\n{ "jobId": "repsonse" }', blank=True, null=True) 
    npsp_customizable_rollups_enabled = models.BooleanField(db_column='npsp__Customizable_Rollups_Enabled__c', custom=True, verbose_name='Enable Customizable Rollups', default=models.DEFAULTED_ON_CREATE, help_text='Check this box to enable the new NPSP Customizable Rollup Engine') 
    npsp_disable_related_records_filter = models.BooleanField(db_column='npsp__Disable_Related_Records_Filter__c', custom=True, verbose_name='Disable Related Records Filter', default=models.DEFAULTED_ON_CREATE, help_text='Check this box to prevent hard credit and soft credit rollups on Accounts and Contacts from only processing Account and Contact records that have existing related Opportunity or Opportunity Contact Role records.') 
    npsp_rollups_account_batch_size = models.DecimalField(db_column='npsp__Rollups_Account_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Account Hard Credit Batch Size', help_text='Number of records per batch to process when recalculating donor rollups to the Account object.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_account_skew_mode_batch_size = models.DecimalField(db_column='npsp__Rollups_Account_SkewMode_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Account Skew Mode Batch Size', help_text='Number of records per batch to process when recalculating donor rollups to the Account object using Skew Mode.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_account_soft_credit_batch_size = models.DecimalField(db_column='npsp__Rollups_Account_Soft_Credit_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Account Soft Credit Batch Size', help_text='Number of records per batch to process when recalculating soft credit donor rollups to the Account object.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_contact_batch_size = models.DecimalField(db_column='npsp__Rollups_Contact_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Contact Hard Credit Batch Size', help_text='Number of records per batch to process when recalculating hard credit donor rollups to the Contact object.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_contact_skew_mode_batch_size = models.DecimalField(db_column='npsp__Rollups_Contact_SkewMode_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Contact Skew Mode Batch Size', help_text='Number of records per batch to process when recalculating donor rollups to the Contact object using Skew Mode.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_contact_soft_credit_batch_size = models.DecimalField(db_column='npsp__Rollups_Contact_Soft_Credit_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Contact Soft Credit Batch Size', help_text='Number of records per batch to process when recalculating soft credit donor rollups to the Contact object.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_gau_batch_size = models.DecimalField(db_column='npsp__Rollups_GAU_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='GAU Batch Size', help_text='Number of records per batch to process when recalculating donor rollups to the General Accounting Unit object.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_limit_on_attached_opps_for_skew = models.DecimalField(db_column='npsp__Rollups_Limit_on_Attached_Opps_for_Skew__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Skew Mode Threshold', help_text='The maximum number of related Opportunities on an Account or Contact allowed in non-Skew Mode Rollup Batch Jobs. An Account or Contact with more than this number of related Opportunities will always be rolled up using Skew Mode.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_rollups_skew_dispatcher_batch_size = models.DecimalField(db_column='npsp__Rollups_Skew_Dispatcher_Batch_Size__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Skew Mode Dispatcher Batch Size', help_text='Number of Account, Contact, or GAU records per batch to select for Skew Mode processing.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_account_hard_credit_non_skew_incremental = models.BooleanField(db_column='npsp__AccountHardCreditNonSkew_Incremental__c', custom=True, verbose_name='Incremental Account Hard Credit Non-Skew', default=models.DEFAULTED_ON_CREATE, help_text='When checked, the Account Hard Credit (Non-Skew) nightly job limits the number of Accounts selected for recalculation by looking for recently updated Opportunities on those Accounts. This helps to improve Customizable Rollup nightly job performance.') 
    npsp_contact_hard_credit_non_skew_incremental = models.BooleanField(db_column='npsp__ContactHardCreditNonSkew_Incremental__c', custom=True, verbose_name='Incremental Contact Hard Credit Non-Skew', default=models.DEFAULTED_ON_CREATE, help_text='When checked, the Contact Hard Credit (Non-Skew) nightly job limits the number of Contacts selected for recalculation by looking for those Contacts recently updated Opportunities. This helps to improve Customizable Rollup nightly job performance.') 
    npsp_rollups_incremental_last_ndays_fld_override = models.CharField(db_column='npsp__Rollups_IncrementalLastNDays_FldOverride__c', custom=True, max_length=43, verbose_name='Incremental: Last N Days Field Override', help_text='For Incremental Rollups Override Use Only. This value overrides the field used to filter related Opportunities to determine which Accounts, Contacts, GAUs or RDs are recalculated during a nightly scheduled job. Defaults to SystemModStamp.', blank=True, null=True) 
    npsp_rollups_incremental_last_ndays_val_override = models.DecimalField(db_column='npsp__Rollups_IncrementalLastNDays_ValOverride__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Incremental: Last N Days Value Override', help_text='For Incremental Rollups Override Use Only. This value overrides the calculated number of days used to filter related Opportunities to determine which Accounts, Contacts, GAUs or RDs are recalculated during a nightly scheduled job.', blank=True, null=True) 
    npsp_chunk_size_account_hard_credit = models.DecimalField(db_column='npsp__ChunkSize_Account_HardCredit__c', custom=True, max_digits=8, decimal_places=0, verbose_name='LDV: Account Hard Credit Chunk Size', help_text='FOR LDV ORGS ONLY WITH SFDO GUIDANCE. To avoid a Query Timeout in the rollup batch job in orgs with many millions of Accounts, this specifies the maximum number of Accounts processed in each batch.', blank=True, null=True) 
    npsp_chunk_size_contact_hard_credit = models.DecimalField(db_column='npsp__ChunkSize_Contact_HardCredit__c', custom=True, max_digits=8, decimal_places=0, verbose_name='LDV: Contact Hard Credit Chunk Size', help_text='FOR LDV ORGS ONLY WITH SFDO GUIDANCE. To avoid a Query Timeout in the rollup batch job in orgs with many millions of Contacts, this specifies the maximum number of Contacts processed in each batch.', blank=True, null=True) 
    npsp_chunk_size_contact_soft_credit = models.DecimalField(db_column='npsp__ChunkSize_Contact_SoftCredit__c', custom=True, max_digits=8, decimal_places=0, verbose_name='LDV: Contact Soft Credit Chunk Size', help_text='FOR LDV ORGS ONLY WITH SFDO GUIDANCE. To avoid a Query Timeout in the rollup batch job in orgs with many millions of Contacts, this specifies the maximum number of Contacts processed in each batch.', blank=True, null=True) 
    npsp_rollups_acct_contact_soft_credit_batch_size = models.DecimalField(db_column='npsp__Rollups_AcctContactSoftCredit_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Contact Soft Credit to Acct Batch Size', help_text='Number of records per batch to process when recalculating soft credit donor rollups to the Account object.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Customizable_Rollup_Settings__c'
        verbose_name = 'Customizable Rollup Settings'
        verbose_name_plural = 'Customizable Rollup Settings'
        # keyPrefix = 'a0v'



class NpspDataImportBatchChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportbatchchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportbatchchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_account_custom_unique_id = models.CharField(db_column='npsp__Account_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Account Custom Unique ID', sf_read_only=models.READ_ONLY, help_text='An optional Unique Id field to use for Organization Account matching', blank=True, null=True) 
    npsp_batch_description = models.TextField(db_column='npsp__Batch_Description__c', custom=True, verbose_name='Batch Description', sf_read_only=models.READ_ONLY, help_text='An optional description about this batch.', blank=True, null=True) 
    npsp_batch_process_size = models.DecimalField(db_column='npsp__Batch_Process_Size__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Batch Process Size', sf_read_only=models.READ_ONLY, help_text='The number of NPSP Data Import records to process at a time in each batch.', blank=True, null=True) 
    npsp_contact_custom_unique_id = models.CharField(db_column='npsp__Contact_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Contact Custom Unique ID', sf_read_only=models.READ_ONLY, help_text='An optional Unique Id field to use for Contact matching', blank=True, null=True) 
    npsp_contact_matching_rule = models.CharField(db_column='npsp__Contact_Matching_Rule__c', custom=True, max_length=255, verbose_name='Contact Matching Rule', sf_read_only=models.READ_ONLY, help_text='Specifies which rule to follow when trying to match Contacts in Data Import records against existing Contacts.', blank=True, null=True) 
    npsp_donation_date_range = models.DecimalField(db_column='npsp__Donation_Date_Range__c', custom=True, max_digits=2, decimal_places=0, verbose_name='Number of Days from Donation Date', sf_read_only=models.READ_ONLY, help_text='Enter the number of days from the Donation Date to consider when looking for a matching Opportunity or Payment. The Data Importer will choose the matching Opp or Payment whose date falls within the number of days AND is closest to the Donation Date.', blank=True, null=True) 
    npsp_donation_matching_behavior = models.CharField(db_column='npsp__Donation_Matching_Behavior__c', custom=True, max_length=255, verbose_name='Donation Matching Behavior', sf_read_only=models.READ_ONLY, help_text='Defines how the Data Importer should handle matching Donations. You must choose a value.', choices=[('Do Not Match', 'Do Not Match'), ('No Match', 'No Match'), ('Single Match', 'Single Match'), ('Single Match or Create', 'Single Match or Create'), ('Best Match', 'Best Match'), ('Best Match or Create', 'Best Match or Create')], blank=True, null=True) 
    npsp_donation_matching_implementing_class = models.CharField(db_column='npsp__Donation_Matching_Implementing_Class__c', custom=True, max_length=255, verbose_name='Donation Matching Implementing Class', sf_read_only=models.READ_ONLY, help_text='The developer name of an Apex class that implements the BDI_IMatching interface for Donations. Leave blank to let NPSP handle matching.', blank=True, null=True) 
    npsp_donation_matching_rule = models.CharField(db_column='npsp__Donation_Matching_Rule__c', custom=True, max_length=255, verbose_name='Donation Matching Rule', sf_read_only=models.READ_ONLY, help_text='Specifies which fields to match by when trying to match Donations in Data Import records against existing Opportunities and Payments. Control or Command click to select more than one field.', blank=True, null=True) 
    npsp_last_processed_on = models.DateTimeField(db_column='npsp__Last_Processed_On__c', custom=True, verbose_name='Last Processed On', sf_read_only=models.READ_ONLY, help_text='The date and time when the batch was last processed.', blank=True, null=True) 
    npsp_post_process_implementing_class = models.CharField(db_column='npsp__Post_Process_Implementing_Class__c', custom=True, max_length=255, verbose_name='Post Process Implementing Class', sf_read_only=models.READ_ONLY, help_text='The developer name of an Apex class that implements the BDI_IPostProcess interface for NPSP Data Import records.', blank=True, null=True) 
    npsp_process_using_scheduled_job = models.BooleanField(db_column='npsp__Process_Using_Scheduled_Job__c', custom=True, verbose_name='Process Using Scheduled Job', sf_read_only=models.READ_ONLY, default=False, help_text='When checked, the NPSP Data Import Batch will be automatically processed based on the schedule for the associated job.') 
    npsp_records_failed = models.DecimalField(db_column='npsp__Records_Failed__c', custom=True, max_digits=8, decimal_places=0, verbose_name='Records Failed', sf_read_only=models.READ_ONLY, help_text='Shows the number of records that failed to be successfully processed on the date listed in the Last Processed On field.', blank=True, null=True) 
    npsp_records_successfully_processed = models.DecimalField(db_column='npsp__Records_Successfully_Processed__c', custom=True, max_digits=8, decimal_places=0, verbose_name='Records Successfully Processed', sf_read_only=models.READ_ONLY, help_text='Shows the number of records that were successfully processed on the date listed in the Last Processed On field.', blank=True, null=True) 
    npsp_run_opportunity_rollups_while_processing = models.BooleanField(db_column='npsp__Run_Opportunity_Rollups_while_Processing__c', custom=True, verbose_name='Calculate Donation Rollups with Batch', sf_read_only=models.READ_ONLY, default=False, help_text='When checked, NPSP calculates donor statistics when donations are processed. If unchecked, donor statistics are calculated during the default nightly Scheduled Job. Note that selecting this checkbox may slow down processing of this batch.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__DataImportBatch__ChangeEvent'
        verbose_name = 'Change Event: NPSP Data Import Batch'
        verbose_name_plural = 'Change Event: NPSP Data Import Batch'
        # keyPrefix = 'None'



class NpspDataImportBatchHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('NpspDataImportBatch', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npsp__Account_Custom_Unique_ID__c', 'Account Custom Unique ID'), ('npsp__Active_Fields__c', 'Active Fields'), ('npsp__Batch_Description__c', 'Batch Description'), ('Name', 'Batch Name'), ('npsp__Batch_Process_Size__c', 'Batch Process Size'), ('npsp__Run_Opportunity_Rollups_while_Processing__c', 'Calculate Donation Rollups with Batch'), ('npsp__Contact_Custom_Unique_ID__c', 'Contact Custom Unique ID'), ('npsp__Contact_Matching_Rule__c', 'Contact Matching Rule'), ('created', 'Created.'), ('npsp__Donation_Matching_Behavior__c', 'Donation Matching Behavior'), ('npsp__Donation_Matching_Implementing_Class__c', 'Donation Matching Implementing Class'), ('npsp__Donation_Matching_Rule__c', 'Donation Matching Rule'), ('npsp__Expected_Count_of_Gifts__c', 'Expected Count of Gifts'), ('npsp__Expected_Total_Batch_Amount__c', 'Expected Total Batch Amount'), ('feedEvent', 'Feed event'), ('npsp__GiftBatch__c', 'Gift Batch'), ('individualMerged', 'Individual Merged'), ('npsp__Last_Processed_On__c', 'Last Processed On'), ('npsp__Donation_Date_Range__c', 'Number of Days from Donation Date'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('npsp__Post_Process_Implementing_Class__c', 'Post Process Implementing Class'), ('npsp__Process_Using_Scheduled_Job__c', 'Process Using Scheduled Job'), ('locked', 'Record locked.'), ('npsp__Records_Failed__c', 'Records Failed'), ('npsp__Records_Successfully_Processed__c', 'Records Successfully Processed'), ('unlocked', 'Record unlocked.'), ('npsp__RequireTotalMatch__c', 'Require Expected Totals Match')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__DataImportBatch__History'
        verbose_name = 'History: NPSP Data Import Batch'
        verbose_name_plural = 'History: NPSP Data Import Batch'
        # keyPrefix = 'None'



class NpspDataImportBatch(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Batch Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportbatch_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportbatch_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_account_custom_unique_id = models.CharField(db_column='npsp__Account_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Account Custom Unique ID', help_text='An optional Unique Id field to use for Organization Account matching', blank=True, null=True) 
    npsp_batch_description = models.TextField(db_column='npsp__Batch_Description__c', custom=True, verbose_name='Batch Description', help_text='An optional description about this batch.', blank=True, null=True) 
    npsp_batch_process_size = models.DecimalField(db_column='npsp__Batch_Process_Size__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Batch Process Size', help_text='The number of NPSP Data Import records to process at a time in each batch.', default=models.DEFAULTED_ON_CREATE) 
    npsp_contact_custom_unique_id = models.CharField(db_column='npsp__Contact_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Contact Custom Unique ID', help_text='An optional Unique Id field to use for Contact matching', blank=True, null=True) 
    npsp_contact_matching_rule = models.CharField(db_column='npsp__Contact_Matching_Rule__c', custom=True, max_length=255, verbose_name='Contact Matching Rule', help_text='Specifies which rule to follow when trying to match Contacts in Data Import records against existing Contacts.', default=models.DEFAULTED_ON_CREATE) 
    npsp_donation_date_range = models.DecimalField(db_column='npsp__Donation_Date_Range__c', custom=True, max_digits=2, decimal_places=0, verbose_name='Number of Days from Donation Date', help_text='Enter the number of days from the Donation Date to consider when looking for a matching Opportunity or Payment. The Data Importer will choose the matching Opp or Payment whose date falls within the number of days AND is closest to the Donation Date.', default=models.DEFAULTED_ON_CREATE) 
    npsp_donation_matching_behavior = models.CharField(db_column='npsp__Donation_Matching_Behavior__c', custom=True, max_length=255, verbose_name='Donation Matching Behavior', help_text='Defines how the Data Importer should handle matching Donations. You must choose a value.', choices=[('Do Not Match', 'Do Not Match'), ('No Match', 'No Match'), ('Single Match', 'Single Match'), ('Single Match or Create', 'Single Match or Create'), ('Best Match', 'Best Match'), ('Best Match or Create', 'Best Match or Create')], default=models.DEFAULTED_ON_CREATE) 
    npsp_donation_matching_implementing_class = models.CharField(db_column='npsp__Donation_Matching_Implementing_Class__c', custom=True, max_length=255, verbose_name='Donation Matching Implementing Class', help_text='The developer name of an Apex class that implements the BDI_IMatching interface for Donations. Leave blank to let NPSP handle matching.', blank=True, null=True) 
    npsp_donation_matching_rule = models.CharField(db_column='npsp__Donation_Matching_Rule__c', custom=True, max_length=255, verbose_name='Donation Matching Rule', help_text='Specifies which fields to match by when trying to match Donations in Data Import records against existing Opportunities and Payments. Control or Command click to select more than one field.', default=models.DEFAULTED_ON_CREATE) 
    npsp_last_processed_on = models.DateTimeField(db_column='npsp__Last_Processed_On__c', custom=True, verbose_name='Last Processed On', help_text='The date and time when the batch was last processed.', blank=True, null=True) 
    npsp_post_process_implementing_class = models.CharField(db_column='npsp__Post_Process_Implementing_Class__c', custom=True, max_length=255, verbose_name='Post Process Implementing Class', help_text='The developer name of an Apex class that implements the BDI_IPostProcess interface for NPSP Data Import records.', blank=True, null=True) 
    npsp_process_using_scheduled_job = models.BooleanField(db_column='npsp__Process_Using_Scheduled_Job__c', custom=True, verbose_name='Process Using Scheduled Job', default=models.DEFAULTED_ON_CREATE, help_text='When checked, the NPSP Data Import Batch will be automatically processed based on the schedule for the associated job.') 
    npsp_records_failed = models.DecimalField(db_column='npsp__Records_Failed__c', custom=True, max_digits=8, decimal_places=0, verbose_name='Records Failed', help_text='Shows the number of records that failed to be successfully processed on the date listed in the Last Processed On field.', blank=True, null=True) 
    npsp_records_successfully_processed = models.DecimalField(db_column='npsp__Records_Successfully_Processed__c', custom=True, max_digits=8, decimal_places=0, verbose_name='Records Successfully Processed', help_text='Shows the number of records that were successfully processed on the date listed in the Last Processed On field.', blank=True, null=True) 
    npsp_run_opportunity_rollups_while_processing = models.BooleanField(db_column='npsp__Run_Opportunity_Rollups_while_Processing__c', custom=True, verbose_name='Calculate Donation Rollups with Batch', default=models.DEFAULTED_ON_CREATE, help_text='When checked, NPSP calculates donor statistics when donations are processed. If unchecked, donor statistics are calculated during the default nightly Scheduled Job. Note that selecting this checkbox may slow down processing of this batch.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__DataImportBatch__c'
        verbose_name = 'NPSP Data Import Batch'
        verbose_name_plural = 'NPSP Data Import Batches'
        # keyPrefix = 'a0P'



class NpspDataImportChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_account1_import_status = models.CharField(db_column='npsp__Account1ImportStatus__c', custom=True, max_length=255, verbose_name='Account1 Import Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_account1_imported = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account1Imported__c', custom=True, related_name='npspdataimportchangeevent_npspaccount1imported_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_account1_city = models.CharField(db_column='npsp__Account1_City__c', custom=True, max_length=255, verbose_name='Account1 City', sf_read_only=models.READ_ONLY, help_text='Account1.BillingCity', blank=True, null=True) 
    npsp_account1_country = models.CharField(db_column='npsp__Account1_Country__c', custom=True, max_length=255, verbose_name='Account1 Country', sf_read_only=models.READ_ONLY, help_text='Account1.BillingCountry', blank=True, null=True) 
    npsp_account1_name = models.CharField(db_column='npsp__Account1_Name__c', custom=True, max_length=255, verbose_name='Account1 Name', sf_read_only=models.READ_ONLY, help_text='Account1.Name', blank=True, null=True) 
    npsp_account1_phone = models.CharField(db_column='npsp__Account1_Phone__c', custom=True, max_length=40, verbose_name='Account1 Phone', sf_read_only=models.READ_ONLY, help_text='Account1.Phone', blank=True, null=True) 
    npsp_account1_state_province = models.CharField(db_column='npsp__Account1_State_Province__c', custom=True, max_length=255, verbose_name='Account1 State/Province', sf_read_only=models.READ_ONLY, help_text='Account1.BillingState', blank=True, null=True) 
    npsp_account1_street = models.TextField(db_column='npsp__Account1_Street__c', custom=True, verbose_name='Account1 Street', sf_read_only=models.READ_ONLY, help_text='Account1.BillingStreet', blank=True, null=True) 
    npsp_account1_website = models.URLField(db_column='npsp__Account1_Website__c', custom=True, verbose_name='Account1 Website', sf_read_only=models.READ_ONLY, help_text='Account1.Website', blank=True, null=True) 
    npsp_account1_zip_postal_code = models.CharField(db_column='npsp__Account1_Zip_Postal_Code__c', custom=True, max_length=255, verbose_name='Account1 Zip/Postal Code', sf_read_only=models.READ_ONLY, help_text='Account1.BillingPostalCode', blank=True, null=True) 
    npsp_account2_import_status = models.CharField(db_column='npsp__Account2ImportStatus__c', custom=True, max_length=255, verbose_name='Account2 Import Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_account2_imported = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account2Imported__c', custom=True, related_name='npspdataimportchangeevent_npspaccount2imported_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_account2_city = models.CharField(db_column='npsp__Account2_City__c', custom=True, max_length=255, verbose_name='Account2 City', sf_read_only=models.READ_ONLY, help_text='Account2.BillingCity', blank=True, null=True) 
    npsp_account2_country = models.CharField(db_column='npsp__Account2_Country__c', custom=True, max_length=255, verbose_name='Account2 Country', sf_read_only=models.READ_ONLY, help_text='Account2.BillingCountry', blank=True, null=True) 
    npsp_account2_name = models.CharField(db_column='npsp__Account2_Name__c', custom=True, max_length=255, verbose_name='Account2 Name', sf_read_only=models.READ_ONLY, help_text='Account2.Name', blank=True, null=True) 
    npsp_account2_phone = models.CharField(db_column='npsp__Account2_Phone__c', custom=True, max_length=40, verbose_name='Account2 Phone', sf_read_only=models.READ_ONLY, help_text='Account2.Phone', blank=True, null=True) 
    npsp_account2_state_province = models.CharField(db_column='npsp__Account2_State_Province__c', custom=True, max_length=255, verbose_name='Account2 State/Province', sf_read_only=models.READ_ONLY, help_text='Account2.BillingState', blank=True, null=True) 
    npsp_account2_street = models.TextField(db_column='npsp__Account2_Street__c', custom=True, verbose_name='Account2 Street', sf_read_only=models.READ_ONLY, help_text='Account2.BillingStreet', blank=True, null=True) 
    npsp_account2_website = models.URLField(db_column='npsp__Account2_Website__c', custom=True, verbose_name='Account2 Website', sf_read_only=models.READ_ONLY, help_text='Account2.Website', blank=True, null=True) 
    npsp_account2_zip_postal_code = models.CharField(db_column='npsp__Account2_Zip_Postal_Code__c', custom=True, max_length=255, verbose_name='Account2 Zip/Postal Code', sf_read_only=models.READ_ONLY, help_text='Account2.BillingPostalCode', blank=True, null=True) 
    npsp_apex_job_id = models.CharField(db_column='npsp__ApexJobId__c', custom=True, max_length=18, verbose_name='ApexJobId', sf_read_only=models.READ_ONLY, help_text='The ApexJobID of the Batch Job that processed the record.', blank=True, null=True) 
    npsp_campaign_member_status = models.CharField(db_column='npsp__Campaign_Member_Status__c', custom=True, max_length=40, verbose_name='Campaign Member Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_contact1_import_status = models.CharField(db_column='npsp__Contact1ImportStatus__c', custom=True, max_length=255, verbose_name='Contact1 Import Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_contact1_imported = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact1Imported__c', custom=True, related_name='npspdataimportchangeevent_npspcontact1imported_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_contact1_alternate_email = models.EmailField(db_column='npsp__Contact1_Alternate_Email__c', custom=True, verbose_name='Contact1 Alternate Email', sf_read_only=models.READ_ONLY, help_text='Contact1.npe01__AlternateEmail__c', blank=True, null=True) 
    npsp_contact1_birthdate = models.DateField(db_column='npsp__Contact1_Birthdate__c', custom=True, verbose_name='Contact1 Birthdate', sf_read_only=models.READ_ONLY, help_text='Contact1.Birthdate', blank=True, null=True) 
    npsp_contact1_firstname = models.CharField(db_column='npsp__Contact1_Firstname__c', custom=True, max_length=40, verbose_name='Contact1 First Name', sf_read_only=models.READ_ONLY, help_text='Contact1.Firstname', blank=True, null=True) 
    npsp_contact1_home_phone = models.CharField(db_column='npsp__Contact1_Home_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Home Phone', sf_read_only=models.READ_ONLY, help_text='Contact1.HomePhone', blank=True, null=True) 
    npsp_contact1_lastname = models.CharField(db_column='npsp__Contact1_Lastname__c', custom=True, max_length=80, verbose_name='Contact1 Last Name', sf_read_only=models.READ_ONLY, help_text='Contact1.Lastname', blank=True, null=True) 
    npsp_contact1_mobile_phone = models.CharField(db_column='npsp__Contact1_Mobile_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Mobile Phone', sf_read_only=models.READ_ONLY, help_text='Contact1.MobilePhone', blank=True, null=True) 
    npsp_contact1_other_phone = models.CharField(db_column='npsp__Contact1_Other_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Other Phone', sf_read_only=models.READ_ONLY, help_text='Contact1.OtherPhone', blank=True, null=True) 
    npsp_contact1_personal_email = models.EmailField(db_column='npsp__Contact1_Personal_Email__c', custom=True, verbose_name='Contact1 Personal Email', sf_read_only=models.READ_ONLY, help_text='Contact1.npe01__HomeEmail__c', blank=True, null=True) 
    npsp_contact1_preferred_email = models.CharField(db_column='npsp__Contact1_Preferred_Email__c', custom=True, max_length=255, verbose_name='Contact1 Preferred Email', sf_read_only=models.READ_ONLY, help_text='Contact1.npe01__Preferred_Email__c', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npsp_contact1_preferred_phone = models.CharField(db_column='npsp__Contact1_Preferred_Phone__c', custom=True, max_length=255, verbose_name='Contact1 Preferred Phone', sf_read_only=models.READ_ONLY, help_text='Contact1.npe01__PreferredPhone__c', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npsp_contact1_salutation = models.CharField(db_column='npsp__Contact1_Salutation__c', custom=True, max_length=20, verbose_name='Contact1 Salutation', sf_read_only=models.READ_ONLY, help_text='Contact1.Salutation', blank=True, null=True) 
    npsp_contact1_title = models.CharField(db_column='npsp__Contact1_Title__c', custom=True, max_length=128, verbose_name='Contact1 Title', sf_read_only=models.READ_ONLY, help_text='Contact1.Title', blank=True, null=True) 
    npsp_contact1_work_email = models.EmailField(db_column='npsp__Contact1_Work_Email__c', custom=True, verbose_name='Contact1 Work Email', sf_read_only=models.READ_ONLY, help_text='Contact1.npe01__WorkEmail__c', blank=True, null=True) 
    npsp_contact1_work_phone = models.CharField(db_column='npsp__Contact1_Work_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Work Phone', sf_read_only=models.READ_ONLY, help_text='Contact1.npe01__WorkPhone__c', blank=True, null=True) 
    npsp_contact2_import_status = models.CharField(db_column='npsp__Contact2ImportStatus__c', custom=True, max_length=255, verbose_name='Contact2 Import Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_contact2_imported = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact2Imported__c', custom=True, related_name='npspdataimportchangeevent_npspcontact2imported_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_contact2_alternate_email = models.EmailField(db_column='npsp__Contact2_Alternate_Email__c', custom=True, verbose_name='Contact2 Alternate Email', sf_read_only=models.READ_ONLY, help_text='Contact2.npe01__AlternateEmail__c', blank=True, null=True) 
    npsp_contact2_birthdate = models.DateField(db_column='npsp__Contact2_Birthdate__c', custom=True, verbose_name='Contact2 Birthdate', sf_read_only=models.READ_ONLY, help_text='Contact2.Birthdate', blank=True, null=True) 
    npsp_contact2_firstname = models.CharField(db_column='npsp__Contact2_Firstname__c', custom=True, max_length=40, verbose_name='Contact2 First Name', sf_read_only=models.READ_ONLY, help_text='Contact2.Firstname', blank=True, null=True) 
    npsp_contact2_home_phone = models.CharField(db_column='npsp__Contact2_Home_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Home Phone', sf_read_only=models.READ_ONLY, help_text='Contact2.HomePhone', blank=True, null=True) 
    npsp_contact2_lastname = models.CharField(db_column='npsp__Contact2_Lastname__c', custom=True, max_length=80, verbose_name='Contact2 Last Name', sf_read_only=models.READ_ONLY, help_text='Contact2.Lastname', blank=True, null=True) 
    npsp_contact2_mobile_phone = models.CharField(db_column='npsp__Contact2_Mobile_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Mobile Phone', sf_read_only=models.READ_ONLY, help_text='Contact2.MobilePhone', blank=True, null=True) 
    npsp_contact2_other_phone = models.CharField(db_column='npsp__Contact2_Other_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Other Phone', sf_read_only=models.READ_ONLY, help_text='Contact2.OtherPhone', blank=True, null=True) 
    npsp_contact2_personal_email = models.EmailField(db_column='npsp__Contact2_Personal_Email__c', custom=True, verbose_name='Contact2 Personal Email', sf_read_only=models.READ_ONLY, help_text='Contact2.npe01__HomeEmail__c', blank=True, null=True) 
    npsp_contact2_preferred_email = models.CharField(db_column='npsp__Contact2_Preferred_Email__c', custom=True, max_length=255, verbose_name='Contact2 Preferred Email', sf_read_only=models.READ_ONLY, help_text='Contact2.npe01__Preferred_Email__c', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npsp_contact2_preferred_phone = models.CharField(db_column='npsp__Contact2_Preferred_Phone__c', custom=True, max_length=255, verbose_name='Contact2 Preferred Phone', sf_read_only=models.READ_ONLY, help_text='Contact2.npe01__PreferredPhone__c', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npsp_contact2_salutation = models.CharField(db_column='npsp__Contact2_Salutation__c', custom=True, max_length=20, verbose_name='Contact2 Salutation', sf_read_only=models.READ_ONLY, help_text='Contact2.Salutation', blank=True, null=True) 
    npsp_contact2_title = models.CharField(db_column='npsp__Contact2_Title__c', custom=True, max_length=128, verbose_name='Contact2 Title', sf_read_only=models.READ_ONLY, help_text='Contact2.Title', blank=True, null=True) 
    npsp_contact2_work_email = models.EmailField(db_column='npsp__Contact2_Work_Email__c', custom=True, verbose_name='Contact2 Work Email', sf_read_only=models.READ_ONLY, help_text='Contact2.npe01__WorkEmail__c', blank=True, null=True) 
    npsp_contact2_work_phone = models.CharField(db_column='npsp__Contact2_Work_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Work Phone', sf_read_only=models.READ_ONLY, help_text='Contact2.npe01__WorkPhone__c', blank=True, null=True) 
    npsp_donation_import_status = models.CharField(db_column='npsp__DonationImportStatus__c', custom=True, max_length=255, verbose_name='Donation Import Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_donation_imported = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__DonationImported__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_donation_amount = models.DecimalField(db_column='npsp__Donation_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Donation Amount', sf_read_only=models.READ_ONLY, help_text='Opportunity.Amount', blank=True, null=True) 
    npsp_donation_campaign_name = models.CharField(db_column='npsp__Donation_Campaign_Name__c', custom=True, max_length=255, verbose_name='Campaign Name', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_donation_date = models.DateField(db_column='npsp__Donation_Date__c', custom=True, verbose_name='Donation Date', sf_read_only=models.READ_ONLY, help_text='Opportunity.CloseDate', blank=True, null=True) 
    npsp_donation_description = models.TextField(db_column='npsp__Donation_Description__c', custom=True, verbose_name='Donation Description', sf_read_only=models.READ_ONLY, help_text='Opportunity.Description', blank=True, null=True) 
    npsp_donation_donor = models.CharField(db_column='npsp__Donation_Donor__c', custom=True, max_length=255, verbose_name='Donation Donor', sf_read_only=models.READ_ONLY, help_text='Specifies whether the donation is an individual donation from Contact1, or an organizational donation from Account1.', choices=[('Contact1', 'Contact1'), ('Account1', 'Account1')], blank=True, null=True) 
    npsp_donation_member_level = models.CharField(db_column='npsp__Donation_Member_Level__c', custom=True, max_length=255, verbose_name='Donation Member Level', sf_read_only=models.READ_ONLY, help_text='Opportunity.npe01__Member_Level__c', blank=True, null=True) 
    npsp_donation_membership_end_date = models.DateField(db_column='npsp__Donation_Membership_End_Date__c', custom=True, verbose_name='Donation Membership End Date', sf_read_only=models.READ_ONLY, help_text='Opportunity.npe01__Membership_End_Date__c', blank=True, null=True) 
    npsp_donation_membership_origin = models.CharField(db_column='npsp__Donation_Membership_Origin__c', custom=True, max_length=255, verbose_name='Donation Membership Origin', sf_read_only=models.READ_ONLY, help_text='Opportunity.npe01__Membership_Origin__c', blank=True, null=True) 
    npsp_donation_membership_start_date = models.DateField(db_column='npsp__Donation_Membership_Start_Date__c', custom=True, verbose_name='Donation Membership Start Date', sf_read_only=models.READ_ONLY, help_text='Opportunity.npe01__Membership_Start_Date__c', blank=True, null=True) 
    npsp_donation_name = models.CharField(db_column='npsp__Donation_Name__c', custom=True, max_length=255, verbose_name='Donation Name', sf_read_only=models.READ_ONLY, help_text='Opportunity.Name', blank=True, null=True) 
    npsp_donation_possible_matches = models.CharField(db_column='npsp__Donation_Possible_Matches__c', custom=True, max_length=255, verbose_name='Donation Possible Matches', sf_read_only=models.READ_ONLY, help_text="A comma separated list of ID's to the first 10 possible Opportunity matches to a donation.", blank=True, null=True) 
    npsp_donation_record_type_name = models.CharField(db_column='npsp__Donation_Record_Type_Name__c', custom=True, max_length=255, verbose_name='Donation Record Type Name', sf_read_only=models.READ_ONLY, help_text='Opportunity.RecordTypeId', blank=True, null=True) 
    npsp_donation_stage = models.CharField(db_column='npsp__Donation_Stage__c', custom=True, max_length=255, verbose_name='Donation Stage', sf_read_only=models.READ_ONLY, help_text='Opportunity.StageName', blank=True, null=True) 
    npsp_donation_type = models.CharField(db_column='npsp__Donation_Type__c', custom=True, max_length=255, verbose_name='Donation Type', sf_read_only=models.READ_ONLY, help_text='Opportunity.Type', blank=True, null=True) 
    npsp_failure_information = models.TextField(db_column='npsp__FailureInformation__c', custom=True, verbose_name='Failure Information', sf_read_only=models.READ_ONLY, help_text='Description of what caused the Data Import record to fail to be imported.', blank=True, null=True) 
    npsp_home_address_import_status = models.CharField(db_column='npsp__HomeAddressImportStatus__c', custom=True, max_length=255, verbose_name='Home Address Import Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_home_address_imported = models.ForeignKey(NpspAddress, models.DO_NOTHING, db_column='npsp__HomeAddressImported__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_home_city = models.CharField(db_column='npsp__Home_City__c', custom=True, max_length=255, verbose_name='Home City', sf_read_only=models.READ_ONLY, help_text='Address.npsp__MailingCity__c', blank=True, null=True) 
    npsp_home_country = models.CharField(db_column='npsp__Home_Country__c', custom=True, max_length=255, verbose_name='Home Country', sf_read_only=models.READ_ONLY, help_text='Address.npsp__MailingCountry__c', blank=True, null=True) 
    npsp_home_state_province = models.CharField(db_column='npsp__Home_State_Province__c', custom=True, max_length=255, verbose_name='Home State/Province', sf_read_only=models.READ_ONLY, help_text='Address.npsp__MailingState__c', blank=True, null=True) 
    npsp_home_street = models.TextField(db_column='npsp__Home_Street__c', custom=True, verbose_name='Home Street', sf_read_only=models.READ_ONLY, help_text='Address.npsp__MailingStreet__c', blank=True, null=True) 
    npsp_home_zip_postal_code = models.CharField(db_column='npsp__Home_Zip_Postal_Code__c', custom=True, max_length=255, verbose_name='Home Zip/Postal Code', sf_read_only=models.READ_ONLY, help_text='Address.npsp__MailingPostalCode__c', blank=True, null=True) 
    npsp_household_account_imported = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__HouseholdAccountImported__c', custom=True, related_name='npspdataimportchangeevent_npsphouseholdaccountimported_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_household_phone = models.CharField(db_column='npsp__Household_Phone__c', custom=True, max_length=40, verbose_name='Household Phone', sf_read_only=models.READ_ONLY, help_text='Household.Phone', blank=True, null=True) 
    npsp_imported_date = models.DateTimeField(db_column='npsp__ImportedDate__c', custom=True, verbose_name='Imported Date', sf_read_only=models.READ_ONLY, help_text='When the Data Import record was successfully imported.', blank=True, null=True) 
    npsp_npsp_data_import_batch = models.ForeignKey(NpspDataImportBatch, models.DO_NOTHING, db_column='npsp__NPSP_Data_Import_Batch__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_payment_import_status = models.CharField(db_column='npsp__PaymentImportStatus__c', custom=True, max_length=255, verbose_name='Payment Import Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_payment_imported = models.ForeignKey(Npe01OppPayment, models.DO_NOTHING, db_column='npsp__PaymentImported__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_payment_check_reference_number = models.CharField(db_column='npsp__Payment_Check_Reference_Number__c', custom=True, max_length=255, verbose_name='Payment Check/Reference Number', sf_read_only=models.READ_ONLY, help_text='Payment.npe01__Check_Reference_Number__c', blank=True, null=True) 
    npsp_payment_method = models.CharField(db_column='npsp__Payment_Method__c', custom=True, max_length=255, verbose_name='Payment Method', sf_read_only=models.READ_ONLY, help_text='Payment.npe01__Payment_Method__c', blank=True, null=True) 
    npsp_payment_possible_matches = models.CharField(db_column='npsp__Payment_Possible_Matches__c', custom=True, max_length=255, verbose_name='Payment Possible Matches', sf_read_only=models.READ_ONLY, help_text="A comma separated list of ID's to the first 10 possible Payment matches to a donation.", blank=True, null=True) 
    npsp_status = models.CharField(db_column='npsp__Status__c', custom=True, max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, help_text='The status of importing the Data Import record.', choices=[('Imported', 'Imported'), ('Failed', 'Failed')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__DataImport__ChangeEvent'
        verbose_name = 'Change Event: NPSP Data Import'
        verbose_name_plural = 'Change Event: NPSP Data Import'
        # keyPrefix = 'None'



class NpspDataImport(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Data Import ID', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimport_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimport_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_account1_import_status = models.CharField(db_column='npsp__Account1ImportStatus__c', custom=True, max_length=255, verbose_name='Account1 Import Status', blank=True, null=True) 
    npsp_account1_imported = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account1Imported__c', custom=True, related_name='npspdataimport_npspaccount1imported_set', blank=True, null=True) 
    npsp_account1_city = models.CharField(db_column='npsp__Account1_City__c', custom=True, max_length=255, verbose_name='Account1 City', help_text='Account1.BillingCity', blank=True, null=True) 
    npsp_account1_country = models.CharField(db_column='npsp__Account1_Country__c', custom=True, max_length=255, verbose_name='Account1 Country', help_text='Account1.BillingCountry', blank=True, null=True) 
    npsp_account1_name = models.CharField(db_column='npsp__Account1_Name__c', custom=True, max_length=255, verbose_name='Account1 Name', help_text='Account1.Name', blank=True, null=True) 
    npsp_account1_phone = models.CharField(db_column='npsp__Account1_Phone__c', custom=True, max_length=40, verbose_name='Account1 Phone', help_text='Account1.Phone', blank=True, null=True) 
    npsp_account1_state_province = models.CharField(db_column='npsp__Account1_State_Province__c', custom=True, max_length=255, verbose_name='Account1 State/Province', help_text='Account1.BillingState', blank=True, null=True) 
    npsp_account1_street = models.TextField(db_column='npsp__Account1_Street__c', custom=True, verbose_name='Account1 Street', help_text='Account1.BillingStreet', blank=True, null=True) 
    npsp_account1_website = models.URLField(db_column='npsp__Account1_Website__c', custom=True, verbose_name='Account1 Website', help_text='Account1.Website', blank=True, null=True) 
    npsp_account1_zip_postal_code = models.CharField(db_column='npsp__Account1_Zip_Postal_Code__c', custom=True, max_length=255, verbose_name='Account1 Zip/Postal Code', help_text='Account1.BillingPostalCode', blank=True, null=True) 
    npsp_account2_import_status = models.CharField(db_column='npsp__Account2ImportStatus__c', custom=True, max_length=255, verbose_name='Account2 Import Status', blank=True, null=True) 
    npsp_account2_imported = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account2Imported__c', custom=True, related_name='npspdataimport_npspaccount2imported_set', blank=True, null=True) 
    npsp_account2_city = models.CharField(db_column='npsp__Account2_City__c', custom=True, max_length=255, verbose_name='Account2 City', help_text='Account2.BillingCity', blank=True, null=True) 
    npsp_account2_country = models.CharField(db_column='npsp__Account2_Country__c', custom=True, max_length=255, verbose_name='Account2 Country', help_text='Account2.BillingCountry', blank=True, null=True) 
    npsp_account2_name = models.CharField(db_column='npsp__Account2_Name__c', custom=True, max_length=255, verbose_name='Account2 Name', help_text='Account2.Name', blank=True, null=True) 
    npsp_account2_phone = models.CharField(db_column='npsp__Account2_Phone__c', custom=True, max_length=40, verbose_name='Account2 Phone', help_text='Account2.Phone', blank=True, null=True) 
    npsp_account2_state_province = models.CharField(db_column='npsp__Account2_State_Province__c', custom=True, max_length=255, verbose_name='Account2 State/Province', help_text='Account2.BillingState', blank=True, null=True) 
    npsp_account2_street = models.TextField(db_column='npsp__Account2_Street__c', custom=True, verbose_name='Account2 Street', help_text='Account2.BillingStreet', blank=True, null=True) 
    npsp_account2_website = models.URLField(db_column='npsp__Account2_Website__c', custom=True, verbose_name='Account2 Website', help_text='Account2.Website', blank=True, null=True) 
    npsp_account2_zip_postal_code = models.CharField(db_column='npsp__Account2_Zip_Postal_Code__c', custom=True, max_length=255, verbose_name='Account2 Zip/Postal Code', help_text='Account2.BillingPostalCode', blank=True, null=True) 
    npsp_apex_job_id = models.CharField(db_column='npsp__ApexJobId__c', custom=True, max_length=18, verbose_name='ApexJobId', help_text='The ApexJobID of the Batch Job that processed the record.', blank=True, null=True) 
    npsp_campaign_member_status = models.CharField(db_column='npsp__Campaign_Member_Status__c', custom=True, max_length=40, verbose_name='Campaign Member Status', blank=True, null=True) 
    npsp_contact1_import_status = models.CharField(db_column='npsp__Contact1ImportStatus__c', custom=True, max_length=255, verbose_name='Contact1 Import Status', blank=True, null=True) 
    npsp_contact1_imported = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact1Imported__c', custom=True, related_name='npspdataimport_npspcontact1imported_set', blank=True, null=True) 
    npsp_contact1_alternate_email = models.EmailField(db_column='npsp__Contact1_Alternate_Email__c', custom=True, verbose_name='Contact1 Alternate Email', help_text='Contact1.npe01__AlternateEmail__c', blank=True, null=True) 
    npsp_contact1_birthdate = models.DateField(db_column='npsp__Contact1_Birthdate__c', custom=True, verbose_name='Contact1 Birthdate', help_text='Contact1.Birthdate', blank=True, null=True) 
    npsp_contact1_firstname = models.CharField(db_column='npsp__Contact1_Firstname__c', custom=True, max_length=40, verbose_name='Contact1 First Name', help_text='Contact1.Firstname', blank=True, null=True) 
    npsp_contact1_home_phone = models.CharField(db_column='npsp__Contact1_Home_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Home Phone', help_text='Contact1.HomePhone', blank=True, null=True) 
    npsp_contact1_lastname = models.CharField(db_column='npsp__Contact1_Lastname__c', custom=True, max_length=80, verbose_name='Contact1 Last Name', help_text='Contact1.Lastname', blank=True, null=True) 
    npsp_contact1_mobile_phone = models.CharField(db_column='npsp__Contact1_Mobile_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Mobile Phone', help_text='Contact1.MobilePhone', blank=True, null=True) 
    npsp_contact1_other_phone = models.CharField(db_column='npsp__Contact1_Other_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Other Phone', help_text='Contact1.OtherPhone', blank=True, null=True) 
    npsp_contact1_personal_email = models.EmailField(db_column='npsp__Contact1_Personal_Email__c', custom=True, verbose_name='Contact1 Personal Email', help_text='Contact1.npe01__HomeEmail__c', blank=True, null=True) 
    npsp_contact1_preferred_email = models.CharField(db_column='npsp__Contact1_Preferred_Email__c', custom=True, max_length=255, verbose_name='Contact1 Preferred Email', help_text='Contact1.npe01__Preferred_Email__c', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npsp_contact1_preferred_phone = models.CharField(db_column='npsp__Contact1_Preferred_Phone__c', custom=True, max_length=255, verbose_name='Contact1 Preferred Phone', help_text='Contact1.npe01__PreferredPhone__c', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npsp_contact1_salutation = models.CharField(db_column='npsp__Contact1_Salutation__c', custom=True, max_length=20, verbose_name='Contact1 Salutation', help_text='Contact1.Salutation', blank=True, null=True) 
    npsp_contact1_title = models.CharField(db_column='npsp__Contact1_Title__c', custom=True, max_length=128, verbose_name='Contact1 Title', help_text='Contact1.Title', blank=True, null=True) 
    npsp_contact1_work_email = models.EmailField(db_column='npsp__Contact1_Work_Email__c', custom=True, verbose_name='Contact1 Work Email', help_text='Contact1.npe01__WorkEmail__c', blank=True, null=True) 
    npsp_contact1_work_phone = models.CharField(db_column='npsp__Contact1_Work_Phone__c', custom=True, max_length=40, verbose_name='Contact1 Work Phone', help_text='Contact1.npe01__WorkPhone__c', blank=True, null=True) 
    npsp_contact2_import_status = models.CharField(db_column='npsp__Contact2ImportStatus__c', custom=True, max_length=255, verbose_name='Contact2 Import Status', blank=True, null=True) 
    npsp_contact2_imported = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact2Imported__c', custom=True, related_name='npspdataimport_npspcontact2imported_set', blank=True, null=True) 
    npsp_contact2_alternate_email = models.EmailField(db_column='npsp__Contact2_Alternate_Email__c', custom=True, verbose_name='Contact2 Alternate Email', help_text='Contact2.npe01__AlternateEmail__c', blank=True, null=True) 
    npsp_contact2_birthdate = models.DateField(db_column='npsp__Contact2_Birthdate__c', custom=True, verbose_name='Contact2 Birthdate', help_text='Contact2.Birthdate', blank=True, null=True) 
    npsp_contact2_firstname = models.CharField(db_column='npsp__Contact2_Firstname__c', custom=True, max_length=40, verbose_name='Contact2 First Name', help_text='Contact2.Firstname', blank=True, null=True) 
    npsp_contact2_home_phone = models.CharField(db_column='npsp__Contact2_Home_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Home Phone', help_text='Contact2.HomePhone', blank=True, null=True) 
    npsp_contact2_lastname = models.CharField(db_column='npsp__Contact2_Lastname__c', custom=True, max_length=80, verbose_name='Contact2 Last Name', help_text='Contact2.Lastname', blank=True, null=True) 
    npsp_contact2_mobile_phone = models.CharField(db_column='npsp__Contact2_Mobile_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Mobile Phone', help_text='Contact2.MobilePhone', blank=True, null=True) 
    npsp_contact2_other_phone = models.CharField(db_column='npsp__Contact2_Other_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Other Phone', help_text='Contact2.OtherPhone', blank=True, null=True) 
    npsp_contact2_personal_email = models.EmailField(db_column='npsp__Contact2_Personal_Email__c', custom=True, verbose_name='Contact2 Personal Email', help_text='Contact2.npe01__HomeEmail__c', blank=True, null=True) 
    npsp_contact2_preferred_email = models.CharField(db_column='npsp__Contact2_Preferred_Email__c', custom=True, max_length=255, verbose_name='Contact2 Preferred Email', help_text='Contact2.npe01__Preferred_Email__c', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npsp_contact2_preferred_phone = models.CharField(db_column='npsp__Contact2_Preferred_Phone__c', custom=True, max_length=255, verbose_name='Contact2 Preferred Phone', help_text='Contact2.npe01__PreferredPhone__c', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npsp_contact2_salutation = models.CharField(db_column='npsp__Contact2_Salutation__c', custom=True, max_length=20, verbose_name='Contact2 Salutation', help_text='Contact2.Salutation', blank=True, null=True) 
    npsp_contact2_title = models.CharField(db_column='npsp__Contact2_Title__c', custom=True, max_length=128, verbose_name='Contact2 Title', help_text='Contact2.Title', blank=True, null=True) 
    npsp_contact2_work_email = models.EmailField(db_column='npsp__Contact2_Work_Email__c', custom=True, verbose_name='Contact2 Work Email', help_text='Contact2.npe01__WorkEmail__c', blank=True, null=True) 
    npsp_contact2_work_phone = models.CharField(db_column='npsp__Contact2_Work_Phone__c', custom=True, max_length=40, verbose_name='Contact2 Work Phone', help_text='Contact2.npe01__WorkPhone__c', blank=True, null=True) 
    npsp_donation_import_status = models.CharField(db_column='npsp__DonationImportStatus__c', custom=True, max_length=255, verbose_name='Donation Import Status', blank=True, null=True) 
    npsp_donation_imported = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__DonationImported__c', custom=True, blank=True, null=True) 
    npsp_donation_amount = models.DecimalField(db_column='npsp__Donation_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Donation Amount', help_text='Opportunity.Amount', blank=True, null=True) 
    npsp_donation_campaign_name = models.CharField(db_column='npsp__Donation_Campaign_Name__c', custom=True, max_length=255, verbose_name='Campaign Name', blank=True, null=True) 
    npsp_donation_date = models.DateField(db_column='npsp__Donation_Date__c', custom=True, verbose_name='Donation Date', help_text='Opportunity.CloseDate', blank=True, null=True) 
    npsp_donation_description = models.TextField(db_column='npsp__Donation_Description__c', custom=True, verbose_name='Donation Description', help_text='Opportunity.Description', blank=True, null=True) 
    npsp_donation_donor = models.CharField(db_column='npsp__Donation_Donor__c', custom=True, max_length=255, verbose_name='Donation Donor', help_text='Specifies whether the donation is an individual donation from Contact1, or an organizational donation from Account1.', choices=[('Contact1', 'Contact1'), ('Account1', 'Account1')], blank=True, null=True) 
    npsp_donation_member_level = models.CharField(db_column='npsp__Donation_Member_Level__c', custom=True, max_length=255, verbose_name='Donation Member Level', help_text='Opportunity.npe01__Member_Level__c', blank=True, null=True) 
    npsp_donation_membership_end_date = models.DateField(db_column='npsp__Donation_Membership_End_Date__c', custom=True, verbose_name='Donation Membership End Date', help_text='Opportunity.npe01__Membership_End_Date__c', blank=True, null=True) 
    npsp_donation_membership_origin = models.CharField(db_column='npsp__Donation_Membership_Origin__c', custom=True, max_length=255, verbose_name='Donation Membership Origin', help_text='Opportunity.npe01__Membership_Origin__c', blank=True, null=True) 
    npsp_donation_membership_start_date = models.DateField(db_column='npsp__Donation_Membership_Start_Date__c', custom=True, verbose_name='Donation Membership Start Date', help_text='Opportunity.npe01__Membership_Start_Date__c', blank=True, null=True) 
    npsp_donation_name = models.CharField(db_column='npsp__Donation_Name__c', custom=True, max_length=255, verbose_name='Donation Name', help_text='Opportunity.Name', blank=True, null=True) 
    npsp_donation_possible_matches = models.CharField(db_column='npsp__Donation_Possible_Matches__c', custom=True, max_length=255, verbose_name='Donation Possible Matches', help_text="A comma separated list of ID's to the first 10 possible Opportunity matches to a donation.", blank=True, null=True) 
    npsp_donation_record_type_name = models.CharField(db_column='npsp__Donation_Record_Type_Name__c', custom=True, max_length=255, verbose_name='Donation Record Type Name', help_text='Opportunity.RecordTypeId', blank=True, null=True) 
    npsp_donation_stage = models.CharField(db_column='npsp__Donation_Stage__c', custom=True, max_length=255, verbose_name='Donation Stage', help_text='Opportunity.StageName', blank=True, null=True) 
    npsp_donation_type = models.CharField(db_column='npsp__Donation_Type__c', custom=True, max_length=255, verbose_name='Donation Type', help_text='Opportunity.Type', blank=True, null=True) 
    npsp_failure_information = models.TextField(db_column='npsp__FailureInformation__c', custom=True, verbose_name='Failure Information', help_text='Description of what caused the Data Import record to fail to be imported.', blank=True, null=True) 
    npsp_home_address_import_status = models.CharField(db_column='npsp__HomeAddressImportStatus__c', custom=True, max_length=255, verbose_name='Home Address Import Status', blank=True, null=True) 
    npsp_home_address_imported = models.ForeignKey(NpspAddress, models.DO_NOTHING, db_column='npsp__HomeAddressImported__c', custom=True, blank=True, null=True) 
    npsp_home_city = models.CharField(db_column='npsp__Home_City__c', custom=True, max_length=255, verbose_name='Home City', help_text='Address.npsp__MailingCity__c', blank=True, null=True) 
    npsp_home_country = models.CharField(db_column='npsp__Home_Country__c', custom=True, max_length=255, verbose_name='Home Country', help_text='Address.npsp__MailingCountry__c', blank=True, null=True) 
    npsp_home_state_province = models.CharField(db_column='npsp__Home_State_Province__c', custom=True, max_length=255, verbose_name='Home State/Province', help_text='Address.npsp__MailingState__c', blank=True, null=True) 
    npsp_home_street = models.TextField(db_column='npsp__Home_Street__c', custom=True, verbose_name='Home Street', help_text='Address.npsp__MailingStreet__c', blank=True, null=True) 
    npsp_home_zip_postal_code = models.CharField(db_column='npsp__Home_Zip_Postal_Code__c', custom=True, max_length=255, verbose_name='Home Zip/Postal Code', help_text='Address.npsp__MailingPostalCode__c', blank=True, null=True) 
    npsp_household_account_imported = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__HouseholdAccountImported__c', custom=True, related_name='npspdataimport_npsphouseholdaccountimported_set', blank=True, null=True) 
    npsp_household_phone = models.CharField(db_column='npsp__Household_Phone__c', custom=True, max_length=40, verbose_name='Household Phone', help_text='Household.Phone', blank=True, null=True) 
    npsp_imported_date = models.DateTimeField(db_column='npsp__ImportedDate__c', custom=True, verbose_name='Imported Date', help_text='When the Data Import record was successfully imported.', blank=True, null=True) 
    npsp_npsp_data_import_batch = models.ForeignKey(NpspDataImportBatch, models.DO_NOTHING, db_column='npsp__NPSP_Data_Import_Batch__c', custom=True, blank=True, null=True) 
    npsp_payment_import_status = models.CharField(db_column='npsp__PaymentImportStatus__c', custom=True, max_length=255, verbose_name='Payment Import Status', blank=True, null=True) 
    npsp_payment_imported = models.ForeignKey(Npe01OppPayment, models.DO_NOTHING, db_column='npsp__PaymentImported__c', custom=True, blank=True, null=True) 
    npsp_payment_check_reference_number = models.CharField(db_column='npsp__Payment_Check_Reference_Number__c', custom=True, max_length=255, verbose_name='Payment Check/Reference Number', help_text='Payment.npe01__Check_Reference_Number__c', blank=True, null=True) 
    npsp_payment_method = models.CharField(db_column='npsp__Payment_Method__c', custom=True, max_length=255, verbose_name='Payment Method', help_text='Payment.npe01__Payment_Method__c', blank=True, null=True) 
    npsp_payment_possible_matches = models.CharField(db_column='npsp__Payment_Possible_Matches__c', custom=True, max_length=255, verbose_name='Payment Possible Matches', help_text="A comma separated list of ID's to the first 10 possible Payment matches to a donation.", blank=True, null=True) 
    npsp_status = models.CharField(db_column='npsp__Status__c', custom=True, max_length=255, verbose_name='Status', help_text='The status of importing the Data Import record.', choices=[('Imported', 'Imported'), ('Failed', 'Failed')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__DataImport__c'
        verbose_name = 'NPSP Data Import'
        verbose_name_plural = 'NPSP Data Imports'
        # keyPrefix = 'a0Q'



class NpspDataImportSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_account_custom_unique_id = models.CharField(db_column='npsp__Account_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Account Custom Unique ID', sf_read_only=models.READ_ONLY, help_text='An optional Unique Id field to use for Organization Account matching', blank=True, null=True) 
    npsp_account_matching_rule = models.CharField(db_column='npsp__Account_Matching_Rule__c', custom=True, max_length=255, verbose_name='Account Matching Rule', sf_read_only=models.READ_ONLY, help_text='Specifies which rule to follow when trying to match Accounts in Data Import records against existing Accounts.', blank=True, null=True) 
    npsp_batch_size = models.DecimalField(db_column='npsp__Batch_Size__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Batch Process Size', sf_read_only=models.READ_ONLY, help_text='The number of NPSP Data Import records to process in each batch.', blank=True, null=True) 
    npsp_contact_custom_unique_id = models.CharField(db_column='npsp__Contact_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Contact Custom Unique ID', sf_read_only=models.READ_ONLY, help_text='An optional Unique Id field to use for Contact matching', blank=True, null=True) 
    npsp_contact_matching_rule = models.CharField(db_column='npsp__Contact_Matching_Rule__c', custom=True, max_length=255, verbose_name='Contact Matching Rule', sf_read_only=models.READ_ONLY, help_text='Specifies which rule to follow when trying to match Contacts in Data Import records against existing Contacts.', blank=True, null=True) 
    npsp_donation_date_range = models.DecimalField(db_column='npsp__Donation_Date_Range__c', custom=True, max_digits=2, decimal_places=0, verbose_name='Number of Days from Donation Date', sf_read_only=models.READ_ONLY, help_text='Enter the number of days from the Donation Date to consider when looking for a matching Opportunity or Payment. The Data Importer will choose the matching Opp or Payment whose date falls within the number of days AND is closest to the Donation Date.', blank=True, null=True) 
    npsp_donation_matching_behavior = models.CharField(db_column='npsp__Donation_Matching_Behavior__c', custom=True, max_length=255, verbose_name='Donation Matching Behavior', sf_read_only=models.READ_ONLY, help_text='Defines how the Data Importer should handle matching Donations. You must choose a value.', blank=True, null=True) 
    npsp_donation_matching_implementing_class = models.CharField(db_column='npsp__Donation_Matching_Implementing_Class__c', custom=True, max_length=255, verbose_name='Donation Matching Implementing Class', sf_read_only=models.READ_ONLY, help_text='The developer name of an Apex class that implements the BDI_IMatching interface for Donations. Leave blank to let NPSP handle matching.', blank=True, null=True) 
    npsp_donation_matching_rule = models.CharField(db_column='npsp__Donation_Matching_Rule__c', custom=True, max_length=255, verbose_name='Donation Matching Rule', sf_read_only=models.READ_ONLY, help_text='Specifies which fields to match by when trying to match Donations in Data Import records against existing Opportunities and Payments. Control or Command click to select more than one field.', blank=True, null=True) 
    npsp_post_process_implementing_class = models.CharField(db_column='npsp__Post_Process_Implementing_Class__c', custom=True, max_length=255, verbose_name='Post Process Implementing Class', sf_read_only=models.READ_ONLY, help_text='The developer name of an Apex class that implements the BDI_IPostProcess interface for NPSP Data Import records.', blank=True, null=True) 
    npsp_run_opportunity_rollups_while_processing = models.BooleanField(db_column='npsp__Run_Opportunity_Rollups_while_Processing__c', custom=True, verbose_name='Calculate Donation Rollups with Batch', sf_read_only=models.READ_ONLY, default=False, help_text='When checked, NPSP calculates donor statistics when donations are processed. If unchecked, donor statistics are calculated during the default nightly Scheduled Job. Note that selecting this checkbox may slow down processing of this batch.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Data_Import_Settings__ChangeEvent'
        verbose_name = 'Change Event: Data Import Settings'
        verbose_name_plural = 'Change Event: Data Import Settings'
        # keyPrefix = 'None'



class NpspDataImportSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspdataimportsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_account_custom_unique_id = models.CharField(db_column='npsp__Account_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Account Custom Unique ID', help_text='An optional Unique Id field to use for Organization Account matching', blank=True, null=True) 
    npsp_account_matching_rule = models.CharField(db_column='npsp__Account_Matching_Rule__c', custom=True, max_length=255, verbose_name='Account Matching Rule', help_text='Specifies which rule to follow when trying to match Accounts in Data Import records against existing Accounts.', blank=True, null=True) 
    npsp_batch_size = models.DecimalField(db_column='npsp__Batch_Size__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Batch Process Size', help_text='The number of NPSP Data Import records to process in each batch.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_contact_custom_unique_id = models.CharField(db_column='npsp__Contact_Custom_Unique_ID__c', custom=True, max_length=255, verbose_name='Contact Custom Unique ID', help_text='An optional Unique Id field to use for Contact matching', blank=True, null=True) 
    npsp_contact_matching_rule = models.CharField(db_column='npsp__Contact_Matching_Rule__c', custom=True, max_length=255, verbose_name='Contact Matching Rule', help_text='Specifies which rule to follow when trying to match Contacts in Data Import records against existing Contacts.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_donation_date_range = models.DecimalField(db_column='npsp__Donation_Date_Range__c', custom=True, max_digits=2, decimal_places=0, verbose_name='Number of Days from Donation Date', help_text='Enter the number of days from the Donation Date to consider when looking for a matching Opportunity or Payment. The Data Importer will choose the matching Opp or Payment whose date falls within the number of days AND is closest to the Donation Date.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_donation_matching_behavior = models.CharField(db_column='npsp__Donation_Matching_Behavior__c', custom=True, max_length=255, verbose_name='Donation Matching Behavior', help_text='Defines how the Data Importer should handle matching Donations. You must choose a value.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_donation_matching_implementing_class = models.CharField(db_column='npsp__Donation_Matching_Implementing_Class__c', custom=True, max_length=255, verbose_name='Donation Matching Implementing Class', help_text='The developer name of an Apex class that implements the BDI_IMatching interface for Donations. Leave blank to let NPSP handle matching.', blank=True, null=True) 
    npsp_donation_matching_rule = models.CharField(db_column='npsp__Donation_Matching_Rule__c', custom=True, max_length=255, verbose_name='Donation Matching Rule', help_text='Specifies which fields to match by when trying to match Donations in Data Import records against existing Opportunities and Payments. Control or Command click to select more than one field.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_post_process_implementing_class = models.CharField(db_column='npsp__Post_Process_Implementing_Class__c', custom=True, max_length=255, verbose_name='Post Process Implementing Class', help_text='The developer name of an Apex class that implements the BDI_IPostProcess interface for NPSP Data Import records.', blank=True, null=True) 
    npsp_run_opportunity_rollups_while_processing = models.BooleanField(db_column='npsp__Run_Opportunity_Rollups_while_Processing__c', custom=True, verbose_name='Calculate Donation Rollups with Batch', default=models.DEFAULTED_ON_CREATE, help_text='When checked, NPSP calculates donor statistics when donations are processed. If unchecked, donor statistics are calculated during the default nightly Scheduled Job. Note that selecting this checkbox may slow down processing of this batch.') 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Data_Import_Settings__c'
        verbose_name = 'Data Import Settings'
        verbose_name_plural = 'Data Import Settings'
        # keyPrefix = 'a0R'



class NpspEngagementPlanTaskChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantaskchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantaskchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_template = models.ForeignKey('NpspEngagementPlanTemplate', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Template__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_assigned_to = models.ForeignKey(User, models.DO_NOTHING, db_column='npsp__Assigned_To__c', custom=True, related_name='npspengagementplantaskchangeevent_npspassignedto_set', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_comments = models.TextField(db_column='npsp__Comments__c', custom=True, verbose_name='Comments', sf_read_only=models.READ_ONLY, help_text='Comments on the Task.', blank=True, null=True) 
    npsp_days_after = models.DecimalField(db_column='npsp__Days_After__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Days After', sf_read_only=models.READ_ONLY, help_text="The number of days after the Engagement Plan creation date, or the parent Task's Due Date, that this Task is due.", blank=True, null=True) 
    npsp_parent_task = models.ForeignKey('NpspEngagementPlanTask', models.DO_NOTHING, db_column='npsp__Parent_Task__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_priority = models.CharField(db_column='npsp__Priority__c', custom=True, max_length=255, verbose_name='Priority', sf_read_only=models.READ_ONLY, help_text='The priority of this Task.', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True) 
    npsp_reminder_time = models.CharField(db_column='npsp__Reminder_Time__c', custom=True, max_length=4, verbose_name='Reminder Time', sf_read_only=models.READ_ONLY, help_text='The time on the Due Date that a reminder appears.', blank=True, null=True) 
    npsp_reminder = models.BooleanField(db_column='npsp__Reminder__c', custom=True, verbose_name='Reminder', sf_read_only=models.READ_ONLY, default=False, help_text='Sets a reminder for the Task.') 
    npsp_send_email = models.BooleanField(db_column='npsp__Send_Email__c', custom=True, verbose_name='Send Email', sf_read_only=models.READ_ONLY, default=False, help_text="Determines if an email is sent to the user in the Task's Assigned To field when the Task becomes active. Dependent Tasks are active when their Parent Task is completed.") 
    npsp_status = models.CharField(db_column='npsp__Status__c', custom=True, max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, help_text='The Status of a Task. Dependent Tasks are set to "Waiting on Parent Task" until their Parent Task is completed.', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')], blank=True, null=True) 
    npsp_type = models.CharField(db_column='npsp__Type__c', custom=True, max_length=255, verbose_name='Type', sf_read_only=models.READ_ONLY, help_text='The type of Task.', choices=[('Call', 'Call'), ('Meeting', 'Meeting'), ('Other', 'Other'), ('Email', 'Email')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Engagement_Plan_Task__ChangeEvent'
        verbose_name = 'Change Event: Engagement Plan Task'
        verbose_name_plural = 'Change Event: Engagement Plan Task'
        # keyPrefix = 'None'



class NpspEngagementPlanTask(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Subject', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantask_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantask_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_engagement_plan_template = models.ForeignKey('NpspEngagementPlanTemplate', models.DO_NOTHING, db_column='npsp__Engagement_Plan_Template__c', custom=True)  # Master Detail Relationship 0
    npsp_assigned_to = models.ForeignKey(User, models.DO_NOTHING, db_column='npsp__Assigned_To__c', custom=True, related_name='npspengagementplantask_npspassignedto_set', blank=True, null=True) 
    npsp_comments = models.TextField(db_column='npsp__Comments__c', custom=True, verbose_name='Comments', help_text='Comments on the Task.', blank=True, null=True) 
    npsp_days_after = models.DecimalField(db_column='npsp__Days_After__c', custom=True, max_digits=3, decimal_places=0, verbose_name='Days After', help_text="The number of days after the Engagement Plan creation date, or the parent Task's Due Date, that this Task is due.", blank=True, null=True) 
    npsp_parent_task = models.ForeignKey('self', models.DO_NOTHING, db_column='npsp__Parent_Task__c', custom=True, blank=True, null=True) 
    npsp_priority = models.CharField(db_column='npsp__Priority__c', custom=True, max_length=255, verbose_name='Priority', help_text='The priority of this Task.', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True, null=True) 
    npsp_reminder_time = models.CharField(db_column='npsp__Reminder_Time__c', custom=True, max_length=4, verbose_name='Reminder Time', help_text='The time on the Due Date that a reminder appears.', blank=True, null=True) 
    npsp_reminder = models.BooleanField(db_column='npsp__Reminder__c', custom=True, verbose_name='Reminder', default=models.DEFAULTED_ON_CREATE, help_text='Sets a reminder for the Task.') 
    npsp_send_email = models.BooleanField(db_column='npsp__Send_Email__c', custom=True, verbose_name='Send Email', default=models.DEFAULTED_ON_CREATE, help_text="Determines if an email is sent to the user in the Task's Assigned To field when the Task becomes active. Dependent Tasks are active when their Parent Task is completed.") 
    npsp_status = models.CharField(db_column='npsp__Status__c', custom=True, max_length=255, verbose_name='Status', help_text='The Status of a Task. Dependent Tasks are set to "Waiting on Parent Task" until their Parent Task is completed.', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')], blank=True, null=True) 
    npsp_type = models.CharField(db_column='npsp__Type__c', custom=True, max_length=255, verbose_name='Type', help_text='The type of Task.', choices=[('Call', 'Call'), ('Meeting', 'Meeting'), ('Other', 'Other'), ('Email', 'Email')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Engagement_Plan_Task__c'
        verbose_name = 'Engagement Plan Task'
        verbose_name_plural = 'Engagement Plan Tasks'
        # keyPrefix = 'a0S'



class NpspEngagementPlanTemplateChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantemplatechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantemplatechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_automatically_update_child_task_due_date = models.BooleanField(db_column='npsp__Automatically_Update_Child_Task_Due_Date__c', custom=True, verbose_name='Automatically Update Child Task Due Date', sf_read_only=models.READ_ONLY, default=True, help_text="Recalculates a child Task's due date based on when the parent Task was actually completed.") 
    npsp_default_assignee = models.CharField(db_column='npsp__Default_Assignee__c', custom=True, max_length=255, verbose_name='Default Assignee', sf_read_only=models.READ_ONLY, default='User Creating Engagement Plan', help_text="When an Engagement Plan Task's Assigned To field is left blank, who should the Task be assigned to?", choices=[('Owner of Object for Engagement Plan', 'Owner of Object for Engagement Plan'), ('User Creating Engagement Plan', 'User Creating Engagement Plan')], blank=True, null=True) 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_reschedule_to = models.CharField(db_column='npsp__Reschedule_To__c', custom=True, max_length=255, verbose_name='Reschedule To', sf_read_only=models.READ_ONLY, default='Monday', help_text='Should Tasks with Due Dates on a weekend day be scheduled for the Friday before the weekend or the Monday after? This applies only if Skip Weekend is selected.', choices=[('Monday', 'Monday'), ('Friday', 'Friday')], blank=True, null=True) 
    npsp_skip_weekends = models.BooleanField(db_column='npsp__Skip_Weekends__c', custom=True, verbose_name='Skip Weekends', sf_read_only=models.READ_ONLY, default=True, help_text='If selected, Tasks created in this Engagement Plan will not have Due Dates that fall on Saturday or Sunday.') 
    npsp_total_engagement_plans = models.DecimalField(db_column='npsp__Total_Engagement_Plans__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Engagement Plans', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_total_tasks = models.DecimalField(db_column='npsp__Total_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Tasks', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Engagement_Plan_Template__ChangeEvent'
        verbose_name = 'Change Event: Engagement Plan Template'
        verbose_name_plural = 'Change Event: Engagement Plan Template'
        # keyPrefix = 'None'



class NpspEngagementPlanTemplate(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Engagement Plan Template Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantemplate_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplantemplate_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_automatically_update_child_task_due_date = models.BooleanField(db_column='npsp__Automatically_Update_Child_Task_Due_Date__c', custom=True, verbose_name='Automatically Update Child Task Due Date', default=models.DEFAULTED_ON_CREATE, help_text="Recalculates a child Task's due date based on when the parent Task was actually completed.") 
    npsp_default_assignee = models.CharField(db_column='npsp__Default_Assignee__c', custom=True, max_length=255, verbose_name='Default Assignee', default=models.DEFAULTED_ON_CREATE, help_text="When an Engagement Plan Task's Assigned To field is left blank, who should the Task be assigned to?", choices=[('Owner of Object for Engagement Plan', 'Owner of Object for Engagement Plan'), ('User Creating Engagement Plan', 'User Creating Engagement Plan')], blank=True, null=True) 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', blank=True, null=True) 
    npsp_reschedule_to = models.CharField(db_column='npsp__Reschedule_To__c', custom=True, max_length=255, verbose_name='Reschedule To', default=models.DEFAULTED_ON_CREATE, help_text='Should Tasks with Due Dates on a weekend day be scheduled for the Friday before the weekend or the Monday after? This applies only if Skip Weekend is selected.', choices=[('Monday', 'Monday'), ('Friday', 'Friday')], blank=True, null=True) 
    npsp_skip_weekends = models.BooleanField(db_column='npsp__Skip_Weekends__c', custom=True, verbose_name='Skip Weekends', default=models.DEFAULTED_ON_CREATE, help_text='If selected, Tasks created in this Engagement Plan will not have Due Dates that fall on Saturday or Sunday.') 
    npsp_total_engagement_plans = models.DecimalField(db_column='npsp__Total_Engagement_Plans__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Engagement Plans', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_total_tasks = models.DecimalField(db_column='npsp__Total_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Tasks', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Engagement_Plan_Template__c'
        verbose_name = 'Engagement Plan Template'
        verbose_name_plural = 'Engagement Plan Templates'
        # keyPrefix = 'a0T'



class NpspEngagementPlanChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplanchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplanchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_template = models.ForeignKey(NpspEngagementPlanTemplate, models.DO_NOTHING, db_column='npsp__Engagement_Plan_Template__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='npsp__Campaign__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_case = models.ForeignKey(Case, models.DO_NOTHING, db_column='npsp__Case__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_completed_tasks = models.DecimalField(db_column='npsp__Completed_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Completed Tasks', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_recurring_donation = models.ForeignKey(Npe03RecurringDonation, models.DO_NOTHING, db_column='npsp__Recurring_Donation__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_status = models.CharField(db_column='npsp__Status__c', custom=True, max_length=3900, verbose_name='Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_total_ep_tasks = models.DecimalField(db_column='npsp__Total_EP_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total EP Tasks', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_total_tasks = models.DecimalField(db_column='npsp__Total_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Tasks', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Engagement_Plan__ChangeEvent'
        verbose_name = 'Change Event: Engagement Plan'
        verbose_name_plural = 'Change Event: Engagement Plan'
        # keyPrefix = 'None'



class NpspEngagementPlan(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Engagement Plan Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplan_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspengagementplan_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_engagement_plan_template = models.ForeignKey(NpspEngagementPlanTemplate, models.DO_NOTHING, db_column='npsp__Engagement_Plan_Template__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    npsp_account = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Account__c', custom=True, blank=True, null=True) 
    npsp_campaign = models.ForeignKey(Campaign, models.DO_NOTHING, db_column='npsp__Campaign__c', custom=True, blank=True, null=True) 
    npsp_case = models.ForeignKey(Case, models.DO_NOTHING, db_column='npsp__Case__c', custom=True, blank=True, null=True) 
    npsp_completed_tasks = models.DecimalField(db_column='npsp__Completed_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Completed Tasks', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact__c', custom=True, blank=True, null=True) 
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, blank=True, null=True) 
    npsp_recurring_donation = models.ForeignKey(Npe03RecurringDonation, models.DO_NOTHING, db_column='npsp__Recurring_Donation__c', custom=True, blank=True, null=True) 
    npsp_status = models.CharField(db_column='npsp__Status__c', custom=True, max_length=1300, verbose_name='Status', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_total_ep_tasks = models.DecimalField(db_column='npsp__Total_EP_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total EP Tasks', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_total_tasks = models.DecimalField(db_column='npsp__Total_Tasks__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Tasks', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Engagement_Plan__c'
        verbose_name = 'Engagement Plan'
        verbose_name_plural = 'Engagement Plans'
        # keyPrefix = 'a0U'



class NpspErrorSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperrorsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperrorsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_async_error_check_last_run = models.DateTimeField(db_column='npsp__Async_Error_Check_Last_Run__c', custom=True, verbose_name='Async Error Check Last Run', sf_read_only=models.READ_ONLY, help_text='Used to keep track of the most recent execution of the Async job error logger', blank=True, null=True) 
    npsp_disable_error_handling = models.BooleanField(db_column='npsp__Disable_Error_Handling__c', custom=True, verbose_name='Disable Error Handling', sf_read_only=models.READ_ONLY, default=False, help_text="If checked, NPSP's error handling framework is disabled.") 
    npsp_don_t_auto_schedule_default_npsp_jobs = models.BooleanField(db_column='npsp__Don_t_Auto_Schedule_Default_NPSP_Jobs__c', custom=True, verbose_name="Don't Auto Schedule Default NPSP Jobs", sf_read_only=models.READ_ONLY, default=False, help_text="When checked, NPSP won't automatically schedule default recurring jobs. These recurring jobs calculate rollups, update recurring donations and seasonal address, and perform error handling.") 
    npsp_enable_debug = models.BooleanField(db_column='npsp__Enable_Debug__c', custom=True, verbose_name='Enable Debug', sf_read_only=models.READ_ONLY, default=False, help_text='Turn this on to enable debug statements in managed package code.') 
    npsp_error_notifications_on = models.BooleanField(db_column='npsp__Error_Notifications_On__c', custom=True, verbose_name='Error Notifications', sf_read_only=models.READ_ONLY, default=False, help_text="Check this if you'd like the system to post notifications for certain type of errors.") 
    npsp_error_notifications_to = models.TextField(db_column='npsp__Error_Notifications_To__c', custom=True, verbose_name='Error Notification Recipients', sf_read_only=models.READ_ONLY, help_text='Select the type of user to send notifications to.', blank=True, null=True) 
    npsp_respect_duplicate_rule_settings = models.BooleanField(db_column='npsp__Respect_Duplicate_Rule_Settings__c', custom=True, verbose_name='Respect Duplicate Rule Settings', sf_read_only=models.READ_ONLY, default=False, help_text='Respect the settings on a Duplicate Rule that control whether duplicate records are allowed. To check existing settings, go to Duplicate Rules under Setup. When the Action On Create or Action On Edit fields are set to "Allow," duplicates will be saved.') 
    npsp_store_errors_on = models.BooleanField(db_column='npsp__Store_Errors_On__c', custom=True, verbose_name='Store Errors', sf_read_only=models.READ_ONLY, default=True, help_text="Check this if you'd like errors to be stored in the database.") 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Error_Settings__ChangeEvent'
        verbose_name = 'Change Event: Error Settings'
        verbose_name_plural = 'Change Event: Error Settings'
        # keyPrefix = 'None'



class NpspErrorSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperrorsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperrorsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_async_error_check_last_run = models.DateTimeField(db_column='npsp__Async_Error_Check_Last_Run__c', custom=True, verbose_name='Async Error Check Last Run', help_text='Used to keep track of the most recent execution of the Async job error logger', blank=True, null=True) 
    npsp_disable_error_handling = models.BooleanField(db_column='npsp__Disable_Error_Handling__c', custom=True, verbose_name='Disable Error Handling', default=models.DEFAULTED_ON_CREATE, help_text="If checked, NPSP's error handling framework is disabled.") 
    npsp_don_t_auto_schedule_default_npsp_jobs = models.BooleanField(db_column='npsp__Don_t_Auto_Schedule_Default_NPSP_Jobs__c', custom=True, verbose_name="Don't Auto Schedule Default NPSP Jobs", default=models.DEFAULTED_ON_CREATE, help_text="When checked, NPSP won't automatically schedule default recurring jobs. These recurring jobs calculate rollups, update recurring donations and seasonal address, and perform error handling.") 
    npsp_enable_debug = models.BooleanField(db_column='npsp__Enable_Debug__c', custom=True, verbose_name='Enable Debug', default=models.DEFAULTED_ON_CREATE, help_text='Turn this on to enable debug statements in managed package code.') 
    npsp_error_notifications_on = models.BooleanField(db_column='npsp__Error_Notifications_On__c', custom=True, verbose_name='Error Notifications', default=models.DEFAULTED_ON_CREATE, help_text="Check this if you'd like the system to post notifications for certain type of errors.") 
    npsp_error_notifications_to = models.TextField(db_column='npsp__Error_Notifications_To__c', custom=True, verbose_name='Error Notification Recipients', help_text='Select the type of user to send notifications to.', blank=True, null=True) 
    npsp_respect_duplicate_rule_settings = models.BooleanField(db_column='npsp__Respect_Duplicate_Rule_Settings__c', custom=True, verbose_name='Respect Duplicate Rule Settings', default=models.DEFAULTED_ON_CREATE, help_text='Respect the settings on a Duplicate Rule that control whether duplicate records are allowed. To check existing settings, go to Duplicate Rules under Setup. When the Action On Create or Action On Edit fields are set to "Allow," duplicates will be saved.') 
    npsp_store_errors_on = models.BooleanField(db_column='npsp__Store_Errors_On__c', custom=True, verbose_name='Store Errors', default=models.DEFAULTED_ON_CREATE, help_text="Check this if you'd like errors to be stored in the database.") 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Error_Settings__c'
        verbose_name = 'Error Settings'
        verbose_name_plural = 'Error Settings'
        # keyPrefix = 'a0V'



class NpspErrorChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperrorchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperrorchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_context_type = models.TextField(db_column='npsp__Context_Type__c', custom=True, verbose_name='Context Type', sf_read_only=models.READ_ONLY, help_text='Context that generated the error, if known.', blank=True, null=True) 
    npsp_datetime = models.DateTimeField(db_column='npsp__Datetime__c', custom=True, verbose_name='Datetime', sf_read_only=models.READ_ONLY, help_text='Date & time the error occurred', blank=True, null=True) 
    npsp_email_sent = models.BooleanField(db_column='npsp__Email_Sent__c', custom=True, verbose_name='Email Sent', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates whether an email notification has been sent regarding this error.') 
    npsp_error_type = models.TextField(db_column='npsp__Error_Type__c', custom=True, verbose_name='Error Type', sf_read_only=models.READ_ONLY, help_text='Type of error that occurred', blank=True, null=True) 
    npsp_full_message = models.TextField(db_column='npsp__Full_Message__c', custom=True, verbose_name='Full Message', sf_read_only=models.READ_ONLY, help_text='Full text of the error message', blank=True, null=True) 
    npsp_object_type = models.TextField(db_column='npsp__Object_Type__c', custom=True, verbose_name='Object Type', sf_read_only=models.READ_ONLY, help_text='Type of object on which the error occurred, if known.', blank=True, null=True) 
    npsp_posted_in_chatter = models.BooleanField(db_column='npsp__Posted_in_Chatter__c', custom=True, verbose_name='Posted in Chatter', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates whether the error has been posted in Chatter.') 
    npsp_record_url = models.URLField(db_column='npsp__Record_URL__c', custom=True, verbose_name='Record URL', sf_read_only=models.READ_ONLY, help_text='A link to the record which caused the error, if available.', blank=True, null=True) 
    npsp_stack_trace = models.TextField(db_column='npsp__Stack_Trace__c', custom=True, verbose_name='Stack Trace', sf_read_only=models.READ_ONLY, help_text='Stack trace for the thrown error, if available at runtime.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Error__ChangeEvent'
        verbose_name = 'Change Event: Error'
        verbose_name_plural = 'Change Event: Error'
        # keyPrefix = 'None'



class NpspError(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Error Number', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperror_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsperror_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_context_type = models.TextField(db_column='npsp__Context_Type__c', custom=True, verbose_name='Context Type', help_text='Context that generated the error, if known.', blank=True, null=True) 
    npsp_datetime = models.DateTimeField(db_column='npsp__Datetime__c', custom=True, verbose_name='Datetime', help_text='Date & time the error occurred', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_email_sent = models.BooleanField(db_column='npsp__Email_Sent__c', custom=True, verbose_name='Email Sent', default=models.DEFAULTED_ON_CREATE, help_text='Indicates whether an email notification has been sent regarding this error.') 
    npsp_error_type = models.TextField(db_column='npsp__Error_Type__c', custom=True, verbose_name='Error Type', help_text='Type of error that occurred', blank=True, null=True) 
    npsp_full_message = models.TextField(db_column='npsp__Full_Message__c', custom=True, verbose_name='Full Message', help_text='Full text of the error message', blank=True, null=True) 
    npsp_object_type = models.TextField(db_column='npsp__Object_Type__c', custom=True, verbose_name='Object Type', help_text='Type of object on which the error occurred, if known.', blank=True, null=True) 
    npsp_posted_in_chatter = models.BooleanField(db_column='npsp__Posted_in_Chatter__c', custom=True, verbose_name='Posted in Chatter', default=models.DEFAULTED_ON_CREATE, help_text='Indicates whether the error has been posted in Chatter.') 
    npsp_record_url = models.URLField(db_column='npsp__Record_URL__c', custom=True, verbose_name='Record URL', help_text='A link to the record which caused the error, if available.', blank=True, null=True) 
    npsp_stack_trace = models.TextField(db_column='npsp__Stack_Trace__c', custom=True, verbose_name='Stack Trace', help_text='Stack trace for the thrown error, if available at runtime.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Error__c'
        verbose_name = 'Error'
        verbose_name_plural = 'Errors'
        # keyPrefix = 'a0W'



class NpspFilterGroupMdt(models.Model):
    developer_name = models.CharField(max_length=40, verbose_name='Custom Metadata Record Name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=40, verbose_name='Label', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_is_deleted = models.BooleanField(db_column='npsp__Is_Deleted__c', custom=True, verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Filter_Group__mdt'
        verbose_name = 'Filter Group'
        verbose_name_plural = 'Filter Groups'
        # keyPrefix = 'm01'



class NpspFilterRuleMdt(models.Model):
    developer_name = models.CharField(max_length=40, verbose_name='Custom Metadata Record Name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=40, verbose_name='Label', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_constant = models.CharField(db_column='npsp__Constant__c', custom=True, max_length=255, verbose_name='Value', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_filter_group = models.ForeignKey(NpspFilterGroupMdt, models.DO_NOTHING, db_column='npsp__Filter_Group__c', custom=True, sf_read_only=models.READ_ONLY) 
    npsp_is_deleted = models.BooleanField(db_column='npsp__Is_Deleted__c', custom=True, verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False) 
    npsp_object = models.CharField(db_column='npsp__Object__c', custom=True, max_length=255, verbose_name='Object', sf_read_only=models.READ_ONLY) 
    npsp_operator = models.CharField(db_column='npsp__Operator__c', custom=True, max_length=255, verbose_name='Operator', sf_read_only=models.READ_ONLY, default='Equals', choices=[('Equals', 'Equals'), ('Not_Equals', 'Not Equals'), ('Greater', 'Greater Than'), ('Less', 'Less Than'), ('Greater_or_Equal', 'Greater or Equal'), ('Less_or_Equal', 'Less or Equal'), ('Starts_With', 'Starts With'), ('Contains', 'Contains'), ('Does_Not_Contain', 'Does Not Contain'), ('In_List', 'In List'), ('Not_In_List', 'Not In List'), ('Is_Included', 'Is Included'), ('Is_Not_Included', 'Is Not Included')]) 
    npsp_field = models.CharField(db_column='npsp__Field__c', custom=True, max_length=255, verbose_name='Field', sf_read_only=models.READ_ONLY) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Filter_Rule__mdt'
        verbose_name = 'Filter Rule'
        verbose_name_plural = 'Filter Rules'
        # keyPrefix = 'm02'



class NpspFundChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspfundchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspfundchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Fund__ChangeEvent'
        verbose_name = 'Change Event: DEPRECATED-Fund'
        verbose_name_plural = 'Change Event: DEPRECATED-Fund'
        # keyPrefix = 'None'



class NpspFundHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('NpspFund', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Name', 'DEPRECATED-Fund Name'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Fund__History'
        verbose_name = 'History: DEPRECATED-Fund'
        verbose_name_plural = 'History: DEPRECATED-Fund'
        # keyPrefix = 'None'



class NpspFund(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='DEPRECATED-Fund Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspfund_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspfund_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Fund__c'
        verbose_name = 'DEPRECATED-Fund'
        verbose_name_plural = 'DEPRECATED-Funds'
        # keyPrefix = 'a0X'



class NpspGeneralAccountingUnitChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgeneralaccountingunitchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgeneralaccountingunitchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=True, help_text="Active general accounting units are available for selection on allocations. Inactive general accounting units can't have new allocations to them.") 
    npsp_average_allocation = models.DecimalField(db_column='npsp__Average_Allocation__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Average Allocation', sf_read_only=models.READ_ONLY, help_text='The average of all allocations of all time to this general accounting unit.', blank=True, null=True) 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, help_text='Extra information about this general accounting unit.', blank=True, null=True) 
    npsp_first_allocation_date = models.DateField(db_column='npsp__First_Allocation_Date__c', custom=True, verbose_name='First Allocation Date', sf_read_only=models.READ_ONLY, help_text='The first Opportunity Close Date of an allocation associated with this general accounting unit.', blank=True, null=True) 
    npsp_largest_allocation = models.DecimalField(db_column='npsp__Largest_Allocation__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Largest Allocation', sf_read_only=models.READ_ONLY, help_text='The largest allocation of all time to this general accounting unit.', blank=True, null=True) 
    npsp_last_allocation_date = models.DateField(db_column='npsp__Last_Allocation_Date__c', custom=True, verbose_name='Last Allocation Date', sf_read_only=models.READ_ONLY, help_text='The last Opportunity Close Date of an allocation associated with this general accounting unit.', blank=True, null=True) 
    npsp_number_of_allocations_last_n_days = models.DecimalField(db_column='npsp__Number_of_Allocations_Last_N_Days__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations Last N Days', sf_read_only=models.READ_ONLY, help_text='Total number of allocations of opportunities in a closed and won stage in the last N days. The value of N can be modified in settings.', blank=True, null=True) 
    npsp_number_of_allocations_last_year = models.DecimalField(db_column='npsp__Number_of_Allocations_Last_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations Last Year', sf_read_only=models.READ_ONLY, help_text='Total number of allocations of opportunities in a closed and won stage last year.', blank=True, null=True) 
    npsp_number_of_allocations_this_year = models.DecimalField(db_column='npsp__Number_of_Allocations_This_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations This Year', sf_read_only=models.READ_ONLY, help_text='Total number of allocations of opportunities in a closed and won stage this year.', blank=True, null=True) 
    npsp_number_of_allocations_two_years_ago = models.DecimalField(db_column='npsp__Number_of_Allocations_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations Two Years Ago', sf_read_only=models.READ_ONLY, help_text='Total number of allocations of opportunities in a closed and won stage two years ago.', blank=True, null=True) 
    npsp_smallest_allocation = models.DecimalField(db_column='npsp__Smallest_Allocation__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Smallest Allocation', sf_read_only=models.READ_ONLY, help_text='The smallest allocation of all time to this general accounting unit.', blank=True, null=True) 
    npsp_total_allocations_last_n_days = models.DecimalField(db_column='npsp__Total_Allocations_Last_N_Days__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations Last N Days', sf_read_only=models.READ_ONLY, help_text='Sum total of all allocations of opportunities in a closed and won stage in the last N days. The value of N can be modified in settings.', blank=True, null=True) 
    npsp_total_allocations_last_year = models.DecimalField(db_column='npsp__Total_Allocations_Last_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations Last Year', sf_read_only=models.READ_ONLY, help_text='Sum total of all allocations of opportunities in a closed and won stage last year.', blank=True, null=True) 
    npsp_total_allocations_this_year = models.DecimalField(db_column='npsp__Total_Allocations_This_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations This Year', sf_read_only=models.READ_ONLY, help_text='Sum total of all allocations of opportunities in a closed and won stage this year.', blank=True, null=True) 
    npsp_total_allocations_two_years_ago = models.DecimalField(db_column='npsp__Total_Allocations_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations Two Years Ago', sf_read_only=models.READ_ONLY, help_text='Sum total of all allocations of opportunities in a closed and won stage two years ago.', blank=True, null=True) 
    npsp_total_allocations = models.DecimalField(db_column='npsp__Total_Allocations__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations', sf_read_only=models.READ_ONLY, help_text='Sum total of all allocations of opportunities in a closed and won stage.', blank=True, null=True) 
    npsp_total_number_of_allocations = models.DecimalField(db_column='npsp__Total_Number_of_Allocations__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Allocations', sf_read_only=models.READ_ONLY, help_text='Total number of allocations of opportunities in a closed and won stage.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__General_Accounting_Unit__ChangeEvent'
        verbose_name = 'Change Event: General Accounting Unit'
        verbose_name_plural = 'Change Event: General Accounting Unit'
        # keyPrefix = 'None'



class NpspGeneralAccountingUnitHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('NpspGeneralAccountingUnit', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npsp__Active__c', 'Active'), ('npsp__Average_Allocation__c', 'Average Allocation'), ('created', 'Created.'), ('npsp__Description__c', 'Description'), ('feedEvent', 'Feed event'), ('npsp__First_Allocation_Date__c', 'First Allocation Date'), ('Name', 'General Accounting Unit Name'), ('individualMerged', 'Individual Merged'), ('npsp__Largest_Allocation__c', 'Largest Allocation'), ('npsp__Last_Allocation_Date__c', 'Last Allocation Date'), ('npsp__Number_of_Allocations_Last_N_Days__c', 'Number of Allocations Last N Days'), ('npsp__Number_of_Allocations_Last_Year__c', 'Number of Allocations Last Year'), ('npsp__Number_of_Allocations_This_Year__c', 'Number of Allocations This Year'), ('npsp__Number_of_Allocations_Two_Years_Ago__c', 'Number of Allocations Two Years Ago'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('npsp__Smallest_Allocation__c', 'Smallest Allocation'), ('npsp__Total_Allocations__c', 'Total Allocations'), ('npsp__Total_Allocations_Last_N_Days__c', 'Total Allocations Last N Days'), ('npsp__Total_Allocations_Last_Year__c', 'Total Allocations Last Year'), ('npsp__Total_Allocations_This_Year__c', 'Total Allocations This Year'), ('npsp__Total_Allocations_Two_Years_Ago__c', 'Total Allocations Two Years Ago'), ('npsp__Total_Number_of_Allocations__c', 'Total Number of Allocations')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__General_Accounting_Unit__History'
        verbose_name = 'History: General Accounting Unit'
        verbose_name_plural = 'History: General Accounting Unit'
        # keyPrefix = 'None'



class NpspGeneralAccountingUnit(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='General Accounting Unit Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgeneralaccountingunit_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgeneralaccountingunit_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', default=models.DEFAULTED_ON_CREATE, help_text="Active general accounting units are available for selection on allocations. Inactive general accounting units can't have new allocations to them.") 
    npsp_average_allocation = models.DecimalField(db_column='npsp__Average_Allocation__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Average Allocation', help_text='The average of all allocations of all time to this general accounting unit.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', help_text='Extra information about this general accounting unit.', blank=True, null=True) 
    npsp_first_allocation_date = models.DateField(db_column='npsp__First_Allocation_Date__c', custom=True, verbose_name='First Allocation Date', help_text='The first Opportunity Close Date of an allocation associated with this general accounting unit.', blank=True, null=True) 
    npsp_largest_allocation = models.DecimalField(db_column='npsp__Largest_Allocation__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Largest Allocation', help_text='The largest allocation of all time to this general accounting unit.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_last_allocation_date = models.DateField(db_column='npsp__Last_Allocation_Date__c', custom=True, verbose_name='Last Allocation Date', help_text='The last Opportunity Close Date of an allocation associated with this general accounting unit.', blank=True, null=True) 
    npsp_number_of_allocations_last_n_days = models.DecimalField(db_column='npsp__Number_of_Allocations_Last_N_Days__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations Last N Days', help_text='Total number of allocations of opportunities in a closed and won stage in the last N days. The value of N can be modified in settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_number_of_allocations_last_year = models.DecimalField(db_column='npsp__Number_of_Allocations_Last_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations Last Year', help_text='Total number of allocations of opportunities in a closed and won stage last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_number_of_allocations_this_year = models.DecimalField(db_column='npsp__Number_of_Allocations_This_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations This Year', help_text='Total number of allocations of opportunities in a closed and won stage this year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_number_of_allocations_two_years_ago = models.DecimalField(db_column='npsp__Number_of_Allocations_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Allocations Two Years Ago', help_text='Total number of allocations of opportunities in a closed and won stage two years ago.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_smallest_allocation = models.DecimalField(db_column='npsp__Smallest_Allocation__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Smallest Allocation', help_text='The smallest allocation of all time to this general accounting unit.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_total_allocations_last_n_days = models.DecimalField(db_column='npsp__Total_Allocations_Last_N_Days__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations Last N Days', help_text='Sum total of all allocations of opportunities in a closed and won stage in the last N days. The value of N can be modified in settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_total_allocations_last_year = models.DecimalField(db_column='npsp__Total_Allocations_Last_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations Last Year', help_text='Sum total of all allocations of opportunities in a closed and won stage last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_total_allocations_this_year = models.DecimalField(db_column='npsp__Total_Allocations_This_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations This Year', help_text='Sum total of all allocations of opportunities in a closed and won stage this year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_total_allocations_two_years_ago = models.DecimalField(db_column='npsp__Total_Allocations_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations Two Years Ago', help_text='Sum total of all allocations of opportunities in a closed and won stage two years ago.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_total_allocations = models.DecimalField(db_column='npsp__Total_Allocations__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Allocations', help_text='Sum total of all allocations of opportunities in a closed and won stage.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_total_number_of_allocations = models.DecimalField(db_column='npsp__Total_Number_of_Allocations__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Allocations', help_text='Total number of allocations of opportunities in a closed and won stage.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__General_Accounting_Unit__c'
        verbose_name = 'General Accounting Unit'
        verbose_name_plural = 'General Accounting Units'
        # keyPrefix = 'a0Y'



class NpspGrantDeadlineChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgrantdeadlinechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgrantdeadlinechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_grant_deadline_due_date = models.DateField(db_column='npsp__Grant_Deadline_Due_Date__c', custom=True, verbose_name='Due Date', sf_read_only=models.READ_ONLY, help_text='The date on which this particular Deliverable is due.', blank=True, null=True) 
    npsp_grant_deliverable_close_date = models.DateField(db_column='npsp__Grant_Deliverable_Close_Date__c', custom=True, verbose_name='Close Date', sf_read_only=models.READ_ONLY, help_text='The date on which the deliverable was actually submitted.', blank=True, null=True) 
    npsp_grant_deliverable_requirements = models.TextField(db_column='npsp__Grant_Deliverable_Requirements__c', custom=True, verbose_name='Requirements', sf_read_only=models.READ_ONLY, help_text='Description of what is required for this deliverable.', blank=True, null=True) 
    npsp_type = models.CharField(db_column='npsp__Type__c', custom=True, max_length=255, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('LOI', 'LOI'), ('Application', 'Application'), ('Interim Report', 'Interim Report'), ('Final Report', 'Final Report')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Grant_Deadline__ChangeEvent'
        verbose_name = 'Change Event: Deliverable'
        verbose_name_plural = 'Change Event: Deliverable'
        # keyPrefix = 'None'



class NpspGrantDeadlineHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('NpspGrantDeadline', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npsp__Grant_Deliverable_Close_Date__c', 'Close Date'), ('created', 'Created.'), ('Name', 'Deliverable Name'), ('npsp__Grant_Deadline_Due_Date__c', 'Due Date'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('npsp__Opportunity__c', 'Opportunity'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('npsp__Grant_Deliverable_Requirements__c', 'Requirements'), ('npsp__Type__c', 'Type')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Grant_Deadline__History'
        verbose_name = 'History: Deliverable'
        verbose_name_plural = 'History: Deliverable'
        # keyPrefix = 'None'



class NpspGrantDeadline(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Deliverable Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgrantdeadline_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspgrantdeadline_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True)  # Master Detail Relationship 0
    npsp_grant_deadline_due_date = models.DateField(db_column='npsp__Grant_Deadline_Due_Date__c', custom=True, verbose_name='Due Date', help_text='The date on which this particular Deliverable is due.', blank=True, null=True) 
    npsp_grant_deliverable_close_date = models.DateField(db_column='npsp__Grant_Deliverable_Close_Date__c', custom=True, verbose_name='Close Date', help_text='The date on which the deliverable was actually submitted.', blank=True, null=True) 
    npsp_grant_deliverable_requirements = models.TextField(db_column='npsp__Grant_Deliverable_Requirements__c', custom=True, verbose_name='Requirements', help_text='Description of what is required for this deliverable.', blank=True, null=True) 
    npsp_type = models.CharField(db_column='npsp__Type__c', custom=True, max_length=255, verbose_name='Type', choices=[('LOI', 'LOI'), ('Application', 'Application'), ('Interim Report', 'Interim Report'), ('Final Report', 'Final Report')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Grant_Deadline__c'
        verbose_name = 'Deliverable'
        verbose_name_plural = 'Deliverables'
        # keyPrefix = 'a0Z'



class NpspHouseholdNamingSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsphouseholdnamingsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsphouseholdnamingsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_contact_overrun_count = models.DecimalField(db_column='npsp__Contact_Overrun_Count__c', custom=True, max_digits=2, decimal_places=0, verbose_name='Contact Overrun Count', sf_read_only=models.READ_ONLY, help_text='Specifies the number of Contacts to explicitly list in a name.  After that amount, the Name Overrun will be used.', blank=True, null=True) 
    npsp_formal_greeting_format = models.CharField(db_column='npsp__Formal_Greeting_Format__c', custom=True, max_length=255, verbose_name='Formal Greeting Format', sf_read_only=models.READ_ONLY, help_text='The format to use for the Household Formal Greeting.', blank=True, null=True) 
    npsp_household_name_format = models.CharField(db_column='npsp__Household_Name_Format__c', custom=True, max_length=255, verbose_name='Household Name Format', sf_read_only=models.READ_ONLY, help_text='The format to use for the Household Name.', blank=True, null=True) 
    npsp_implementing_class = models.CharField(db_column='npsp__Implementing_Class__c', custom=True, max_length=255, verbose_name='Implementing Class', sf_read_only=models.READ_ONLY, help_text='The name of a Class that implements the HH_INaming interface to use for Household Naming.', blank=True, null=True) 
    npsp_informal_greeting_format = models.CharField(db_column='npsp__Informal_Greeting_Format__c', custom=True, max_length=255, verbose_name='Informal Greeting Format', sf_read_only=models.READ_ONLY, help_text='The format to use for the Household Informal Greeting.', blank=True, null=True) 
    npsp_name_connector = models.CharField(db_column='npsp__Name_Connector__c', custom=True, max_length=255, verbose_name='Name Connector', sf_read_only=models.READ_ONLY, help_text='The string to use to connect pairs in a name.  For example, John & Jane, or John and Jane.', blank=True, null=True) 
    npsp_name_overrun = models.CharField(db_column='npsp__Name_Overrun__c', custom=True, max_length=255, verbose_name='Name Overrun', sf_read_only=models.READ_ONLY, help_text='The string to use when replacing long lists of names.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Household_Naming_Settings__ChangeEvent'
        verbose_name = 'Change Event: Household Naming Settings'
        verbose_name_plural = 'Change Event: Household Naming Settings'
        # keyPrefix = 'None'



class NpspHouseholdNamingSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsphouseholdnamingsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsphouseholdnamingsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_contact_overrun_count = models.DecimalField(db_column='npsp__Contact_Overrun_Count__c', custom=True, max_digits=2, decimal_places=0, verbose_name='Contact Overrun Count', help_text='Specifies the number of Contacts to explicitly list in a name.  After that amount, the Name Overrun will be used.', blank=True, null=True) 
    npsp_formal_greeting_format = models.CharField(db_column='npsp__Formal_Greeting_Format__c', custom=True, max_length=255, verbose_name='Formal Greeting Format', help_text='The format to use for the Household Formal Greeting.', blank=True, null=True) 
    npsp_household_name_format = models.CharField(db_column='npsp__Household_Name_Format__c', custom=True, max_length=255, verbose_name='Household Name Format', help_text='The format to use for the Household Name.', blank=True, null=True) 
    npsp_implementing_class = models.CharField(db_column='npsp__Implementing_Class__c', custom=True, max_length=255, verbose_name='Implementing Class', help_text='The name of a Class that implements the HH_INaming interface to use for Household Naming.', blank=True, null=True) 
    npsp_informal_greeting_format = models.CharField(db_column='npsp__Informal_Greeting_Format__c', custom=True, max_length=255, verbose_name='Informal Greeting Format', help_text='The format to use for the Household Informal Greeting.', blank=True, null=True) 
    npsp_name_connector = models.CharField(db_column='npsp__Name_Connector__c', custom=True, max_length=255, verbose_name='Name Connector', help_text='The string to use to connect pairs in a name.  For example, John & Jane, or John and Jane.', blank=True, null=True) 
    npsp_name_overrun = models.CharField(db_column='npsp__Name_Overrun__c', custom=True, max_length=255, verbose_name='Name Overrun', help_text='The string to use when replacing long lists of names.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Household_Naming_Settings__c'
        verbose_name = 'Household Naming Settings'
        verbose_name_plural = 'Household Naming Settings'
        # keyPrefix = 'a0a'



class NpspLevelChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevelchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevelchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=True, help_text='Whether this Level is currently in use.') 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, help_text='Describes what this Level is for, or what it means to achieve this Level.', blank=True, null=True) 
    npsp_engagement_plan_template = models.ForeignKey(NpspEngagementPlanTemplate, models.DO_NOTHING, db_column='npsp__Engagement_Plan_Template__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_level_field = models.CharField(db_column='npsp__Level_Field__c', custom=True, max_length=255, verbose_name='Level Field', sf_read_only=models.READ_ONLY, help_text='The field (developer name) on the Target object to store the lookup to the current Level.  Note that this field implicitly defines the “Ladder” that this Level is part of.', blank=True, null=True) 
    npsp_maximum_amount = models.DecimalField(db_column='npsp__Maximum_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Maximum Amount (<)', sf_read_only=models.READ_ONLY, help_text="The maximum amount the value must be below to be assigned this Level.  If empty, then any amount greater than or equal to this Level's Minimum Amount will assign this Level.", blank=True, null=True) 
    npsp_minimum_amount = models.DecimalField(db_column='npsp__Minimum_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Minimum Amount (>=)', sf_read_only=models.READ_ONLY, help_text="The minimum amount to be assigned this Level.  If empty, then any amount less than this Level's Maximum Amount will assign this Level.", blank=True, null=True) 
    npsp_previous_level_field = models.CharField(db_column='npsp__Previous_Level_Field__c', custom=True, max_length=255, verbose_name='Previous Level Field', sf_read_only=models.READ_ONLY, help_text='The field (developer name) on the Target object to store the lookup to the previous Level the object had.  Optional.', blank=True, null=True) 
    npsp_source_field = models.CharField(db_column='npsp__Source_Field__c', custom=True, max_length=255, verbose_name='Source Field', sf_read_only=models.READ_ONLY, help_text="The target object's field (developer name) that defines the amount and timeframe to base this Level on.", blank=True, null=True) 
    npsp_target = models.CharField(db_column='npsp__Target__c', custom=True, max_length=255, verbose_name='Target', sf_read_only=models.READ_ONLY, help_text='The object that this Level applies to.', choices=[('Account', 'Account'), ('Contact', 'Contact')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Level__ChangeEvent'
        verbose_name = 'Change Event: Level'
        verbose_name_plural = 'Change Event: Level'
        # keyPrefix = 'None'



class NpspLevelHistory(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    parent = models.ForeignKey('NpspLevel', models.DO_NOTHING, sf_read_only=models.READ_ONLY)  # Master Detail Relationship *
    created_by = models.ForeignKey(User, models.DO_NOTHING, sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    field = models.CharField(max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('npsp__Active__c', 'Active'), ('created', 'Created.'), ('npsp__Description__c', 'Description'), ('npsp__Engagement_Plan_Template__c', 'Engagement Plan Template'), ('feedEvent', 'Feed event'), ('individualMerged', 'Individual Merged'), ('npsp__Level_Field__c', 'Level Field'), ('Name', 'Level Name'), ('npsp__Maximum_Amount__c', 'Maximum Amount (<)'), ('npsp__Minimum_Amount__c', 'Minimum Amount (>=)'), ('Owner', 'Owner'), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('npsp__Previous_Level_Field__c', 'Previous Level Field'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('npsp__Source_Field__c', 'Source Field'), ('npsp__Target__c', 'Target')])
    old_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    new_value = models.CharField(max_length=255, sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Level__History'
        verbose_name = 'History: Level'
        verbose_name_plural = 'History: Level'
        # keyPrefix = 'None'



class NpspLevel(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Level Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevel_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevel_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', default=models.DEFAULTED_ON_CREATE, help_text='Whether this Level is currently in use.') 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', help_text='Describes what this Level is for, or what it means to achieve this Level.', blank=True, null=True) 
    npsp_engagement_plan_template = models.ForeignKey(NpspEngagementPlanTemplate, models.DO_NOTHING, db_column='npsp__Engagement_Plan_Template__c', custom=True, blank=True, null=True) 
    npsp_level_field = models.CharField(db_column='npsp__Level_Field__c', custom=True, max_length=255, verbose_name='Level Field', help_text='The field (developer name) on the Target object to store the lookup to the current Level.  Note that this field implicitly defines the “Ladder” that this Level is part of.') 
    npsp_maximum_amount = models.DecimalField(db_column='npsp__Maximum_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Maximum Amount (<)', help_text="The maximum amount the value must be below to be assigned this Level.  If empty, then any amount greater than or equal to this Level's Minimum Amount will assign this Level.", blank=True, null=True) 
    npsp_minimum_amount = models.DecimalField(db_column='npsp__Minimum_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Minimum Amount (>=)', help_text="The minimum amount to be assigned this Level.  If empty, then any amount less than this Level's Maximum Amount will assign this Level.", blank=True, null=True) 
    npsp_previous_level_field = models.CharField(db_column='npsp__Previous_Level_Field__c', custom=True, max_length=255, verbose_name='Previous Level Field', help_text='The field (developer name) on the Target object to store the lookup to the previous Level the object had.  Optional.', blank=True, null=True) 
    npsp_source_field = models.CharField(db_column='npsp__Source_Field__c', custom=True, max_length=255, verbose_name='Source Field', help_text="The target object's field (developer name) that defines the amount and timeframe to base this Level on.") 
    npsp_target = models.CharField(db_column='npsp__Target__c', custom=True, max_length=255, verbose_name='Target', help_text='The object that this Level applies to.', choices=[('Account', 'Account'), ('Contact', 'Contact')], blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Level__c'
        verbose_name = 'Level'
        verbose_name_plural = 'Levels'
        # keyPrefix = 'a0b'



class NpspLevelsSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevelssettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevelssettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_last_job_start_time_account = models.DateTimeField(db_column='npsp__LastJobStartTimeAccount__c', custom=True, verbose_name='Last Job Start Time : Account', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_last_job_start_time_contact = models.DateTimeField(db_column='npsp__LastJobStartTimeContact__c', custom=True, verbose_name='Last Job Start Time : Contact', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_level_assignment_batch_size = models.DecimalField(db_column='npsp__Level_Assignment_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Level Assignment Batch Size', sf_read_only=models.READ_ONLY, help_text='Number of records per batch to process when recalculating levels.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Levels_Settings__ChangeEvent'
        verbose_name = 'Change Event: Levels Settings'
        verbose_name_plural = 'Change Event: Levels Settings'
        # keyPrefix = 'None'



class NpspLevelsSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevelssettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsplevelssettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_last_job_start_time_account = models.DateTimeField(db_column='npsp__LastJobStartTimeAccount__c', custom=True, verbose_name='Last Job Start Time : Account', blank=True, null=True) 
    npsp_last_job_start_time_contact = models.DateTimeField(db_column='npsp__LastJobStartTimeContact__c', custom=True, verbose_name='Last Job Start Time : Contact', blank=True, null=True) 
    npsp_level_assignment_batch_size = models.DecimalField(db_column='npsp__Level_Assignment_Batch_Size__c', custom=True, max_digits=6, decimal_places=0, verbose_name='Level Assignment Batch Size', help_text='Number of records per batch to process when recalculating levels.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Levels_Settings__c'
        verbose_name = 'Levels Settings'
        verbose_name_plural = 'Levels Settings'
        # keyPrefix = 'a10'



class NpspOpportunityNamingSettingsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspopportunitynamingsettingschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspopportunitynamingsettingschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_attribution = models.CharField(db_column='npsp__Attribution__c', custom=True, max_length=255, verbose_name='Attribution', sf_read_only=models.READ_ONLY, help_text='Whether this setting applies to individual opportunities, organizational opportunities, or both.', blank=True, null=True) 
    npsp_date_format = models.CharField(db_column='npsp__Date_Format__c', custom=True, max_length=255, verbose_name='Date Format', sf_read_only=models.READ_ONLY, help_text='The format for dates included in this opportunity name.', blank=True, null=True) 
    npsp_opportunity_name_format = models.CharField(db_column='npsp__Opportunity_Name_Format__c', custom=True, max_length=255, verbose_name='Opportunity Name Format', sf_read_only=models.READ_ONLY, help_text='The format to use for Opportunity naming.', blank=True, null=True) 
    npsp_opportunity_record_types = models.CharField(db_column='npsp__Opportunity_Record_Types__c', custom=True, max_length=255, verbose_name='Opportunity Record Types', sf_read_only=models.READ_ONLY, help_text='Specifies the opportunity record type that this naming scheme is for.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Opportunity_Naming_Settings__ChangeEvent'
        verbose_name = 'Change Event: Opportunity Naming Settings'
        verbose_name_plural = 'Change Event: Opportunity Naming Settings'
        # keyPrefix = 'None'



class NpspOpportunityNamingSettings(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspopportunitynamingsettings_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspopportunitynamingsettings_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_attribution = models.CharField(db_column='npsp__Attribution__c', custom=True, max_length=255, verbose_name='Attribution', help_text='Whether this setting applies to individual opportunities, organizational opportunities, or both.', blank=True, null=True) 
    npsp_date_format = models.CharField(db_column='npsp__Date_Format__c', custom=True, max_length=255, verbose_name='Date Format', help_text='The format for dates included in this opportunity name.', blank=True, null=True) 
    npsp_opportunity_name_format = models.CharField(db_column='npsp__Opportunity_Name_Format__c', custom=True, max_length=255, verbose_name='Opportunity Name Format', help_text='The format to use for Opportunity naming.', blank=True, null=True) 
    npsp_opportunity_record_types = models.CharField(db_column='npsp__Opportunity_Record_Types__c', custom=True, max_length=255, verbose_name='Opportunity Record Types', help_text='Specifies the opportunity record type that this naming scheme is for.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Opportunity_Naming_Settings__c'
        verbose_name = 'Opportunity Naming Settings'
        verbose_name_plural = 'Opportunity Naming Settings'
        # keyPrefix = 'a0c'



class NpspPartialSoftCreditChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsppartialsoftcreditchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsppartialsoftcreditchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_amount = models.DecimalField(db_column='npsp__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', sf_read_only=models.READ_ONLY, help_text='The amount to be soft credited.', blank=True, null=True) 
    npsp_contact_name = models.CharField(db_column='npsp__Contact_Name__c', custom=True, max_length=3900, verbose_name='Contact Name', sf_read_only=models.READ_ONLY, help_text="The contact's full name.", blank=True, null=True) 
    npsp_contact_role_id = models.CharField(db_column='npsp__Contact_Role_ID__c', custom=True, max_length=18, verbose_name='Contact Role ID', sf_read_only=models.READ_ONLY, help_text='The OpportunityContactRole this soft credit applies to.', blank=True, null=True) 
    npsp_role_name = models.CharField(db_column='npsp__Role_Name__c', custom=True, max_length=255, verbose_name='Role Name', sf_read_only=models.READ_ONLY, help_text='The Role of this soft credit.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Partial_Soft_Credit__ChangeEvent'
        verbose_name = 'Change Event: Partial Soft Credit'
        verbose_name_plural = 'Change Event: Partial Soft Credit'
        # keyPrefix = 'None'



class NpspPartialSoftCredit(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Partial Soft Credit Name', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsppartialsoftcredit_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsppartialsoftcredit_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_contact = models.ForeignKey(Contact, models.DO_NOTHING, db_column='npsp__Contact__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 0
    npsp_opportunity = models.ForeignKey(Opportunity, models.DO_NOTHING, db_column='npsp__Opportunity__c', custom=True, sf_read_only=models.NOT_UPDATEABLE)  # Master Detail Relationship 1
    npsp_amount = models.DecimalField(db_column='npsp__Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Amount', help_text='The amount to be soft credited.', blank=True, null=True) 
    npsp_contact_name = models.CharField(db_column='npsp__Contact_Name__c', custom=True, max_length=1300, verbose_name='Contact Name', sf_read_only=models.READ_ONLY, help_text="The contact's full name.", blank=True, null=True) 
    npsp_contact_role_id = models.CharField(db_column='npsp__Contact_Role_ID__c', custom=True, unique=True, max_length=18, verbose_name='Contact Role ID', help_text='The OpportunityContactRole this soft credit applies to.', blank=True, null=True) 
    npsp_role_name = models.CharField(db_column='npsp__Role_Name__c', custom=True, max_length=255, verbose_name='Role Name', help_text='The Role of this soft credit.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Partial_Soft_Credit__c'
        verbose_name = 'Partial Soft Credit'
        verbose_name_plural = 'Partial Soft Credits'
        # keyPrefix = 'a0d'



class NpspRelationshipSyncExcludedFieldsChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsprelationshipsyncexcludedfieldschangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsprelationshipsyncexcludedfieldschangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Relationship_Sync_Excluded_Fields__ChangeEvent'
        verbose_name = 'Change Event: Fields to Exclude from Sync'
        verbose_name_plural = 'Change Event: Fields to Exclude from Sync'
        # keyPrefix = 'None'



class NpspRelationshipSyncExcludedFields(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=38, default=models.DEFAULTED_ON_CREATE)
    setup_owner = models.ForeignKey(Organization, models.DO_NOTHING, blank=True, null=True)  # Reference to tables [Organization, Profile, User]
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsprelationshipsyncexcludedfields_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsprelationshipsyncexcludedfields_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    class Meta(models.Model.Meta):
        db_table = 'npsp__Relationship_Sync_Excluded_Fields__c'
        verbose_name = 'Fields to Exclude from Sync'
        verbose_name_plural = 'Relationship Sync Excluded Fields'
        # keyPrefix = 'a0e'



class NpspRollupMdt(models.Model):
    developer_name = models.CharField(max_length=40, verbose_name='Custom Metadata Record Name', sf_read_only=models.READ_ONLY)
    master_label = models.CharField(max_length=40, verbose_name='Label', sf_read_only=models.READ_ONLY)
    language = models.CharField(max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazil)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian'), ('es_MX', 'Spanish (Mexico)'), ('no', 'Norwegian')])
    namespace_prefix = models.CharField(max_length=15, sf_read_only=models.READ_ONLY, blank=True, null=True)
    label = models.CharField(max_length=40, sf_read_only=models.READ_ONLY, blank=True, null=True)
    qualified_api_name = models.CharField(max_length=70, verbose_name='Qualified API Name', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=True) 
    npsp_amount_object = models.CharField(db_column='npsp__Amount_Object__c', custom=True, max_length=255, verbose_name='Amount Object', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_date_object = models.CharField(db_column='npsp__Date_Object__c', custom=True, max_length=255, verbose_name='Date Object', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_description = models.TextField(db_column='npsp__Description__c', custom=True, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_detail_object = models.CharField(db_column='npsp__Detail_Object__c', custom=True, max_length=255, verbose_name='Detail Object', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_filter_group = models.ForeignKey(NpspFilterGroupMdt, models.DO_NOTHING, db_column='npsp__Filter_Group__c', custom=True, sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_integer = models.DecimalField(db_column='npsp__Integer__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Integer', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_is_deleted = models.BooleanField(db_column='npsp__Is_Deleted__c', custom=True, verbose_name='IsDeleted', sf_read_only=models.READ_ONLY, default=False) 
    npsp_operation = models.CharField(db_column='npsp__Operation__c', custom=True, max_length=255, verbose_name='Operation', sf_read_only=models.READ_ONLY, default='Count', choices=[('Count', 'Count'), ('Sum', 'Sum'), ('Average', 'Average'), ('Largest', 'Largest'), ('Smallest', 'Smallest'), ('First', 'First'), ('Last', 'Last'), ('Years_Donated', 'Years Donated'), ('Donor_Streak', 'Donor Streak'), ('Best_Year', 'Best Year'), ('Best_Year_Total', 'Best Year Total')], blank=True, null=True) 
    npsp_summary_object = models.CharField(db_column='npsp__Summary_Object__c', custom=True, max_length=255, verbose_name='Target Object', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_time_bound_operation_type = models.CharField(db_column='npsp__Time_Bound_Operation_Type__c', custom=True, max_length=255, verbose_name='Time Frame', sf_read_only=models.READ_ONLY, default='All_Time', choices=[('All_Time', 'All Time'), ('Years_Ago', 'Years Ago'), ('Days_Back', 'Days Back')], blank=True, null=True) 
    npsp_use_fiscal_year = models.BooleanField(db_column='npsp__Use_Fiscal_Year__c', custom=True, verbose_name='Use Fiscal Year', sf_read_only=models.READ_ONLY, default=False) 
    npsp_amount_field = models.CharField(db_column='npsp__Amount_Field__c', custom=True, max_length=255, verbose_name='Amount Field', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_date_field = models.CharField(db_column='npsp__Date_Field__c', custom=True, max_length=255, verbose_name='Date Field', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_detail_field = models.CharField(db_column='npsp__Detail_Field__c', custom=True, max_length=255, verbose_name='Field to Roll Up', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npsp_summary_field = models.CharField(db_column='npsp__Summary_Field__c', custom=True, max_length=255, verbose_name='Target Field', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Rollup__mdt'
        verbose_name = 'Rollup'
        verbose_name_plural = 'Rollups'
        # keyPrefix = 'm03'



class NpspSchedulableChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspschedulablechangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspschedulablechangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=True, help_text='Determines if the job will be active or not.') 
    npsp_class_name = models.CharField(db_column='npsp__Class_Name__c', custom=True, max_length=255, verbose_name='Class Name', sf_read_only=models.READ_ONLY, help_text='Class that will be scheduled to run at a certain frequency.', blank=True, null=True) 
    npsp_frequency = models.CharField(db_column='npsp__Frequency__c', custom=True, max_length=255, verbose_name='Frequency', sf_read_only=models.READ_ONLY, help_text='How ofter to run the job.', choices=[('Hourly', 'Hourly'), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly')], blank=True, null=True) 
    npsp_last_time_run = models.DateTimeField(db_column='npsp__Last_Time_Run__c', custom=True, verbose_name='Last Time Run', sf_read_only=models.READ_ONLY, help_text='Last time the job was run.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Schedulable__ChangeEvent'
        verbose_name = 'Change Event: DEPRECATED-Schedulable'
        verbose_name_plural = 'Change Event: DEPRECATED-Schedulable'
        # keyPrefix = 'None'



class NpspSchedulable(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Job Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspschedulable_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npspschedulable_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', default=models.DEFAULTED_ON_CREATE, help_text='Determines if the job will be active or not.') 
    npsp_class_name = models.CharField(db_column='npsp__Class_Name__c', custom=True, max_length=255, verbose_name='Class Name', help_text='Class that will be scheduled to run at a certain frequency.') 
    npsp_frequency = models.CharField(db_column='npsp__Frequency__c', custom=True, max_length=255, verbose_name='Frequency', help_text='How ofter to run the job.', choices=[('Hourly', 'Hourly'), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly')], blank=True, null=True) 
    npsp_last_time_run = models.DateTimeField(db_column='npsp__Last_Time_Run__c', custom=True, verbose_name='Last Time Run', help_text='Last time the job was run.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Schedulable__c'
        verbose_name = 'DEPRECATED-Schedulable'
        verbose_name_plural = 'DEPRECATED-Schedulables'
        # keyPrefix = 'a0f'



class NpspTriggerHandlerChangeEvent(models.Model):
    replay_id = models.CharField(max_length=1000, verbose_name='Replay ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    change_event_header = models.TextField(sf_read_only=models.READ_ONLY)  # This field type is a guess.
    owner = models.ForeignKey(Group, models.DO_NOTHING, sf_read_only=models.READ_ONLY, blank=True, null=True)  # Reference to tables [Group, User]
    name = models.CharField(max_length=80, verbose_name='<Entity>', sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsptriggerhandlerchangeevent_createdby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsptriggerhandlerchangeevent_lastmodifiedby_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', sf_read_only=models.READ_ONLY, default=True, help_text='Indicates that this module is active') 
    npsp_asynchronous = models.BooleanField(db_column='npsp__Asynchronous__c', custom=True, verbose_name='Asynchronous After Events', sf_read_only=models.READ_ONLY, default=False, help_text='Indicates that this module should be run asynchronously in this transaction, for any of its After events.') 
    npsp_class = models.CharField(db_column='npsp__Class__c', custom=True, max_length=255, verbose_name='Class', sf_read_only=models.READ_ONLY, help_text='Name of the class to be run', blank=True, null=True) 
    npsp_load_order = models.DecimalField(db_column='npsp__Load_Order__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Load Order', sf_read_only=models.READ_ONLY, help_text='Order in which this module should be run, helps maintain dependencies in the modules and data.', blank=True, null=True) 
    npsp_object = models.CharField(db_column='npsp__Object__c', custom=True, max_length=255, verbose_name='Object', sf_read_only=models.READ_ONLY, help_text='Name of the object this handler should be run for', blank=True, null=True) 
    npsp_trigger_action = models.CharField(db_column='npsp__Trigger_Action__c', custom=True, max_length=4099, verbose_name='Trigger Action', sf_read_only=models.READ_ONLY, help_text='Trigger Action in which this module should fire', choices=[('BeforeInsert', 'BeforeInsert'), ('BeforeUpdate', 'BeforeUpdate'), ('BeforeDelete', 'BeforeDelete'), ('AfterInsert', 'AfterInsert'), ('AfterUpdate', 'AfterUpdate'), ('AfterDelete', 'AfterDelete'), ('AfterUndelete', 'AfterUndelete')], blank=True, null=True) 
    npsp_user_managed = models.BooleanField(db_column='npsp__User_Managed__c', custom=True, verbose_name='User Managed', sf_read_only=models.READ_ONLY, default=False, help_text="Check it if you intent to manage the record yourself. Be aware that updates to the package won't update the record.") 
    npsp_usernames_to_exclude = models.TextField(db_column='npsp__Usernames_to_Exclude__c', custom=True, verbose_name='Usernames to Exclude', sf_read_only=models.READ_ONLY, help_text='Semicolon separated list of Salesforce usernames that this trigger will NOT run for. Leave blank to run for all users.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Trigger_Handler__ChangeEvent'
        verbose_name = 'Change Event: Trigger Handler'
        verbose_name_plural = 'Change Event: Trigger Handler'
        # keyPrefix = 'None'



class NpspTriggerHandler(models.Model):
    owner = models.ForeignKey(Group, models.DO_NOTHING)  # Reference to tables [Group, User]
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Trigger Handler Name', default=models.DEFAULTED_ON_CREATE, blank=True, null=True)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsptriggerhandler_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey(User, models.DO_NOTHING, related_name='npsptriggerhandler_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    npsp_active = models.BooleanField(db_column='npsp__Active__c', custom=True, verbose_name='Active', default=models.DEFAULTED_ON_CREATE, help_text='Indicates that this module is active') 
    npsp_asynchronous = models.BooleanField(db_column='npsp__Asynchronous__c', custom=True, verbose_name='Asynchronous After Events', default=models.DEFAULTED_ON_CREATE, help_text='Indicates that this module should be run asynchronously in this transaction, for any of its After events.') 
    npsp_class = models.CharField(db_column='npsp__Class__c', custom=True, max_length=255, verbose_name='Class', help_text='Name of the class to be run') 
    npsp_load_order = models.DecimalField(db_column='npsp__Load_Order__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Load Order', help_text='Order in which this module should be run, helps maintain dependencies in the modules and data.', blank=True, null=True) 
    npsp_object = models.CharField(db_column='npsp__Object__c', custom=True, max_length=255, verbose_name='Object', help_text='Name of the object this handler should be run for') 
    npsp_trigger_action = models.CharField(db_column='npsp__Trigger_Action__c', custom=True, max_length=4099, verbose_name='Trigger Action', help_text='Trigger Action in which this module should fire', choices=[('BeforeInsert', 'BeforeInsert'), ('BeforeUpdate', 'BeforeUpdate'), ('BeforeDelete', 'BeforeDelete'), ('AfterInsert', 'AfterInsert'), ('AfterUpdate', 'AfterUpdate'), ('AfterDelete', 'AfterDelete'), ('AfterUndelete', 'AfterUndelete')], blank=True, null=True) 
    npsp_user_managed = models.BooleanField(db_column='npsp__User_Managed__c', custom=True, verbose_name='User Managed', default=models.DEFAULTED_ON_CREATE, help_text="Check it if you intent to manage the record yourself. Be aware that updates to the package won't update the record.") 
    npsp_usernames_to_exclude = models.TextField(db_column='npsp__Usernames_to_Exclude__c', custom=True, verbose_name='Usernames to Exclude', help_text='Semicolon separated list of Salesforce usernames that this trigger will NOT run for. Leave blank to run for all users.', blank=True, null=True) 
    class Meta(models.Model.Meta):
        db_table = 'npsp__Trigger_Handler__c'
        verbose_name = 'Trigger Handler'
        verbose_name_plural = 'Trigger Handlers'
        # keyPrefix = 'a0g'

