class Contact(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    master_record = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_masterrecord_set', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, models.DO_NOTHING, related_name='contact_account_set', blank=True, null=True)  # Master Detail Relationship *
    last_name = models.CharField(max_length=80)
    first_name = models.CharField(max_length=40, blank=True, null=True)
    salutation = models.CharField(max_length=40, choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True, null=True)
    middle_name = models.CharField(max_length=40, blank=True, null=True)
    suffix = models.CharField(max_length=40, blank=True, null=True)
    name = models.CharField(max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    record_type = models.ForeignKey('RecordType', models.DO_NOTHING, blank=True, null=True)
    other_street = models.TextField(blank=True, null=True)
    other_city = models.CharField(max_length=40, blank=True, null=True)
    other_state = models.CharField(max_length=80, verbose_name='Other State/Province', blank=True, null=True)
    other_postal_code = models.CharField(max_length=20, verbose_name='Other Zip/Postal Code', blank=True, null=True)
    other_country = models.CharField(max_length=80, blank=True, null=True)
    other_state_code = models.CharField(max_length=10, verbose_name='Other State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    other_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    other_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    other_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    other_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    mailing_street = models.TextField(blank=True, null=True)
    mailing_city = models.CharField(max_length=40, blank=True, null=True)
    mailing_state = models.CharField(max_length=80, verbose_name='Mailing State/Province', blank=True, null=True)
    mailing_postal_code = models.CharField(max_length=20, verbose_name='Mailing Zip/Postal Code', blank=True, null=True)
    mailing_country = models.CharField(max_length=80, blank=True, null=True)
    mailing_state_code = models.CharField(max_length=10, verbose_name='Mailing State/Province Code', choices=[('AC', 'Acre'), ('AG', 'Agrigento'), ('AG', 'Aguascalientes'), ('AL', 'Alabama'), ('AL', 'Alagoas'), ('AK', 'Alaska'), ('AB', 'Alberta'), ('AL', 'Alessandria'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('AN', 'Ancona'), ('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('34', 'Anhui'), ('AO', 'Aosta'), ('AR', 'Arezzo'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('AR', 'Arunachal Pradesh'), ('AP', 'Ascoli Piceno'), ('AS', 'Assam'), ('AT', 'Asti'), ('ACT', 'Australian Capital Territory'), ('AV', 'Avellino'), ('BA', 'Bahia'), ('BC', 'Baja California'), ('BS', 'Baja California Sur'), ('BA', 'Bari'), ('BT', 'Barletta-Andria-Trani'), ('11', 'Beijing'), ('BL', 'Belluno'), ('BN', 'Benevento'), ('BG', 'Bergamo'), ('BI', 'Biella'), ('BR', 'Bihar'), ('BO', 'Bologna'), ('BZ', 'Bolzano'), ('BS', 'Brescia'), ('BR', 'Brindisi'), ('BC', 'British Columbia'), ('CA', 'Cagliari'), ('CA', 'California'), ('CL', 'Caltanissetta'), ('CM', 'Campeche'), ('CB', 'Campobasso'), ('CI', 'Carbonia-Iglesias'), ('CW', 'Carlow'), ('CE', 'Caserta'), ('CT', 'Catania'), ('CZ', 'Catanzaro'), ('CN', 'Cavan'), ('CE', 'Ceará'), ('CH', 'Chandigarh'), ('CT', 'Chhattisgarh'), ('CS', 'Chiapas'), ('CH', 'Chieti'), ('CH', 'Chihuahua'), ('71', 'Chinese Taipei'), ('50', 'Chongqing'), ('CE', 'Clare'), ('CO', 'Coahuila'), ('CL', 'Colima'), ('CO', 'Colorado'), ('CO', 'Como'), ('CT', 'Connecticut'), ('CO', 'Cork'), ('CS', 'Cosenza'), ('CR', 'Cremona'), ('KR', 'Crotone'), ('CN', 'Cuneo'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DE', 'Delaware'), ('DL', 'Delhi'), ('DC', 'District of Columbia'), ('DF', 'Distrito Federal'), ('DL', 'Donegal'), ('D', 'Dublin'), ('DG', 'Durango'), ('EN', 'Enna'), ('ES', 'Espírito Santo'), ('DF', 'Federal District'), ('FM', 'Fermo'), ('FE', 'Ferrara'), ('FI', 'Florence'), ('FL', 'Florida'), ('FG', 'Foggia'), ('FC', 'Forlì-Cesena'), ('FR', 'Frosinone'), ('35', 'Fujian'), ('G', 'Galway'), ('62', 'Gansu'), ('GE', 'Genoa'), ('GA', 'Georgia'), ('GA', 'Goa'), ('GO', 'Goiás'), ('GO', 'Gorizia'), ('GR', 'Grosseto'), ('GT', 'Guanajuato'), ('44', 'Guangdong'), ('45', 'Guangxi'), ('GR', 'Guerrero'), ('52', 'Guizhou'), ('GJ', 'Gujarat'), ('46', 'Hainan'), ('HR', 'Haryana'), ('HI', 'Hawaii'), ('13', 'Hebei'), ('23', 'Heilongjiang'), ('41', 'Henan'), ('HG', 'Hidalgo'), ('HP', 'Himachal Pradesh'), ('91', 'Hong Kong'), ('42', 'Hubei'), ('43', 'Hunan'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IM', 'Imperia'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('IS', 'Isernia'), ('JA', 'Jalisco'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('32', 'Jiangsu'), ('36', 'Jiangxi'), ('22', 'Jilin'), ('KS', 'Kansas'), ('KA', 'Karnataka'), ('KY', 'Kentucky'), ('KL', 'Kerala'), ('KY', 'Kerry'), ('KE', 'Kildare'), ('KK', 'Kilkenny'), ('AQ', "L'Aquila"), ('LD', 'Lakshadweep'), ('LS', 'Laois'), ('SP', 'La Spezia'), ('LT', 'Latina'), ('LE', 'Lecce'), ('LC', 'Lecco'), ('LM', 'Leitrim'), ('21', 'Liaoning'), ('LK', 'Limerick'), ('LI', 'Livorno'), ('LO', 'Lodi'), ('LD', 'Longford'), ('LA', 'Louisiana'), ('LH', 'Louth'), ('LU', 'Lucca'), ('92', 'Macao'), ('MC', 'Macerata'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('ME', 'Maine'), ('MN', 'Manipur'), ('MB', 'Manitoba'), ('MN', 'Mantua'), ('MA', 'Maranhão'), ('MD', 'Maryland'), ('MS', 'Massa and Carrara'), ('MA', 'Massachusetts'), ('MT', 'Matera'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MO', 'Mayo'), ('MH', 'Meath'), ('VS', 'Medio Campidano'), ('ML', 'Meghalaya'), ('ME', 'Messina'), ('ME', 'Mexico State'), ('MI', 'Michigan'), ('MI', 'Michoacán'), ('MI', 'Milan'), ('MG', 'Minas Gerais'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MZ', 'Mizoram'), ('MO', 'Modena'), ('MN', 'Monaghan'), ('MT', 'Montana'), ('MB', 'Monza and Brianza'), ('MO', 'Morelos'), ('NL', 'Nagaland'), ('NA', 'Naples'), ('NA', 'Nayarit'), ('NE', 'Nebraska'), ('15', 'Nei Mongol'), ('NV', 'Nevada'), ('NB', 'New Brunswick'), ('NL', 'Newfoundland and Labrador'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NSW', 'New South Wales'), ('NY', 'New York'), ('64', 'Ningxia'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('NT', 'Northern Territory'), ('NT', 'Northwest Territories'), ('NO', 'Novara'), ('NS', 'Nova Scotia'), ('NL', 'Nuevo León'), ('NU', 'Nunavut'), ('NU', 'Nuoro'), ('OA', 'Oaxaca'), ('OR', 'Odisha'), ('OY', 'Offaly'), ('OG', 'Ogliastra'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OT', 'Olbia-Tempio'), ('ON', 'Ontario'), ('OR', 'Oregon'), ('OR', 'Oristano'), ('PD', 'Padua'), ('PA', 'Palermo'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PR', 'Parma'), ('PV', 'Pavia'), ('PA', 'Pennsylvania'), ('PE', 'Pernambuco'), ('PG', 'Perugia'), ('PU', 'Pesaro and Urbino'), ('PE', 'Pescara'), ('PC', 'Piacenza'), ('PI', 'Piauí'), ('PI', 'Pisa'), ('PT', 'Pistoia'), ('PN', 'Pordenone'), ('PZ', 'Potenza'), ('PO', 'Prato'), ('PE', 'Prince Edward Island'), ('PY', 'Puducherry'), ('PB', 'Puebla'), ('PB', 'Punjab'), ('63', 'Qinghai'), ('QC', 'Quebec'), ('QLD', 'Queensland'), ('QE', 'Querétaro'), ('QR', 'Quintana Roo'), ('RG', 'Ragusa'), ('RJ', 'Rajasthan'), ('RA', 'Ravenna'), ('RC', 'Reggio Calabria'), ('RE', 'Reggio Emilia'), ('RI', 'Rhode Island'), ('RI', 'Rieti'), ('RN', 'Rimini'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RM', 'Rome'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RN', 'Roscommon'), ('RO', 'Rovigo'), ('SA', 'Salerno'), ('SL', 'San Luis Potosí'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SK', 'Saskatchewan'), ('SS', 'Sassari'), ('SV', 'Savona'), ('SE', 'Sergipe'), ('61', 'Shaanxi'), ('37', 'Shandong'), ('31', 'Shanghai'), ('14', 'Shanxi'), ('51', 'Sichuan'), ('SI', 'Siena'), ('SK', 'Sikkim'), ('SI', 'Sinaloa'), ('SO', 'Sligo'), ('SO', 'Sondrio'), ('SO', 'Sonora'), ('SA', 'South Australia'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('SR', 'Syracuse'), ('TB', 'Tabasco'), ('TM', 'Tamaulipas'), ('TN', 'Tamil Nadu'), ('TA', 'Taranto'), ('TAS', 'Tasmania'), ('TN', 'Tennessee'), ('TE', 'Teramo'), ('TR', 'Terni'), ('TX', 'Texas'), ('12', 'Tianjin'), ('TA', 'Tipperary'), ('TL', 'Tlaxcala'), ('TO', 'Tocantins'), ('TP', 'Trapani'), ('TN', 'Trento'), ('TV', 'Treviso'), ('TS', 'Trieste'), ('TR', 'Tripura'), ('TO', 'Turin'), ('UD', 'Udine'), ('UT', 'Utah'), ('UT', 'Uttarakhand'), ('UP', 'Uttar Pradesh'), ('VA', 'Varese'), ('VE', 'Venice'), ('VE', 'Veracruz'), ('VB', 'Verbano-Cusio-Ossola'), ('VC', 'Vercelli'), ('VT', 'Vermont'), ('VR', 'Verona'), ('VV', 'Vibo Valentia'), ('VI', 'Vicenza'), ('VIC', 'Victoria'), ('VA', 'Virginia'), ('VT', 'Viterbo'), ('WA', 'Washington'), ('WD', 'Waterford'), ('WB', 'West Bengal'), ('WA', 'Western Australia'), ('WH', 'Westmeath'), ('WV', 'West Virginia'), ('WX', 'Wexford'), ('WW', 'Wicklow'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('65', 'Xinjiang'), ('54', 'Xizang'), ('YU', 'Yucatán'), ('YT', 'Yukon Territories'), ('53', 'Yunnan'), ('ZA', 'Zacatecas'), ('33', 'Zhejiang')], blank=True, null=True)
    mailing_country_code = models.CharField(max_length=10, default=models.DEFAULTED_ON_CREATE, choices=[('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('TW', 'Chinese Taipei'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, the Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, the former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], blank=True, null=True)
    mailing_latitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_longitude = models.DecimalField(max_digits=18, decimal_places=15, blank=True, null=True)
    mailing_geocode_accuracy = models.CharField(max_length=40, choices=[('Address', 'Address'), ('NearAddress', 'NearAddress'), ('Block', 'Block'), ('Street', 'Street'), ('ExtendedZip', 'ExtendedZip'), ('Zip', 'Zip'), ('Neighborhood', 'Neighborhood'), ('City', 'City'), ('County', 'County'), ('State', 'State'), ('Unknown', 'Unknown')], blank=True, null=True)
    mailing_address = models.TextField(sf_read_only=models.READ_ONLY, blank=True, null=True)  # This field type is a guess.
    phone = models.CharField(max_length=40, verbose_name='Business Phone', blank=True, null=True)
    fax = models.CharField(max_length=40, verbose_name='Business Fax', blank=True, null=True)
    mobile_phone = models.CharField(max_length=40, blank=True, null=True)
    home_phone = models.CharField(max_length=40, blank=True, null=True)
    other_phone = models.CharField(max_length=40, blank=True, null=True)
    reports_to = models.ForeignKey('self', models.DO_NOTHING, related_name='contact_reportsto_set', blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    title = models.CharField(max_length=128, blank=True, null=True)
    department = models.CharField(max_length=80, blank=True, null=True)
    birthdate = models.DateField(blank=True, null=True)
    owner = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_owner_set')
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='contact_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_curequest_date = models.DateTimeField(db_column='LastCURequestDate', verbose_name='Last Stay-in-Touch Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_cuupdate_date = models.DateTimeField(db_column='LastCUUpdateDate', verbose_name='Last Stay-in-Touch Save Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    email_bounced_reason = models.CharField(max_length=255, blank=True, null=True)
    email_bounced_date = models.DateTimeField(blank=True, null=True)
    is_email_bounced = models.BooleanField(sf_read_only=models.READ_ONLY, default=False)
    photo_url = models.URLField(verbose_name='Photo URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw_contact_id = models.CharField(max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True, null=True)
    individual = models.ForeignKey('Individual', models.DO_NOTHING, blank=True, null=True)
    npe01_alternate_email = models.EmailField(db_column='npe01__AlternateEmail__c', custom=True, verbose_name='Alternate Email', help_text='Alternate Email is an optional fourth email: Not personal, preferred, or work email.', blank=True, null=True) 
    npe01_home_email = models.EmailField(db_column='npe01__HomeEmail__c', custom=True, verbose_name='Personal Email', help_text='See Preferred Email field.', blank=True, null=True) 
    npe01_home_address = models.CharField(db_column='npe01__Home_Address__c', custom=True, max_length=1300, verbose_name='Home Address', sf_read_only=models.READ_ONLY, help_text='Formula: Uses primary address type field to determine Home Address from Mailing or Other address.', blank=True, null=True) 
    npe01_organization_type = models.CharField(db_column='npe01__Organization_Type__c', custom=True, max_length=1300, verbose_name='Organization Type', sf_read_only=models.READ_ONLY, help_text='Formula: In order of preference, the SYSTEM_AccountType field, the Account Type field, and "Organization".', blank=True, null=True) 
    npe01_other_address = models.CharField(db_column='npe01__Other_Address__c', custom=True, max_length=1300, verbose_name='Other Address', sf_read_only=models.READ_ONLY, help_text='Formula: If the Primary Address Type is Other, the Mailing Address.  If the Secondary Address Type is Other, the Other Address.', blank=True, null=True) 
    npe01_preferred_phone = models.CharField(db_column='npe01__PreferredPhone__c', custom=True, max_length=255, verbose_name='Preferred Phone', default=models.DEFAULTED_ON_CREATE, help_text='Which phone number should be used for most communications involving this Contact?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True, null=True) 
    npe01_preferred_email = models.CharField(db_column='npe01__Preferred_Email__c', custom=True, max_length=255, verbose_name='Preferred Email', default=models.DEFAULTED_ON_CREATE, help_text='Which email should be used for most communications involving this Contact?', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True, null=True) 
    npe01_primary_address_type = models.CharField(db_column='npe01__Primary_Address_Type__c', custom=True, max_length=255, verbose_name='Primary Address Type', help_text='Which type of address is the mailing address?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Other', 'Other')], blank=True, null=True) 
    npe01_private = models.BooleanField(db_column='npe01__Private__c', custom=True, verbose_name='Private', default=models.DEFAULTED_ON_CREATE, help_text='Excludes this Contact from One to One or Bucket account processing.') 
    npe01_secondary_address_type = models.CharField(db_column='npe01__Secondary_Address_Type__c', custom=True, max_length=255, verbose_name='Secondary Address Type', help_text='What type of address is the other address?', choices=[('Home', 'Home'), ('Work', 'Work'), ('Other', 'Other')], blank=True, null=True) 
    npe01_system_account_processor = models.CharField(db_column='npe01__SystemAccountProcessor__c', custom=True, max_length=255, verbose_name='DEPRECATED - _SYSTEM: ACCOUNT PROCESSOR', default=models.DEFAULTED_ON_CREATE, help_text='NO LONGER USED - Indicates which model drives Account relationship behavior: Individual (Bucket) or One-to-One', choices=[('One-to-One', 'One-to-One'), ('Individual', 'Individual')], blank=True, null=True) 
    npe01_type_of_account = models.CharField(db_column='npe01__Type_of_Account__c', custom=True, max_length=1300, verbose_name='Type of Account', sf_read_only=models.READ_ONLY, help_text='Formula: "Individual" or "Organization" depending on Account setting.', blank=True, null=True) 
    npe01_work_email = models.EmailField(db_column='npe01__WorkEmail__c', custom=True, verbose_name='Work Email', help_text='See Preferred Email field.', blank=True, null=True) 
    npe01_work_phone = models.CharField(db_column='npe01__WorkPhone__c', custom=True, max_length=40, verbose_name='Work Phone', help_text="See 'Preferred Phone' field.", blank=True, null=True) 
    npe01_work_address = models.CharField(db_column='npe01__Work_Address__c', custom=True, max_length=1300, verbose_name='Work Address', sf_read_only=models.READ_ONLY, help_text='Formula: If the Primary Address Type is Work, the Mailing Address.  If the Secondary Address Type is Work, the Other Address.', blank=True, null=True) 
    npo02_average_amount = models.DecimalField(db_column='npo02__AverageAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Average Gift', help_text='The average amount of all won Opportunities related to this Contact by a primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_best_gift_year_total = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', help_text='The sum of won Opportunity amounts in the Best Gift Year.', blank=True, null=True) 
    npo02_best_gift_year = models.CharField(db_column='npo02__Best_Gift_Year__c', custom=True, max_length=4, verbose_name='Best Gift Year', help_text='The year of the largest total amount of won Opportunities related to this Contact by primary Contact Role.  See also Best Gift Year Total.', blank=True, null=True) 
    npo02_first_close_date = models.DateField(db_column='npo02__FirstCloseDate__c', custom=True, verbose_name='First Gift Date', help_text='The oldest Close Date of a won Opportunity with amount greater than zero related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_formula_household_mailing_address = models.CharField(db_column='npo02__Formula_HouseholdMailingAddress__c', custom=True, max_length=1300, verbose_name='Household Mailing Address', sf_read_only=models.READ_ONLY, help_text='Formula: Clone of the Household Mailing address (also a Formula)', blank=True, null=True) 
    npo02_formula_household_phone = models.CharField(db_column='npo02__Formula_HouseholdPhone__c', custom=True, max_length=1300, verbose_name='Household Phone', sf_read_only=models.READ_ONLY, help_text='Formula: Simple formula of Household Phone field.', blank=True, null=True) 
    npo02_household_naming_order = models.DecimalField(db_column='npo02__Household_Naming_Order__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Household Naming Order', help_text='Determines the order in which Contact names are used to generate Household name.', blank=True, null=True) 
    npo02_household = models.ForeignKey('Npo02Household', models.DO_NOTHING, db_column='npo02__Household__c', custom=True, blank=True, null=True) 
    npo02_largest_amount = models.DecimalField(db_column='npo02__LargestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Largest Gift', help_text='The largest amount of a won Opportunity related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_close_date_hh = models.DateField(db_column='npo02__LastCloseDateHH__c', custom=True, verbose_name='Last Household Gift Date', sf_read_only=models.READ_ONLY, blank=True, null=True) 
    npo02_last_close_date = models.DateField(db_column='npo02__LastCloseDate__c', custom=True, verbose_name='Last Gift Date', help_text='The close date of the most recent won Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_amount = models.DecimalField(db_column='npo02__LastMembershipAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', help_text='The amount of the most recent (by Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_last_membership_date = models.DateField(db_column='npo02__LastMembershipDate__c', custom=True, verbose_name='Last Membership Date', help_text='The most recent Close Date of a won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_level = models.CharField(db_column='npo02__LastMembershipLevel__c', custom=True, max_length=255, verbose_name='Last Membership Level', help_text='The level of the most recent (by Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_membership_origin = models.CharField(db_column='npo02__LastMembershipOrigin__c', custom=True, max_length=255, verbose_name='Last Membership Origin', help_text='The origin (new, renewal, reacquire...) of the most recent (Close Date) won Membership (Record Type) Opportunity related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_last_opp_amount = models.DecimalField(db_column='npo02__LastOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', help_text='The amount of the most recent won Opportunity by Close Date related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_membership_end_date = models.DateField(db_column='npo02__MembershipEndDate__c', custom=True, verbose_name='Membership End Date', help_text='The Membership End Date of the most recent (Close Date) Membership Opportunity (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_membership_join_date = models.DateField(db_column='npo02__MembershipJoinDate__c', custom=True, verbose_name='Membership Join Date', help_text='The Join Date of the oldest (Close Date) Membership Opportunity (Record Type) related to this Contact by primary Opportunity Contact Role.', blank=True, null=True) 
    npo02_naming_exclusions = models.CharField(db_column='npo02__Naming_Exclusions__c', custom=True, max_length=4099, verbose_name='Naming Exclusions', help_text="Select to exclude this Contact's name from various generated Household names.", choices=[('Household__c.Name', 'Household__c.Name'), ('Household__c.Formal_Greeting__c', 'Household__c.Formal_Greeting__c'), ('Household__c.Informal_Greeting__c', 'Household__c.Informal_Greeting__c')], blank=True, null=True) 
    npo02_number_of_closed_opps = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_number_of_membership_opps = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Memberships', help_text='The number of won Membership Opportunities (Record Type) related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount2_years_ago = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed two years ago.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_ndays = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_last_year_hh = models.DecimalField(db_column='npo02__OppAmountLastYearHH__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts Last Year', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts Last Year on related Household.', blank=True, null=True) 
    npo02_opp_amount_last_year = models.DecimalField(db_column='npo02__OppAmountLastYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opp_amount_this_year_hh = models.DecimalField(db_column='npo02__OppAmountThisYearHH__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts This Year', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts This Year on related Household.', blank=True, null=True) 
    npo02_opp_amount_this_year = models.DecimalField(db_column='npo02__OppAmountThisYear__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', help_text='The total amount of won Opportunities related to this Contact by primary Opportunity Contact Role, closed this year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed2_years_ago = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed two years ago.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_ndays = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed in the last number of days defined in Household Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_last_year = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed last year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_opps_closed_this_year = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', help_text='The total number of won Opportunities with amount greater than zero related to this Contact by primary Opportunity Contact Role, closed this year.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_smallest_amount = models.DecimalField(db_column='npo02__SmallestAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Smallest Gift', help_text='The smallest amount of a won Opportunity related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_soft_credit_last_year = models.DecimalField(db_column='npo02__Soft_Credit_Last_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Last Year', help_text='The sum of soft credit Opportunity amounts last year determined by Opportunity Contact Role and filtered by Roles in Household Settings.', blank=True, null=True) 
    npo02_soft_credit_this_year = models.DecimalField(db_column='npo02__Soft_Credit_This_Year__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit This Year', help_text='Total soft credit amount this year', blank=True, null=True) 
    npo02_soft_credit_total = models.DecimalField(db_column='npo02__Soft_Credit_Total__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Total', help_text="Total amount in soft credits for this Contact's lifetime. Defined in the Household Settings tab.", blank=True, null=True) 
    npo02_soft_credit_two_years_ago = models.DecimalField(db_column='npo02__Soft_Credit_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Soft Credit Two Years Ago', help_text='The sum of soft credit Opportunity amounts two years ago determined by Opportunity Contact Role and filtered by Roles in Household Settings.', blank=True, null=True) 
    npo02_system_household_processor = models.CharField(db_column='npo02__SystemHouseholdProcessor__c', custom=True, max_length=255, verbose_name='_SYSTEM: HOUSEHOLD PROCESSOR-DEPRECATED', choices=[('All Individual Contacts', 'All Individual Contacts'), ('All New or Edited Contacts', 'All New or Edited Contacts'), ('No Contacts', 'No Contacts')], blank=True, null=True) 
    npo02_total_membership_opp_amount = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', help_text='The total amount of won Membership Opportunities (Record Type) related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_opp_amount = models.DecimalField(db_column='npo02__TotalOppAmount__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Total Gifts', help_text='The sum of won Opportunity Amounts related to this Contact by primary Opportunity Contact Role.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npo02_total_household_gifts = models.DecimalField(db_column='npo02__Total_Household_Gifts__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Total Household Gifts', sf_read_only=models.READ_ONLY, help_text='Formula:  Total Gifts on related Household.', blank=True, null=True) 
    npsp_address_verification_status = models.CharField(db_column='npsp__Address_Verification_Status__c', custom=True, max_length=1300, verbose_name='Address Verification Status', sf_read_only=models.READ_ONLY, help_text='If this address requires verification, click the Verify Address button at the top of the Address page. Consult the Help documentation in the Power of Us Hub for more information.', blank=True, null=True) 
    npsp_batch = models.ForeignKey('NpspBatch', models.DO_NOTHING, db_column='npsp__Batch__c', custom=True, blank=True, null=True) 
    npsp_current_address = models.ForeignKey('NpspAddress', models.DO_NOTHING, db_column='npsp__Current_Address__c', custom=True, blank=True, null=True) 
    npsp_deceased = models.BooleanField(db_column='npsp__Deceased__c', custom=True, verbose_name='Deceased', default=models.DEFAULTED_ON_CREATE, help_text='When selected, this option marks the contact as deceased, and excludes them from household naming, emails, and phone calls.') 
    npsp_do_not_contact = models.BooleanField(db_column='npsp__Do_Not_Contact__c', custom=True, verbose_name='Do Not Contact', default=models.DEFAULTED_ON_CREATE, help_text='When selected, this option excludes the contact from emails and phone calls.') 
    npsp_exclude_from_household_formal_greeting = models.BooleanField(db_column='npsp__Exclude_from_Household_Formal_Greeting__c', custom=True, verbose_name='Exclude from Household Formal Greeting', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will exclude this contact from the Household Formal Greeting.') 
    npsp_exclude_from_household_informal_greeting = models.BooleanField(db_column='npsp__Exclude_from_Household_Informal_Greeting__c', custom=True, verbose_name='Exclude from Household Informal Greeting', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will exclude this contact from the Household Informal Greeting.') 
    npsp_exclude_from_household_name = models.BooleanField(db_column='npsp__Exclude_from_Household_Name__c', custom=True, verbose_name='Exclude from Household Name', default=models.DEFAULTED_ON_CREATE, help_text='Checking this box will exclude this contact from the Household Name.') 
    npsp_first_soft_credit_amount = models.DecimalField(db_column='npsp__First_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='First Soft Credit Amount', help_text='The amount of the earliest soft credit.', blank=True, null=True) 
    npsp_first_soft_credit_date = models.DateField(db_column='npsp__First_Soft_Credit_Date__c', custom=True, verbose_name='First Soft Credit Date', help_text='The date of the earliest soft credit.', blank=True, null=True) 
    npsp_hhid = models.CharField(db_column='npsp__HHId__c', custom=True, max_length=1300, verbose_name='HHId', sf_read_only=models.READ_ONLY, help_text='holds the ID of the current household, whether it is a Household Account, or a Household Object.', blank=True, null=True) 
    npsp_largest_soft_credit_amount = models.DecimalField(db_column='npsp__Largest_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Largest Soft Credit Amount', help_text='The amount of the largest soft credit.', blank=True, null=True) 
    npsp_largest_soft_credit_date = models.DateField(db_column='npsp__Largest_Soft_Credit_Date__c', custom=True, verbose_name='Largest Soft Credit Date', help_text='The date of the largest soft credit.', blank=True, null=True) 
    npsp_last_soft_credit_amount = models.DecimalField(db_column='npsp__Last_Soft_Credit_Amount__c', custom=True, max_digits=18, decimal_places=2, verbose_name='Last Soft Credit Amount', help_text='The amount of the most recent soft credit.', blank=True, null=True) 
    npsp_last_soft_credit_date = models.DateField(db_column='npsp__Last_Soft_Credit_Date__c', custom=True, verbose_name='Last Soft Credit Date', help_text='The date of the most recent soft credit.', blank=True, null=True) 
    npsp_number_of_soft_credits_last_n_days = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Last_N_Days__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Last N Days', help_text='Total amount for all soft credits that closed in the last N days. The value of N is defined in the NPSP Settings tab.', blank=True, null=True) 
    npsp_number_of_soft_credits_last_year = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Last_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Last Year', help_text='The number of soft credits last year.', blank=True, null=True) 
    npsp_number_of_soft_credits_this_year = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_This_Year__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits This Year', help_text='The number of soft credits this year.', blank=True, null=True) 
    npsp_number_of_soft_credits_two_years_ago = models.DecimalField(db_column='npsp__Number_of_Soft_Credits_Two_Years_Ago__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits Two Years Ago', help_text='The number of soft credits 2 years ago.', blank=True, null=True) 
    npsp_number_of_soft_credits = models.DecimalField(db_column='npsp__Number_of_Soft_Credits__c', custom=True, max_digits=18, decimal_places=0, verbose_name='Number of Soft Credits', help_text='The number of soft credits.', blank=True, null=True) 
    npsp_primary_affiliation = models.ForeignKey(Account, models.DO_NOTHING, db_column='npsp__Primary_Affiliation__c', custom=True, related_name='contact_npspprimaryaffiliation_set', blank=True, null=True) 
    npsp_primary_contact = models.BooleanField(db_column='npsp__Primary_Contact__c', custom=True, verbose_name='Primary Contact', sf_read_only=models.READ_ONLY, help_text='This is is checked if the user is the Primary Contact on their Account.  The Primary Contact can be edited on the Account.') 
    npsp_soft_credit_last_n_days = models.DecimalField(db_column='npsp__Soft_Credit_Last_N_Days__c', custom=True, max_digits=16, decimal_places=2, verbose_name='Soft Credit Last N Days', help_text='The total amount of Soft Credit, closed in the last number of days defined in NPSP Settings.', default=models.DEFAULTED_ON_CREATE, blank=True, null=True) 
    npsp_is_address_override = models.BooleanField(db_column='npsp__is_Address_Override__c', custom=True, verbose_name='Address Override', default=models.DEFAULTED_ON_CREATE, help_text="If checked, the Contact's Current Address lookup overrides the Household's default Address or seasonal Address.") 
    how_did_you_hear_about_us = models.CharField(custom=True, db_column='How_did_you_hear_about_us__c', max_length=255, verbose_name='How did you hear about us?', choices=[('Mission Bit Website', 'Mission Bit Website'), ('Family / Friend', 'Family / Friend'), ('School / Teacher', 'School / Teacher'), ('Flyer', 'Flyer'), ('Event / Convention', 'Event / Convention'), ('Other', 'Other')], blank=True, null=True)
    parent_guardian_first_name = models.CharField(custom=True, db_column='Parent_Guardian_first_name__c', max_length=100, verbose_name='Parent/Guardian first name', blank=True, null=True)
    parent_guardian_last_name = models.CharField(custom=True, db_column='Parent_Guardian_last_name__c', max_length=100, verbose_name='Parent/Guardian last name', blank=True, null=True)
    parent_guardian_phone = models.CharField(custom=True, db_column='Parent_Guardian_phone__c', max_length=40, verbose_name='Parent/Guardian phone', blank=True, null=True)
    parent_guardian_email = models.EmailField(custom=True, db_column='Parent_Guardian_email__c', verbose_name='Parent/Guardian email', blank=True, null=True)
    dm_current_grade = models.CharField(custom=True, db_column='DM_Current_grade__c', max_length=255, verbose_name='DM - Current grade', help_text='Need this for data migration to calculate Expected Graduation Year?  If not, delete this field.', choices=[('Graduating 8th', 'Graduating 8th'), ('Freshman, 9th', 'Freshman, 9th'), ('Sophomore, 10th', 'Sophomore, 10th'), ('Junior, 11th', 'Junior, 11th'), ('Senior, 12th', 'Senior, 12th')], blank=True, null=True)
    race = models.CharField(custom=True, max_length=255, verbose_name='Which best describes your race?', choices=[('American Indian/Alaskan Native', 'American Indian/Alaskan Native'), ('Asian', 'Asian'), ('Black/African American', 'Black/African American'), ('Native Hawaiian/Other Pacific Islander', 'Native Hawaiian/Other Pacific Islander'), ('White', 'White'), ('American Indian/Alaskan Native AND Black/African American', 'American Indian/Alaskan Native AND Black/African American'), ('American Indian/Alaskan Native AND White', 'American Indian/Alaskan Native AND White'), ('Asian AND White', 'Asian AND White'), ('Black/African American AND White', 'Black/African American AND White'), ('Other/Multiracial', 'Other/Multiracial')], blank=True, null=True)
    gender = models.CharField(custom=True, max_length=255, choices=[('Female', 'Female'), ('Male', 'Male'), ('Genderqueer/Gender Non-binary', 'Genderqueer/Gender Non-binary'), ('Trans Female', 'Trans Female'), ('Trans Male', 'Trans Male'), ('Other', 'Not Listed')], blank=True, null=True)
    use_a_computer_at_home = models.CharField(custom=True, db_column='Use_a_computer_at_home__c', max_length=255, verbose_name='Use a computer at home?', choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    have_reliable_internet_access_at_home = models.CharField(custom=True, db_column='Have_reliable_internet_access_at_home__c', max_length=255, verbose_name='Have reliable internet access at home?', choices=[('Yes', 'Yes'), ('No', 'No')], blank=True, null=True)
    coding_classes_taken_before = models.TextField(custom=True, db_column='Coding_classes_taken_before__c', verbose_name='Coding classes taken before', blank=True, null=True)
    why_select_this_particular_class = models.CharField(custom=True, db_column='Why_select_this_particular_class__c', max_length=255, verbose_name='Why select this particular class?', choices=[('The day + time of the class works with my schedule.', 'The day + time of the class works with my schedule.'), ('The location of the class is convenient for me.', 'The location of the class is convenient for me.'), ('It sounds cool!', 'It sounds cool!'), ('Other', 'Other')], blank=True, null=True)
    of_class_enrollments_completed = models.DecimalField(custom=True, db_column='of_Class_Enrollments_Completed__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments - Completed', sf_read_only=models.READ_ONLY, help_text='The number of Class Enrollemnts that the student has completed.  If more than 0, then the Student is considered an Alumni', blank=True, null=True)
    alumni = models.BooleanField(custom=True, verbose_name='Alumni?', sf_read_only=models.READ_ONLY)
    student_status = models.CharField(custom=True, db_column='Student_Status__c', max_length=1300, verbose_name='Student Status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_class_enrollments_any_status = models.DecimalField(custom=True, db_column='of_Class_Enrollments_Any_status__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments - Any status', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_class_enrollments_app_this_semester = models.DecimalField(custom=True, db_column='of_Class_Enrollments_App_this_semester__c', max_digits=18, decimal_places=0, verbose_name='# of Class Enrollments-App this semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    of_enrollments_waitlist_this_semester = models.DecimalField(custom=True, db_column='of_enrollments_Waitlist_this_semester__c', max_digits=18, decimal_places=0, verbose_name='# of enrollments-Waitlist this semester', sf_read_only=models.READ_ONLY, blank=True, null=True)
    date_orientation_session = models.DateField(custom=True, db_column='Date_Orientation_session__c', verbose_name='Date - Orientation session', blank=True, null=True)
    date_orientation_completed = models.BooleanField(custom=True, db_column='Date_Orientation_completed__c', verbose_name='Date – Orientation completed', default=models.DEFAULTED_ON_CREATE)
    areas_of_expertise = models.CharField(custom=True, db_column='Areas_of_Expertise__c', max_length=4099, verbose_name='Areas of Expertise', choices=[('HTML / CSS', 'HTML / CSS'), ('Python', 'Python'), ('Java / Android', 'Java / Android'), ('Objective-C / Swift / iOS', 'Objective-C / Swift / iOS'), ('Java Script', 'Java Script'), ('Ruby / Ruby on Rails', 'Ruby / Ruby on Rails'), ('Unity', 'Unity'), ('C / C++', 'C / C++'), ('C# / .Net', 'C# / .Net'), ('Other', 'Other')], blank=True, null=True)
    areas_of_expertise_other = models.TextField(custom=True, db_column='Areas_of_Expertise_Other__c', verbose_name='Areas of Expertise (Other)', blank=True, null=True)
    date_tb_test_result = models.DateField(custom=True, db_column='Date_TB_Test_result__c', verbose_name='Date – TB Test result', blank=True, null=True)
    date_background_check_approved = models.DateField(custom=True, db_column='Date_Background_check_approved__c', verbose_name='Date – Background check approved', blank=True, null=True)
    expected_graduation_year = models.CharField(custom=True, db_column='Expected_graduation_year__c', max_length=4, verbose_name='Expected graduation year', help_text='Enter the year this contact is expected to graduate.  For example, 2020', blank=True, null=True)
    current_grade_level = models.CharField(custom=True, db_column='Current_grade_level__c', max_length=1300, verbose_name='Current grade level', sf_read_only=models.READ_ONLY, blank=True, null=True)
    volunteer_area_s_of_interest = models.CharField(custom=True, db_column='Volunteer_area_s_of_interest__c', max_length=4099, verbose_name='Volunteer area(s) of interest', choices=[('Classroom', 'Classroom'), ('Event', 'Event'), ('Other', 'Other')], blank=True, null=True)
    enrollments_this_semester_applied = models.DecimalField(custom=True, db_column='enrollments_this_semester_Applied__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Applied', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_waitlisted = models.DecimalField(custom=True, db_column='enrollments_this_semester_Waitlisted__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Waitlisted', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_rejected = models.DecimalField(custom=True, db_column='enrollments_this_semester_Rejected__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Rejected', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    enrollments_this_semester_drop_out = models.DecimalField(custom=True, db_column='enrollments_this_semester_Drop_out__c', max_digits=2, decimal_places=0, verbose_name='# enrollments this semester - Drop out', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    race_other = models.CharField(custom=True, db_column='Race_Other__c', max_length=100, verbose_name='Which best describes your race? (Other)', blank=True, null=True)
    gender_other = models.CharField(custom=True, db_column='Gender_Other__c', max_length=50, verbose_name='Gender (Other)', blank=True, null=True)
    why_select_this_particular_class_other = models.CharField(custom=True, db_column='Why_select_this_particular_class_Other__c', max_length=255, verbose_name='Why select this particular class (Other)', blank=True, null=True)
    how_did_you_hear_about_us_other = models.CharField(custom=True, db_column='How_did_you_hear_about_us_other__c', max_length=255, verbose_name='How did you hear about us (Other)', blank=True, null=True)
    age = models.DecimalField(custom=True, max_digits=18, decimal_places=0, sf_read_only=models.READ_ONLY, help_text='Formula field calculated based on birthdate.', blank=True, null=True)
    which_best_describes_your_ethnicity = models.CharField(custom=True, db_column='Which_best_describes_your_ethnicity__c', max_length=255, verbose_name='Which best describes your ethnicity?', choices=[('Hispanic/Latinx', 'Hispanic/Latinx'), ('Not Hispanic/Latinx', 'Not Hispanic/Latinx')], blank=True, null=True)
    client_id = models.CharField(custom=True, db_column='Client_ID__c', max_length=14, verbose_name='Client ID', help_text='3 first letters of first name, 3 first letters of last name, and birthdate "AAABBB00000000" (Only used for students and parents). This field is auto-populated by FormAssembly.', blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Contact'
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'
        # keyPrefix = '003'