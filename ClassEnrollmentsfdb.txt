class ClassEnrollment(models.Model):
    is_deleted = models.BooleanField(verbose_name='Deleted', sf_read_only=models.READ_ONLY, default=False)
    name = models.CharField(max_length=80, verbose_name='Class Enrollment #', sf_read_only=models.READ_ONLY)
    created_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    created_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classenrollment_createdby_set', sf_read_only=models.READ_ONLY)
    last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_modified_by = models.ForeignKey('User', models.DO_NOTHING, related_name='classenrollment_lastmodifiedby_set', sf_read_only=models.READ_ONLY)
    system_modstamp = models.DateTimeField(sf_read_only=models.READ_ONLY)
    last_activity_date = models.DateField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_viewed_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    last_referenced_date = models.DateTimeField(sf_read_only=models.READ_ONLY, blank=True, null=True)
    contact = models.ForeignKey('Contact', models.DO_NOTHING, custom=True, related_name='classenrollment_contact_set')  # Master Detail Relationship 0
    role = models.CharField(custom=True, max_length=255, choices=[('Student', 'Student'), ('TA', 'TA'), ('Volunteer', 'Volunteer')], blank=True, null=True)
    class_offering = models.ForeignKey('ClassOffering', models.DO_NOTHING, db_column='Class_Offering__c', custom=True)  # Master Detail Relationship 1
    status = models.CharField(custom=True, max_length=255, choices=[('Applied', 'Applied'), ('Waitlisted', 'Waitlisted'), ('Enrolled', 'Enrolled'), ('Completed-Course', 'Completed-Course'), ('Withdrew-Application', 'Withdrew-Application'), ('Rejected', 'Rejected'), ('Dropped', 'Dropped')], blank=True, null=True)
    in_current_semester = models.BooleanField(custom=True, db_column='In_current_semester__c', verbose_name='In current semester?', sf_read_only=models.READ_ONLY)
    attended_family_orientation = models.BooleanField(custom=True, db_column='Attended_Family_Orientation__c', verbose_name='Attended Family Orientation', default=models.DEFAULTED_ON_CREATE)
    withdrew_application_detail = models.CharField(custom=True, db_column='Withdrew_Application_Detail__c', max_length=255, verbose_name='Withdrew-Application Detail', help_text='"Dropped in first 2 weeks" means that they showed up for class but decided to drop within the first 2 weeks.', choices=[("Didn't show up for interview", "Didn't show up for interview"), ('Acceptance-offer-rejected', 'Acceptance-offer-rejected'), ('Didn’t show up for class', 'Didn’t show up for class'), ('Dropped in first 2 weeks', 'Dropped in first 2 weeks'), ('Withdrew before interview', 'Withdrew before interview'), ('Class Cancelled', 'Class Cancelled')], blank=True, null=True)
    contact_race = models.CharField(custom=True, db_column='Contact_Race__c', max_length=100, verbose_name='Contact - Race', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    contact_gender = models.CharField(custom=True, db_column='Contact_Gender__c', max_length=30, verbose_name='Contact - Gender', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    parent_contact = models.ForeignKey('Contact', models.DO_NOTHING, db_column='Parent_Contact__c', custom=True, related_name='classenrollment_parentcontact_set', blank=True, null=True)
    attended_interview = models.BooleanField(custom=True, db_column='Attended_Interview__c', verbose_name='Attended Interview', default=models.DEFAULTED_ON_CREATE, help_text='Check if the student attended the default student admissions interview event. Note: Do not check this field if the student attended a makeup interview.')
    attended_makeup_interview = models.BooleanField(custom=True, db_column='Attended_Makeup_Interview__c', verbose_name='Attended Makeup Interview', default=models.DEFAULTED_ON_CREATE, help_text='Check if the student did not attend the default interview date, but attended a makeup session.')
    cultural_affiliation_or_nationality = models.CharField(custom=True, db_column='Cultural_Affiliation_or_Nationality__c', max_length=100, verbose_name='Cultural Affiliation or Nationality', help_text='(optional)', blank=True, null=True)
    sex_at_birth = models.CharField(custom=True, db_column='Sex_at_birth__c', max_length=255, verbose_name='What was your sex at birth?', help_text='(Check one)', choices=[('Female', 'Female'), ('Male', 'Male'), ('Decline to answer', 'Decline to answer')], blank=True, null=True)
    sexual_orientation = models.CharField(custom=True, db_column='Sexual_orientation__c', max_length=255, verbose_name='Sexual orientation or sexual identity', help_text='How do you describe your sexual orientation or sexual identity?', choices=[('Bisexual', 'Bisexual'), ('Gay / Lesbian / Same-Gender Loving', 'Gay / Lesbian / Same-Gender Loving'), ('Questioning / Unsure', 'Questioning / Unsure'), ('Straight / Heterosexual', 'Straight / Heterosexual'), ('Not Listed.', 'Not Listed.'), ('Decline to answer', 'Decline to answer')], blank=True, null=True)
    other_sexual_orientation = models.CharField(custom=True, db_column='Other_sexual_orientation__c', max_length=30, verbose_name='Other sexual orientation', blank=True, null=True)
    household_type = models.CharField(custom=True, db_column='Household_type__c', max_length=255, verbose_name='Which best describes your family?', help_text='Which best describes your family? (Check one)\r\nFamily includes, but is not limited to the following—regardless of actual or perceived sexual orientation, gender identity, or marital status—a single person or a group of persons residing together.', choices=[('Single Female Headed Family', 'Single Female Headed Family'), ('Single Male Headed Family', 'Single Male Headed Family'), ('Dual Headed Family', 'Dual Headed Family')], blank=True, null=True)
    income_certification = models.CharField(custom=True, db_column='Income_Certification__c', max_length=4099, verbose_name='Income Certification', help_text='**current-within 2 months', choices=[('CalWorks', 'CalWorks'), ('Food Stamps', 'Food Stamps'), ('Medi-CAL', 'Medi-CAL'), ('Tax Return (most recent)', 'Tax Return (most recent)'), ('Unemployment (check stub)', 'Unemployment (check stub)'), ('SSI**', 'SSI**'), ('Payroll Stub**', 'Payroll Stub**'), ('Other (i.e. public housing/foster care)**', 'Other (i.e. public housing/foster care)**'), ('Self-certified', 'Self-certified')], blank=True, null=True)
    estimated_income = models.DecimalField(custom=True, db_column='Estimated_income__c', max_digits=18, decimal_places=2, verbose_name='Estimated income', help_text='Total estimated income for next 12 months for all adult members.', blank=True, null=True)
    family_size = models.CharField(custom=True, db_column='Family_size__c', max_length=255, verbose_name='Family size', help_text='Number of persons living in your family (including yourself):', choices=[('1 person', '1 person'), ('2 persons', '2 persons'), ('3 persons', '3 persons'), ('4 persons', '4 persons'), ('5 persons', '5 persons'), ('6 persons', '6 persons'), ('7 persons', '7 persons'), ('8 persons', '8 persons'), ('9+ persons', '9+ persons')], blank=True, null=True)
    current_income_information = models.CharField(custom=True, db_column='Current_Income_Information__c', max_length=255, verbose_name='Current Income Information', choices=[('Extremely Low Income $0 - 27,650 (1 person)', 'Extremely Low Income $0 - 27,650 (1 person)'), ('Low Income $27,651 - 46,100 (1 person)', 'Low Income $27,651 - 46,100 (1 person)'), ('Moderate Income $46,101 - 73,750 (1 person)', 'Moderate Income $46,101 - 73,750 (1 person)'), ('Above Moderate Income $73,751 or greater (1 person)', 'Above Moderate Income $73,751 or greater (1 person)'), ('Extremely Low Income $0 - 31,600 (2 persons)', 'Extremely Low Income $0 - 31,600 (2 persons)'), ('Low Income $31,601 - 52,650 (2 persons)', 'Low Income $31,601 - 52,650 (2 persons)'), ('Moderate Income $52,651 - 84,300 (2 persons)', 'Moderate Income $52,651 - 84,300 (2 persons)'), ('Above Moderate Income $84,301 or greater (2 persons)', 'Above Moderate Income $84,301 or greater (2 persons)'), ('Extremely Low Income $0 - 35,550 (3 persons)', 'Extremely Low Income $0 - 35,550 (3 persons)'), ('Low Income $35,551 - 59,250 (3 persons)', 'Low Income $35,551 - 59,250 (3 persons)'), ('Moderate Income $59,251 - 94,850 (3 persons)', 'Moderate Income $59,251 - 94,850 (3 persons)'), ('Above Moderate Income $94,851 or greater (3 persons)', 'Above Moderate Income $94,851 or greater (3 persons)'), ('Extremely Low Income $0 - 39,500 (4 persons)', 'Extremely Low Income $0 - 39,500 (4 persons)'), ('Low Income $39,501 - 65,800 (4 persons)', 'Low Income $39,501 - 65,800 (4 persons)'), ('Moderate Income $65,801 - 105,350 (4 persons)', 'Moderate Income $65,801 - 105,350 (4 persons)'), ('Above Moderate Income $105,351 or greater (4 persons)', 'Above Moderate Income $105,351 or greater (4 persons)'), ('Extremely Low Income $0 - 42,700 (5 persons)', 'Extremely Low Income $0 - 42,700 (5 persons)'), ('Low Income $42,701 - 71,100 (5 persons)', 'Low Income $42,701 - 71,100 (5 persons)'), ('Moderate Income $71,101 - 113,800 (5 persons)', 'Moderate Income $71,101 - 113,800 (5 persons)'), ('Above Moderate Income $113,801 or greater (5 persons)', 'Above Moderate Income $113,801 or greater (5 persons)'), ('Extremely Low Income $0 - 45,850 (6 persons)', 'Extremely Low Income $0 - 45,850 (6 persons)'), ('Low Income $45,851 - 76,350 (6 persons)', 'Low Income $45,851 - 76,350 (6 persons)'), ('Moderate Income $76,351 - 122,250 (6 persons)', 'Moderate Income $76,351 - 122,250 (6 persons)'), ('Above Moderate Income $122,251 or greater (6 persons)', 'Above Moderate Income $122,251 or greater (6 persons)'), ('Extremely Low Income $0 - 49,000 (7 persons)', 'Extremely Low Income $0 - 49,000 (7 persons)'), ('Low Income $49,001 - 81,600 (7 persons)', 'Low Income $49,001 - 81,600 (7 persons)'), ('Moderate Income $81,601 - 130,650 (7 persons)', 'Moderate Income $81,601 - 130,650 (7 persons)'), ('Above Moderate Income $130,651 or greater (7 persons)', 'Above Moderate Income $130,651 or greater (7 persons)'), ('Extremely Low Income $0 - 52,150 (8 persons)', 'Extremely Low Income $0 - 52,150 (8 persons)'), ('Low Income $52,151 - 86,900 (8 persons)', 'Low Income $52,151 - 86,900 (8 persons)'), ('Moderate Income $86,901 - 139,100 (8 persons)', 'Moderate Income $86,901 - 139,100 (8 persons)'), ('Above Moderate Income $139,101 or greater (8 persons)', 'Above Moderate Income $139,101 or greater (8 persons)')], blank=True, null=True)
    if_self_certified_please_explain = models.TextField(custom=True, db_column='If_self_certified_please_explain__c', verbose_name='If self-certified, please explain:', blank=True, null=True)
    contact_ethnicity = models.CharField(custom=True, db_column='Contact_Ethnicity__c', max_length=100, verbose_name='Contact - Ethnicity', help_text='DO NOT EDIT - AUTO-POPULATED BY SYSTEM', blank=True, null=True)
    notes = models.TextField(custom=True, blank=True, null=True)
    interview_date = models.DateTimeField(custom=True, db_column='Interview_Date__c', verbose_name='Interview Date', help_text="This is the interview date and time that the student signed up for. Empty means that the student did not sign up for an interview. Having an interview date does not mean that the student showed up for the interview, only that they RSVP'ed.", blank=True, null=True)
    returner = models.BooleanField(custom=True, verbose_name='Returner?', sf_read_only=models.READ_ONLY)
    temp_returner = models.BooleanField(custom=True, db_column='Temp_Returner__c', verbose_name='Returner? (temp)', default=models.DEFAULTED_ON_CREATE, help_text='This is a temporary field that determines if a student is a returner based on their response to this question on the application. Once we complete migrating all of our past data into Salesforce, this field will be deleted.')
    origin_school = models.CharField(custom=True, db_column='Origin_School__c', max_length=1300, verbose_name='School attended by this student', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_phone = models.CharField(custom=True, db_column='Parent_Phone__c', max_length=1300, verbose_name='Parent Phone', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parent_email = models.CharField(custom=True, db_column='Parent_Email__c', max_length=1300, verbose_name='Parent Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.Model.Meta):
        db_table = 'Class_Enrollment__c'
        verbose_name = 'Class Enrollment'
        verbose_name_plural = 'Class Enrollments'
        # keyPrefix = 'a0i'